
NUCLEO_F401RE_SIMPLE_OSCILLOSCOPE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000967c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e9c  08009820  08009820  00019820  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a6bc  0800a6bc  00020208  2**0
                  CONTENTS
  4 .ARM          00000008  0800a6bc  0800a6bc  0001a6bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a6c4  0800a6c4  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a6c4  0800a6c4  0001a6c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a6c8  0800a6c8  0001a6c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  0800a6cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001742c  20000208  0800a8d4  00020208  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20017634  0800a8d4  00027634  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018f43  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fcf  00000000  00000000  0003917b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001228  00000000  00000000  0003c150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001110  00000000  00000000  0003d378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019f9c  00000000  00000000  0003e488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001536c  00000000  00000000  00058424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009dac5  00000000  00000000  0006d790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010b255  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e94  00000000  00000000  0010b2a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000208 	.word	0x20000208
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009804 	.word	0x08009804

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000020c 	.word	0x2000020c
 80001dc:	08009804 	.word	0x08009804

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96e 	b.w	8000f4c <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468c      	mov	ip, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8083 	bne.w	8000d9e <__udivmoddi4+0x116>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d947      	bls.n	8000d2e <__udivmoddi4+0xa6>
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	b142      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	f1c2 0020 	rsb	r0, r2, #32
 8000ca8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4097      	lsls	r7, r2
 8000cb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc0:	fa1f fe87 	uxth.w	lr, r7
 8000cc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cda:	f080 8119 	bcs.w	8000f10 <__udivmoddi4+0x288>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8116 	bls.w	8000f10 <__udivmoddi4+0x288>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8105 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8102 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d18:	eba4 040e 	sub.w	r4, r4, lr
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	b11d      	cbz	r5, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c5 4300 	strd	r4, r3, [r5]
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xaa>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d150      	bne.n	8000ddc <__udivmoddi4+0x154>
 8000d3a:	1bcb      	subs	r3, r1, r7
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	2601      	movs	r6, #1
 8000d46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb08 f30c 	mul.w	r3, r8, ip
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0xe2>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	f200 80e9 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1ac9      	subs	r1, r1, r3
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x10c>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x10a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80d9 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e7bf      	b.n	8000d1e <__udivmoddi4+0x96>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x12e>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <__udivmoddi4+0x282>
 8000da8:	2600      	movs	r6, #0
 8000daa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dae:	4630      	mov	r0, r6
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f683 	clz	r6, r3
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d14a      	bne.n	8000e54 <__udivmoddi4+0x1cc>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0x140>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80b8 	bhi.w	8000f38 <__udivmoddi4+0x2b0>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0103 	sbc.w	r1, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0a8      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000dd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f603 	lsr.w	r6, r0, r3
 8000de4:	4097      	lsls	r7, r2
 8000de6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df8:	fa1f f887 	uxth.w	r8, r7
 8000dfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb06 f108 	mul.w	r1, r6, r8
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x19c>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e16:	f080 808d 	bcs.w	8000f34 <__udivmoddi4+0x2ac>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 808a 	bls.w	8000f34 <__udivmoddi4+0x2ac>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b281      	uxth	r1, r0
 8000e28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb00 f308 	mul.w	r3, r0, r8
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x1c4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e42:	d273      	bcs.n	8000f2c <__udivmoddi4+0x2a4>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d971      	bls.n	8000f2c <__udivmoddi4+0x2a4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4439      	add	r1, r7
 8000e4c:	1acb      	subs	r3, r1, r3
 8000e4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e52:	e778      	b.n	8000d46 <__udivmoddi4+0xbe>
 8000e54:	f1c6 0c20 	rsb	ip, r6, #32
 8000e58:	fa03 f406 	lsl.w	r4, r3, r6
 8000e5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e60:	431c      	orrs	r4, r3
 8000e62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e66:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e72:	431f      	orrs	r7, r3
 8000e74:	0c3b      	lsrs	r3, r7, #16
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fa1f f884 	uxth.w	r8, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e86:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8a:	458a      	cmp	sl, r1
 8000e8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e90:	fa00 f306 	lsl.w	r3, r0, r6
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x220>
 8000e96:	1861      	adds	r1, r4, r1
 8000e98:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e9c:	d248      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	d946      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4421      	add	r1, r4
 8000ea8:	eba1 010a 	sub.w	r1, r1, sl
 8000eac:	b2bf      	uxth	r7, r7
 8000eae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eba:	fb00 f808 	mul.w	r8, r0, r8
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x24a>
 8000ec2:	19e7      	adds	r7, r4, r7
 8000ec4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec8:	d22e      	bcs.n	8000f28 <__udivmoddi4+0x2a0>
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d92c      	bls.n	8000f28 <__udivmoddi4+0x2a0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4427      	add	r7, r4
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	eba7 0708 	sub.w	r7, r7, r8
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	454f      	cmp	r7, r9
 8000ee0:	46c6      	mov	lr, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	d31a      	bcc.n	8000f1c <__udivmoddi4+0x294>
 8000ee6:	d017      	beq.n	8000f18 <__udivmoddi4+0x290>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x27a>
 8000eea:	ebb3 020e 	subs.w	r2, r3, lr
 8000eee:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef6:	40f2      	lsrs	r2, r6
 8000ef8:	ea4c 0202 	orr.w	r2, ip, r2
 8000efc:	40f7      	lsrs	r7, r6
 8000efe:	e9c5 2700 	strd	r2, r7, [r5]
 8000f02:	2600      	movs	r6, #0
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e70b      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6fd      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f18:	4543      	cmp	r3, r8
 8000f1a:	d2e5      	bcs.n	8000ee8 <__udivmoddi4+0x260>
 8000f1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f20:	eb69 0104 	sbc.w	r1, r9, r4
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7df      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e7d2      	b.n	8000ed2 <__udivmoddi4+0x24a>
 8000f2c:	4660      	mov	r0, ip
 8000f2e:	e78d      	b.n	8000e4c <__udivmoddi4+0x1c4>
 8000f30:	4681      	mov	r9, r0
 8000f32:	e7b9      	b.n	8000ea8 <__udivmoddi4+0x220>
 8000f34:	4666      	mov	r6, ip
 8000f36:	e775      	b.n	8000e24 <__udivmoddi4+0x19c>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e74a      	b.n	8000dd2 <__udivmoddi4+0x14a>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	4439      	add	r1, r7
 8000f42:	e713      	b.n	8000d6c <__udivmoddi4+0xe4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	443c      	add	r4, r7
 8000f48:	e724      	b.n	8000d94 <__udivmoddi4+0x10c>
 8000f4a:	bf00      	nop

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f58:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f5c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000f60:	f003 0301 	and.w	r3, r3, #1
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d013      	beq.n	8000f90 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000f68:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f6c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000f70:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d00b      	beq.n	8000f90 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000f78:	e000      	b.n	8000f7c <ITM_SendChar+0x2c>
    {
      __NOP();
 8000f7a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000f7c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d0f9      	beq.n	8000f7a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000f86:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	b2d2      	uxtb	r2, r2
 8000f8e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000f90:	687b      	ldr	r3, [r7, #4]
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
	...

08000fa0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fa4:	f001 f98e 	bl	80022c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fa8:	f000 f836 	bl	8001018 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fac:	f000 fab2 	bl	8001514 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000fb0:	f000 fa5e 	bl	8001470 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8000fb4:	f000 fa86 	bl	80014c4 <MX_DMA_Init>
  MX_SPI1_Init();
 8000fb8:	f000 f90e 	bl	80011d8 <MX_SPI1_Init>

  MX_ADC1_Init();
 8000fbc:	f000 f898 	bl	80010f0 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000fc0:	f000 f940 	bl	8001244 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000fc4:	f000 f998 	bl	80012f8 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000fc8:	f000 f9f0 	bl	80013ac <MX_TIM5_Init>
  //hadc1.Instance->CR1 &=  ~(ADC_CR1_AWDIE);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  LCD_Init();
 8000fcc:	f005 f90c 	bl	80061e8 <LCD_Init>

  HAL_ADC_Start_DMA(&hadc1, adc_dr_dma, ADC_BUF_SIZE);
 8000fd0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000fd4:	490b      	ldr	r1, [pc, #44]	; (8001004 <main+0x64>)
 8000fd6:	480c      	ldr	r0, [pc, #48]	; (8001008 <main+0x68>)
 8000fd8:	f001 fb8e 	bl	80026f8 <HAL_ADC_Start_DMA>

  // Output 10kHz PWM signal from PB10 (CN9/D6) pin as test signal  @PCLK2(84MHz)
  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_3);
 8000fdc:	2108      	movs	r1, #8
 8000fde:	480b      	ldr	r0, [pc, #44]	; (800100c <main+0x6c>)
 8000fe0:	f003 fe84 	bl	8004cec <HAL_TIM_OC_Start>

  // Start 200kHz timer for sampling  @PCLK2(84MHz)
  // ( Sampling rate (MAX) = PCLK2(84MHz) / 4div / 15cycle(12bit ADC conversion time) = 1.4MHz )
  HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_1);
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	480a      	ldr	r0, [pc, #40]	; (8001010 <main+0x70>)
 8000fe8:	f003 fe80 	bl	8004cec <HAL_TIM_OC_Start>

  while (1)
  {
    HAL_Delay(100);
 8000fec:	2064      	movs	r0, #100	; 0x64
 8000fee:	f001 f9db 	bl	80023a8 <HAL_Delay>
    showAdcData(hdma_adc1.Instance->NDTR, SHOW_SIZE);
 8000ff2:	4b08      	ldr	r3, [pc, #32]	; (8001014 <main+0x74>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f44f 718c 	mov.w	r1, #280	; 0x118
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f000 fd27 	bl	8001a50 <showAdcData>
    HAL_Delay(100);
 8001002:	e7f3      	b.n	8000fec <main+0x4c>
 8001004:	20000224 	.word	0x20000224
 8001008:	20000c24 	.word	0x20000c24
 800100c:	20000d24 	.word	0x20000d24
 8001010:	20000bdc 	.word	0x20000bdc
 8001014:	20000c6c 	.word	0x20000c6c

08001018 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b094      	sub	sp, #80	; 0x50
 800101c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800101e:	f107 0320 	add.w	r3, r7, #32
 8001022:	2230      	movs	r2, #48	; 0x30
 8001024:	2100      	movs	r1, #0
 8001026:	4618      	mov	r0, r3
 8001028:	f005 fcd8 	bl	80069dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800102c:	f107 030c 	add.w	r3, r7, #12
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
 800103a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800103c:	2300      	movs	r3, #0
 800103e:	60bb      	str	r3, [r7, #8]
 8001040:	4b29      	ldr	r3, [pc, #164]	; (80010e8 <SystemClock_Config+0xd0>)
 8001042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001044:	4a28      	ldr	r2, [pc, #160]	; (80010e8 <SystemClock_Config+0xd0>)
 8001046:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800104a:	6413      	str	r3, [r2, #64]	; 0x40
 800104c:	4b26      	ldr	r3, [pc, #152]	; (80010e8 <SystemClock_Config+0xd0>)
 800104e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001050:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001054:	60bb      	str	r3, [r7, #8]
 8001056:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001058:	2300      	movs	r3, #0
 800105a:	607b      	str	r3, [r7, #4]
 800105c:	4b23      	ldr	r3, [pc, #140]	; (80010ec <SystemClock_Config+0xd4>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001064:	4a21      	ldr	r2, [pc, #132]	; (80010ec <SystemClock_Config+0xd4>)
 8001066:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800106a:	6013      	str	r3, [r2, #0]
 800106c:	4b1f      	ldr	r3, [pc, #124]	; (80010ec <SystemClock_Config+0xd4>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001074:	607b      	str	r3, [r7, #4]
 8001076:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001078:	2302      	movs	r3, #2
 800107a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800107c:	2301      	movs	r3, #1
 800107e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001080:	2310      	movs	r3, #16
 8001082:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001084:	2302      	movs	r3, #2
 8001086:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001088:	2300      	movs	r3, #0
 800108a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800108c:	2310      	movs	r3, #16
 800108e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001090:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001094:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001096:	2304      	movs	r3, #4
 8001098:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800109a:	2307      	movs	r3, #7
 800109c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800109e:	f107 0320 	add.w	r3, r7, #32
 80010a2:	4618      	mov	r0, r3
 80010a4:	f002 fd78 	bl	8003b98 <HAL_RCC_OscConfig>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80010ae:	f000 fd9b 	bl	8001be8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010b2:	230f      	movs	r3, #15
 80010b4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010b6:	2302      	movs	r3, #2
 80010b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ba:	2300      	movs	r3, #0
 80010bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010c4:	2300      	movs	r3, #0
 80010c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010c8:	f107 030c 	add.w	r3, r7, #12
 80010cc:	2102      	movs	r1, #2
 80010ce:	4618      	mov	r0, r3
 80010d0:	f002 ffda 	bl	8004088 <HAL_RCC_ClockConfig>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80010da:	f000 fd85 	bl	8001be8 <Error_Handler>
  }
}
 80010de:	bf00      	nop
 80010e0:	3750      	adds	r7, #80	; 0x50
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40023800 	.word	0x40023800
 80010ec:	40007000 	.word	0x40007000

080010f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08a      	sub	sp, #40	; 0x28
 80010f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 80010f6:	f107 0310 	add.w	r3, r7, #16
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	605a      	str	r2, [r3, #4]
 8001100:	609a      	str	r2, [r3, #8]
 8001102:	60da      	str	r2, [r3, #12]
 8001104:	611a      	str	r2, [r3, #16]
 8001106:	615a      	str	r2, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001108:	463b      	mov	r3, r7
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	605a      	str	r2, [r3, #4]
 8001110:	609a      	str	r2, [r3, #8]
 8001112:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001114:	4b2d      	ldr	r3, [pc, #180]	; (80011cc <MX_ADC1_Init+0xdc>)
 8001116:	4a2e      	ldr	r2, [pc, #184]	; (80011d0 <MX_ADC1_Init+0xe0>)
 8001118:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800111a:	4b2c      	ldr	r3, [pc, #176]	; (80011cc <MX_ADC1_Init+0xdc>)
 800111c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001120:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001122:	4b2a      	ldr	r3, [pc, #168]	; (80011cc <MX_ADC1_Init+0xdc>)
 8001124:	2200      	movs	r2, #0
 8001126:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001128:	4b28      	ldr	r3, [pc, #160]	; (80011cc <MX_ADC1_Init+0xdc>)
 800112a:	2200      	movs	r2, #0
 800112c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800112e:	4b27      	ldr	r3, [pc, #156]	; (80011cc <MX_ADC1_Init+0xdc>)
 8001130:	2200      	movs	r2, #0
 8001132:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001134:	4b25      	ldr	r3, [pc, #148]	; (80011cc <MX_ADC1_Init+0xdc>)
 8001136:	2200      	movs	r2, #0
 8001138:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800113c:	4b23      	ldr	r3, [pc, #140]	; (80011cc <MX_ADC1_Init+0xdc>)
 800113e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001142:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_CC1;
 8001144:	4b21      	ldr	r3, [pc, #132]	; (80011cc <MX_ADC1_Init+0xdc>)
 8001146:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 800114a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800114c:	4b1f      	ldr	r3, [pc, #124]	; (80011cc <MX_ADC1_Init+0xdc>)
 800114e:	2200      	movs	r2, #0
 8001150:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001152:	4b1e      	ldr	r3, [pc, #120]	; (80011cc <MX_ADC1_Init+0xdc>)
 8001154:	2201      	movs	r2, #1
 8001156:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001158:	4b1c      	ldr	r3, [pc, #112]	; (80011cc <MX_ADC1_Init+0xdc>)
 800115a:	2201      	movs	r2, #1
 800115c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001160:	4b1a      	ldr	r3, [pc, #104]	; (80011cc <MX_ADC1_Init+0xdc>)
 8001162:	2201      	movs	r2, #1
 8001164:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001166:	4819      	ldr	r0, [pc, #100]	; (80011cc <MX_ADC1_Init+0xdc>)
 8001168:	f001 f942 	bl	80023f0 <HAL_ADC_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001172:	f000 fd39 	bl	8001be8 <Error_Handler>
  }
  /** Configure the analog watchdog
  */
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8001176:	4b17      	ldr	r3, [pc, #92]	; (80011d4 <MX_ADC1_Init+0xe4>)
 8001178:	613b      	str	r3, [r7, #16]
  AnalogWDGConfig.HighThreshold = 2048;
 800117a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800117e:	617b      	str	r3, [r7, #20]
  AnalogWDGConfig.LowThreshold = 0;
 8001180:	2300      	movs	r3, #0
 8001182:	61bb      	str	r3, [r7, #24]
  AnalogWDGConfig.Channel = ADC_CHANNEL_0;
 8001184:	2300      	movs	r3, #0
 8001186:	61fb      	str	r3, [r7, #28]
  AnalogWDGConfig.ITMode = ENABLE;
 8001188:	2301      	movs	r3, #1
 800118a:	f887 3020 	strb.w	r3, [r7, #32]
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 800118e:	f107 0310 	add.w	r3, r7, #16
 8001192:	4619      	mov	r1, r3
 8001194:	480d      	ldr	r0, [pc, #52]	; (80011cc <MX_ADC1_Init+0xdc>)
 8001196:	f001 fcdf 	bl	8002b58 <HAL_ADC_AnalogWDGConfig>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 80011a0:	f000 fd22 	bl	8001be8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011a8:	2301      	movs	r3, #1
 80011aa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80011ac:	2300      	movs	r3, #0
 80011ae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011b0:	463b      	mov	r3, r7
 80011b2:	4619      	mov	r1, r3
 80011b4:	4805      	ldr	r0, [pc, #20]	; (80011cc <MX_ADC1_Init+0xdc>)
 80011b6:	f001 fbad 	bl	8002914 <HAL_ADC_ConfigChannel>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 80011c0:	f000 fd12 	bl	8001be8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011c4:	bf00      	nop
 80011c6:	3728      	adds	r7, #40	; 0x28
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20000c24 	.word	0x20000c24
 80011d0:	40012000 	.word	0x40012000
 80011d4:	00800200 	.word	0x00800200

080011d8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011dc:	4b17      	ldr	r3, [pc, #92]	; (800123c <MX_SPI1_Init+0x64>)
 80011de:	4a18      	ldr	r2, [pc, #96]	; (8001240 <MX_SPI1_Init+0x68>)
 80011e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011e2:	4b16      	ldr	r3, [pc, #88]	; (800123c <MX_SPI1_Init+0x64>)
 80011e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011ea:	4b14      	ldr	r3, [pc, #80]	; (800123c <MX_SPI1_Init+0x64>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011f0:	4b12      	ldr	r3, [pc, #72]	; (800123c <MX_SPI1_Init+0x64>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011f6:	4b11      	ldr	r3, [pc, #68]	; (800123c <MX_SPI1_Init+0x64>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011fc:	4b0f      	ldr	r3, [pc, #60]	; (800123c <MX_SPI1_Init+0x64>)
 80011fe:	2200      	movs	r2, #0
 8001200:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001202:	4b0e      	ldr	r3, [pc, #56]	; (800123c <MX_SPI1_Init+0x64>)
 8001204:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001208:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800120a:	4b0c      	ldr	r3, [pc, #48]	; (800123c <MX_SPI1_Init+0x64>)
 800120c:	2200      	movs	r2, #0
 800120e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001210:	4b0a      	ldr	r3, [pc, #40]	; (800123c <MX_SPI1_Init+0x64>)
 8001212:	2200      	movs	r2, #0
 8001214:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001216:	4b09      	ldr	r3, [pc, #36]	; (800123c <MX_SPI1_Init+0x64>)
 8001218:	2200      	movs	r2, #0
 800121a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800121c:	4b07      	ldr	r3, [pc, #28]	; (800123c <MX_SPI1_Init+0x64>)
 800121e:	2200      	movs	r2, #0
 8001220:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001222:	4b06      	ldr	r3, [pc, #24]	; (800123c <MX_SPI1_Init+0x64>)
 8001224:	220a      	movs	r2, #10
 8001226:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001228:	4804      	ldr	r0, [pc, #16]	; (800123c <MX_SPI1_Init+0x64>)
 800122a:	f003 f929 	bl	8004480 <HAL_SPI_Init>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001234:	f000 fcd8 	bl	8001be8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}
 800123c:	20000ccc 	.word	0x20000ccc
 8001240:	40013000 	.word	0x40013000

08001244 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b08a      	sub	sp, #40	; 0x28
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800124a:	f107 0320 	add.w	r3, r7, #32
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001254:	1d3b      	adds	r3, r7, #4
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]
 800125c:	609a      	str	r2, [r3, #8]
 800125e:	60da      	str	r2, [r3, #12]
 8001260:	611a      	str	r2, [r3, #16]
 8001262:	615a      	str	r2, [r3, #20]
 8001264:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001266:	4b23      	ldr	r3, [pc, #140]	; (80012f4 <MX_TIM2_Init+0xb0>)
 8001268:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800126c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800126e:	4b21      	ldr	r3, [pc, #132]	; (80012f4 <MX_TIM2_Init+0xb0>)
 8001270:	2200      	movs	r2, #0
 8001272:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001274:	4b1f      	ldr	r3, [pc, #124]	; (80012f4 <MX_TIM2_Init+0xb0>)
 8001276:	2200      	movs	r2, #0
 8001278:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8400;
 800127a:	4b1e      	ldr	r3, [pc, #120]	; (80012f4 <MX_TIM2_Init+0xb0>)
 800127c:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8001280:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001282:	4b1c      	ldr	r3, [pc, #112]	; (80012f4 <MX_TIM2_Init+0xb0>)
 8001284:	2200      	movs	r2, #0
 8001286:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001288:	4b1a      	ldr	r3, [pc, #104]	; (80012f4 <MX_TIM2_Init+0xb0>)
 800128a:	2280      	movs	r2, #128	; 0x80
 800128c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800128e:	4819      	ldr	r0, [pc, #100]	; (80012f4 <MX_TIM2_Init+0xb0>)
 8001290:	f003 feda 	bl	8005048 <HAL_TIM_PWM_Init>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800129a:	f000 fca5 	bl	8001be8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800129e:	2300      	movs	r3, #0
 80012a0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a2:	2300      	movs	r3, #0
 80012a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012a6:	f107 0320 	add.w	r3, r7, #32
 80012aa:	4619      	mov	r1, r3
 80012ac:	4811      	ldr	r0, [pc, #68]	; (80012f4 <MX_TIM2_Init+0xb0>)
 80012ae:	f004 fbf5 	bl	8005a9c <HAL_TIMEx_MasterConfigSynchronization>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80012b8:	f000 fc96 	bl	8001be8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012bc:	2360      	movs	r3, #96	; 0x60
 80012be:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 4200;
 80012c0:	f241 0368 	movw	r3, #4200	; 0x1068
 80012c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012c6:	2300      	movs	r3, #0
 80012c8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012ca:	2300      	movs	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012ce:	1d3b      	adds	r3, r7, #4
 80012d0:	2208      	movs	r2, #8
 80012d2:	4619      	mov	r1, r3
 80012d4:	4807      	ldr	r0, [pc, #28]	; (80012f4 <MX_TIM2_Init+0xb0>)
 80012d6:	f004 f8c5 	bl	8005464 <HAL_TIM_PWM_ConfigChannel>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80012e0:	f000 fc82 	bl	8001be8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80012e4:	4803      	ldr	r0, [pc, #12]	; (80012f4 <MX_TIM2_Init+0xb0>)
 80012e6:	f000 fe05 	bl	8001ef4 <HAL_TIM_MspPostInit>

}
 80012ea:	bf00      	nop
 80012ec:	3728      	adds	r7, #40	; 0x28
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20000d24 	.word	0x20000d24

080012f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08a      	sub	sp, #40	; 0x28
 80012fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012fe:	f107 0320 	add.w	r3, r7, #32
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001308:	1d3b      	adds	r3, r7, #4
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]
 8001310:	609a      	str	r2, [r3, #8]
 8001312:	60da      	str	r2, [r3, #12]
 8001314:	611a      	str	r2, [r3, #16]
 8001316:	615a      	str	r2, [r3, #20]
 8001318:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800131a:	4b22      	ldr	r3, [pc, #136]	; (80013a4 <MX_TIM3_Init+0xac>)
 800131c:	4a22      	ldr	r2, [pc, #136]	; (80013a8 <MX_TIM3_Init+0xb0>)
 800131e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001320:	4b20      	ldr	r3, [pc, #128]	; (80013a4 <MX_TIM3_Init+0xac>)
 8001322:	2200      	movs	r2, #0
 8001324:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001326:	4b1f      	ldr	r3, [pc, #124]	; (80013a4 <MX_TIM3_Init+0xac>)
 8001328:	2200      	movs	r2, #0
 800132a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 420;
 800132c:	4b1d      	ldr	r3, [pc, #116]	; (80013a4 <MX_TIM3_Init+0xac>)
 800132e:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8001332:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001334:	4b1b      	ldr	r3, [pc, #108]	; (80013a4 <MX_TIM3_Init+0xac>)
 8001336:	2200      	movs	r2, #0
 8001338:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800133a:	4b1a      	ldr	r3, [pc, #104]	; (80013a4 <MX_TIM3_Init+0xac>)
 800133c:	2280      	movs	r2, #128	; 0x80
 800133e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001340:	4818      	ldr	r0, [pc, #96]	; (80013a4 <MX_TIM3_Init+0xac>)
 8001342:	f003 fe81 	bl	8005048 <HAL_TIM_PWM_Init>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800134c:	f000 fc4c 	bl	8001be8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001350:	2300      	movs	r3, #0
 8001352:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001354:	2300      	movs	r3, #0
 8001356:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001358:	f107 0320 	add.w	r3, r7, #32
 800135c:	4619      	mov	r1, r3
 800135e:	4811      	ldr	r0, [pc, #68]	; (80013a4 <MX_TIM3_Init+0xac>)
 8001360:	f004 fb9c 	bl	8005a9c <HAL_TIMEx_MasterConfigSynchronization>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800136a:	f000 fc3d 	bl	8001be8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800136e:	2360      	movs	r3, #96	; 0x60
 8001370:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 210;
 8001372:	23d2      	movs	r3, #210	; 0xd2
 8001374:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001376:	2300      	movs	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800137a:	2300      	movs	r3, #0
 800137c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800137e:	1d3b      	adds	r3, r7, #4
 8001380:	2200      	movs	r2, #0
 8001382:	4619      	mov	r1, r3
 8001384:	4807      	ldr	r0, [pc, #28]	; (80013a4 <MX_TIM3_Init+0xac>)
 8001386:	f004 f86d 	bl	8005464 <HAL_TIM_PWM_ConfigChannel>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001390:	f000 fc2a 	bl	8001be8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001394:	4803      	ldr	r0, [pc, #12]	; (80013a4 <MX_TIM3_Init+0xac>)
 8001396:	f000 fdad 	bl	8001ef4 <HAL_TIM_MspPostInit>

}
 800139a:	bf00      	nop
 800139c:	3728      	adds	r7, #40	; 0x28
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	20000bdc 	.word	0x20000bdc
 80013a8:	40000400 	.word	0x40000400

080013ac <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08a      	sub	sp, #40	; 0x28
 80013b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013b2:	f107 0320 	add.w	r3, r7, #32
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013bc:	1d3b      	adds	r3, r7, #4
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	60da      	str	r2, [r3, #12]
 80013c8:	611a      	str	r2, [r3, #16]
 80013ca:	615a      	str	r2, [r3, #20]
 80013cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80013ce:	4b24      	ldr	r3, [pc, #144]	; (8001460 <MX_TIM5_Init+0xb4>)
 80013d0:	4a24      	ldr	r2, [pc, #144]	; (8001464 <MX_TIM5_Init+0xb8>)
 80013d2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80013d4:	4b22      	ldr	r3, [pc, #136]	; (8001460 <MX_TIM5_Init+0xb4>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013da:	4b21      	ldr	r3, [pc, #132]	; (8001460 <MX_TIM5_Init+0xb4>)
 80013dc:	2200      	movs	r2, #0
 80013de:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 168000;
 80013e0:	4b1f      	ldr	r3, [pc, #124]	; (8001460 <MX_TIM5_Init+0xb4>)
 80013e2:	4a21      	ldr	r2, [pc, #132]	; (8001468 <MX_TIM5_Init+0xbc>)
 80013e4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e6:	4b1e      	ldr	r3, [pc, #120]	; (8001460 <MX_TIM5_Init+0xb4>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ec:	4b1c      	ldr	r3, [pc, #112]	; (8001460 <MX_TIM5_Init+0xb4>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 80013f2:	481b      	ldr	r0, [pc, #108]	; (8001460 <MX_TIM5_Init+0xb4>)
 80013f4:	f003 fc2a 	bl	8004c4c <HAL_TIM_OC_Init>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 80013fe:	f000 fbf3 	bl	8001be8 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim5, TIM_OPMODE_SINGLE) != HAL_OK)
 8001402:	2108      	movs	r1, #8
 8001404:	4816      	ldr	r0, [pc, #88]	; (8001460 <MX_TIM5_Init+0xb4>)
 8001406:	f003 fe6e 	bl	80050e6 <HAL_TIM_OnePulse_Init>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001410:	f000 fbea 	bl	8001be8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001414:	2300      	movs	r3, #0
 8001416:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001418:	2300      	movs	r3, #0
 800141a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800141c:	f107 0320 	add.w	r3, r7, #32
 8001420:	4619      	mov	r1, r3
 8001422:	480f      	ldr	r0, [pc, #60]	; (8001460 <MX_TIM5_Init+0xb4>)
 8001424:	f004 fb3a 	bl	8005a9c <HAL_TIMEx_MasterConfigSynchronization>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_TIM5_Init+0x86>
  {
    Error_Handler();
 800142e:	f000 fbdb 	bl	8001be8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8001432:	2310      	movs	r3, #16
 8001434:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 84000;
 8001436:	4b0d      	ldr	r3, [pc, #52]	; (800146c <MX_TIM5_Init+0xc0>)
 8001438:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800143a:	2300      	movs	r3, #0
 800143c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800143e:	2300      	movs	r3, #0
 8001440:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001442:	1d3b      	adds	r3, r7, #4
 8001444:	2204      	movs	r2, #4
 8001446:	4619      	mov	r1, r3
 8001448:	4805      	ldr	r0, [pc, #20]	; (8001460 <MX_TIM5_Init+0xb4>)
 800144a:	f003 ffaf 	bl	80053ac <HAL_TIM_OC_ConfigChannel>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_TIM5_Init+0xac>
  {
    Error_Handler();
 8001454:	f000 fbc8 	bl	8001be8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001458:	bf00      	nop
 800145a:	3728      	adds	r7, #40	; 0x28
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	20000b94 	.word	0x20000b94
 8001464:	40000c00 	.word	0x40000c00
 8001468:	00029040 	.word	0x00029040
 800146c:	00014820 	.word	0x00014820

08001470 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001474:	4b11      	ldr	r3, [pc, #68]	; (80014bc <MX_USART2_UART_Init+0x4c>)
 8001476:	4a12      	ldr	r2, [pc, #72]	; (80014c0 <MX_USART2_UART_Init+0x50>)
 8001478:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800147a:	4b10      	ldr	r3, [pc, #64]	; (80014bc <MX_USART2_UART_Init+0x4c>)
 800147c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001480:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001482:	4b0e      	ldr	r3, [pc, #56]	; (80014bc <MX_USART2_UART_Init+0x4c>)
 8001484:	2200      	movs	r2, #0
 8001486:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001488:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <MX_USART2_UART_Init+0x4c>)
 800148a:	2200      	movs	r2, #0
 800148c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800148e:	4b0b      	ldr	r3, [pc, #44]	; (80014bc <MX_USART2_UART_Init+0x4c>)
 8001490:	2200      	movs	r2, #0
 8001492:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001494:	4b09      	ldr	r3, [pc, #36]	; (80014bc <MX_USART2_UART_Init+0x4c>)
 8001496:	220c      	movs	r2, #12
 8001498:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800149a:	4b08      	ldr	r3, [pc, #32]	; (80014bc <MX_USART2_UART_Init+0x4c>)
 800149c:	2200      	movs	r2, #0
 800149e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014a0:	4b06      	ldr	r3, [pc, #24]	; (80014bc <MX_USART2_UART_Init+0x4c>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014a6:	4805      	ldr	r0, [pc, #20]	; (80014bc <MX_USART2_UART_Init+0x4c>)
 80014a8:	f004 fb7a 	bl	8005ba0 <HAL_UART_Init>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014b2:	f000 fb99 	bl	8001be8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20000d6c 	.word	0x20000d6c
 80014c0:	40004400 	.word	0x40004400

080014c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	607b      	str	r3, [r7, #4]
 80014ce:	4b10      	ldr	r3, [pc, #64]	; (8001510 <MX_DMA_Init+0x4c>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	4a0f      	ldr	r2, [pc, #60]	; (8001510 <MX_DMA_Init+0x4c>)
 80014d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014d8:	6313      	str	r3, [r2, #48]	; 0x30
 80014da:	4b0d      	ldr	r3, [pc, #52]	; (8001510 <MX_DMA_Init+0x4c>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014e2:	607b      	str	r3, [r7, #4]
 80014e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80014e6:	2200      	movs	r2, #0
 80014e8:	2100      	movs	r1, #0
 80014ea:	2038      	movs	r0, #56	; 0x38
 80014ec:	f001 fdf7 	bl	80030de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80014f0:	2038      	movs	r0, #56	; 0x38
 80014f2:	f001 fe10 	bl	8003116 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80014f6:	2200      	movs	r2, #0
 80014f8:	2100      	movs	r1, #0
 80014fa:	203b      	movs	r0, #59	; 0x3b
 80014fc:	f001 fdef 	bl	80030de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001500:	203b      	movs	r0, #59	; 0x3b
 8001502:	f001 fe08 	bl	8003116 <HAL_NVIC_EnableIRQ>

}
 8001506:	bf00      	nop
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40023800 	.word	0x40023800

08001514 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b08a      	sub	sp, #40	; 0x28
 8001518:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151a:	f107 0314 	add.w	r3, r7, #20
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	605a      	str	r2, [r3, #4]
 8001524:	609a      	str	r2, [r3, #8]
 8001526:	60da      	str	r2, [r3, #12]
 8001528:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	613b      	str	r3, [r7, #16]
 800152e:	4b45      	ldr	r3, [pc, #276]	; (8001644 <MX_GPIO_Init+0x130>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	4a44      	ldr	r2, [pc, #272]	; (8001644 <MX_GPIO_Init+0x130>)
 8001534:	f043 0304 	orr.w	r3, r3, #4
 8001538:	6313      	str	r3, [r2, #48]	; 0x30
 800153a:	4b42      	ldr	r3, [pc, #264]	; (8001644 <MX_GPIO_Init+0x130>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	f003 0304 	and.w	r3, r3, #4
 8001542:	613b      	str	r3, [r7, #16]
 8001544:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	60fb      	str	r3, [r7, #12]
 800154a:	4b3e      	ldr	r3, [pc, #248]	; (8001644 <MX_GPIO_Init+0x130>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	4a3d      	ldr	r2, [pc, #244]	; (8001644 <MX_GPIO_Init+0x130>)
 8001550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001554:	6313      	str	r3, [r2, #48]	; 0x30
 8001556:	4b3b      	ldr	r3, [pc, #236]	; (8001644 <MX_GPIO_Init+0x130>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	60bb      	str	r3, [r7, #8]
 8001566:	4b37      	ldr	r3, [pc, #220]	; (8001644 <MX_GPIO_Init+0x130>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	4a36      	ldr	r2, [pc, #216]	; (8001644 <MX_GPIO_Init+0x130>)
 800156c:	f043 0301 	orr.w	r3, r3, #1
 8001570:	6313      	str	r3, [r2, #48]	; 0x30
 8001572:	4b34      	ldr	r3, [pc, #208]	; (8001644 <MX_GPIO_Init+0x130>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	60bb      	str	r3, [r7, #8]
 800157c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	607b      	str	r3, [r7, #4]
 8001582:	4b30      	ldr	r3, [pc, #192]	; (8001644 <MX_GPIO_Init+0x130>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	4a2f      	ldr	r2, [pc, #188]	; (8001644 <MX_GPIO_Init+0x130>)
 8001588:	f043 0302 	orr.w	r3, r3, #2
 800158c:	6313      	str	r3, [r2, #48]	; 0x30
 800158e:	4b2d      	ldr	r3, [pc, #180]	; (8001644 <MX_GPIO_Init+0x130>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	607b      	str	r3, [r7, #4]
 8001598:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 800159a:	2200      	movs	r2, #0
 800159c:	2180      	movs	r1, #128	; 0x80
 800159e:	482a      	ldr	r0, [pc, #168]	; (8001648 <MX_GPIO_Init+0x134>)
 80015a0:	f002 fac8 	bl	8003b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 80015a4:	2201      	movs	r2, #1
 80015a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015aa:	4828      	ldr	r0, [pc, #160]	; (800164c <MX_GPIO_Init+0x138>)
 80015ac:	f002 fac2 	bl	8003b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80015b0:	2201      	movs	r2, #1
 80015b2:	2140      	movs	r1, #64	; 0x40
 80015b4:	4826      	ldr	r0, [pc, #152]	; (8001650 <MX_GPIO_Init+0x13c>)
 80015b6:	f002 fabd 	bl	8003b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015c0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80015c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015ca:	f107 0314 	add.w	r3, r7, #20
 80015ce:	4619      	mov	r1, r3
 80015d0:	481d      	ldr	r0, [pc, #116]	; (8001648 <MX_GPIO_Init+0x134>)
 80015d2:	f002 f92b 	bl	800382c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RS_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin;
 80015d6:	2380      	movs	r3, #128	; 0x80
 80015d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015da:	2301      	movs	r3, #1
 80015dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015de:	2300      	movs	r3, #0
 80015e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e2:	2300      	movs	r3, #0
 80015e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_RS_GPIO_Port, &GPIO_InitStruct);
 80015e6:	f107 0314 	add.w	r3, r7, #20
 80015ea:	4619      	mov	r1, r3
 80015ec:	4816      	ldr	r0, [pc, #88]	; (8001648 <MX_GPIO_Init+0x134>)
 80015ee:	f002 f91d 	bl	800382c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RESET_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 80015f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f8:	2301      	movs	r3, #1
 80015fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001600:	2300      	movs	r3, #0
 8001602:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8001604:	f107 0314 	add.w	r3, r7, #20
 8001608:	4619      	mov	r1, r3
 800160a:	4810      	ldr	r0, [pc, #64]	; (800164c <MX_GPIO_Init+0x138>)
 800160c:	f002 f90e 	bl	800382c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001610:	2340      	movs	r3, #64	; 0x40
 8001612:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001614:	2301      	movs	r3, #1
 8001616:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161c:	2300      	movs	r3, #0
 800161e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001620:	f107 0314 	add.w	r3, r7, #20
 8001624:	4619      	mov	r1, r3
 8001626:	480a      	ldr	r0, [pc, #40]	; (8001650 <MX_GPIO_Init+0x13c>)
 8001628:	f002 f900 	bl	800382c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800162c:	2200      	movs	r2, #0
 800162e:	2100      	movs	r1, #0
 8001630:	2028      	movs	r0, #40	; 0x28
 8001632:	f001 fd54 	bl	80030de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001636:	2028      	movs	r0, #40	; 0x28
 8001638:	f001 fd6d 	bl	8003116 <HAL_NVIC_EnableIRQ>

}
 800163c:	bf00      	nop
 800163e:	3728      	adds	r7, #40	; 0x28
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40023800 	.word	0x40023800
 8001648:	40020800 	.word	0x40020800
 800164c:	40020000 	.word	0x40020000
 8001650:	40020400 	.word	0x40020400

08001654 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8001660:	2300      	movs	r3, #0
 8001662:	617b      	str	r3, [r7, #20]
 8001664:	e009      	b.n	800167a <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	1c5a      	adds	r2, r3, #1
 800166a:	60ba      	str	r2, [r7, #8]
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	4618      	mov	r0, r3
 8001670:	f7ff fc6e 	bl	8000f50 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	3301      	adds	r3, #1
 8001678:	617b      	str	r3, [r7, #20]
 800167a:	697a      	ldr	r2, [r7, #20]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	429a      	cmp	r2, r3
 8001680:	dbf1      	blt.n	8001666 <_write+0x12>
  }
  return len;
 8001682:	687b      	ldr	r3, [r7, #4]
}
 8001684:	4618      	mov	r0, r3
 8001686:	3718      	adds	r7, #24
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	0000      	movs	r0, r0
	...

08001690 <drawGraph>:
#define PX_PER_TIME	(DIV_PX / DIV_TIME)
#define PY_PER_VOLT	(DIV_PY / DIV_VOLT)


void drawGraph(float *data, int32_t len, float dt)
{
 8001690:	b5b0      	push	{r4, r5, r7, lr}
 8001692:	b0b0      	sub	sp, #192	; 0xc0
 8001694:	af02      	add	r7, sp, #8
 8001696:	60f8      	str	r0, [r7, #12]
 8001698:	60b9      	str	r1, [r7, #8]
 800169a:	ed87 0a01 	vstr	s0, [r7, #4]
	int32_t px, py, old_px, old_py;
	int8_t div_info[128];
	uint16_t color_idx;


	LCD_Clear2(1);		// BLACK
 800169e:	2001      	movs	r0, #1
 80016a0:	f004 ff6c 	bl	800657c <LCD_Clear2>

	// Draw graph area window
	//POINT_COLOR = WHITE;
	color_idx = 0;		// WHITE
 80016a4:	2300      	movs	r3, #0
 80016a6:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2

	LCD_DrawLine2(ORIGIN_PX, ORIGIN_PY - MAX_RANGE_PY , ORIGIN_PX, ORIGIN_PY, color_idx);
 80016aa:	4b85      	ldr	r3, [pc, #532]	; (80018c0 <drawGraph+0x230>)
 80016ac:	885b      	ldrh	r3, [r3, #2]
 80016ae:	3be6      	subs	r3, #230	; 0xe6
 80016b0:	b299      	uxth	r1, r3
 80016b2:	4b83      	ldr	r3, [pc, #524]	; (80018c0 <drawGraph+0x230>)
 80016b4:	885b      	ldrh	r3, [r3, #2]
 80016b6:	3b1e      	subs	r3, #30
 80016b8:	b29a      	uxth	r2, r3
 80016ba:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 80016be:	9300      	str	r3, [sp, #0]
 80016c0:	4613      	mov	r3, r2
 80016c2:	221e      	movs	r2, #30
 80016c4:	201e      	movs	r0, #30
 80016c6:	f004 ff6b 	bl	80065a0 <LCD_DrawLine2>
	LCD_DrawLine2(ORIGIN_PX + MAX_RANGE_PX, ORIGIN_PY - MAX_RANGE_PY , ORIGIN_PX + MAX_RANGE_PX, ORIGIN_PY, color_idx);
 80016ca:	4b7d      	ldr	r3, [pc, #500]	; (80018c0 <drawGraph+0x230>)
 80016cc:	885b      	ldrh	r3, [r3, #2]
 80016ce:	3be6      	subs	r3, #230	; 0xe6
 80016d0:	b299      	uxth	r1, r3
 80016d2:	4b7b      	ldr	r3, [pc, #492]	; (80018c0 <drawGraph+0x230>)
 80016d4:	885b      	ldrh	r3, [r3, #2]
 80016d6:	3b1e      	subs	r3, #30
 80016d8:	b29a      	uxth	r2, r3
 80016da:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 80016de:	9300      	str	r3, [sp, #0]
 80016e0:	4613      	mov	r3, r2
 80016e2:	f44f 729b 	mov.w	r2, #310	; 0x136
 80016e6:	f44f 709b 	mov.w	r0, #310	; 0x136
 80016ea:	f004 ff59 	bl	80065a0 <LCD_DrawLine2>
	LCD_DrawLine2(ORIGIN_PX, ORIGIN_PY - MAX_RANGE_PY , ORIGIN_PX + MAX_RANGE_PX, ORIGIN_PY - MAX_RANGE_PY, color_idx);
 80016ee:	4b74      	ldr	r3, [pc, #464]	; (80018c0 <drawGraph+0x230>)
 80016f0:	885b      	ldrh	r3, [r3, #2]
 80016f2:	3be6      	subs	r3, #230	; 0xe6
 80016f4:	b299      	uxth	r1, r3
 80016f6:	4b72      	ldr	r3, [pc, #456]	; (80018c0 <drawGraph+0x230>)
 80016f8:	885b      	ldrh	r3, [r3, #2]
 80016fa:	3be6      	subs	r3, #230	; 0xe6
 80016fc:	b29a      	uxth	r2, r3
 80016fe:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8001702:	9300      	str	r3, [sp, #0]
 8001704:	4613      	mov	r3, r2
 8001706:	f44f 729b 	mov.w	r2, #310	; 0x136
 800170a:	201e      	movs	r0, #30
 800170c:	f004 ff48 	bl	80065a0 <LCD_DrawLine2>
	LCD_DrawLine2(ORIGIN_PX, ORIGIN_PY , ORIGIN_PX + MAX_RANGE_PX, ORIGIN_PY, color_idx);
 8001710:	4b6b      	ldr	r3, [pc, #428]	; (80018c0 <drawGraph+0x230>)
 8001712:	885b      	ldrh	r3, [r3, #2]
 8001714:	3b1e      	subs	r3, #30
 8001716:	b299      	uxth	r1, r3
 8001718:	4b69      	ldr	r3, [pc, #420]	; (80018c0 <drawGraph+0x230>)
 800171a:	885b      	ldrh	r3, [r3, #2]
 800171c:	3b1e      	subs	r3, #30
 800171e:	b29a      	uxth	r2, r3
 8001720:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8001724:	9300      	str	r3, [sp, #0]
 8001726:	4613      	mov	r3, r2
 8001728:	f44f 729b 	mov.w	r2, #310	; 0x136
 800172c:	201e      	movs	r0, #30
 800172e:	f004 ff37 	bl	80065a0 <LCD_DrawLine2>


	// Draw gridline
	//POINT_COLOR = GRAYBLUE;
	color_idx = 16;		// GRAYBLUE
 8001732:	2310      	movs	r3, #16
 8001734:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2

	for(int i=1; i<10; i++){
 8001738:	2301      	movs	r3, #1
 800173a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800173e:	e029      	b.n	8001794 <drawGraph+0x104>
		LCD_DrawLine2(ORIGIN_PX, ORIGIN_PY - MAX_RANGE_PY + DIV_PY * i, ORIGIN_PX + MAX_RANGE_PX, ORIGIN_PY - MAX_RANGE_PY + DIV_PY * i, color_idx);
 8001740:	4b5f      	ldr	r3, [pc, #380]	; (80018c0 <drawGraph+0x230>)
 8001742:	885a      	ldrh	r2, [r3, #2]
 8001744:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001748:	b29b      	uxth	r3, r3
 800174a:	4619      	mov	r1, r3
 800174c:	0089      	lsls	r1, r1, #2
 800174e:	440b      	add	r3, r1
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	b29b      	uxth	r3, r3
 8001754:	4413      	add	r3, r2
 8001756:	b29b      	uxth	r3, r3
 8001758:	3be6      	subs	r3, #230	; 0xe6
 800175a:	b299      	uxth	r1, r3
 800175c:	4b58      	ldr	r3, [pc, #352]	; (80018c0 <drawGraph+0x230>)
 800175e:	885a      	ldrh	r2, [r3, #2]
 8001760:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001764:	b29b      	uxth	r3, r3
 8001766:	4618      	mov	r0, r3
 8001768:	0080      	lsls	r0, r0, #2
 800176a:	4403      	add	r3, r0
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	b29b      	uxth	r3, r3
 8001770:	4413      	add	r3, r2
 8001772:	b29b      	uxth	r3, r3
 8001774:	3be6      	subs	r3, #230	; 0xe6
 8001776:	b29a      	uxth	r2, r3
 8001778:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 800177c:	9300      	str	r3, [sp, #0]
 800177e:	4613      	mov	r3, r2
 8001780:	f44f 729b 	mov.w	r2, #310	; 0x136
 8001784:	201e      	movs	r0, #30
 8001786:	f004 ff0b 	bl	80065a0 <LCD_DrawLine2>
	for(int i=1; i<10; i++){
 800178a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800178e:	3301      	adds	r3, #1
 8001790:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001794:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001798:	2b09      	cmp	r3, #9
 800179a:	ddd1      	ble.n	8001740 <drawGraph+0xb0>
	}

	for(int i=1; i<14; i++){
 800179c:	2301      	movs	r3, #1
 800179e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80017a2:	e026      	b.n	80017f2 <drawGraph+0x162>
		LCD_DrawLine2(ORIGIN_PX + DIV_PX * i, ORIGIN_PY - MAX_RANGE_PY , ORIGIN_PX + DIV_PX * i, ORIGIN_PY, color_idx);
 80017a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	461a      	mov	r2, r3
 80017ac:	0092      	lsls	r2, r2, #2
 80017ae:	4413      	add	r3, r2
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	331e      	adds	r3, #30
 80017b6:	b298      	uxth	r0, r3
 80017b8:	4b41      	ldr	r3, [pc, #260]	; (80018c0 <drawGraph+0x230>)
 80017ba:	885b      	ldrh	r3, [r3, #2]
 80017bc:	3be6      	subs	r3, #230	; 0xe6
 80017be:	b299      	uxth	r1, r3
 80017c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80017c4:	b29b      	uxth	r3, r3
 80017c6:	461a      	mov	r2, r3
 80017c8:	0092      	lsls	r2, r2, #2
 80017ca:	4413      	add	r3, r2
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	331e      	adds	r3, #30
 80017d2:	b29a      	uxth	r2, r3
 80017d4:	4b3a      	ldr	r3, [pc, #232]	; (80018c0 <drawGraph+0x230>)
 80017d6:	885b      	ldrh	r3, [r3, #2]
 80017d8:	3b1e      	subs	r3, #30
 80017da:	b29c      	uxth	r4, r3
 80017dc:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 80017e0:	9300      	str	r3, [sp, #0]
 80017e2:	4623      	mov	r3, r4
 80017e4:	f004 fedc 	bl	80065a0 <LCD_DrawLine2>
	for(int i=1; i<14; i++){
 80017e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80017ec:	3301      	adds	r3, #1
 80017ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80017f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80017f6:	2b0d      	cmp	r3, #13
 80017f8:	ddd4      	ble.n	80017a4 <drawGraph+0x114>
	}


	sprintf(div_info,"%0.2f V/div   %0.2f ms/div", DIV_VOLT, DIV_TIME);
 80017fa:	f107 0010 	add.w	r0, r7, #16
 80017fe:	a32e      	add	r3, pc, #184	; (adr r3, 80018b8 <drawGraph+0x228>)
 8001800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001804:	e9cd 2300 	strd	r2, r3, [sp]
 8001808:	f04f 0200 	mov.w	r2, #0
 800180c:	4b2d      	ldr	r3, [pc, #180]	; (80018c4 <drawGraph+0x234>)
 800180e:	492e      	ldr	r1, [pc, #184]	; (80018c8 <drawGraph+0x238>)
 8001810:	f005 fdcc 	bl	80073ac <siprintf>
	color_idx = 0;	// WHITE
 8001814:	2300      	movs	r3, #0
 8001816:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
	Gui_StrCenter2(30, 220, div_info, 16, color_idx);
 800181a:	f107 0210 	add.w	r2, r7, #16
 800181e:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8001822:	9300      	str	r3, [sp, #0]
 8001824:	2310      	movs	r3, #16
 8001826:	21dc      	movs	r1, #220	; 0xdc
 8001828:	201e      	movs	r0, #30
 800182a:	f005 f819 	bl	8006860 <Gui_StrCenter2>


	// Draw data point
	//POINT_COLOR = YELLOW;
	color_idx = 10;		// YELLOW
 800182e:	230a      	movs	r3, #10
 8001830:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2

	axis_px = PX_PER_TIME * dt * 0;
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f7fe fe8f 	bl	8000558 <__aeabi_f2d>
 800183a:	f04f 0200 	mov.w	r2, #0
 800183e:	4b23      	ldr	r3, [pc, #140]	; (80018cc <drawGraph+0x23c>)
 8001840:	f7fe fee2 	bl	8000608 <__aeabi_dmul>
 8001844:	4602      	mov	r2, r0
 8001846:	460b      	mov	r3, r1
 8001848:	4610      	mov	r0, r2
 800184a:	4619      	mov	r1, r3
 800184c:	f04f 0200 	mov.w	r2, #0
 8001850:	f04f 0300 	mov.w	r3, #0
 8001854:	f7fe fed8 	bl	8000608 <__aeabi_dmul>
 8001858:	4602      	mov	r2, r0
 800185a:	460b      	mov	r3, r1
 800185c:	4610      	mov	r0, r2
 800185e:	4619      	mov	r1, r3
 8001860:	f7ff f982 	bl	8000b68 <__aeabi_d2iz>
 8001864:	4603      	mov	r3, r0
 8001866:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	axis_py = PY_PER_VOLT * data[0];
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4618      	mov	r0, r3
 8001870:	f7fe fe72 	bl	8000558 <__aeabi_f2d>
 8001874:	f04f 0200 	mov.w	r2, #0
 8001878:	4b15      	ldr	r3, [pc, #84]	; (80018d0 <drawGraph+0x240>)
 800187a:	f7fe fec5 	bl	8000608 <__aeabi_dmul>
 800187e:	4602      	mov	r2, r0
 8001880:	460b      	mov	r3, r1
 8001882:	4610      	mov	r0, r2
 8001884:	4619      	mov	r1, r3
 8001886:	f7ff f96f 	bl	8000b68 <__aeabi_d2iz>
 800188a:	4603      	mov	r3, r0
 800188c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	old_px = ORIGIN_PX + axis_px;
 8001890:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001894:	331e      	adds	r3, #30
 8001896:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	old_py = ZERO_V_PY - axis_py;
 800189a:	4b09      	ldr	r3, [pc, #36]	; (80018c0 <drawGraph+0x230>)
 800189c:	885b      	ldrh	r3, [r3, #2]
 800189e:	f1a3 025a 	sub.w	r2, r3, #90	; 0x5a
 80018a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

	for(int i=1; i<len; i++){
 80018ac:	2301      	movs	r3, #1
 80018ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80018b2:	e085      	b.n	80019c0 <drawGraph+0x330>
 80018b4:	f3af 8000 	nop.w
 80018b8:	9999999a 	.word	0x9999999a
 80018bc:	3fb99999 	.word	0x3fb99999
 80018c0:	20000e14 	.word	0x20000e14
 80018c4:	3fe00000 	.word	0x3fe00000
 80018c8:	08009820 	.word	0x08009820
 80018cc:	40690000 	.word	0x40690000
 80018d0:	40440000 	.word	0x40440000
		axis_px = PX_PER_TIME * dt * i;
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f7fe fe3f 	bl	8000558 <__aeabi_f2d>
 80018da:	f04f 0200 	mov.w	r2, #0
 80018de:	4b57      	ldr	r3, [pc, #348]	; (8001a3c <drawGraph+0x3ac>)
 80018e0:	f7fe fe92 	bl	8000608 <__aeabi_dmul>
 80018e4:	4602      	mov	r2, r0
 80018e6:	460b      	mov	r3, r1
 80018e8:	4614      	mov	r4, r2
 80018ea:	461d      	mov	r5, r3
 80018ec:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80018f0:	f7fe fe20 	bl	8000534 <__aeabi_i2d>
 80018f4:	4602      	mov	r2, r0
 80018f6:	460b      	mov	r3, r1
 80018f8:	4620      	mov	r0, r4
 80018fa:	4629      	mov	r1, r5
 80018fc:	f7fe fe84 	bl	8000608 <__aeabi_dmul>
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	4610      	mov	r0, r2
 8001906:	4619      	mov	r1, r3
 8001908:	f7ff f92e 	bl	8000b68 <__aeabi_d2iz>
 800190c:	4603      	mov	r3, r0
 800190e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		axis_py = PY_PER_VOLT * data[i];
 8001912:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	68fa      	ldr	r2, [r7, #12]
 800191a:	4413      	add	r3, r2
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	f7fe fe1a 	bl	8000558 <__aeabi_f2d>
 8001924:	f04f 0200 	mov.w	r2, #0
 8001928:	4b45      	ldr	r3, [pc, #276]	; (8001a40 <drawGraph+0x3b0>)
 800192a:	f7fe fe6d 	bl	8000608 <__aeabi_dmul>
 800192e:	4602      	mov	r2, r0
 8001930:	460b      	mov	r3, r1
 8001932:	4610      	mov	r0, r2
 8001934:	4619      	mov	r1, r3
 8001936:	f7ff f917 	bl	8000b68 <__aeabi_d2iz>
 800193a:	4603      	mov	r3, r0
 800193c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		px = ORIGIN_PX + axis_px;
 8001940:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001944:	331e      	adds	r3, #30
 8001946:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		py = ZERO_V_PY - axis_py;
 800194a:	4b3e      	ldr	r3, [pc, #248]	; (8001a44 <drawGraph+0x3b4>)
 800194c:	885b      	ldrh	r3, [r3, #2]
 800194e:	f1a3 025a 	sub.w	r2, r3, #90	; 0x5a
 8001952:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		if((px <= ORIGIN_PX + MAX_RANGE_PX) && (ORIGIN_PY - MAX_RANGE_PY <= py) && (py <= ORIGIN_PY)){
 800195c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001960:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8001964:	dc27      	bgt.n	80019b6 <drawGraph+0x326>
 8001966:	4b37      	ldr	r3, [pc, #220]	; (8001a44 <drawGraph+0x3b4>)
 8001968:	885b      	ldrh	r3, [r3, #2]
 800196a:	3be6      	subs	r3, #230	; 0xe6
 800196c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001970:	429a      	cmp	r2, r3
 8001972:	db20      	blt.n	80019b6 <drawGraph+0x326>
 8001974:	4b33      	ldr	r3, [pc, #204]	; (8001a44 <drawGraph+0x3b4>)
 8001976:	885b      	ldrh	r3, [r3, #2]
 8001978:	3b1d      	subs	r3, #29
 800197a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800197e:	429a      	cmp	r2, r3
 8001980:	da19      	bge.n	80019b6 <drawGraph+0x326>
			//LCD_DrawPoint(px_x, px_y);
			LCD_DrawLine2(old_px, old_py , px, py, color_idx);
 8001982:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001986:	b298      	uxth	r0, r3
 8001988:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800198c:	b299      	uxth	r1, r3
 800198e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001992:	b29a      	uxth	r2, r3
 8001994:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001998:	b29c      	uxth	r4, r3
 800199a:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 800199e:	9300      	str	r3, [sp, #0]
 80019a0:	4623      	mov	r3, r4
 80019a2:	f004 fdfd 	bl	80065a0 <LCD_DrawLine2>
			old_px = px;
 80019a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80019aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			old_py = py;
 80019ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80019b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	for(int i=1; i<len; i++){
 80019b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80019ba:	3301      	adds	r3, #1
 80019bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80019c0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	db84      	blt.n	80018d4 <drawGraph+0x244>
		}
	}


	// Draw 0V marker
	LCD_DrawLine2(ORIGIN_PX, ZERO_V_PY, ORIGIN_PX - 8, ZERO_V_PY - 4, color_idx);
 80019ca:	4b1e      	ldr	r3, [pc, #120]	; (8001a44 <drawGraph+0x3b4>)
 80019cc:	885b      	ldrh	r3, [r3, #2]
 80019ce:	3b5a      	subs	r3, #90	; 0x5a
 80019d0:	b299      	uxth	r1, r3
 80019d2:	4b1c      	ldr	r3, [pc, #112]	; (8001a44 <drawGraph+0x3b4>)
 80019d4:	885b      	ldrh	r3, [r3, #2]
 80019d6:	3b5e      	subs	r3, #94	; 0x5e
 80019d8:	b29a      	uxth	r2, r3
 80019da:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 80019de:	9300      	str	r3, [sp, #0]
 80019e0:	4613      	mov	r3, r2
 80019e2:	2216      	movs	r2, #22
 80019e4:	201e      	movs	r0, #30
 80019e6:	f004 fddb 	bl	80065a0 <LCD_DrawLine2>
	LCD_DrawLine2(ORIGIN_PX - 8, ZERO_V_PY - 4, ORIGIN_PX - 8, ZERO_V_PY + 4, color_idx);
 80019ea:	4b16      	ldr	r3, [pc, #88]	; (8001a44 <drawGraph+0x3b4>)
 80019ec:	885b      	ldrh	r3, [r3, #2]
 80019ee:	3b5e      	subs	r3, #94	; 0x5e
 80019f0:	b299      	uxth	r1, r3
 80019f2:	4b14      	ldr	r3, [pc, #80]	; (8001a44 <drawGraph+0x3b4>)
 80019f4:	885b      	ldrh	r3, [r3, #2]
 80019f6:	3b56      	subs	r3, #86	; 0x56
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 80019fe:	9300      	str	r3, [sp, #0]
 8001a00:	4613      	mov	r3, r2
 8001a02:	2216      	movs	r2, #22
 8001a04:	2016      	movs	r0, #22
 8001a06:	f004 fdcb 	bl	80065a0 <LCD_DrawLine2>
	LCD_DrawLine2(ORIGIN_PX - 8, ZERO_V_PY + 4, ORIGIN_PX, ZERO_V_PY, color_idx);
 8001a0a:	4b0e      	ldr	r3, [pc, #56]	; (8001a44 <drawGraph+0x3b4>)
 8001a0c:	885b      	ldrh	r3, [r3, #2]
 8001a0e:	3b56      	subs	r3, #86	; 0x56
 8001a10:	b299      	uxth	r1, r3
 8001a12:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <drawGraph+0x3b4>)
 8001a14:	885b      	ldrh	r3, [r3, #2]
 8001a16:	3b5a      	subs	r3, #90	; 0x5a
 8001a18:	b29a      	uxth	r2, r3
 8001a1a:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8001a1e:	9300      	str	r3, [sp, #0]
 8001a20:	4613      	mov	r3, r2
 8001a22:	221e      	movs	r2, #30
 8001a24:	2016      	movs	r0, #22
 8001a26:	f004 fdbb 	bl	80065a0 <LCD_DrawLine2>

	LCD_SendBuffer(&hspi1, &hdma_spi1_tx);
 8001a2a:	4907      	ldr	r1, [pc, #28]	; (8001a48 <drawGraph+0x3b8>)
 8001a2c:	4807      	ldr	r0, [pc, #28]	; (8001a4c <drawGraph+0x3bc>)
 8001a2e:	f004 ff41 	bl	80068b4 <LCD_SendBuffer>

}
 8001a32:	bf00      	nop
 8001a34:	37b8      	adds	r7, #184	; 0xb8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bdb0      	pop	{r4, r5, r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40690000 	.word	0x40690000
 8001a40:	40440000 	.word	0x40440000
 8001a44:	20000e14 	.word	0x20000e14
 8001a48:	20000db0 	.word	0x20000db0
 8001a4c:	20000ccc 	.word	0x20000ccc

08001a50 <showAdcData>:

void showAdcData(uint32_t ndtr, uint32_t offset)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
	int32_t start, end, idx;

	start = ADC_BUF_SIZE - ndtr - offset;
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	4413      	add	r3, r2
 8001a60:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
 8001a64:	617b      	str	r3, [r7, #20]

	if(start < 0){
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	da03      	bge.n	8001a74 <showAdcData+0x24>
		start = ADC_BUF_SIZE + start;
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8001a72:	617b      	str	r3, [r7, #20]
	}

	end = start + SHOW_SIZE;
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8001a7a:	60bb      	str	r3, [r7, #8]

	if(end >= ADC_BUF_SIZE){
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001a82:	db03      	blt.n	8001a8c <showAdcData+0x3c>
		end = end - ADC_BUF_SIZE;
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001a8a:	60bb      	str	r3, [r7, #8]
	}


	for(int i=0; i<SHOW_SIZE; i++){
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	e02f      	b.n	8001af2 <showAdcData+0xa2>
		idx = start + i;
 8001a92:	697a      	ldr	r2, [r7, #20]
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	4413      	add	r3, r2
 8001a98:	613b      	str	r3, [r7, #16]
		if(idx >= ADC_BUF_SIZE){
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001aa0:	db03      	blt.n	8001aaa <showAdcData+0x5a>
			idx = idx - ADC_BUF_SIZE;
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001aa8:	613b      	str	r3, [r7, #16]
		}

		adc_phy[i] = adc_dr_dma[idx] * 3.3 / 4096;
 8001aaa:	4a1b      	ldr	r2, [pc, #108]	; (8001b18 <showAdcData+0xc8>)
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7fe fd2e 	bl	8000514 <__aeabi_ui2d>
 8001ab8:	a315      	add	r3, pc, #84	; (adr r3, 8001b10 <showAdcData+0xc0>)
 8001aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001abe:	f7fe fda3 	bl	8000608 <__aeabi_dmul>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	4610      	mov	r0, r2
 8001ac8:	4619      	mov	r1, r3
 8001aca:	f04f 0200 	mov.w	r2, #0
 8001ace:	4b13      	ldr	r3, [pc, #76]	; (8001b1c <showAdcData+0xcc>)
 8001ad0:	f7fe fec4 	bl	800085c <__aeabi_ddiv>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	4610      	mov	r0, r2
 8001ada:	4619      	mov	r1, r3
 8001adc:	f7ff f86c 	bl	8000bb8 <__aeabi_d2f>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	490f      	ldr	r1, [pc, #60]	; (8001b20 <showAdcData+0xd0>)
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	440b      	add	r3, r1
 8001aea:	601a      	str	r2, [r3, #0]
	for(int i=0; i<SHOW_SIZE; i++){
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	3301      	adds	r3, #1
 8001af0:	60fb      	str	r3, [r7, #12]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8001af8:	dbcb      	blt.n	8001a92 <showAdcData+0x42>
	}
	drawGraph(adc_phy, SHOW_SIZE, 0.005);
 8001afa:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8001b24 <showAdcData+0xd4>
 8001afe:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001b02:	4807      	ldr	r0, [pc, #28]	; (8001b20 <showAdcData+0xd0>)
 8001b04:	f7ff fdc4 	bl	8001690 <drawGraph>
}
 8001b08:	bf00      	nop
 8001b0a:	3718      	adds	r7, #24
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	66666666 	.word	0x66666666
 8001b14:	400a6666 	.word	0x400a6666
 8001b18:	20000224 	.word	0x20000224
 8001b1c:	40b00000 	.word	0x40b00000
 8001b20:	200006d4 	.word	0x200006d4
 8001b24:	3ba3d70a 	.word	0x3ba3d70a

08001b28 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	4603      	mov	r3, r0
 8001b30:	80fb      	strh	r3, [r7, #6]
	printf("B1 pin is pushed (main.c)\n");
 8001b32:	480d      	ldr	r0, [pc, #52]	; (8001b68 <HAL_GPIO_EXTI_Callback+0x40>)
 8001b34:	f005 fc32 	bl	800739c <puts>

	/* Set AWDEN bits */
	hadc1.Instance->CR1 |=  ADC_CR1_AWDIE;
 8001b38:	4b0c      	ldr	r3, [pc, #48]	; (8001b6c <HAL_GPIO_EXTI_Callback+0x44>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	685a      	ldr	r2, [r3, #4]
 8001b3e:	4b0b      	ldr	r3, [pc, #44]	; (8001b6c <HAL_GPIO_EXTI_Callback+0x44>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b46:	605a      	str	r2, [r3, #4]

	/* Start a timer for ADC trigger */
	htim3.Instance->CR1 |= TIM_CR1_CEN;
 8001b48:	4b09      	ldr	r3, [pc, #36]	; (8001b70 <HAL_GPIO_EXTI_Callback+0x48>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	4b08      	ldr	r3, [pc, #32]	; (8001b70 <HAL_GPIO_EXTI_Callback+0x48>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f042 0201 	orr.w	r2, r2, #1
 8001b56:	601a      	str	r2, [r3, #0]

	g_is_trig_stop = FALSE;
 8001b58:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	601a      	str	r2, [r3, #0]

}
 8001b5e:	bf00      	nop
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	0800983c 	.word	0x0800983c
 8001b6c:	20000c24 	.word	0x20000c24
 8001b70:	20000bdc 	.word	0x20000bdc
 8001b74:	20000b84 	.word	0x20000b84

08001b78 <HAL_ADC_LevelOutOfWindowCallback>:

void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
	//trig_ndtr = hdma_adc1.Instance->NDTR;

	// Start a timer to stop sampling after 1 millisecond (200 point @200kHz sampling)
	HAL_TIM_OC_Start_IT(&htim5, TIM_CHANNEL_2);
 8001b80:	2104      	movs	r1, #4
 8001b82:	480b      	ldr	r0, [pc, #44]	; (8001bb0 <HAL_ADC_LevelOutOfWindowCallback+0x38>)
 8001b84:	f003 f962 	bl	8004e4c <HAL_TIM_OC_Start_IT>
	htim5.Instance->CR1 |= TIM_CR1_CEN;
 8001b88:	4b09      	ldr	r3, [pc, #36]	; (8001bb0 <HAL_ADC_LevelOutOfWindowCallback+0x38>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	4b08      	ldr	r3, [pc, #32]	; (8001bb0 <HAL_ADC_LevelOutOfWindowCallback+0x38>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f042 0201 	orr.w	r2, r2, #1
 8001b96:	601a      	str	r2, [r3, #0]

	/* Clear AWDEN bits */
	hadc->Instance->CR1 &=  ~(ADC_CR1_AWDIE);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	685a      	ldr	r2, [r3, #4]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ba6:	605a      	str	r2, [r3, #4]

	//printf("Analog Watchdog (main.c)\n");
	//printf("DMA NDT: %d\n", hdma_adc1.Instance->NDTR);

}
 8001ba8:	bf00      	nop
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	20000b94 	.word	0x20000b94

08001bb4 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
	htim3.Instance->CR1 &= ~(TIM_CR1_CEN);
 8001bbc:	4b08      	ldr	r3, [pc, #32]	; (8001be0 <HAL_TIM_OC_DelayElapsedCallback+0x2c>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	4b07      	ldr	r3, [pc, #28]	; (8001be0 <HAL_TIM_OC_DelayElapsedCallback+0x2c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f022 0201 	bic.w	r2, r2, #1
 8001bca:	601a      	str	r2, [r3, #0]
	g_is_trig_stop = TRUE;
 8001bcc:	4b05      	ldr	r3, [pc, #20]	; (8001be4 <HAL_TIM_OC_DelayElapsedCallback+0x30>)
 8001bce:	2201      	movs	r2, #1
 8001bd0:	601a      	str	r2, [r3, #0]

}
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	20000bdc 	.word	0x20000bdc
 8001be4:	20000b84 	.word	0x20000b84

08001be8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bec:	b672      	cpsid	i
}
 8001bee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bf0:	e7fe      	b.n	8001bf0 <Error_Handler+0x8>
	...

08001bf4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	607b      	str	r3, [r7, #4]
 8001bfe:	4b10      	ldr	r3, [pc, #64]	; (8001c40 <HAL_MspInit+0x4c>)
 8001c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c02:	4a0f      	ldr	r2, [pc, #60]	; (8001c40 <HAL_MspInit+0x4c>)
 8001c04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c08:	6453      	str	r3, [r2, #68]	; 0x44
 8001c0a:	4b0d      	ldr	r3, [pc, #52]	; (8001c40 <HAL_MspInit+0x4c>)
 8001c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c12:	607b      	str	r3, [r7, #4]
 8001c14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	603b      	str	r3, [r7, #0]
 8001c1a:	4b09      	ldr	r3, [pc, #36]	; (8001c40 <HAL_MspInit+0x4c>)
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	4a08      	ldr	r2, [pc, #32]	; (8001c40 <HAL_MspInit+0x4c>)
 8001c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c24:	6413      	str	r3, [r2, #64]	; 0x40
 8001c26:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <HAL_MspInit+0x4c>)
 8001c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c2e:	603b      	str	r3, [r7, #0]
 8001c30:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001c32:	2007      	movs	r0, #7
 8001c34:	f001 fa48 	bl	80030c8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c38:	bf00      	nop
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40023800 	.word	0x40023800

08001c44 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b08a      	sub	sp, #40	; 0x28
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c4c:	f107 0314 	add.w	r3, r7, #20
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	60da      	str	r2, [r3, #12]
 8001c5a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a33      	ldr	r2, [pc, #204]	; (8001d30 <HAL_ADC_MspInit+0xec>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d160      	bne.n	8001d28 <HAL_ADC_MspInit+0xe4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	613b      	str	r3, [r7, #16]
 8001c6a:	4b32      	ldr	r3, [pc, #200]	; (8001d34 <HAL_ADC_MspInit+0xf0>)
 8001c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6e:	4a31      	ldr	r2, [pc, #196]	; (8001d34 <HAL_ADC_MspInit+0xf0>)
 8001c70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c74:	6453      	str	r3, [r2, #68]	; 0x44
 8001c76:	4b2f      	ldr	r3, [pc, #188]	; (8001d34 <HAL_ADC_MspInit+0xf0>)
 8001c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c7e:	613b      	str	r3, [r7, #16]
 8001c80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c82:	2300      	movs	r3, #0
 8001c84:	60fb      	str	r3, [r7, #12]
 8001c86:	4b2b      	ldr	r3, [pc, #172]	; (8001d34 <HAL_ADC_MspInit+0xf0>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	4a2a      	ldr	r2, [pc, #168]	; (8001d34 <HAL_ADC_MspInit+0xf0>)
 8001c8c:	f043 0301 	orr.w	r3, r3, #1
 8001c90:	6313      	str	r3, [r2, #48]	; 0x30
 8001c92:	4b28      	ldr	r3, [pc, #160]	; (8001d34 <HAL_ADC_MspInit+0xf0>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001caa:	f107 0314 	add.w	r3, r7, #20
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4821      	ldr	r0, [pc, #132]	; (8001d38 <HAL_ADC_MspInit+0xf4>)
 8001cb2:	f001 fdbb 	bl	800382c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001cb6:	4b21      	ldr	r3, [pc, #132]	; (8001d3c <HAL_ADC_MspInit+0xf8>)
 8001cb8:	4a21      	ldr	r2, [pc, #132]	; (8001d40 <HAL_ADC_MspInit+0xfc>)
 8001cba:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001cbc:	4b1f      	ldr	r3, [pc, #124]	; (8001d3c <HAL_ADC_MspInit+0xf8>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cc2:	4b1e      	ldr	r3, [pc, #120]	; (8001d3c <HAL_ADC_MspInit+0xf8>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cc8:	4b1c      	ldr	r3, [pc, #112]	; (8001d3c <HAL_ADC_MspInit+0xf8>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001cce:	4b1b      	ldr	r3, [pc, #108]	; (8001d3c <HAL_ADC_MspInit+0xf8>)
 8001cd0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cd4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001cd6:	4b19      	ldr	r3, [pc, #100]	; (8001d3c <HAL_ADC_MspInit+0xf8>)
 8001cd8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001cdc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001cde:	4b17      	ldr	r3, [pc, #92]	; (8001d3c <HAL_ADC_MspInit+0xf8>)
 8001ce0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ce4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001ce6:	4b15      	ldr	r3, [pc, #84]	; (8001d3c <HAL_ADC_MspInit+0xf8>)
 8001ce8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cec:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001cee:	4b13      	ldr	r3, [pc, #76]	; (8001d3c <HAL_ADC_MspInit+0xf8>)
 8001cf0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001cf4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cf6:	4b11      	ldr	r3, [pc, #68]	; (8001d3c <HAL_ADC_MspInit+0xf8>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001cfc:	480f      	ldr	r0, [pc, #60]	; (8001d3c <HAL_ADC_MspInit+0xf8>)
 8001cfe:	f001 fa25 	bl	800314c <HAL_DMA_Init>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001d08:	f7ff ff6e 	bl	8001be8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	4a0b      	ldr	r2, [pc, #44]	; (8001d3c <HAL_ADC_MspInit+0xf8>)
 8001d10:	639a      	str	r2, [r3, #56]	; 0x38
 8001d12:	4a0a      	ldr	r2, [pc, #40]	; (8001d3c <HAL_ADC_MspInit+0xf8>)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001d18:	2200      	movs	r2, #0
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	2012      	movs	r0, #18
 8001d1e:	f001 f9de 	bl	80030de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001d22:	2012      	movs	r0, #18
 8001d24:	f001 f9f7 	bl	8003116 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d28:	bf00      	nop
 8001d2a:	3728      	adds	r7, #40	; 0x28
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40012000 	.word	0x40012000
 8001d34:	40023800 	.word	0x40023800
 8001d38:	40020000 	.word	0x40020000
 8001d3c:	20000c6c 	.word	0x20000c6c
 8001d40:	40026410 	.word	0x40026410

08001d44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b08a      	sub	sp, #40	; 0x28
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d4c:	f107 0314 	add.w	r3, r7, #20
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	605a      	str	r2, [r3, #4]
 8001d56:	609a      	str	r2, [r3, #8]
 8001d58:	60da      	str	r2, [r3, #12]
 8001d5a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a30      	ldr	r2, [pc, #192]	; (8001e24 <HAL_SPI_MspInit+0xe0>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d15a      	bne.n	8001e1c <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d66:	2300      	movs	r3, #0
 8001d68:	613b      	str	r3, [r7, #16]
 8001d6a:	4b2f      	ldr	r3, [pc, #188]	; (8001e28 <HAL_SPI_MspInit+0xe4>)
 8001d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6e:	4a2e      	ldr	r2, [pc, #184]	; (8001e28 <HAL_SPI_MspInit+0xe4>)
 8001d70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d74:	6453      	str	r3, [r2, #68]	; 0x44
 8001d76:	4b2c      	ldr	r3, [pc, #176]	; (8001e28 <HAL_SPI_MspInit+0xe4>)
 8001d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d7e:	613b      	str	r3, [r7, #16]
 8001d80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d82:	2300      	movs	r3, #0
 8001d84:	60fb      	str	r3, [r7, #12]
 8001d86:	4b28      	ldr	r3, [pc, #160]	; (8001e28 <HAL_SPI_MspInit+0xe4>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	4a27      	ldr	r2, [pc, #156]	; (8001e28 <HAL_SPI_MspInit+0xe4>)
 8001d8c:	f043 0301 	orr.w	r3, r3, #1
 8001d90:	6313      	str	r3, [r2, #48]	; 0x30
 8001d92:	4b25      	ldr	r3, [pc, #148]	; (8001e28 <HAL_SPI_MspInit+0xe4>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001d9e:	23e0      	movs	r3, #224	; 0xe0
 8001da0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da2:	2302      	movs	r3, #2
 8001da4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da6:	2300      	movs	r3, #0
 8001da8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001daa:	2303      	movs	r3, #3
 8001dac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001dae:	2305      	movs	r3, #5
 8001db0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db2:	f107 0314 	add.w	r3, r7, #20
 8001db6:	4619      	mov	r1, r3
 8001db8:	481c      	ldr	r0, [pc, #112]	; (8001e2c <HAL_SPI_MspInit+0xe8>)
 8001dba:	f001 fd37 	bl	800382c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001dbe:	4b1c      	ldr	r3, [pc, #112]	; (8001e30 <HAL_SPI_MspInit+0xec>)
 8001dc0:	4a1c      	ldr	r2, [pc, #112]	; (8001e34 <HAL_SPI_MspInit+0xf0>)
 8001dc2:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001dc4:	4b1a      	ldr	r3, [pc, #104]	; (8001e30 <HAL_SPI_MspInit+0xec>)
 8001dc6:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001dca:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001dcc:	4b18      	ldr	r3, [pc, #96]	; (8001e30 <HAL_SPI_MspInit+0xec>)
 8001dce:	2240      	movs	r2, #64	; 0x40
 8001dd0:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dd2:	4b17      	ldr	r3, [pc, #92]	; (8001e30 <HAL_SPI_MspInit+0xec>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001dd8:	4b15      	ldr	r3, [pc, #84]	; (8001e30 <HAL_SPI_MspInit+0xec>)
 8001dda:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dde:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001de0:	4b13      	ldr	r3, [pc, #76]	; (8001e30 <HAL_SPI_MspInit+0xec>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001de6:	4b12      	ldr	r3, [pc, #72]	; (8001e30 <HAL_SPI_MspInit+0xec>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001dec:	4b10      	ldr	r3, [pc, #64]	; (8001e30 <HAL_SPI_MspInit+0xec>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001df2:	4b0f      	ldr	r3, [pc, #60]	; (8001e30 <HAL_SPI_MspInit+0xec>)
 8001df4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001df8:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001dfa:	4b0d      	ldr	r3, [pc, #52]	; (8001e30 <HAL_SPI_MspInit+0xec>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001e00:	480b      	ldr	r0, [pc, #44]	; (8001e30 <HAL_SPI_MspInit+0xec>)
 8001e02:	f001 f9a3 	bl	800314c <HAL_DMA_Init>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8001e0c:	f7ff feec 	bl	8001be8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4a07      	ldr	r2, [pc, #28]	; (8001e30 <HAL_SPI_MspInit+0xec>)
 8001e14:	649a      	str	r2, [r3, #72]	; 0x48
 8001e16:	4a06      	ldr	r2, [pc, #24]	; (8001e30 <HAL_SPI_MspInit+0xec>)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001e1c:	bf00      	nop
 8001e1e:	3728      	adds	r7, #40	; 0x28
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40013000 	.word	0x40013000
 8001e28:	40023800 	.word	0x40023800
 8001e2c:	40020000 	.word	0x40020000
 8001e30:	20000db0 	.word	0x20000db0
 8001e34:	40026458 	.word	0x40026458

08001e38 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e48:	d10e      	bne.n	8001e68 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60fb      	str	r3, [r7, #12]
 8001e4e:	4b13      	ldr	r3, [pc, #76]	; (8001e9c <HAL_TIM_PWM_MspInit+0x64>)
 8001e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e52:	4a12      	ldr	r2, [pc, #72]	; (8001e9c <HAL_TIM_PWM_MspInit+0x64>)
 8001e54:	f043 0301 	orr.w	r3, r3, #1
 8001e58:	6413      	str	r3, [r2, #64]	; 0x40
 8001e5a:	4b10      	ldr	r3, [pc, #64]	; (8001e9c <HAL_TIM_PWM_MspInit+0x64>)
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001e66:	e012      	b.n	8001e8e <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM3)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a0c      	ldr	r2, [pc, #48]	; (8001ea0 <HAL_TIM_PWM_MspInit+0x68>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d10d      	bne.n	8001e8e <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e72:	2300      	movs	r3, #0
 8001e74:	60bb      	str	r3, [r7, #8]
 8001e76:	4b09      	ldr	r3, [pc, #36]	; (8001e9c <HAL_TIM_PWM_MspInit+0x64>)
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	4a08      	ldr	r2, [pc, #32]	; (8001e9c <HAL_TIM_PWM_MspInit+0x64>)
 8001e7c:	f043 0302 	orr.w	r3, r3, #2
 8001e80:	6413      	str	r3, [r2, #64]	; 0x40
 8001e82:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <HAL_TIM_PWM_MspInit+0x64>)
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	f003 0302 	and.w	r3, r3, #2
 8001e8a:	60bb      	str	r3, [r7, #8]
 8001e8c:	68bb      	ldr	r3, [r7, #8]
}
 8001e8e:	bf00      	nop
 8001e90:	3714      	adds	r7, #20
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	40023800 	.word	0x40023800
 8001ea0:	40000400 	.word	0x40000400

08001ea4 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM5)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a0e      	ldr	r2, [pc, #56]	; (8001eec <HAL_TIM_OC_MspInit+0x48>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d115      	bne.n	8001ee2 <HAL_TIM_OC_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	4b0d      	ldr	r3, [pc, #52]	; (8001ef0 <HAL_TIM_OC_MspInit+0x4c>)
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	4a0c      	ldr	r2, [pc, #48]	; (8001ef0 <HAL_TIM_OC_MspInit+0x4c>)
 8001ec0:	f043 0308 	orr.w	r3, r3, #8
 8001ec4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ec6:	4b0a      	ldr	r3, [pc, #40]	; (8001ef0 <HAL_TIM_OC_MspInit+0x4c>)
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	f003 0308 	and.w	r3, r3, #8
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	2032      	movs	r0, #50	; 0x32
 8001ed8:	f001 f901 	bl	80030de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001edc:	2032      	movs	r0, #50	; 0x32
 8001ede:	f001 f91a 	bl	8003116 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001ee2:	bf00      	nop
 8001ee4:	3710      	adds	r7, #16
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40000c00 	.word	0x40000c00
 8001ef0:	40023800 	.word	0x40023800

08001ef4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b08a      	sub	sp, #40	; 0x28
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001efc:	f107 0314 	add.w	r3, r7, #20
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	605a      	str	r2, [r3, #4]
 8001f06:	609a      	str	r2, [r3, #8]
 8001f08:	60da      	str	r2, [r3, #12]
 8001f0a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f14:	d11f      	bne.n	8001f56 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f16:	2300      	movs	r3, #0
 8001f18:	613b      	str	r3, [r7, #16]
 8001f1a:	4b22      	ldr	r3, [pc, #136]	; (8001fa4 <HAL_TIM_MspPostInit+0xb0>)
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1e:	4a21      	ldr	r2, [pc, #132]	; (8001fa4 <HAL_TIM_MspPostInit+0xb0>)
 8001f20:	f043 0302 	orr.w	r3, r3, #2
 8001f24:	6313      	str	r3, [r2, #48]	; 0x30
 8001f26:	4b1f      	ldr	r3, [pc, #124]	; (8001fa4 <HAL_TIM_MspPostInit+0xb0>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	613b      	str	r3, [r7, #16]
 8001f30:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f38:	2302      	movs	r3, #2
 8001f3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f40:	2300      	movs	r3, #0
 8001f42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f44:	2301      	movs	r3, #1
 8001f46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f48:	f107 0314 	add.w	r3, r7, #20
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4816      	ldr	r0, [pc, #88]	; (8001fa8 <HAL_TIM_MspPostInit+0xb4>)
 8001f50:	f001 fc6c 	bl	800382c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001f54:	e022      	b.n	8001f9c <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a14      	ldr	r2, [pc, #80]	; (8001fac <HAL_TIM_MspPostInit+0xb8>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d11d      	bne.n	8001f9c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f60:	2300      	movs	r3, #0
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	4b0f      	ldr	r3, [pc, #60]	; (8001fa4 <HAL_TIM_MspPostInit+0xb0>)
 8001f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f68:	4a0e      	ldr	r2, [pc, #56]	; (8001fa4 <HAL_TIM_MspPostInit+0xb0>)
 8001f6a:	f043 0304 	orr.w	r3, r3, #4
 8001f6e:	6313      	str	r3, [r2, #48]	; 0x30
 8001f70:	4b0c      	ldr	r3, [pc, #48]	; (8001fa4 <HAL_TIM_MspPostInit+0xb0>)
 8001f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f74:	f003 0304 	and.w	r3, r3, #4
 8001f78:	60fb      	str	r3, [r7, #12]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f7c:	2340      	movs	r3, #64	; 0x40
 8001f7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f80:	2302      	movs	r3, #2
 8001f82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f84:	2300      	movs	r3, #0
 8001f86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f90:	f107 0314 	add.w	r3, r7, #20
 8001f94:	4619      	mov	r1, r3
 8001f96:	4806      	ldr	r0, [pc, #24]	; (8001fb0 <HAL_TIM_MspPostInit+0xbc>)
 8001f98:	f001 fc48 	bl	800382c <HAL_GPIO_Init>
}
 8001f9c:	bf00      	nop
 8001f9e:	3728      	adds	r7, #40	; 0x28
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	40020400 	.word	0x40020400
 8001fac:	40000400 	.word	0x40000400
 8001fb0:	40020800 	.word	0x40020800

08001fb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b08a      	sub	sp, #40	; 0x28
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fbc:	f107 0314 	add.w	r3, r7, #20
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	605a      	str	r2, [r3, #4]
 8001fc6:	609a      	str	r2, [r3, #8]
 8001fc8:	60da      	str	r2, [r3, #12]
 8001fca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a19      	ldr	r2, [pc, #100]	; (8002038 <HAL_UART_MspInit+0x84>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d12b      	bne.n	800202e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	613b      	str	r3, [r7, #16]
 8001fda:	4b18      	ldr	r3, [pc, #96]	; (800203c <HAL_UART_MspInit+0x88>)
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fde:	4a17      	ldr	r2, [pc, #92]	; (800203c <HAL_UART_MspInit+0x88>)
 8001fe0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fe4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fe6:	4b15      	ldr	r3, [pc, #84]	; (800203c <HAL_UART_MspInit+0x88>)
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fee:	613b      	str	r3, [r7, #16]
 8001ff0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	60fb      	str	r3, [r7, #12]
 8001ff6:	4b11      	ldr	r3, [pc, #68]	; (800203c <HAL_UART_MspInit+0x88>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffa:	4a10      	ldr	r2, [pc, #64]	; (800203c <HAL_UART_MspInit+0x88>)
 8001ffc:	f043 0301 	orr.w	r3, r3, #1
 8002000:	6313      	str	r3, [r2, #48]	; 0x30
 8002002:	4b0e      	ldr	r3, [pc, #56]	; (800203c <HAL_UART_MspInit+0x88>)
 8002004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	60fb      	str	r3, [r7, #12]
 800200c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800200e:	230c      	movs	r3, #12
 8002010:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002012:	2302      	movs	r3, #2
 8002014:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002016:	2300      	movs	r3, #0
 8002018:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800201a:	2300      	movs	r3, #0
 800201c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800201e:	2307      	movs	r3, #7
 8002020:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002022:	f107 0314 	add.w	r3, r7, #20
 8002026:	4619      	mov	r1, r3
 8002028:	4805      	ldr	r0, [pc, #20]	; (8002040 <HAL_UART_MspInit+0x8c>)
 800202a:	f001 fbff 	bl	800382c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800202e:	bf00      	nop
 8002030:	3728      	adds	r7, #40	; 0x28
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40004400 	.word	0x40004400
 800203c:	40023800 	.word	0x40023800
 8002040:	40020000 	.word	0x40020000

08002044 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002048:	e7fe      	b.n	8002048 <NMI_Handler+0x4>

0800204a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800204a:	b480      	push	{r7}
 800204c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800204e:	e7fe      	b.n	800204e <HardFault_Handler+0x4>

08002050 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002054:	e7fe      	b.n	8002054 <MemManage_Handler+0x4>

08002056 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002056:	b480      	push	{r7}
 8002058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800205a:	e7fe      	b.n	800205a <BusFault_Handler+0x4>

0800205c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002060:	e7fe      	b.n	8002060 <UsageFault_Handler+0x4>

08002062 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002062:	b480      	push	{r7}
 8002064:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002066:	bf00      	nop
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002074:	bf00      	nop
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr

0800207e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800207e:	b480      	push	{r7}
 8002080:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002082:	bf00      	nop
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002090:	f000 f96a 	bl	8002368 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002094:	bf00      	nop
 8002096:	bd80      	pop	{r7, pc}

08002098 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800209c:	4802      	ldr	r0, [pc, #8]	; (80020a8 <ADC_IRQHandler+0x10>)
 800209e:	f000 f9ea 	bl	8002476 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80020a2:	bf00      	nop
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	20000c24 	.word	0x20000c24

080020ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80020b0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80020b4:	f001 fd58 	bl	8003b68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80020b8:	bf00      	nop
 80020ba:	bd80      	pop	{r7, pc}

080020bc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80020c0:	4802      	ldr	r0, [pc, #8]	; (80020cc <TIM5_IRQHandler+0x10>)
 80020c2:	f003 f86a 	bl	800519a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80020c6:	bf00      	nop
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	20000b94 	.word	0x20000b94

080020d0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80020d4:	4802      	ldr	r0, [pc, #8]	; (80020e0 <DMA2_Stream0_IRQHandler+0x10>)
 80020d6:	f001 f93f 	bl	8003358 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80020da:	bf00      	nop
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	20000c6c 	.word	0x20000c6c

080020e4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80020e8:	4802      	ldr	r0, [pc, #8]	; (80020f4 <DMA2_Stream3_IRQHandler+0x10>)
 80020ea:	f001 f935 	bl	8003358 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80020ee:	bf00      	nop
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	20000db0 	.word	0x20000db0

080020f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
	return 1;
 80020fc:	2301      	movs	r3, #1
}
 80020fe:	4618      	mov	r0, r3
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <_kill>:

int _kill(int pid, int sig)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002112:	f004 fc39 	bl	8006988 <__errno>
 8002116:	4603      	mov	r3, r0
 8002118:	2216      	movs	r2, #22
 800211a:	601a      	str	r2, [r3, #0]
	return -1;
 800211c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002120:	4618      	mov	r0, r3
 8002122:	3708      	adds	r7, #8
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <_exit>:

void _exit (int status)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002130:	f04f 31ff 	mov.w	r1, #4294967295
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f7ff ffe7 	bl	8002108 <_kill>
	while (1) {}		/* Make sure we hang here */
 800213a:	e7fe      	b.n	800213a <_exit+0x12>

0800213c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002148:	2300      	movs	r3, #0
 800214a:	617b      	str	r3, [r7, #20]
 800214c:	e00a      	b.n	8002164 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800214e:	f3af 8000 	nop.w
 8002152:	4601      	mov	r1, r0
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	1c5a      	adds	r2, r3, #1
 8002158:	60ba      	str	r2, [r7, #8]
 800215a:	b2ca      	uxtb	r2, r1
 800215c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	3301      	adds	r3, #1
 8002162:	617b      	str	r3, [r7, #20]
 8002164:	697a      	ldr	r2, [r7, #20]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	429a      	cmp	r2, r3
 800216a:	dbf0      	blt.n	800214e <_read+0x12>
	}

return len;
 800216c:	687b      	ldr	r3, [r7, #4]
}
 800216e:	4618      	mov	r0, r3
 8002170:	3718      	adds	r7, #24
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002176:	b480      	push	{r7}
 8002178:	b083      	sub	sp, #12
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
	return -1;
 800217e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002182:	4618      	mov	r0, r3
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr

0800218e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800218e:	b480      	push	{r7}
 8002190:	b083      	sub	sp, #12
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
 8002196:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800219e:	605a      	str	r2, [r3, #4]
	return 0;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr

080021ae <_isatty>:

int _isatty(int file)
{
 80021ae:	b480      	push	{r7}
 80021b0:	b083      	sub	sp, #12
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
	return 1;
 80021b6:	2301      	movs	r3, #1
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
	return 0;
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3714      	adds	r7, #20
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
	...

080021e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021e8:	4a14      	ldr	r2, [pc, #80]	; (800223c <_sbrk+0x5c>)
 80021ea:	4b15      	ldr	r3, [pc, #84]	; (8002240 <_sbrk+0x60>)
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021f4:	4b13      	ldr	r3, [pc, #76]	; (8002244 <_sbrk+0x64>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d102      	bne.n	8002202 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021fc:	4b11      	ldr	r3, [pc, #68]	; (8002244 <_sbrk+0x64>)
 80021fe:	4a12      	ldr	r2, [pc, #72]	; (8002248 <_sbrk+0x68>)
 8002200:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002202:	4b10      	ldr	r3, [pc, #64]	; (8002244 <_sbrk+0x64>)
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4413      	add	r3, r2
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	429a      	cmp	r2, r3
 800220e:	d207      	bcs.n	8002220 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002210:	f004 fbba 	bl	8006988 <__errno>
 8002214:	4603      	mov	r3, r0
 8002216:	220c      	movs	r2, #12
 8002218:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800221a:	f04f 33ff 	mov.w	r3, #4294967295
 800221e:	e009      	b.n	8002234 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002220:	4b08      	ldr	r3, [pc, #32]	; (8002244 <_sbrk+0x64>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002226:	4b07      	ldr	r3, [pc, #28]	; (8002244 <_sbrk+0x64>)
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4413      	add	r3, r2
 800222e:	4a05      	ldr	r2, [pc, #20]	; (8002244 <_sbrk+0x64>)
 8002230:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002232:	68fb      	ldr	r3, [r7, #12]
}
 8002234:	4618      	mov	r0, r3
 8002236:	3718      	adds	r7, #24
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	20018000 	.word	0x20018000
 8002240:	00000400 	.word	0x00000400
 8002244:	20000b88 	.word	0x20000b88
 8002248:	20017638 	.word	0x20017638

0800224c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002250:	4b06      	ldr	r3, [pc, #24]	; (800226c <SystemInit+0x20>)
 8002252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002256:	4a05      	ldr	r2, [pc, #20]	; (800226c <SystemInit+0x20>)
 8002258:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800225c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002260:	bf00      	nop
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	e000ed00 	.word	0xe000ed00

08002270 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002270:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002274:	480d      	ldr	r0, [pc, #52]	; (80022ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002276:	490e      	ldr	r1, [pc, #56]	; (80022b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002278:	4a0e      	ldr	r2, [pc, #56]	; (80022b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800227a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800227c:	e002      	b.n	8002284 <LoopCopyDataInit>

0800227e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800227e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002280:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002282:	3304      	adds	r3, #4

08002284 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002284:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002286:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002288:	d3f9      	bcc.n	800227e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800228a:	4a0b      	ldr	r2, [pc, #44]	; (80022b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800228c:	4c0b      	ldr	r4, [pc, #44]	; (80022bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800228e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002290:	e001      	b.n	8002296 <LoopFillZerobss>

08002292 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002292:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002294:	3204      	adds	r2, #4

08002296 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002296:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002298:	d3fb      	bcc.n	8002292 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800229a:	f7ff ffd7 	bl	800224c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800229e:	f004 fb79 	bl	8006994 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022a2:	f7fe fe7d 	bl	8000fa0 <main>
  bx  lr    
 80022a6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80022a8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80022ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022b0:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 80022b4:	0800a6cc 	.word	0x0800a6cc
  ldr r2, =_sbss
 80022b8:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 80022bc:	20017634 	.word	0x20017634

080022c0 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022c0:	e7fe      	b.n	80022c0 <DMA1_Stream0_IRQHandler>
	...

080022c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022c8:	4b0e      	ldr	r3, [pc, #56]	; (8002304 <HAL_Init+0x40>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a0d      	ldr	r2, [pc, #52]	; (8002304 <HAL_Init+0x40>)
 80022ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022d4:	4b0b      	ldr	r3, [pc, #44]	; (8002304 <HAL_Init+0x40>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a0a      	ldr	r2, [pc, #40]	; (8002304 <HAL_Init+0x40>)
 80022da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022e0:	4b08      	ldr	r3, [pc, #32]	; (8002304 <HAL_Init+0x40>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a07      	ldr	r2, [pc, #28]	; (8002304 <HAL_Init+0x40>)
 80022e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022ec:	2003      	movs	r0, #3
 80022ee:	f000 feeb 	bl	80030c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022f2:	2000      	movs	r0, #0
 80022f4:	f000 f808 	bl	8002308 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022f8:	f7ff fc7c 	bl	8001bf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	40023c00 	.word	0x40023c00

08002308 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002310:	4b12      	ldr	r3, [pc, #72]	; (800235c <HAL_InitTick+0x54>)
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	4b12      	ldr	r3, [pc, #72]	; (8002360 <HAL_InitTick+0x58>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	4619      	mov	r1, r3
 800231a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800231e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002322:	fbb2 f3f3 	udiv	r3, r2, r3
 8002326:	4618      	mov	r0, r3
 8002328:	f000 ff03 	bl	8003132 <HAL_SYSTICK_Config>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e00e      	b.n	8002354 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2b0f      	cmp	r3, #15
 800233a:	d80a      	bhi.n	8002352 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800233c:	2200      	movs	r2, #0
 800233e:	6879      	ldr	r1, [r7, #4]
 8002340:	f04f 30ff 	mov.w	r0, #4294967295
 8002344:	f000 fecb 	bl	80030de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002348:	4a06      	ldr	r2, [pc, #24]	; (8002364 <HAL_InitTick+0x5c>)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800234e:	2300      	movs	r3, #0
 8002350:	e000      	b.n	8002354 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
}
 8002354:	4618      	mov	r0, r3
 8002356:	3708      	adds	r7, #8
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	20000000 	.word	0x20000000
 8002360:	20000008 	.word	0x20000008
 8002364:	20000004 	.word	0x20000004

08002368 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800236c:	4b06      	ldr	r3, [pc, #24]	; (8002388 <HAL_IncTick+0x20>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	461a      	mov	r2, r3
 8002372:	4b06      	ldr	r3, [pc, #24]	; (800238c <HAL_IncTick+0x24>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4413      	add	r3, r2
 8002378:	4a04      	ldr	r2, [pc, #16]	; (800238c <HAL_IncTick+0x24>)
 800237a:	6013      	str	r3, [r2, #0]
}
 800237c:	bf00      	nop
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	20000008 	.word	0x20000008
 800238c:	20000e10 	.word	0x20000e10

08002390 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  return uwTick;
 8002394:	4b03      	ldr	r3, [pc, #12]	; (80023a4 <HAL_GetTick+0x14>)
 8002396:	681b      	ldr	r3, [r3, #0]
}
 8002398:	4618      	mov	r0, r3
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	20000e10 	.word	0x20000e10

080023a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023b0:	f7ff ffee 	bl	8002390 <HAL_GetTick>
 80023b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c0:	d005      	beq.n	80023ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023c2:	4b0a      	ldr	r3, [pc, #40]	; (80023ec <HAL_Delay+0x44>)
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	461a      	mov	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	4413      	add	r3, r2
 80023cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023ce:	bf00      	nop
 80023d0:	f7ff ffde 	bl	8002390 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	68fa      	ldr	r2, [r7, #12]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d8f7      	bhi.n	80023d0 <HAL_Delay+0x28>
  {
  }
}
 80023e0:	bf00      	nop
 80023e2:	bf00      	nop
 80023e4:	3710      	adds	r7, #16
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	20000008 	.word	0x20000008

080023f0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023f8:	2300      	movs	r3, #0
 80023fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d101      	bne.n	8002406 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e033      	b.n	800246e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240a:	2b00      	cmp	r3, #0
 800240c:	d109      	bne.n	8002422 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f7ff fc18 	bl	8001c44 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	f003 0310 	and.w	r3, r3, #16
 800242a:	2b00      	cmp	r3, #0
 800242c:	d118      	bne.n	8002460 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002432:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002436:	f023 0302 	bic.w	r3, r3, #2
 800243a:	f043 0202 	orr.w	r2, r3, #2
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f000 fbe8 	bl	8002c18 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002452:	f023 0303 	bic.w	r3, r3, #3
 8002456:	f043 0201 	orr.w	r2, r3, #1
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	641a      	str	r2, [r3, #64]	; 0x40
 800245e:	e001      	b.n	8002464 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800246c:	7bfb      	ldrb	r3, [r7, #15]
}
 800246e:	4618      	mov	r0, r3
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b084      	sub	sp, #16
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800247e:	2300      	movs	r3, #0
 8002480:	60fb      	str	r3, [r7, #12]
 8002482:	2300      	movs	r3, #0
 8002484:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	2b02      	cmp	r3, #2
 8002492:	bf0c      	ite	eq
 8002494:	2301      	moveq	r3, #1
 8002496:	2300      	movne	r3, #0
 8002498:	b2db      	uxtb	r3, r3
 800249a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f003 0320 	and.w	r3, r3, #32
 80024a6:	2b20      	cmp	r3, #32
 80024a8:	bf0c      	ite	eq
 80024aa:	2301      	moveq	r3, #1
 80024ac:	2300      	movne	r3, #0
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d049      	beq.n	800254c <HAL_ADC_IRQHandler+0xd6>
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d046      	beq.n	800254c <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c2:	f003 0310 	and.w	r3, r3, #16
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d105      	bne.n	80024d6 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d12b      	bne.n	800253c <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d127      	bne.n	800253c <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d006      	beq.n	8002508 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002504:	2b00      	cmp	r3, #0
 8002506:	d119      	bne.n	800253c <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	685a      	ldr	r2, [r3, #4]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f022 0220 	bic.w	r2, r2, #32
 8002516:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002528:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d105      	bne.n	800253c <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002534:	f043 0201 	orr.w	r2, r3, #1
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f000 f9cb 	bl	80028d8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f06f 0212 	mvn.w	r2, #18
 800254a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0304 	and.w	r3, r3, #4
 8002556:	2b04      	cmp	r3, #4
 8002558:	bf0c      	ite	eq
 800255a:	2301      	moveq	r3, #1
 800255c:	2300      	movne	r3, #0
 800255e:	b2db      	uxtb	r3, r3
 8002560:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800256c:	2b80      	cmp	r3, #128	; 0x80
 800256e:	bf0c      	ite	eq
 8002570:	2301      	moveq	r3, #1
 8002572:	2300      	movne	r3, #0
 8002574:	b2db      	uxtb	r3, r3
 8002576:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d057      	beq.n	800262e <HAL_ADC_IRQHandler+0x1b8>
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d054      	beq.n	800262e <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002588:	f003 0310 	and.w	r3, r3, #16
 800258c:	2b00      	cmp	r3, #0
 800258e:	d105      	bne.n	800259c <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002594:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d139      	bne.n	800261e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d006      	beq.n	80025c6 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d12b      	bne.n	800261e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d124      	bne.n	800261e <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d11d      	bne.n	800261e <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d119      	bne.n	800261e <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	685a      	ldr	r2, [r3, #4]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025f8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260e:	2b00      	cmp	r3, #0
 8002610:	d105      	bne.n	800261e <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002616:	f043 0201 	orr.w	r2, r3, #1
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 fc78 	bl	8002f14 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f06f 020c 	mvn.w	r2, #12
 800262c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0301 	and.w	r3, r3, #1
 8002638:	2b01      	cmp	r3, #1
 800263a:	bf0c      	ite	eq
 800263c:	2301      	moveq	r3, #1
 800263e:	2300      	movne	r3, #0
 8002640:	b2db      	uxtb	r3, r3
 8002642:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800264e:	2b40      	cmp	r3, #64	; 0x40
 8002650:	bf0c      	ite	eq
 8002652:	2301      	moveq	r3, #1
 8002654:	2300      	movne	r3, #0
 8002656:	b2db      	uxtb	r3, r3
 8002658:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d017      	beq.n	8002690 <HAL_ADC_IRQHandler+0x21a>
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d014      	beq.n	8002690 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0301 	and.w	r3, r3, #1
 8002670:	2b01      	cmp	r3, #1
 8002672:	d10d      	bne.n	8002690 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002678:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f7ff fa79 	bl	8001b78 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f06f 0201 	mvn.w	r2, #1
 800268e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0320 	and.w	r3, r3, #32
 800269a:	2b20      	cmp	r3, #32
 800269c:	bf0c      	ite	eq
 800269e:	2301      	moveq	r3, #1
 80026a0:	2300      	movne	r3, #0
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026b4:	bf0c      	ite	eq
 80026b6:	2301      	moveq	r3, #1
 80026b8:	2300      	movne	r3, #0
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d015      	beq.n	80026f0 <HAL_ADC_IRQHandler+0x27a>
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d012      	beq.n	80026f0 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ce:	f043 0202 	orr.w	r2, r3, #2
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f06f 0220 	mvn.w	r2, #32
 80026de:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f000 f90d 	bl	8002900 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f06f 0220 	mvn.w	r2, #32
 80026ee:	601a      	str	r2, [r3, #0]
  }
}
 80026f0:	bf00      	nop
 80026f2:	3710      	adds	r7, #16
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002704:	2300      	movs	r3, #0
 8002706:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800270e:	2b01      	cmp	r3, #1
 8002710:	d101      	bne.n	8002716 <HAL_ADC_Start_DMA+0x1e>
 8002712:	2302      	movs	r3, #2
 8002714:	e0ce      	b.n	80028b4 <HAL_ADC_Start_DMA+0x1bc>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2201      	movs	r2, #1
 800271a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	2b01      	cmp	r3, #1
 800272a:	d018      	beq.n	800275e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	689a      	ldr	r2, [r3, #8]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f042 0201 	orr.w	r2, r2, #1
 800273a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800273c:	4b5f      	ldr	r3, [pc, #380]	; (80028bc <HAL_ADC_Start_DMA+0x1c4>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a5f      	ldr	r2, [pc, #380]	; (80028c0 <HAL_ADC_Start_DMA+0x1c8>)
 8002742:	fba2 2303 	umull	r2, r3, r2, r3
 8002746:	0c9a      	lsrs	r2, r3, #18
 8002748:	4613      	mov	r3, r2
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	4413      	add	r3, r2
 800274e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002750:	e002      	b.n	8002758 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	3b01      	subs	r3, #1
 8002756:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1f9      	bne.n	8002752 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002768:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800276c:	d107      	bne.n	800277e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	689a      	ldr	r2, [r3, #8]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800277c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f003 0301 	and.w	r3, r3, #1
 8002788:	2b01      	cmp	r3, #1
 800278a:	f040 8086 	bne.w	800289a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002792:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002796:	f023 0301 	bic.w	r3, r3, #1
 800279a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d007      	beq.n	80027c0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027b8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027cc:	d106      	bne.n	80027dc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d2:	f023 0206 	bic.w	r2, r3, #6
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	645a      	str	r2, [r3, #68]	; 0x44
 80027da:	e002      	b.n	80027e2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2200      	movs	r2, #0
 80027e0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027ea:	4b36      	ldr	r3, [pc, #216]	; (80028c4 <HAL_ADC_Start_DMA+0x1cc>)
 80027ec:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f2:	4a35      	ldr	r2, [pc, #212]	; (80028c8 <HAL_ADC_Start_DMA+0x1d0>)
 80027f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027fa:	4a34      	ldr	r2, [pc, #208]	; (80028cc <HAL_ADC_Start_DMA+0x1d4>)
 80027fc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002802:	4a33      	ldr	r2, [pc, #204]	; (80028d0 <HAL_ADC_Start_DMA+0x1d8>)
 8002804:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800280e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	685a      	ldr	r2, [r3, #4]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800281e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	689a      	ldr	r2, [r3, #8]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800282e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	334c      	adds	r3, #76	; 0x4c
 800283a:	4619      	mov	r1, r3
 800283c:	68ba      	ldr	r2, [r7, #8]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f000 fd32 	bl	80032a8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f003 031f 	and.w	r3, r3, #31
 800284c:	2b00      	cmp	r3, #0
 800284e:	d10f      	bne.n	8002870 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d129      	bne.n	80028b2 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	689a      	ldr	r2, [r3, #8]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800286c:	609a      	str	r2, [r3, #8]
 800286e:	e020      	b.n	80028b2 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a17      	ldr	r2, [pc, #92]	; (80028d4 <HAL_ADC_Start_DMA+0x1dc>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d11b      	bne.n	80028b2 <HAL_ADC_Start_DMA+0x1ba>
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d114      	bne.n	80028b2 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	689a      	ldr	r2, [r3, #8]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002896:	609a      	str	r2, [r3, #8]
 8002898:	e00b      	b.n	80028b2 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289e:	f043 0210 	orr.w	r2, r3, #16
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028aa:	f043 0201 	orr.w	r2, r3, #1
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80028b2:	2300      	movs	r3, #0
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3718      	adds	r7, #24
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	20000000 	.word	0x20000000
 80028c0:	431bde83 	.word	0x431bde83
 80028c4:	40012300 	.word	0x40012300
 80028c8:	08002e11 	.word	0x08002e11
 80028cc:	08002ecb 	.word	0x08002ecb
 80028d0:	08002ee7 	.word	0x08002ee7
 80028d4:	40012000 	.word	0x40012000

080028d8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80028e0:	bf00      	nop
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80028f4:	bf00      	nop
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002908:	bf00      	nop
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800291e:	2300      	movs	r3, #0
 8002920:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002928:	2b01      	cmp	r3, #1
 800292a:	d101      	bne.n	8002930 <HAL_ADC_ConfigChannel+0x1c>
 800292c:	2302      	movs	r3, #2
 800292e:	e105      	b.n	8002b3c <HAL_ADC_ConfigChannel+0x228>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2b09      	cmp	r3, #9
 800293e:	d925      	bls.n	800298c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	68d9      	ldr	r1, [r3, #12]
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	b29b      	uxth	r3, r3
 800294c:	461a      	mov	r2, r3
 800294e:	4613      	mov	r3, r2
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	4413      	add	r3, r2
 8002954:	3b1e      	subs	r3, #30
 8002956:	2207      	movs	r2, #7
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	43da      	mvns	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	400a      	ands	r2, r1
 8002964:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68d9      	ldr	r1, [r3, #12]
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	689a      	ldr	r2, [r3, #8]
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	b29b      	uxth	r3, r3
 8002976:	4618      	mov	r0, r3
 8002978:	4603      	mov	r3, r0
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	4403      	add	r3, r0
 800297e:	3b1e      	subs	r3, #30
 8002980:	409a      	lsls	r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	430a      	orrs	r2, r1
 8002988:	60da      	str	r2, [r3, #12]
 800298a:	e022      	b.n	80029d2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	6919      	ldr	r1, [r3, #16]
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	b29b      	uxth	r3, r3
 8002998:	461a      	mov	r2, r3
 800299a:	4613      	mov	r3, r2
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	4413      	add	r3, r2
 80029a0:	2207      	movs	r2, #7
 80029a2:	fa02 f303 	lsl.w	r3, r2, r3
 80029a6:	43da      	mvns	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	400a      	ands	r2, r1
 80029ae:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	6919      	ldr	r1, [r3, #16]
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	689a      	ldr	r2, [r3, #8]
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	b29b      	uxth	r3, r3
 80029c0:	4618      	mov	r0, r3
 80029c2:	4603      	mov	r3, r0
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	4403      	add	r3, r0
 80029c8:	409a      	lsls	r2, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	430a      	orrs	r2, r1
 80029d0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	2b06      	cmp	r3, #6
 80029d8:	d824      	bhi.n	8002a24 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685a      	ldr	r2, [r3, #4]
 80029e4:	4613      	mov	r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	4413      	add	r3, r2
 80029ea:	3b05      	subs	r3, #5
 80029ec:	221f      	movs	r2, #31
 80029ee:	fa02 f303 	lsl.w	r3, r2, r3
 80029f2:	43da      	mvns	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	400a      	ands	r2, r1
 80029fa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	4618      	mov	r0, r3
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	685a      	ldr	r2, [r3, #4]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	4413      	add	r3, r2
 8002a14:	3b05      	subs	r3, #5
 8002a16:	fa00 f203 	lsl.w	r2, r0, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	635a      	str	r2, [r3, #52]	; 0x34
 8002a22:	e04c      	b.n	8002abe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	2b0c      	cmp	r3, #12
 8002a2a:	d824      	bhi.n	8002a76 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685a      	ldr	r2, [r3, #4]
 8002a36:	4613      	mov	r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	4413      	add	r3, r2
 8002a3c:	3b23      	subs	r3, #35	; 0x23
 8002a3e:	221f      	movs	r2, #31
 8002a40:	fa02 f303 	lsl.w	r3, r2, r3
 8002a44:	43da      	mvns	r2, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	400a      	ands	r2, r1
 8002a4c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685a      	ldr	r2, [r3, #4]
 8002a60:	4613      	mov	r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4413      	add	r3, r2
 8002a66:	3b23      	subs	r3, #35	; 0x23
 8002a68:	fa00 f203 	lsl.w	r2, r0, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	430a      	orrs	r2, r1
 8002a72:	631a      	str	r2, [r3, #48]	; 0x30
 8002a74:	e023      	b.n	8002abe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685a      	ldr	r2, [r3, #4]
 8002a80:	4613      	mov	r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	4413      	add	r3, r2
 8002a86:	3b41      	subs	r3, #65	; 0x41
 8002a88:	221f      	movs	r2, #31
 8002a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8e:	43da      	mvns	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	400a      	ands	r2, r1
 8002a96:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	685a      	ldr	r2, [r3, #4]
 8002aaa:	4613      	mov	r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	4413      	add	r3, r2
 8002ab0:	3b41      	subs	r3, #65	; 0x41
 8002ab2:	fa00 f203 	lsl.w	r2, r0, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	430a      	orrs	r2, r1
 8002abc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002abe:	4b22      	ldr	r3, [pc, #136]	; (8002b48 <HAL_ADC_ConfigChannel+0x234>)
 8002ac0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a21      	ldr	r2, [pc, #132]	; (8002b4c <HAL_ADC_ConfigChannel+0x238>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d109      	bne.n	8002ae0 <HAL_ADC_ConfigChannel+0x1cc>
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2b12      	cmp	r3, #18
 8002ad2:	d105      	bne.n	8002ae0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a19      	ldr	r2, [pc, #100]	; (8002b4c <HAL_ADC_ConfigChannel+0x238>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d123      	bne.n	8002b32 <HAL_ADC_ConfigChannel+0x21e>
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2b10      	cmp	r3, #16
 8002af0:	d003      	beq.n	8002afa <HAL_ADC_ConfigChannel+0x1e6>
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2b11      	cmp	r3, #17
 8002af8:	d11b      	bne.n	8002b32 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2b10      	cmp	r3, #16
 8002b0c:	d111      	bne.n	8002b32 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b0e:	4b10      	ldr	r3, [pc, #64]	; (8002b50 <HAL_ADC_ConfigChannel+0x23c>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a10      	ldr	r2, [pc, #64]	; (8002b54 <HAL_ADC_ConfigChannel+0x240>)
 8002b14:	fba2 2303 	umull	r2, r3, r2, r3
 8002b18:	0c9a      	lsrs	r2, r3, #18
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	4413      	add	r3, r2
 8002b20:	005b      	lsls	r3, r3, #1
 8002b22:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002b24:	e002      	b.n	8002b2c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	3b01      	subs	r3, #1
 8002b2a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d1f9      	bne.n	8002b26 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3714      	adds	r7, #20
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr
 8002b48:	40012300 	.word	0x40012300
 8002b4c:	40012000 	.word	0x40012000
 8002b50:	20000000 	.word	0x20000000
 8002b54:	431bde83 	.word	0x431bde83

08002b58 <HAL_ADC_AnalogWDGConfig>:
  * @param  AnalogWDGConfig  pointer to an ADC_AnalogWDGConfTypeDef structure 
  *         that contains the configuration information of ADC analog watchdog.
  * @retval HAL status	  
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->HighThreshold));
  assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->LowThreshold));
#endif /* USE_FULL_ASSERT  */
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d101      	bne.n	8002b70 <HAL_ADC_AnalogWDGConfig+0x18>
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	e04d      	b.n	8002c0c <HAL_ADC_AnalogWDGConfig+0xb4>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  if(AnalogWDGConfig->ITMode == ENABLE)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	7c1b      	ldrb	r3, [r3, #16]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d108      	bne.n	8002b92 <HAL_ADC_AnalogWDGConfig+0x3a>
  {
    /* Enable the ADC Analog watchdog interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	685a      	ldr	r2, [r3, #4]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b8e:	605a      	str	r2, [r3, #4]
 8002b90:	e007      	b.n	8002ba2 <HAL_ADC_AnalogWDGConfig+0x4a>
  }
  else
  {
    /* Disable the ADC Analog watchdog interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ba0:	605a      	str	r2, [r3, #4]
  }
  
  /* Clear AWDEN, JAWDEN and AWDSGL bits */
  hadc->Instance->CR1 &=  ~(ADC_CR1_AWDSGL | ADC_CR1_JAWDEN | ADC_CR1_AWDEN);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	6812      	ldr	r2, [r2, #0]
 8002bac:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002bb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002bb4:	6053      	str	r3, [r2, #4]
  
  /* Set the analog watchdog enable mode */
  hadc->Instance->CR1 |= AnalogWDGConfig->WatchdogMode;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	6859      	ldr	r1, [r3, #4]
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	605a      	str	r2, [r3, #4]
  
  /* Set the high threshold */
  hadc->Instance->HTR = AnalogWDGConfig->HighThreshold;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	683a      	ldr	r2, [r7, #0]
 8002bce:	6852      	ldr	r2, [r2, #4]
 8002bd0:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set the low threshold */
  hadc->Instance->LTR = AnalogWDGConfig->LowThreshold;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	683a      	ldr	r2, [r7, #0]
 8002bd8:	6892      	ldr	r2, [r2, #8]
 8002bda:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Clear the Analog watchdog channel select bits */
  hadc->Instance->CR1 &= ~ADC_CR1_AWDCH;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	685a      	ldr	r2, [r3, #4]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f022 021f 	bic.w	r2, r2, #31
 8002bea:	605a      	str	r2, [r3, #4]
  
  /* Set the Analog watchdog channel */
  hadc->Instance->CR1 |= (uint32_t)((uint16_t)(AnalogWDGConfig->Channel));
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	685a      	ldr	r2, [r3, #4]
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	430a      	orrs	r2, r1
 8002c00:	605a      	str	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b085      	sub	sp, #20
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c20:	4b79      	ldr	r3, [pc, #484]	; (8002e08 <ADC_Init+0x1f0>)
 8002c22:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	685a      	ldr	r2, [r3, #4]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	431a      	orrs	r2, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	685a      	ldr	r2, [r3, #4]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c4c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	6859      	ldr	r1, [r3, #4]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	021a      	lsls	r2, r3, #8
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	685a      	ldr	r2, [r3, #4]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002c70:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	6859      	ldr	r1, [r3, #4]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689a      	ldr	r2, [r3, #8]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	430a      	orrs	r2, r1
 8002c82:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	689a      	ldr	r2, [r3, #8]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	6899      	ldr	r1, [r3, #8]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	68da      	ldr	r2, [r3, #12]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002caa:	4a58      	ldr	r2, [pc, #352]	; (8002e0c <ADC_Init+0x1f4>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d022      	beq.n	8002cf6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	689a      	ldr	r2, [r3, #8]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002cbe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6899      	ldr	r1, [r3, #8]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ce0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	6899      	ldr	r1, [r3, #8]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	609a      	str	r2, [r3, #8]
 8002cf4:	e00f      	b.n	8002d16 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	689a      	ldr	r2, [r3, #8]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d04:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	689a      	ldr	r2, [r3, #8]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d14:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	689a      	ldr	r2, [r3, #8]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f022 0202 	bic.w	r2, r2, #2
 8002d24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	6899      	ldr	r1, [r3, #8]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	7e1b      	ldrb	r3, [r3, #24]
 8002d30:	005a      	lsls	r2, r3, #1
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	430a      	orrs	r2, r1
 8002d38:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d01b      	beq.n	8002d7c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	685a      	ldr	r2, [r3, #4]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d52:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	685a      	ldr	r2, [r3, #4]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002d62:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	6859      	ldr	r1, [r3, #4]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	035a      	lsls	r2, r3, #13
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	430a      	orrs	r2, r1
 8002d78:	605a      	str	r2, [r3, #4]
 8002d7a:	e007      	b.n	8002d8c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	685a      	ldr	r2, [r3, #4]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d8a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002d9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	69db      	ldr	r3, [r3, #28]
 8002da6:	3b01      	subs	r3, #1
 8002da8:	051a      	lsls	r2, r3, #20
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	430a      	orrs	r2, r1
 8002db0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	689a      	ldr	r2, [r3, #8]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002dc0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	6899      	ldr	r1, [r3, #8]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002dce:	025a      	lsls	r2, r3, #9
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	689a      	ldr	r2, [r3, #8]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002de6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6899      	ldr	r1, [r3, #8]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	029a      	lsls	r2, r3, #10
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	609a      	str	r2, [r3, #8]
}
 8002dfc:	bf00      	nop
 8002dfe:	3714      	adds	r7, #20
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr
 8002e08:	40012300 	.word	0x40012300
 8002e0c:	0f000001 	.word	0x0f000001

08002e10 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e1c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e22:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d13c      	bne.n	8002ea4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d12b      	bne.n	8002e9c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d127      	bne.n	8002e9c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e52:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d006      	beq.n	8002e68 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d119      	bne.n	8002e9c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	685a      	ldr	r2, [r3, #4]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f022 0220 	bic.w	r2, r2, #32
 8002e76:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d105      	bne.n	8002e9c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e94:	f043 0201 	orr.w	r2, r3, #1
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002e9c:	68f8      	ldr	r0, [r7, #12]
 8002e9e:	f7ff fd1b 	bl	80028d8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002ea2:	e00e      	b.n	8002ec2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea8:	f003 0310 	and.w	r3, r3, #16
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d003      	beq.n	8002eb8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002eb0:	68f8      	ldr	r0, [r7, #12]
 8002eb2:	f7ff fd25 	bl	8002900 <HAL_ADC_ErrorCallback>
}
 8002eb6:	e004      	b.n	8002ec2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	4798      	blx	r3
}
 8002ec2:	bf00      	nop
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b084      	sub	sp, #16
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002ed8:	68f8      	ldr	r0, [r7, #12]
 8002eda:	f7ff fd07 	bl	80028ec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ede:	bf00      	nop
 8002ee0:	3710      	adds	r7, #16
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b084      	sub	sp, #16
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2240      	movs	r2, #64	; 0x40
 8002ef8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efe:	f043 0204 	orr.w	r2, r3, #4
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002f06:	68f8      	ldr	r0, [r7, #12]
 8002f08:	f7ff fcfa 	bl	8002900 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f0c:	bf00      	nop
 8002f0e:	3710      	adds	r7, #16
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002f1c:	bf00      	nop
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <__NVIC_SetPriorityGrouping>:
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f003 0307 	and.w	r3, r3, #7
 8002f36:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f38:	4b0c      	ldr	r3, [pc, #48]	; (8002f6c <__NVIC_SetPriorityGrouping+0x44>)
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f3e:	68ba      	ldr	r2, [r7, #8]
 8002f40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f44:	4013      	ands	r3, r2
 8002f46:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f5a:	4a04      	ldr	r2, [pc, #16]	; (8002f6c <__NVIC_SetPriorityGrouping+0x44>)
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	60d3      	str	r3, [r2, #12]
}
 8002f60:	bf00      	nop
 8002f62:	3714      	adds	r7, #20
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr
 8002f6c:	e000ed00 	.word	0xe000ed00

08002f70 <__NVIC_GetPriorityGrouping>:
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f74:	4b04      	ldr	r3, [pc, #16]	; (8002f88 <__NVIC_GetPriorityGrouping+0x18>)
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	0a1b      	lsrs	r3, r3, #8
 8002f7a:	f003 0307 	and.w	r3, r3, #7
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr
 8002f88:	e000ed00 	.word	0xe000ed00

08002f8c <__NVIC_EnableIRQ>:
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	4603      	mov	r3, r0
 8002f94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	db0b      	blt.n	8002fb6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f9e:	79fb      	ldrb	r3, [r7, #7]
 8002fa0:	f003 021f 	and.w	r2, r3, #31
 8002fa4:	4907      	ldr	r1, [pc, #28]	; (8002fc4 <__NVIC_EnableIRQ+0x38>)
 8002fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002faa:	095b      	lsrs	r3, r3, #5
 8002fac:	2001      	movs	r0, #1
 8002fae:	fa00 f202 	lsl.w	r2, r0, r2
 8002fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002fb6:	bf00      	nop
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	e000e100 	.word	0xe000e100

08002fc8 <__NVIC_SetPriority>:
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	4603      	mov	r3, r0
 8002fd0:	6039      	str	r1, [r7, #0]
 8002fd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	db0a      	blt.n	8002ff2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	b2da      	uxtb	r2, r3
 8002fe0:	490c      	ldr	r1, [pc, #48]	; (8003014 <__NVIC_SetPriority+0x4c>)
 8002fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe6:	0112      	lsls	r2, r2, #4
 8002fe8:	b2d2      	uxtb	r2, r2
 8002fea:	440b      	add	r3, r1
 8002fec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002ff0:	e00a      	b.n	8003008 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	b2da      	uxtb	r2, r3
 8002ff6:	4908      	ldr	r1, [pc, #32]	; (8003018 <__NVIC_SetPriority+0x50>)
 8002ff8:	79fb      	ldrb	r3, [r7, #7]
 8002ffa:	f003 030f 	and.w	r3, r3, #15
 8002ffe:	3b04      	subs	r3, #4
 8003000:	0112      	lsls	r2, r2, #4
 8003002:	b2d2      	uxtb	r2, r2
 8003004:	440b      	add	r3, r1
 8003006:	761a      	strb	r2, [r3, #24]
}
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr
 8003014:	e000e100 	.word	0xe000e100
 8003018:	e000ed00 	.word	0xe000ed00

0800301c <NVIC_EncodePriority>:
{
 800301c:	b480      	push	{r7}
 800301e:	b089      	sub	sp, #36	; 0x24
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f003 0307 	and.w	r3, r3, #7
 800302e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	f1c3 0307 	rsb	r3, r3, #7
 8003036:	2b04      	cmp	r3, #4
 8003038:	bf28      	it	cs
 800303a:	2304      	movcs	r3, #4
 800303c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	3304      	adds	r3, #4
 8003042:	2b06      	cmp	r3, #6
 8003044:	d902      	bls.n	800304c <NVIC_EncodePriority+0x30>
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	3b03      	subs	r3, #3
 800304a:	e000      	b.n	800304e <NVIC_EncodePriority+0x32>
 800304c:	2300      	movs	r3, #0
 800304e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003050:	f04f 32ff 	mov.w	r2, #4294967295
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	fa02 f303 	lsl.w	r3, r2, r3
 800305a:	43da      	mvns	r2, r3
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	401a      	ands	r2, r3
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003064:	f04f 31ff 	mov.w	r1, #4294967295
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	fa01 f303 	lsl.w	r3, r1, r3
 800306e:	43d9      	mvns	r1, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003074:	4313      	orrs	r3, r2
}
 8003076:	4618      	mov	r0, r3
 8003078:	3724      	adds	r7, #36	; 0x24
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
	...

08003084 <SysTick_Config>:
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	3b01      	subs	r3, #1
 8003090:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003094:	d301      	bcc.n	800309a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003096:	2301      	movs	r3, #1
 8003098:	e00f      	b.n	80030ba <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800309a:	4a0a      	ldr	r2, [pc, #40]	; (80030c4 <SysTick_Config+0x40>)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	3b01      	subs	r3, #1
 80030a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030a2:	210f      	movs	r1, #15
 80030a4:	f04f 30ff 	mov.w	r0, #4294967295
 80030a8:	f7ff ff8e 	bl	8002fc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030ac:	4b05      	ldr	r3, [pc, #20]	; (80030c4 <SysTick_Config+0x40>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030b2:	4b04      	ldr	r3, [pc, #16]	; (80030c4 <SysTick_Config+0x40>)
 80030b4:	2207      	movs	r2, #7
 80030b6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3708      	adds	r7, #8
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	e000e010 	.word	0xe000e010

080030c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f7ff ff29 	bl	8002f28 <__NVIC_SetPriorityGrouping>
}
 80030d6:	bf00      	nop
 80030d8:	3708      	adds	r7, #8
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030de:	b580      	push	{r7, lr}
 80030e0:	b086      	sub	sp, #24
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	4603      	mov	r3, r0
 80030e6:	60b9      	str	r1, [r7, #8]
 80030e8:	607a      	str	r2, [r7, #4]
 80030ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030ec:	2300      	movs	r3, #0
 80030ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030f0:	f7ff ff3e 	bl	8002f70 <__NVIC_GetPriorityGrouping>
 80030f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	68b9      	ldr	r1, [r7, #8]
 80030fa:	6978      	ldr	r0, [r7, #20]
 80030fc:	f7ff ff8e 	bl	800301c <NVIC_EncodePriority>
 8003100:	4602      	mov	r2, r0
 8003102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003106:	4611      	mov	r1, r2
 8003108:	4618      	mov	r0, r3
 800310a:	f7ff ff5d 	bl	8002fc8 <__NVIC_SetPriority>
}
 800310e:	bf00      	nop
 8003110:	3718      	adds	r7, #24
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b082      	sub	sp, #8
 800311a:	af00      	add	r7, sp, #0
 800311c:	4603      	mov	r3, r0
 800311e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003124:	4618      	mov	r0, r3
 8003126:	f7ff ff31 	bl	8002f8c <__NVIC_EnableIRQ>
}
 800312a:	bf00      	nop
 800312c:	3708      	adds	r7, #8
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b082      	sub	sp, #8
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f7ff ffa2 	bl	8003084 <SysTick_Config>
 8003140:	4603      	mov	r3, r0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3708      	adds	r7, #8
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
	...

0800314c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003154:	2300      	movs	r3, #0
 8003156:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003158:	f7ff f91a 	bl	8002390 <HAL_GetTick>
 800315c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d101      	bne.n	8003168 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e099      	b.n	800329c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2202      	movs	r2, #2
 800316c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f022 0201 	bic.w	r2, r2, #1
 8003186:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003188:	e00f      	b.n	80031aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800318a:	f7ff f901 	bl	8002390 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	2b05      	cmp	r3, #5
 8003196:	d908      	bls.n	80031aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2220      	movs	r2, #32
 800319c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2203      	movs	r2, #3
 80031a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e078      	b.n	800329c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0301 	and.w	r3, r3, #1
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d1e8      	bne.n	800318a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80031c0:	697a      	ldr	r2, [r7, #20]
 80031c2:	4b38      	ldr	r3, [pc, #224]	; (80032a4 <HAL_DMA_Init+0x158>)
 80031c4:	4013      	ands	r3, r2
 80031c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685a      	ldr	r2, [r3, #4]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	691b      	ldr	r3, [r3, #16]
 80031dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a1b      	ldr	r3, [r3, #32]
 80031f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031f6:	697a      	ldr	r2, [r7, #20]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003200:	2b04      	cmp	r3, #4
 8003202:	d107      	bne.n	8003214 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320c:	4313      	orrs	r3, r2
 800320e:	697a      	ldr	r2, [r7, #20]
 8003210:	4313      	orrs	r3, r2
 8003212:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	697a      	ldr	r2, [r7, #20]
 800321a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	f023 0307 	bic.w	r3, r3, #7
 800322a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003230:	697a      	ldr	r2, [r7, #20]
 8003232:	4313      	orrs	r3, r2
 8003234:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323a:	2b04      	cmp	r3, #4
 800323c:	d117      	bne.n	800326e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	4313      	orrs	r3, r2
 8003246:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324c:	2b00      	cmp	r3, #0
 800324e:	d00e      	beq.n	800326e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f000 fa6f 	bl	8003734 <DMA_CheckFifoParam>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d008      	beq.n	800326e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2240      	movs	r2, #64	; 0x40
 8003260:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2201      	movs	r2, #1
 8003266:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800326a:	2301      	movs	r3, #1
 800326c:	e016      	b.n	800329c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 fa26 	bl	80036c8 <DMA_CalcBaseAndBitshift>
 800327c:	4603      	mov	r3, r0
 800327e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003284:	223f      	movs	r2, #63	; 0x3f
 8003286:	409a      	lsls	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2201      	movs	r2, #1
 8003296:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	3718      	adds	r7, #24
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	f010803f 	.word	0xf010803f

080032a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b086      	sub	sp, #24
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	607a      	str	r2, [r7, #4]
 80032b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032b6:	2300      	movs	r3, #0
 80032b8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032be:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d101      	bne.n	80032ce <HAL_DMA_Start_IT+0x26>
 80032ca:	2302      	movs	r3, #2
 80032cc:	e040      	b.n	8003350 <HAL_DMA_Start_IT+0xa8>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2201      	movs	r2, #1
 80032d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d12f      	bne.n	8003342 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2202      	movs	r2, #2
 80032e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2200      	movs	r2, #0
 80032ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	68b9      	ldr	r1, [r7, #8]
 80032f6:	68f8      	ldr	r0, [r7, #12]
 80032f8:	f000 f9b8 	bl	800366c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003300:	223f      	movs	r2, #63	; 0x3f
 8003302:	409a      	lsls	r2, r3
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f042 0216 	orr.w	r2, r2, #22
 8003316:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331c:	2b00      	cmp	r3, #0
 800331e:	d007      	beq.n	8003330 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f042 0208 	orr.w	r2, r2, #8
 800332e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f042 0201 	orr.w	r2, r2, #1
 800333e:	601a      	str	r2, [r3, #0]
 8003340:	e005      	b.n	800334e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800334a:	2302      	movs	r3, #2
 800334c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800334e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003350:	4618      	mov	r0, r3
 8003352:	3718      	adds	r7, #24
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b086      	sub	sp, #24
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003360:	2300      	movs	r3, #0
 8003362:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003364:	4b92      	ldr	r3, [pc, #584]	; (80035b0 <HAL_DMA_IRQHandler+0x258>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a92      	ldr	r2, [pc, #584]	; (80035b4 <HAL_DMA_IRQHandler+0x25c>)
 800336a:	fba2 2303 	umull	r2, r3, r2, r3
 800336e:	0a9b      	lsrs	r3, r3, #10
 8003370:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003376:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003382:	2208      	movs	r2, #8
 8003384:	409a      	lsls	r2, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	4013      	ands	r3, r2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d01a      	beq.n	80033c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0304 	and.w	r3, r3, #4
 8003398:	2b00      	cmp	r3, #0
 800339a:	d013      	beq.n	80033c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f022 0204 	bic.w	r2, r2, #4
 80033aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b0:	2208      	movs	r2, #8
 80033b2:	409a      	lsls	r2, r3
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033bc:	f043 0201 	orr.w	r2, r3, #1
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c8:	2201      	movs	r2, #1
 80033ca:	409a      	lsls	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	4013      	ands	r3, r2
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d012      	beq.n	80033fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00b      	beq.n	80033fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e6:	2201      	movs	r2, #1
 80033e8:	409a      	lsls	r2, r3
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f2:	f043 0202 	orr.w	r2, r3, #2
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033fe:	2204      	movs	r2, #4
 8003400:	409a      	lsls	r2, r3
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	4013      	ands	r3, r2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d012      	beq.n	8003430 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0302 	and.w	r3, r3, #2
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00b      	beq.n	8003430 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800341c:	2204      	movs	r2, #4
 800341e:	409a      	lsls	r2, r3
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003428:	f043 0204 	orr.w	r2, r3, #4
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003434:	2210      	movs	r2, #16
 8003436:	409a      	lsls	r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	4013      	ands	r3, r2
 800343c:	2b00      	cmp	r3, #0
 800343e:	d043      	beq.n	80034c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0308 	and.w	r3, r3, #8
 800344a:	2b00      	cmp	r3, #0
 800344c:	d03c      	beq.n	80034c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003452:	2210      	movs	r2, #16
 8003454:	409a      	lsls	r2, r3
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d018      	beq.n	800349a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d108      	bne.n	8003488 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	2b00      	cmp	r3, #0
 800347c:	d024      	beq.n	80034c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	4798      	blx	r3
 8003486:	e01f      	b.n	80034c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800348c:	2b00      	cmp	r3, #0
 800348e:	d01b      	beq.n	80034c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	4798      	blx	r3
 8003498:	e016      	b.n	80034c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d107      	bne.n	80034b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f022 0208 	bic.w	r2, r2, #8
 80034b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d003      	beq.n	80034c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034cc:	2220      	movs	r2, #32
 80034ce:	409a      	lsls	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	4013      	ands	r3, r2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f000 808e 	beq.w	80035f6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0310 	and.w	r3, r3, #16
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f000 8086 	beq.w	80035f6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ee:	2220      	movs	r2, #32
 80034f0:	409a      	lsls	r2, r3
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b05      	cmp	r3, #5
 8003500:	d136      	bne.n	8003570 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 0216 	bic.w	r2, r2, #22
 8003510:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	695a      	ldr	r2, [r3, #20]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003520:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003526:	2b00      	cmp	r3, #0
 8003528:	d103      	bne.n	8003532 <HAL_DMA_IRQHandler+0x1da>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800352e:	2b00      	cmp	r3, #0
 8003530:	d007      	beq.n	8003542 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f022 0208 	bic.w	r2, r2, #8
 8003540:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003546:	223f      	movs	r2, #63	; 0x3f
 8003548:	409a      	lsls	r2, r3
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2201      	movs	r2, #1
 8003552:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003562:	2b00      	cmp	r3, #0
 8003564:	d07d      	beq.n	8003662 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	4798      	blx	r3
        }
        return;
 800356e:	e078      	b.n	8003662 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d01c      	beq.n	80035b8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d108      	bne.n	800359e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003590:	2b00      	cmp	r3, #0
 8003592:	d030      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	4798      	blx	r3
 800359c:	e02b      	b.n	80035f6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d027      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	4798      	blx	r3
 80035ae:	e022      	b.n	80035f6 <HAL_DMA_IRQHandler+0x29e>
 80035b0:	20000000 	.word	0x20000000
 80035b4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d10f      	bne.n	80035e6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f022 0210 	bic.w	r2, r2, #16
 80035d4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2201      	movs	r2, #1
 80035da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d003      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d032      	beq.n	8003664 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003602:	f003 0301 	and.w	r3, r3, #1
 8003606:	2b00      	cmp	r3, #0
 8003608:	d022      	beq.n	8003650 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2205      	movs	r2, #5
 800360e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f022 0201 	bic.w	r2, r2, #1
 8003620:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	3301      	adds	r3, #1
 8003626:	60bb      	str	r3, [r7, #8]
 8003628:	697a      	ldr	r2, [r7, #20]
 800362a:	429a      	cmp	r2, r3
 800362c:	d307      	bcc.n	800363e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0301 	and.w	r3, r3, #1
 8003638:	2b00      	cmp	r3, #0
 800363a:	d1f2      	bne.n	8003622 <HAL_DMA_IRQHandler+0x2ca>
 800363c:	e000      	b.n	8003640 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800363e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003654:	2b00      	cmp	r3, #0
 8003656:	d005      	beq.n	8003664 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	4798      	blx	r3
 8003660:	e000      	b.n	8003664 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003662:	bf00      	nop
    }
  }
}
 8003664:	3718      	adds	r7, #24
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop

0800366c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800366c:	b480      	push	{r7}
 800366e:	b085      	sub	sp, #20
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	607a      	str	r2, [r7, #4]
 8003678:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003688:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	683a      	ldr	r2, [r7, #0]
 8003690:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	2b40      	cmp	r3, #64	; 0x40
 8003698:	d108      	bne.n	80036ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68ba      	ldr	r2, [r7, #8]
 80036a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80036aa:	e007      	b.n	80036bc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68ba      	ldr	r2, [r7, #8]
 80036b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	60da      	str	r2, [r3, #12]
}
 80036bc:	bf00      	nop
 80036be:	3714      	adds	r7, #20
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	3b10      	subs	r3, #16
 80036d8:	4a14      	ldr	r2, [pc, #80]	; (800372c <DMA_CalcBaseAndBitshift+0x64>)
 80036da:	fba2 2303 	umull	r2, r3, r2, r3
 80036de:	091b      	lsrs	r3, r3, #4
 80036e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80036e2:	4a13      	ldr	r2, [pc, #76]	; (8003730 <DMA_CalcBaseAndBitshift+0x68>)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	4413      	add	r3, r2
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	461a      	mov	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2b03      	cmp	r3, #3
 80036f4:	d909      	bls.n	800370a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80036fe:	f023 0303 	bic.w	r3, r3, #3
 8003702:	1d1a      	adds	r2, r3, #4
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	659a      	str	r2, [r3, #88]	; 0x58
 8003708:	e007      	b.n	800371a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003712:	f023 0303 	bic.w	r3, r3, #3
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800371e:	4618      	mov	r0, r3
 8003720:	3714      	adds	r7, #20
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	aaaaaaab 	.word	0xaaaaaaab
 8003730:	08009870 	.word	0x08009870

08003734 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003734:	b480      	push	{r7}
 8003736:	b085      	sub	sp, #20
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800373c:	2300      	movs	r3, #0
 800373e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003744:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	699b      	ldr	r3, [r3, #24]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d11f      	bne.n	800378e <DMA_CheckFifoParam+0x5a>
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	2b03      	cmp	r3, #3
 8003752:	d856      	bhi.n	8003802 <DMA_CheckFifoParam+0xce>
 8003754:	a201      	add	r2, pc, #4	; (adr r2, 800375c <DMA_CheckFifoParam+0x28>)
 8003756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800375a:	bf00      	nop
 800375c:	0800376d 	.word	0x0800376d
 8003760:	0800377f 	.word	0x0800377f
 8003764:	0800376d 	.word	0x0800376d
 8003768:	08003803 	.word	0x08003803
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003770:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d046      	beq.n	8003806 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800377c:	e043      	b.n	8003806 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003782:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003786:	d140      	bne.n	800380a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800378c:	e03d      	b.n	800380a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003796:	d121      	bne.n	80037dc <DMA_CheckFifoParam+0xa8>
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	2b03      	cmp	r3, #3
 800379c:	d837      	bhi.n	800380e <DMA_CheckFifoParam+0xda>
 800379e:	a201      	add	r2, pc, #4	; (adr r2, 80037a4 <DMA_CheckFifoParam+0x70>)
 80037a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a4:	080037b5 	.word	0x080037b5
 80037a8:	080037bb 	.word	0x080037bb
 80037ac:	080037b5 	.word	0x080037b5
 80037b0:	080037cd 	.word	0x080037cd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	73fb      	strb	r3, [r7, #15]
      break;
 80037b8:	e030      	b.n	800381c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d025      	beq.n	8003812 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037ca:	e022      	b.n	8003812 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80037d4:	d11f      	bne.n	8003816 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80037da:	e01c      	b.n	8003816 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d903      	bls.n	80037ea <DMA_CheckFifoParam+0xb6>
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	2b03      	cmp	r3, #3
 80037e6:	d003      	beq.n	80037f0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80037e8:	e018      	b.n	800381c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	73fb      	strb	r3, [r7, #15]
      break;
 80037ee:	e015      	b.n	800381c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d00e      	beq.n	800381a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	73fb      	strb	r3, [r7, #15]
      break;
 8003800:	e00b      	b.n	800381a <DMA_CheckFifoParam+0xe6>
      break;
 8003802:	bf00      	nop
 8003804:	e00a      	b.n	800381c <DMA_CheckFifoParam+0xe8>
      break;
 8003806:	bf00      	nop
 8003808:	e008      	b.n	800381c <DMA_CheckFifoParam+0xe8>
      break;
 800380a:	bf00      	nop
 800380c:	e006      	b.n	800381c <DMA_CheckFifoParam+0xe8>
      break;
 800380e:	bf00      	nop
 8003810:	e004      	b.n	800381c <DMA_CheckFifoParam+0xe8>
      break;
 8003812:	bf00      	nop
 8003814:	e002      	b.n	800381c <DMA_CheckFifoParam+0xe8>
      break;   
 8003816:	bf00      	nop
 8003818:	e000      	b.n	800381c <DMA_CheckFifoParam+0xe8>
      break;
 800381a:	bf00      	nop
    }
  } 
  
  return status; 
 800381c:	7bfb      	ldrb	r3, [r7, #15]
}
 800381e:	4618      	mov	r0, r3
 8003820:	3714      	adds	r7, #20
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop

0800382c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800382c:	b480      	push	{r7}
 800382e:	b089      	sub	sp, #36	; 0x24
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003836:	2300      	movs	r3, #0
 8003838:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800383a:	2300      	movs	r3, #0
 800383c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800383e:	2300      	movs	r3, #0
 8003840:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003842:	2300      	movs	r3, #0
 8003844:	61fb      	str	r3, [r7, #28]
 8003846:	e159      	b.n	8003afc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003848:	2201      	movs	r2, #1
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	fa02 f303 	lsl.w	r3, r2, r3
 8003850:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	697a      	ldr	r2, [r7, #20]
 8003858:	4013      	ands	r3, r2
 800385a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800385c:	693a      	ldr	r2, [r7, #16]
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	429a      	cmp	r2, r3
 8003862:	f040 8148 	bne.w	8003af6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f003 0303 	and.w	r3, r3, #3
 800386e:	2b01      	cmp	r3, #1
 8003870:	d005      	beq.n	800387e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800387a:	2b02      	cmp	r3, #2
 800387c:	d130      	bne.n	80038e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	005b      	lsls	r3, r3, #1
 8003888:	2203      	movs	r2, #3
 800388a:	fa02 f303 	lsl.w	r3, r2, r3
 800388e:	43db      	mvns	r3, r3
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	4013      	ands	r3, r2
 8003894:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	68da      	ldr	r2, [r3, #12]
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	005b      	lsls	r3, r3, #1
 800389e:	fa02 f303 	lsl.w	r3, r2, r3
 80038a2:	69ba      	ldr	r2, [r7, #24]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	69ba      	ldr	r2, [r7, #24]
 80038ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038b4:	2201      	movs	r2, #1
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	fa02 f303 	lsl.w	r3, r2, r3
 80038bc:	43db      	mvns	r3, r3
 80038be:	69ba      	ldr	r2, [r7, #24]
 80038c0:	4013      	ands	r3, r2
 80038c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	091b      	lsrs	r3, r3, #4
 80038ca:	f003 0201 	and.w	r2, r3, #1
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	fa02 f303 	lsl.w	r3, r2, r3
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f003 0303 	and.w	r3, r3, #3
 80038e8:	2b03      	cmp	r3, #3
 80038ea:	d017      	beq.n	800391c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	005b      	lsls	r3, r3, #1
 80038f6:	2203      	movs	r2, #3
 80038f8:	fa02 f303 	lsl.w	r3, r2, r3
 80038fc:	43db      	mvns	r3, r3
 80038fe:	69ba      	ldr	r2, [r7, #24]
 8003900:	4013      	ands	r3, r2
 8003902:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	689a      	ldr	r2, [r3, #8]
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	005b      	lsls	r3, r3, #1
 800390c:	fa02 f303 	lsl.w	r3, r2, r3
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	4313      	orrs	r3, r2
 8003914:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f003 0303 	and.w	r3, r3, #3
 8003924:	2b02      	cmp	r3, #2
 8003926:	d123      	bne.n	8003970 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	08da      	lsrs	r2, r3, #3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	3208      	adds	r2, #8
 8003930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003934:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	f003 0307 	and.w	r3, r3, #7
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	220f      	movs	r2, #15
 8003940:	fa02 f303 	lsl.w	r3, r2, r3
 8003944:	43db      	mvns	r3, r3
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	4013      	ands	r3, r2
 800394a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	691a      	ldr	r2, [r3, #16]
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	f003 0307 	and.w	r3, r3, #7
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	fa02 f303 	lsl.w	r3, r2, r3
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	4313      	orrs	r3, r2
 8003960:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	08da      	lsrs	r2, r3, #3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	3208      	adds	r2, #8
 800396a:	69b9      	ldr	r1, [r7, #24]
 800396c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	005b      	lsls	r3, r3, #1
 800397a:	2203      	movs	r2, #3
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	43db      	mvns	r3, r3
 8003982:	69ba      	ldr	r2, [r7, #24]
 8003984:	4013      	ands	r3, r2
 8003986:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f003 0203 	and.w	r2, r3, #3
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	005b      	lsls	r3, r3, #1
 8003994:	fa02 f303 	lsl.w	r3, r2, r3
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	4313      	orrs	r3, r2
 800399c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	69ba      	ldr	r2, [r7, #24]
 80039a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	f000 80a2 	beq.w	8003af6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039b2:	2300      	movs	r3, #0
 80039b4:	60fb      	str	r3, [r7, #12]
 80039b6:	4b57      	ldr	r3, [pc, #348]	; (8003b14 <HAL_GPIO_Init+0x2e8>)
 80039b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ba:	4a56      	ldr	r2, [pc, #344]	; (8003b14 <HAL_GPIO_Init+0x2e8>)
 80039bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039c0:	6453      	str	r3, [r2, #68]	; 0x44
 80039c2:	4b54      	ldr	r3, [pc, #336]	; (8003b14 <HAL_GPIO_Init+0x2e8>)
 80039c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039ca:	60fb      	str	r3, [r7, #12]
 80039cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039ce:	4a52      	ldr	r2, [pc, #328]	; (8003b18 <HAL_GPIO_Init+0x2ec>)
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	089b      	lsrs	r3, r3, #2
 80039d4:	3302      	adds	r3, #2
 80039d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	f003 0303 	and.w	r3, r3, #3
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	220f      	movs	r2, #15
 80039e6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ea:	43db      	mvns	r3, r3
 80039ec:	69ba      	ldr	r2, [r7, #24]
 80039ee:	4013      	ands	r3, r2
 80039f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a49      	ldr	r2, [pc, #292]	; (8003b1c <HAL_GPIO_Init+0x2f0>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d019      	beq.n	8003a2e <HAL_GPIO_Init+0x202>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a48      	ldr	r2, [pc, #288]	; (8003b20 <HAL_GPIO_Init+0x2f4>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d013      	beq.n	8003a2a <HAL_GPIO_Init+0x1fe>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a47      	ldr	r2, [pc, #284]	; (8003b24 <HAL_GPIO_Init+0x2f8>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d00d      	beq.n	8003a26 <HAL_GPIO_Init+0x1fa>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a46      	ldr	r2, [pc, #280]	; (8003b28 <HAL_GPIO_Init+0x2fc>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d007      	beq.n	8003a22 <HAL_GPIO_Init+0x1f6>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a45      	ldr	r2, [pc, #276]	; (8003b2c <HAL_GPIO_Init+0x300>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d101      	bne.n	8003a1e <HAL_GPIO_Init+0x1f2>
 8003a1a:	2304      	movs	r3, #4
 8003a1c:	e008      	b.n	8003a30 <HAL_GPIO_Init+0x204>
 8003a1e:	2307      	movs	r3, #7
 8003a20:	e006      	b.n	8003a30 <HAL_GPIO_Init+0x204>
 8003a22:	2303      	movs	r3, #3
 8003a24:	e004      	b.n	8003a30 <HAL_GPIO_Init+0x204>
 8003a26:	2302      	movs	r3, #2
 8003a28:	e002      	b.n	8003a30 <HAL_GPIO_Init+0x204>
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e000      	b.n	8003a30 <HAL_GPIO_Init+0x204>
 8003a2e:	2300      	movs	r3, #0
 8003a30:	69fa      	ldr	r2, [r7, #28]
 8003a32:	f002 0203 	and.w	r2, r2, #3
 8003a36:	0092      	lsls	r2, r2, #2
 8003a38:	4093      	lsls	r3, r2
 8003a3a:	69ba      	ldr	r2, [r7, #24]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a40:	4935      	ldr	r1, [pc, #212]	; (8003b18 <HAL_GPIO_Init+0x2ec>)
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	089b      	lsrs	r3, r3, #2
 8003a46:	3302      	adds	r3, #2
 8003a48:	69ba      	ldr	r2, [r7, #24]
 8003a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a4e:	4b38      	ldr	r3, [pc, #224]	; (8003b30 <HAL_GPIO_Init+0x304>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	43db      	mvns	r3, r3
 8003a58:	69ba      	ldr	r2, [r7, #24]
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d003      	beq.n	8003a72 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003a6a:	69ba      	ldr	r2, [r7, #24]
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a72:	4a2f      	ldr	r2, [pc, #188]	; (8003b30 <HAL_GPIO_Init+0x304>)
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003a78:	4b2d      	ldr	r3, [pc, #180]	; (8003b30 <HAL_GPIO_Init+0x304>)
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	43db      	mvns	r3, r3
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	4013      	ands	r3, r2
 8003a86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d003      	beq.n	8003a9c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003a94:	69ba      	ldr	r2, [r7, #24]
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a9c:	4a24      	ldr	r2, [pc, #144]	; (8003b30 <HAL_GPIO_Init+0x304>)
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003aa2:	4b23      	ldr	r3, [pc, #140]	; (8003b30 <HAL_GPIO_Init+0x304>)
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	43db      	mvns	r3, r3
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	4013      	ands	r3, r2
 8003ab0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d003      	beq.n	8003ac6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003abe:	69ba      	ldr	r2, [r7, #24]
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ac6:	4a1a      	ldr	r2, [pc, #104]	; (8003b30 <HAL_GPIO_Init+0x304>)
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003acc:	4b18      	ldr	r3, [pc, #96]	; (8003b30 <HAL_GPIO_Init+0x304>)
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	43db      	mvns	r3, r3
 8003ad6:	69ba      	ldr	r2, [r7, #24]
 8003ad8:	4013      	ands	r3, r2
 8003ada:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d003      	beq.n	8003af0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003ae8:	69ba      	ldr	r2, [r7, #24]
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003af0:	4a0f      	ldr	r2, [pc, #60]	; (8003b30 <HAL_GPIO_Init+0x304>)
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	3301      	adds	r3, #1
 8003afa:	61fb      	str	r3, [r7, #28]
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	2b0f      	cmp	r3, #15
 8003b00:	f67f aea2 	bls.w	8003848 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b04:	bf00      	nop
 8003b06:	bf00      	nop
 8003b08:	3724      	adds	r7, #36	; 0x24
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	40023800 	.word	0x40023800
 8003b18:	40013800 	.word	0x40013800
 8003b1c:	40020000 	.word	0x40020000
 8003b20:	40020400 	.word	0x40020400
 8003b24:	40020800 	.word	0x40020800
 8003b28:	40020c00 	.word	0x40020c00
 8003b2c:	40021000 	.word	0x40021000
 8003b30:	40013c00 	.word	0x40013c00

08003b34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	807b      	strh	r3, [r7, #2]
 8003b40:	4613      	mov	r3, r2
 8003b42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b44:	787b      	ldrb	r3, [r7, #1]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d003      	beq.n	8003b52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b4a:	887a      	ldrh	r2, [r7, #2]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b50:	e003      	b.n	8003b5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b52:	887b      	ldrh	r3, [r7, #2]
 8003b54:	041a      	lsls	r2, r3, #16
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	619a      	str	r2, [r3, #24]
}
 8003b5a:	bf00      	nop
 8003b5c:	370c      	adds	r7, #12
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
	...

08003b68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	4603      	mov	r3, r0
 8003b70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003b72:	4b08      	ldr	r3, [pc, #32]	; (8003b94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b74:	695a      	ldr	r2, [r3, #20]
 8003b76:	88fb      	ldrh	r3, [r7, #6]
 8003b78:	4013      	ands	r3, r2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d006      	beq.n	8003b8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b7e:	4a05      	ldr	r2, [pc, #20]	; (8003b94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b80:	88fb      	ldrh	r3, [r7, #6]
 8003b82:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b84:	88fb      	ldrh	r3, [r7, #6]
 8003b86:	4618      	mov	r0, r3
 8003b88:	f7fd ffce 	bl	8001b28 <HAL_GPIO_EXTI_Callback>
  }
}
 8003b8c:	bf00      	nop
 8003b8e:	3708      	adds	r7, #8
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	40013c00 	.word	0x40013c00

08003b98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b086      	sub	sp, #24
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d101      	bne.n	8003baa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e264      	b.n	8004074 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d075      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bb6:	4ba3      	ldr	r3, [pc, #652]	; (8003e44 <HAL_RCC_OscConfig+0x2ac>)
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f003 030c 	and.w	r3, r3, #12
 8003bbe:	2b04      	cmp	r3, #4
 8003bc0:	d00c      	beq.n	8003bdc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bc2:	4ba0      	ldr	r3, [pc, #640]	; (8003e44 <HAL_RCC_OscConfig+0x2ac>)
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bca:	2b08      	cmp	r3, #8
 8003bcc:	d112      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bce:	4b9d      	ldr	r3, [pc, #628]	; (8003e44 <HAL_RCC_OscConfig+0x2ac>)
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bda:	d10b      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bdc:	4b99      	ldr	r3, [pc, #612]	; (8003e44 <HAL_RCC_OscConfig+0x2ac>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d05b      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x108>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d157      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e23f      	b.n	8004074 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bfc:	d106      	bne.n	8003c0c <HAL_RCC_OscConfig+0x74>
 8003bfe:	4b91      	ldr	r3, [pc, #580]	; (8003e44 <HAL_RCC_OscConfig+0x2ac>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a90      	ldr	r2, [pc, #576]	; (8003e44 <HAL_RCC_OscConfig+0x2ac>)
 8003c04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c08:	6013      	str	r3, [r2, #0]
 8003c0a:	e01d      	b.n	8003c48 <HAL_RCC_OscConfig+0xb0>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c14:	d10c      	bne.n	8003c30 <HAL_RCC_OscConfig+0x98>
 8003c16:	4b8b      	ldr	r3, [pc, #556]	; (8003e44 <HAL_RCC_OscConfig+0x2ac>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a8a      	ldr	r2, [pc, #552]	; (8003e44 <HAL_RCC_OscConfig+0x2ac>)
 8003c1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c20:	6013      	str	r3, [r2, #0]
 8003c22:	4b88      	ldr	r3, [pc, #544]	; (8003e44 <HAL_RCC_OscConfig+0x2ac>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a87      	ldr	r2, [pc, #540]	; (8003e44 <HAL_RCC_OscConfig+0x2ac>)
 8003c28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c2c:	6013      	str	r3, [r2, #0]
 8003c2e:	e00b      	b.n	8003c48 <HAL_RCC_OscConfig+0xb0>
 8003c30:	4b84      	ldr	r3, [pc, #528]	; (8003e44 <HAL_RCC_OscConfig+0x2ac>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a83      	ldr	r2, [pc, #524]	; (8003e44 <HAL_RCC_OscConfig+0x2ac>)
 8003c36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c3a:	6013      	str	r3, [r2, #0]
 8003c3c:	4b81      	ldr	r3, [pc, #516]	; (8003e44 <HAL_RCC_OscConfig+0x2ac>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a80      	ldr	r2, [pc, #512]	; (8003e44 <HAL_RCC_OscConfig+0x2ac>)
 8003c42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d013      	beq.n	8003c78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c50:	f7fe fb9e 	bl	8002390 <HAL_GetTick>
 8003c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c56:	e008      	b.n	8003c6a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c58:	f7fe fb9a 	bl	8002390 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	2b64      	cmp	r3, #100	; 0x64
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e204      	b.n	8004074 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c6a:	4b76      	ldr	r3, [pc, #472]	; (8003e44 <HAL_RCC_OscConfig+0x2ac>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d0f0      	beq.n	8003c58 <HAL_RCC_OscConfig+0xc0>
 8003c76:	e014      	b.n	8003ca2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c78:	f7fe fb8a 	bl	8002390 <HAL_GetTick>
 8003c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c7e:	e008      	b.n	8003c92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c80:	f7fe fb86 	bl	8002390 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b64      	cmp	r3, #100	; 0x64
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e1f0      	b.n	8004074 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c92:	4b6c      	ldr	r3, [pc, #432]	; (8003e44 <HAL_RCC_OscConfig+0x2ac>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d1f0      	bne.n	8003c80 <HAL_RCC_OscConfig+0xe8>
 8003c9e:	e000      	b.n	8003ca2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ca0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0302 	and.w	r3, r3, #2
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d063      	beq.n	8003d76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cae:	4b65      	ldr	r3, [pc, #404]	; (8003e44 <HAL_RCC_OscConfig+0x2ac>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f003 030c 	and.w	r3, r3, #12
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00b      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cba:	4b62      	ldr	r3, [pc, #392]	; (8003e44 <HAL_RCC_OscConfig+0x2ac>)
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cc2:	2b08      	cmp	r3, #8
 8003cc4:	d11c      	bne.n	8003d00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cc6:	4b5f      	ldr	r3, [pc, #380]	; (8003e44 <HAL_RCC_OscConfig+0x2ac>)
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d116      	bne.n	8003d00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cd2:	4b5c      	ldr	r3, [pc, #368]	; (8003e44 <HAL_RCC_OscConfig+0x2ac>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d005      	beq.n	8003cea <HAL_RCC_OscConfig+0x152>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d001      	beq.n	8003cea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e1c4      	b.n	8004074 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cea:	4b56      	ldr	r3, [pc, #344]	; (8003e44 <HAL_RCC_OscConfig+0x2ac>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	00db      	lsls	r3, r3, #3
 8003cf8:	4952      	ldr	r1, [pc, #328]	; (8003e44 <HAL_RCC_OscConfig+0x2ac>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cfe:	e03a      	b.n	8003d76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d020      	beq.n	8003d4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d08:	4b4f      	ldr	r3, [pc, #316]	; (8003e48 <HAL_RCC_OscConfig+0x2b0>)
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d0e:	f7fe fb3f 	bl	8002390 <HAL_GetTick>
 8003d12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d14:	e008      	b.n	8003d28 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d16:	f7fe fb3b 	bl	8002390 <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d901      	bls.n	8003d28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e1a5      	b.n	8004074 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d28:	4b46      	ldr	r3, [pc, #280]	; (8003e44 <HAL_RCC_OscConfig+0x2ac>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0302 	and.w	r3, r3, #2
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d0f0      	beq.n	8003d16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d34:	4b43      	ldr	r3, [pc, #268]	; (8003e44 <HAL_RCC_OscConfig+0x2ac>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	00db      	lsls	r3, r3, #3
 8003d42:	4940      	ldr	r1, [pc, #256]	; (8003e44 <HAL_RCC_OscConfig+0x2ac>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	600b      	str	r3, [r1, #0]
 8003d48:	e015      	b.n	8003d76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d4a:	4b3f      	ldr	r3, [pc, #252]	; (8003e48 <HAL_RCC_OscConfig+0x2b0>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d50:	f7fe fb1e 	bl	8002390 <HAL_GetTick>
 8003d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d56:	e008      	b.n	8003d6a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d58:	f7fe fb1a 	bl	8002390 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d901      	bls.n	8003d6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e184      	b.n	8004074 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d6a:	4b36      	ldr	r3, [pc, #216]	; (8003e44 <HAL_RCC_OscConfig+0x2ac>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0302 	and.w	r3, r3, #2
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1f0      	bne.n	8003d58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0308 	and.w	r3, r3, #8
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d030      	beq.n	8003de4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d016      	beq.n	8003db8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d8a:	4b30      	ldr	r3, [pc, #192]	; (8003e4c <HAL_RCC_OscConfig+0x2b4>)
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d90:	f7fe fafe 	bl	8002390 <HAL_GetTick>
 8003d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d96:	e008      	b.n	8003daa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d98:	f7fe fafa 	bl	8002390 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e164      	b.n	8004074 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003daa:	4b26      	ldr	r3, [pc, #152]	; (8003e44 <HAL_RCC_OscConfig+0x2ac>)
 8003dac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d0f0      	beq.n	8003d98 <HAL_RCC_OscConfig+0x200>
 8003db6:	e015      	b.n	8003de4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003db8:	4b24      	ldr	r3, [pc, #144]	; (8003e4c <HAL_RCC_OscConfig+0x2b4>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dbe:	f7fe fae7 	bl	8002390 <HAL_GetTick>
 8003dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dc4:	e008      	b.n	8003dd8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dc6:	f7fe fae3 	bl	8002390 <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d901      	bls.n	8003dd8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e14d      	b.n	8004074 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dd8:	4b1a      	ldr	r3, [pc, #104]	; (8003e44 <HAL_RCC_OscConfig+0x2ac>)
 8003dda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ddc:	f003 0302 	and.w	r3, r3, #2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d1f0      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0304 	and.w	r3, r3, #4
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	f000 80a0 	beq.w	8003f32 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003df2:	2300      	movs	r3, #0
 8003df4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003df6:	4b13      	ldr	r3, [pc, #76]	; (8003e44 <HAL_RCC_OscConfig+0x2ac>)
 8003df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d10f      	bne.n	8003e22 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e02:	2300      	movs	r3, #0
 8003e04:	60bb      	str	r3, [r7, #8]
 8003e06:	4b0f      	ldr	r3, [pc, #60]	; (8003e44 <HAL_RCC_OscConfig+0x2ac>)
 8003e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0a:	4a0e      	ldr	r2, [pc, #56]	; (8003e44 <HAL_RCC_OscConfig+0x2ac>)
 8003e0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e10:	6413      	str	r3, [r2, #64]	; 0x40
 8003e12:	4b0c      	ldr	r3, [pc, #48]	; (8003e44 <HAL_RCC_OscConfig+0x2ac>)
 8003e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e1a:	60bb      	str	r3, [r7, #8]
 8003e1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e22:	4b0b      	ldr	r3, [pc, #44]	; (8003e50 <HAL_RCC_OscConfig+0x2b8>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d121      	bne.n	8003e72 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e2e:	4b08      	ldr	r3, [pc, #32]	; (8003e50 <HAL_RCC_OscConfig+0x2b8>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a07      	ldr	r2, [pc, #28]	; (8003e50 <HAL_RCC_OscConfig+0x2b8>)
 8003e34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e3a:	f7fe faa9 	bl	8002390 <HAL_GetTick>
 8003e3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e40:	e011      	b.n	8003e66 <HAL_RCC_OscConfig+0x2ce>
 8003e42:	bf00      	nop
 8003e44:	40023800 	.word	0x40023800
 8003e48:	42470000 	.word	0x42470000
 8003e4c:	42470e80 	.word	0x42470e80
 8003e50:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e54:	f7fe fa9c 	bl	8002390 <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e106      	b.n	8004074 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e66:	4b85      	ldr	r3, [pc, #532]	; (800407c <HAL_RCC_OscConfig+0x4e4>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d0f0      	beq.n	8003e54 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d106      	bne.n	8003e88 <HAL_RCC_OscConfig+0x2f0>
 8003e7a:	4b81      	ldr	r3, [pc, #516]	; (8004080 <HAL_RCC_OscConfig+0x4e8>)
 8003e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e7e:	4a80      	ldr	r2, [pc, #512]	; (8004080 <HAL_RCC_OscConfig+0x4e8>)
 8003e80:	f043 0301 	orr.w	r3, r3, #1
 8003e84:	6713      	str	r3, [r2, #112]	; 0x70
 8003e86:	e01c      	b.n	8003ec2 <HAL_RCC_OscConfig+0x32a>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	2b05      	cmp	r3, #5
 8003e8e:	d10c      	bne.n	8003eaa <HAL_RCC_OscConfig+0x312>
 8003e90:	4b7b      	ldr	r3, [pc, #492]	; (8004080 <HAL_RCC_OscConfig+0x4e8>)
 8003e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e94:	4a7a      	ldr	r2, [pc, #488]	; (8004080 <HAL_RCC_OscConfig+0x4e8>)
 8003e96:	f043 0304 	orr.w	r3, r3, #4
 8003e9a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e9c:	4b78      	ldr	r3, [pc, #480]	; (8004080 <HAL_RCC_OscConfig+0x4e8>)
 8003e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea0:	4a77      	ldr	r2, [pc, #476]	; (8004080 <HAL_RCC_OscConfig+0x4e8>)
 8003ea2:	f043 0301 	orr.w	r3, r3, #1
 8003ea6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ea8:	e00b      	b.n	8003ec2 <HAL_RCC_OscConfig+0x32a>
 8003eaa:	4b75      	ldr	r3, [pc, #468]	; (8004080 <HAL_RCC_OscConfig+0x4e8>)
 8003eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eae:	4a74      	ldr	r2, [pc, #464]	; (8004080 <HAL_RCC_OscConfig+0x4e8>)
 8003eb0:	f023 0301 	bic.w	r3, r3, #1
 8003eb4:	6713      	str	r3, [r2, #112]	; 0x70
 8003eb6:	4b72      	ldr	r3, [pc, #456]	; (8004080 <HAL_RCC_OscConfig+0x4e8>)
 8003eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eba:	4a71      	ldr	r2, [pc, #452]	; (8004080 <HAL_RCC_OscConfig+0x4e8>)
 8003ebc:	f023 0304 	bic.w	r3, r3, #4
 8003ec0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d015      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eca:	f7fe fa61 	bl	8002390 <HAL_GetTick>
 8003ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ed0:	e00a      	b.n	8003ee8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ed2:	f7fe fa5d 	bl	8002390 <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d901      	bls.n	8003ee8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003ee4:	2303      	movs	r3, #3
 8003ee6:	e0c5      	b.n	8004074 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ee8:	4b65      	ldr	r3, [pc, #404]	; (8004080 <HAL_RCC_OscConfig+0x4e8>)
 8003eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eec:	f003 0302 	and.w	r3, r3, #2
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d0ee      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x33a>
 8003ef4:	e014      	b.n	8003f20 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ef6:	f7fe fa4b 	bl	8002390 <HAL_GetTick>
 8003efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003efc:	e00a      	b.n	8003f14 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003efe:	f7fe fa47 	bl	8002390 <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d901      	bls.n	8003f14 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e0af      	b.n	8004074 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f14:	4b5a      	ldr	r3, [pc, #360]	; (8004080 <HAL_RCC_OscConfig+0x4e8>)
 8003f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f18:	f003 0302 	and.w	r3, r3, #2
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d1ee      	bne.n	8003efe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f20:	7dfb      	ldrb	r3, [r7, #23]
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d105      	bne.n	8003f32 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f26:	4b56      	ldr	r3, [pc, #344]	; (8004080 <HAL_RCC_OscConfig+0x4e8>)
 8003f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2a:	4a55      	ldr	r2, [pc, #340]	; (8004080 <HAL_RCC_OscConfig+0x4e8>)
 8003f2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f30:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	f000 809b 	beq.w	8004072 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f3c:	4b50      	ldr	r3, [pc, #320]	; (8004080 <HAL_RCC_OscConfig+0x4e8>)
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f003 030c 	and.w	r3, r3, #12
 8003f44:	2b08      	cmp	r3, #8
 8003f46:	d05c      	beq.n	8004002 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d141      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f50:	4b4c      	ldr	r3, [pc, #304]	; (8004084 <HAL_RCC_OscConfig+0x4ec>)
 8003f52:	2200      	movs	r2, #0
 8003f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f56:	f7fe fa1b 	bl	8002390 <HAL_GetTick>
 8003f5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f5c:	e008      	b.n	8003f70 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f5e:	f7fe fa17 	bl	8002390 <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d901      	bls.n	8003f70 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e081      	b.n	8004074 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f70:	4b43      	ldr	r3, [pc, #268]	; (8004080 <HAL_RCC_OscConfig+0x4e8>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d1f0      	bne.n	8003f5e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	69da      	ldr	r2, [r3, #28]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a1b      	ldr	r3, [r3, #32]
 8003f84:	431a      	orrs	r2, r3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8a:	019b      	lsls	r3, r3, #6
 8003f8c:	431a      	orrs	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f92:	085b      	lsrs	r3, r3, #1
 8003f94:	3b01      	subs	r3, #1
 8003f96:	041b      	lsls	r3, r3, #16
 8003f98:	431a      	orrs	r2, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9e:	061b      	lsls	r3, r3, #24
 8003fa0:	4937      	ldr	r1, [pc, #220]	; (8004080 <HAL_RCC_OscConfig+0x4e8>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fa6:	4b37      	ldr	r3, [pc, #220]	; (8004084 <HAL_RCC_OscConfig+0x4ec>)
 8003fa8:	2201      	movs	r2, #1
 8003faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fac:	f7fe f9f0 	bl	8002390 <HAL_GetTick>
 8003fb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fb2:	e008      	b.n	8003fc6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fb4:	f7fe f9ec 	bl	8002390 <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d901      	bls.n	8003fc6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e056      	b.n	8004074 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fc6:	4b2e      	ldr	r3, [pc, #184]	; (8004080 <HAL_RCC_OscConfig+0x4e8>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d0f0      	beq.n	8003fb4 <HAL_RCC_OscConfig+0x41c>
 8003fd2:	e04e      	b.n	8004072 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fd4:	4b2b      	ldr	r3, [pc, #172]	; (8004084 <HAL_RCC_OscConfig+0x4ec>)
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fda:	f7fe f9d9 	bl	8002390 <HAL_GetTick>
 8003fde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fe0:	e008      	b.n	8003ff4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fe2:	f7fe f9d5 	bl	8002390 <HAL_GetTick>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	d901      	bls.n	8003ff4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e03f      	b.n	8004074 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ff4:	4b22      	ldr	r3, [pc, #136]	; (8004080 <HAL_RCC_OscConfig+0x4e8>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d1f0      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x44a>
 8004000:	e037      	b.n	8004072 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	2b01      	cmp	r3, #1
 8004008:	d101      	bne.n	800400e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e032      	b.n	8004074 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800400e:	4b1c      	ldr	r3, [pc, #112]	; (8004080 <HAL_RCC_OscConfig+0x4e8>)
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	699b      	ldr	r3, [r3, #24]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d028      	beq.n	800406e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004026:	429a      	cmp	r2, r3
 8004028:	d121      	bne.n	800406e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004034:	429a      	cmp	r2, r3
 8004036:	d11a      	bne.n	800406e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004038:	68fa      	ldr	r2, [r7, #12]
 800403a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800403e:	4013      	ands	r3, r2
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004044:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004046:	4293      	cmp	r3, r2
 8004048:	d111      	bne.n	800406e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004054:	085b      	lsrs	r3, r3, #1
 8004056:	3b01      	subs	r3, #1
 8004058:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800405a:	429a      	cmp	r2, r3
 800405c:	d107      	bne.n	800406e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004068:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800406a:	429a      	cmp	r2, r3
 800406c:	d001      	beq.n	8004072 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e000      	b.n	8004074 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004072:	2300      	movs	r3, #0
}
 8004074:	4618      	mov	r0, r3
 8004076:	3718      	adds	r7, #24
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	40007000 	.word	0x40007000
 8004080:	40023800 	.word	0x40023800
 8004084:	42470060 	.word	0x42470060

08004088 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d101      	bne.n	800409c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e0cc      	b.n	8004236 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800409c:	4b68      	ldr	r3, [pc, #416]	; (8004240 <HAL_RCC_ClockConfig+0x1b8>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0307 	and.w	r3, r3, #7
 80040a4:	683a      	ldr	r2, [r7, #0]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d90c      	bls.n	80040c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040aa:	4b65      	ldr	r3, [pc, #404]	; (8004240 <HAL_RCC_ClockConfig+0x1b8>)
 80040ac:	683a      	ldr	r2, [r7, #0]
 80040ae:	b2d2      	uxtb	r2, r2
 80040b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040b2:	4b63      	ldr	r3, [pc, #396]	; (8004240 <HAL_RCC_ClockConfig+0x1b8>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0307 	and.w	r3, r3, #7
 80040ba:	683a      	ldr	r2, [r7, #0]
 80040bc:	429a      	cmp	r2, r3
 80040be:	d001      	beq.n	80040c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e0b8      	b.n	8004236 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0302 	and.w	r3, r3, #2
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d020      	beq.n	8004112 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0304 	and.w	r3, r3, #4
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d005      	beq.n	80040e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040dc:	4b59      	ldr	r3, [pc, #356]	; (8004244 <HAL_RCC_ClockConfig+0x1bc>)
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	4a58      	ldr	r2, [pc, #352]	; (8004244 <HAL_RCC_ClockConfig+0x1bc>)
 80040e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0308 	and.w	r3, r3, #8
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d005      	beq.n	8004100 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040f4:	4b53      	ldr	r3, [pc, #332]	; (8004244 <HAL_RCC_ClockConfig+0x1bc>)
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	4a52      	ldr	r2, [pc, #328]	; (8004244 <HAL_RCC_ClockConfig+0x1bc>)
 80040fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004100:	4b50      	ldr	r3, [pc, #320]	; (8004244 <HAL_RCC_ClockConfig+0x1bc>)
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	494d      	ldr	r1, [pc, #308]	; (8004244 <HAL_RCC_ClockConfig+0x1bc>)
 800410e:	4313      	orrs	r3, r2
 8004110:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	2b00      	cmp	r3, #0
 800411c:	d044      	beq.n	80041a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	2b01      	cmp	r3, #1
 8004124:	d107      	bne.n	8004136 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004126:	4b47      	ldr	r3, [pc, #284]	; (8004244 <HAL_RCC_ClockConfig+0x1bc>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d119      	bne.n	8004166 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e07f      	b.n	8004236 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	2b02      	cmp	r3, #2
 800413c:	d003      	beq.n	8004146 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004142:	2b03      	cmp	r3, #3
 8004144:	d107      	bne.n	8004156 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004146:	4b3f      	ldr	r3, [pc, #252]	; (8004244 <HAL_RCC_ClockConfig+0x1bc>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d109      	bne.n	8004166 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e06f      	b.n	8004236 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004156:	4b3b      	ldr	r3, [pc, #236]	; (8004244 <HAL_RCC_ClockConfig+0x1bc>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0302 	and.w	r3, r3, #2
 800415e:	2b00      	cmp	r3, #0
 8004160:	d101      	bne.n	8004166 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e067      	b.n	8004236 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004166:	4b37      	ldr	r3, [pc, #220]	; (8004244 <HAL_RCC_ClockConfig+0x1bc>)
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f023 0203 	bic.w	r2, r3, #3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	4934      	ldr	r1, [pc, #208]	; (8004244 <HAL_RCC_ClockConfig+0x1bc>)
 8004174:	4313      	orrs	r3, r2
 8004176:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004178:	f7fe f90a 	bl	8002390 <HAL_GetTick>
 800417c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800417e:	e00a      	b.n	8004196 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004180:	f7fe f906 	bl	8002390 <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	f241 3288 	movw	r2, #5000	; 0x1388
 800418e:	4293      	cmp	r3, r2
 8004190:	d901      	bls.n	8004196 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e04f      	b.n	8004236 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004196:	4b2b      	ldr	r3, [pc, #172]	; (8004244 <HAL_RCC_ClockConfig+0x1bc>)
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f003 020c 	and.w	r2, r3, #12
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d1eb      	bne.n	8004180 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041a8:	4b25      	ldr	r3, [pc, #148]	; (8004240 <HAL_RCC_ClockConfig+0x1b8>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0307 	and.w	r3, r3, #7
 80041b0:	683a      	ldr	r2, [r7, #0]
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d20c      	bcs.n	80041d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041b6:	4b22      	ldr	r3, [pc, #136]	; (8004240 <HAL_RCC_ClockConfig+0x1b8>)
 80041b8:	683a      	ldr	r2, [r7, #0]
 80041ba:	b2d2      	uxtb	r2, r2
 80041bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041be:	4b20      	ldr	r3, [pc, #128]	; (8004240 <HAL_RCC_ClockConfig+0x1b8>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0307 	and.w	r3, r3, #7
 80041c6:	683a      	ldr	r2, [r7, #0]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d001      	beq.n	80041d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e032      	b.n	8004236 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0304 	and.w	r3, r3, #4
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d008      	beq.n	80041ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041dc:	4b19      	ldr	r3, [pc, #100]	; (8004244 <HAL_RCC_ClockConfig+0x1bc>)
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	4916      	ldr	r1, [pc, #88]	; (8004244 <HAL_RCC_ClockConfig+0x1bc>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0308 	and.w	r3, r3, #8
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d009      	beq.n	800420e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041fa:	4b12      	ldr	r3, [pc, #72]	; (8004244 <HAL_RCC_ClockConfig+0x1bc>)
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	00db      	lsls	r3, r3, #3
 8004208:	490e      	ldr	r1, [pc, #56]	; (8004244 <HAL_RCC_ClockConfig+0x1bc>)
 800420a:	4313      	orrs	r3, r2
 800420c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800420e:	f000 f821 	bl	8004254 <HAL_RCC_GetSysClockFreq>
 8004212:	4602      	mov	r2, r0
 8004214:	4b0b      	ldr	r3, [pc, #44]	; (8004244 <HAL_RCC_ClockConfig+0x1bc>)
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	091b      	lsrs	r3, r3, #4
 800421a:	f003 030f 	and.w	r3, r3, #15
 800421e:	490a      	ldr	r1, [pc, #40]	; (8004248 <HAL_RCC_ClockConfig+0x1c0>)
 8004220:	5ccb      	ldrb	r3, [r1, r3]
 8004222:	fa22 f303 	lsr.w	r3, r2, r3
 8004226:	4a09      	ldr	r2, [pc, #36]	; (800424c <HAL_RCC_ClockConfig+0x1c4>)
 8004228:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800422a:	4b09      	ldr	r3, [pc, #36]	; (8004250 <HAL_RCC_ClockConfig+0x1c8>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4618      	mov	r0, r3
 8004230:	f7fe f86a 	bl	8002308 <HAL_InitTick>

  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3710      	adds	r7, #16
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	40023c00 	.word	0x40023c00
 8004244:	40023800 	.word	0x40023800
 8004248:	08009858 	.word	0x08009858
 800424c:	20000000 	.word	0x20000000
 8004250:	20000004 	.word	0x20000004

08004254 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004254:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004258:	b084      	sub	sp, #16
 800425a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800425c:	2300      	movs	r3, #0
 800425e:	607b      	str	r3, [r7, #4]
 8004260:	2300      	movs	r3, #0
 8004262:	60fb      	str	r3, [r7, #12]
 8004264:	2300      	movs	r3, #0
 8004266:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004268:	2300      	movs	r3, #0
 800426a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800426c:	4b67      	ldr	r3, [pc, #412]	; (800440c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f003 030c 	and.w	r3, r3, #12
 8004274:	2b08      	cmp	r3, #8
 8004276:	d00d      	beq.n	8004294 <HAL_RCC_GetSysClockFreq+0x40>
 8004278:	2b08      	cmp	r3, #8
 800427a:	f200 80bd 	bhi.w	80043f8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800427e:	2b00      	cmp	r3, #0
 8004280:	d002      	beq.n	8004288 <HAL_RCC_GetSysClockFreq+0x34>
 8004282:	2b04      	cmp	r3, #4
 8004284:	d003      	beq.n	800428e <HAL_RCC_GetSysClockFreq+0x3a>
 8004286:	e0b7      	b.n	80043f8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004288:	4b61      	ldr	r3, [pc, #388]	; (8004410 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800428a:	60bb      	str	r3, [r7, #8]
       break;
 800428c:	e0b7      	b.n	80043fe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800428e:	4b61      	ldr	r3, [pc, #388]	; (8004414 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004290:	60bb      	str	r3, [r7, #8]
      break;
 8004292:	e0b4      	b.n	80043fe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004294:	4b5d      	ldr	r3, [pc, #372]	; (800440c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800429c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800429e:	4b5b      	ldr	r3, [pc, #364]	; (800440c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d04d      	beq.n	8004346 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042aa:	4b58      	ldr	r3, [pc, #352]	; (800440c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	099b      	lsrs	r3, r3, #6
 80042b0:	461a      	mov	r2, r3
 80042b2:	f04f 0300 	mov.w	r3, #0
 80042b6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80042ba:	f04f 0100 	mov.w	r1, #0
 80042be:	ea02 0800 	and.w	r8, r2, r0
 80042c2:	ea03 0901 	and.w	r9, r3, r1
 80042c6:	4640      	mov	r0, r8
 80042c8:	4649      	mov	r1, r9
 80042ca:	f04f 0200 	mov.w	r2, #0
 80042ce:	f04f 0300 	mov.w	r3, #0
 80042d2:	014b      	lsls	r3, r1, #5
 80042d4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80042d8:	0142      	lsls	r2, r0, #5
 80042da:	4610      	mov	r0, r2
 80042dc:	4619      	mov	r1, r3
 80042de:	ebb0 0008 	subs.w	r0, r0, r8
 80042e2:	eb61 0109 	sbc.w	r1, r1, r9
 80042e6:	f04f 0200 	mov.w	r2, #0
 80042ea:	f04f 0300 	mov.w	r3, #0
 80042ee:	018b      	lsls	r3, r1, #6
 80042f0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80042f4:	0182      	lsls	r2, r0, #6
 80042f6:	1a12      	subs	r2, r2, r0
 80042f8:	eb63 0301 	sbc.w	r3, r3, r1
 80042fc:	f04f 0000 	mov.w	r0, #0
 8004300:	f04f 0100 	mov.w	r1, #0
 8004304:	00d9      	lsls	r1, r3, #3
 8004306:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800430a:	00d0      	lsls	r0, r2, #3
 800430c:	4602      	mov	r2, r0
 800430e:	460b      	mov	r3, r1
 8004310:	eb12 0208 	adds.w	r2, r2, r8
 8004314:	eb43 0309 	adc.w	r3, r3, r9
 8004318:	f04f 0000 	mov.w	r0, #0
 800431c:	f04f 0100 	mov.w	r1, #0
 8004320:	0259      	lsls	r1, r3, #9
 8004322:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004326:	0250      	lsls	r0, r2, #9
 8004328:	4602      	mov	r2, r0
 800432a:	460b      	mov	r3, r1
 800432c:	4610      	mov	r0, r2
 800432e:	4619      	mov	r1, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	461a      	mov	r2, r3
 8004334:	f04f 0300 	mov.w	r3, #0
 8004338:	f7fc fc8e 	bl	8000c58 <__aeabi_uldivmod>
 800433c:	4602      	mov	r2, r0
 800433e:	460b      	mov	r3, r1
 8004340:	4613      	mov	r3, r2
 8004342:	60fb      	str	r3, [r7, #12]
 8004344:	e04a      	b.n	80043dc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004346:	4b31      	ldr	r3, [pc, #196]	; (800440c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	099b      	lsrs	r3, r3, #6
 800434c:	461a      	mov	r2, r3
 800434e:	f04f 0300 	mov.w	r3, #0
 8004352:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004356:	f04f 0100 	mov.w	r1, #0
 800435a:	ea02 0400 	and.w	r4, r2, r0
 800435e:	ea03 0501 	and.w	r5, r3, r1
 8004362:	4620      	mov	r0, r4
 8004364:	4629      	mov	r1, r5
 8004366:	f04f 0200 	mov.w	r2, #0
 800436a:	f04f 0300 	mov.w	r3, #0
 800436e:	014b      	lsls	r3, r1, #5
 8004370:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004374:	0142      	lsls	r2, r0, #5
 8004376:	4610      	mov	r0, r2
 8004378:	4619      	mov	r1, r3
 800437a:	1b00      	subs	r0, r0, r4
 800437c:	eb61 0105 	sbc.w	r1, r1, r5
 8004380:	f04f 0200 	mov.w	r2, #0
 8004384:	f04f 0300 	mov.w	r3, #0
 8004388:	018b      	lsls	r3, r1, #6
 800438a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800438e:	0182      	lsls	r2, r0, #6
 8004390:	1a12      	subs	r2, r2, r0
 8004392:	eb63 0301 	sbc.w	r3, r3, r1
 8004396:	f04f 0000 	mov.w	r0, #0
 800439a:	f04f 0100 	mov.w	r1, #0
 800439e:	00d9      	lsls	r1, r3, #3
 80043a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80043a4:	00d0      	lsls	r0, r2, #3
 80043a6:	4602      	mov	r2, r0
 80043a8:	460b      	mov	r3, r1
 80043aa:	1912      	adds	r2, r2, r4
 80043ac:	eb45 0303 	adc.w	r3, r5, r3
 80043b0:	f04f 0000 	mov.w	r0, #0
 80043b4:	f04f 0100 	mov.w	r1, #0
 80043b8:	0299      	lsls	r1, r3, #10
 80043ba:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80043be:	0290      	lsls	r0, r2, #10
 80043c0:	4602      	mov	r2, r0
 80043c2:	460b      	mov	r3, r1
 80043c4:	4610      	mov	r0, r2
 80043c6:	4619      	mov	r1, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	461a      	mov	r2, r3
 80043cc:	f04f 0300 	mov.w	r3, #0
 80043d0:	f7fc fc42 	bl	8000c58 <__aeabi_uldivmod>
 80043d4:	4602      	mov	r2, r0
 80043d6:	460b      	mov	r3, r1
 80043d8:	4613      	mov	r3, r2
 80043da:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80043dc:	4b0b      	ldr	r3, [pc, #44]	; (800440c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	0c1b      	lsrs	r3, r3, #16
 80043e2:	f003 0303 	and.w	r3, r3, #3
 80043e6:	3301      	adds	r3, #1
 80043e8:	005b      	lsls	r3, r3, #1
 80043ea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80043ec:	68fa      	ldr	r2, [r7, #12]
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f4:	60bb      	str	r3, [r7, #8]
      break;
 80043f6:	e002      	b.n	80043fe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043f8:	4b05      	ldr	r3, [pc, #20]	; (8004410 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80043fa:	60bb      	str	r3, [r7, #8]
      break;
 80043fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043fe:	68bb      	ldr	r3, [r7, #8]
}
 8004400:	4618      	mov	r0, r3
 8004402:	3710      	adds	r7, #16
 8004404:	46bd      	mov	sp, r7
 8004406:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800440a:	bf00      	nop
 800440c:	40023800 	.word	0x40023800
 8004410:	00f42400 	.word	0x00f42400
 8004414:	007a1200 	.word	0x007a1200

08004418 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004418:	b480      	push	{r7}
 800441a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800441c:	4b03      	ldr	r3, [pc, #12]	; (800442c <HAL_RCC_GetHCLKFreq+0x14>)
 800441e:	681b      	ldr	r3, [r3, #0]
}
 8004420:	4618      	mov	r0, r3
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	20000000 	.word	0x20000000

08004430 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004434:	f7ff fff0 	bl	8004418 <HAL_RCC_GetHCLKFreq>
 8004438:	4602      	mov	r2, r0
 800443a:	4b05      	ldr	r3, [pc, #20]	; (8004450 <HAL_RCC_GetPCLK1Freq+0x20>)
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	0a9b      	lsrs	r3, r3, #10
 8004440:	f003 0307 	and.w	r3, r3, #7
 8004444:	4903      	ldr	r1, [pc, #12]	; (8004454 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004446:	5ccb      	ldrb	r3, [r1, r3]
 8004448:	fa22 f303 	lsr.w	r3, r2, r3
}
 800444c:	4618      	mov	r0, r3
 800444e:	bd80      	pop	{r7, pc}
 8004450:	40023800 	.word	0x40023800
 8004454:	08009868 	.word	0x08009868

08004458 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800445c:	f7ff ffdc 	bl	8004418 <HAL_RCC_GetHCLKFreq>
 8004460:	4602      	mov	r2, r0
 8004462:	4b05      	ldr	r3, [pc, #20]	; (8004478 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	0b5b      	lsrs	r3, r3, #13
 8004468:	f003 0307 	and.w	r3, r3, #7
 800446c:	4903      	ldr	r1, [pc, #12]	; (800447c <HAL_RCC_GetPCLK2Freq+0x24>)
 800446e:	5ccb      	ldrb	r3, [r1, r3]
 8004470:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004474:	4618      	mov	r0, r3
 8004476:	bd80      	pop	{r7, pc}
 8004478:	40023800 	.word	0x40023800
 800447c:	08009868 	.word	0x08009868

08004480 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b082      	sub	sp, #8
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d101      	bne.n	8004492 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e07b      	b.n	800458a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004496:	2b00      	cmp	r3, #0
 8004498:	d108      	bne.n	80044ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044a2:	d009      	beq.n	80044b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	61da      	str	r2, [r3, #28]
 80044aa:	e005      	b.n	80044b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d106      	bne.n	80044d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f7fd fc36 	bl	8001d44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2202      	movs	r2, #2
 80044dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044ee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004500:	431a      	orrs	r2, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800450a:	431a      	orrs	r2, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	f003 0302 	and.w	r3, r3, #2
 8004514:	431a      	orrs	r2, r3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	f003 0301 	and.w	r3, r3, #1
 800451e:	431a      	orrs	r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	699b      	ldr	r3, [r3, #24]
 8004524:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004528:	431a      	orrs	r2, r3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	69db      	ldr	r3, [r3, #28]
 800452e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004532:	431a      	orrs	r2, r3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a1b      	ldr	r3, [r3, #32]
 8004538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800453c:	ea42 0103 	orr.w	r1, r2, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004544:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	430a      	orrs	r2, r1
 800454e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	0c1b      	lsrs	r3, r3, #16
 8004556:	f003 0104 	and.w	r1, r3, #4
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455e:	f003 0210 	and.w	r2, r3, #16
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	430a      	orrs	r2, r1
 8004568:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	69da      	ldr	r2, [r3, #28]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004578:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	3708      	adds	r7, #8
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}

08004592 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004592:	b580      	push	{r7, lr}
 8004594:	b088      	sub	sp, #32
 8004596:	af00      	add	r7, sp, #0
 8004598:	60f8      	str	r0, [r7, #12]
 800459a:	60b9      	str	r1, [r7, #8]
 800459c:	603b      	str	r3, [r7, #0]
 800459e:	4613      	mov	r3, r2
 80045a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80045a2:	2300      	movs	r3, #0
 80045a4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d101      	bne.n	80045b4 <HAL_SPI_Transmit+0x22>
 80045b0:	2302      	movs	r3, #2
 80045b2:	e126      	b.n	8004802 <HAL_SPI_Transmit+0x270>
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045bc:	f7fd fee8 	bl	8002390 <HAL_GetTick>
 80045c0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80045c2:	88fb      	ldrh	r3, [r7, #6]
 80045c4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d002      	beq.n	80045d8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80045d2:	2302      	movs	r3, #2
 80045d4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80045d6:	e10b      	b.n	80047f0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d002      	beq.n	80045e4 <HAL_SPI_Transmit+0x52>
 80045de:	88fb      	ldrh	r3, [r7, #6]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d102      	bne.n	80045ea <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80045e8:	e102      	b.n	80047f0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2203      	movs	r2, #3
 80045ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2200      	movs	r2, #0
 80045f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	68ba      	ldr	r2, [r7, #8]
 80045fc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	88fa      	ldrh	r2, [r7, #6]
 8004602:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	88fa      	ldrh	r2, [r7, #6]
 8004608:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2200      	movs	r2, #0
 800460e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2200      	movs	r2, #0
 8004614:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2200      	movs	r2, #0
 800461a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2200      	movs	r2, #0
 8004620:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2200      	movs	r2, #0
 8004626:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004630:	d10f      	bne.n	8004652 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004640:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004650:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800465c:	2b40      	cmp	r3, #64	; 0x40
 800465e:	d007      	beq.n	8004670 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800466e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004678:	d14b      	bne.n	8004712 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d002      	beq.n	8004688 <HAL_SPI_Transmit+0xf6>
 8004682:	8afb      	ldrh	r3, [r7, #22]
 8004684:	2b01      	cmp	r3, #1
 8004686:	d13e      	bne.n	8004706 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468c:	881a      	ldrh	r2, [r3, #0]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004698:	1c9a      	adds	r2, r3, #2
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	3b01      	subs	r3, #1
 80046a6:	b29a      	uxth	r2, r3
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80046ac:	e02b      	b.n	8004706 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f003 0302 	and.w	r3, r3, #2
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d112      	bne.n	80046e2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c0:	881a      	ldrh	r2, [r3, #0]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046cc:	1c9a      	adds	r2, r3, #2
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	3b01      	subs	r3, #1
 80046da:	b29a      	uxth	r2, r3
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	86da      	strh	r2, [r3, #54]	; 0x36
 80046e0:	e011      	b.n	8004706 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046e2:	f7fd fe55 	bl	8002390 <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	683a      	ldr	r2, [r7, #0]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d803      	bhi.n	80046fa <HAL_SPI_Transmit+0x168>
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f8:	d102      	bne.n	8004700 <HAL_SPI_Transmit+0x16e>
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d102      	bne.n	8004706 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004704:	e074      	b.n	80047f0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800470a:	b29b      	uxth	r3, r3
 800470c:	2b00      	cmp	r3, #0
 800470e:	d1ce      	bne.n	80046ae <HAL_SPI_Transmit+0x11c>
 8004710:	e04c      	b.n	80047ac <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d002      	beq.n	8004720 <HAL_SPI_Transmit+0x18e>
 800471a:	8afb      	ldrh	r3, [r7, #22]
 800471c:	2b01      	cmp	r3, #1
 800471e:	d140      	bne.n	80047a2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	330c      	adds	r3, #12
 800472a:	7812      	ldrb	r2, [r2, #0]
 800472c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004732:	1c5a      	adds	r2, r3, #1
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800473c:	b29b      	uxth	r3, r3
 800473e:	3b01      	subs	r3, #1
 8004740:	b29a      	uxth	r2, r3
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004746:	e02c      	b.n	80047a2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	f003 0302 	and.w	r3, r3, #2
 8004752:	2b02      	cmp	r3, #2
 8004754:	d113      	bne.n	800477e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	330c      	adds	r3, #12
 8004760:	7812      	ldrb	r2, [r2, #0]
 8004762:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004768:	1c5a      	adds	r2, r3, #1
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004772:	b29b      	uxth	r3, r3
 8004774:	3b01      	subs	r3, #1
 8004776:	b29a      	uxth	r2, r3
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	86da      	strh	r2, [r3, #54]	; 0x36
 800477c:	e011      	b.n	80047a2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800477e:	f7fd fe07 	bl	8002390 <HAL_GetTick>
 8004782:	4602      	mov	r2, r0
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	1ad3      	subs	r3, r2, r3
 8004788:	683a      	ldr	r2, [r7, #0]
 800478a:	429a      	cmp	r2, r3
 800478c:	d803      	bhi.n	8004796 <HAL_SPI_Transmit+0x204>
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004794:	d102      	bne.n	800479c <HAL_SPI_Transmit+0x20a>
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d102      	bne.n	80047a2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	77fb      	strb	r3, [r7, #31]
          goto error;
 80047a0:	e026      	b.n	80047f0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d1cd      	bne.n	8004748 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047ac:	69ba      	ldr	r2, [r7, #24]
 80047ae:	6839      	ldr	r1, [r7, #0]
 80047b0:	68f8      	ldr	r0, [r7, #12]
 80047b2:	f000 fa09 	bl	8004bc8 <SPI_EndRxTxTransaction>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d002      	beq.n	80047c2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2220      	movs	r2, #32
 80047c0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d10a      	bne.n	80047e0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047ca:	2300      	movs	r3, #0
 80047cc:	613b      	str	r3, [r7, #16]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	613b      	str	r3, [r7, #16]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	613b      	str	r3, [r7, #16]
 80047de:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d002      	beq.n	80047ee <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	77fb      	strb	r3, [r7, #31]
 80047ec:	e000      	b.n	80047f0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80047ee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004800:	7ffb      	ldrb	r3, [r7, #31]
}
 8004802:	4618      	mov	r0, r3
 8004804:	3720      	adds	r7, #32
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
	...

0800480c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b086      	sub	sp, #24
 8004810:	af00      	add	r7, sp, #0
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	4613      	mov	r3, r2
 8004818:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800481a:	2300      	movs	r3, #0
 800481c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004824:	2b01      	cmp	r3, #1
 8004826:	d101      	bne.n	800482c <HAL_SPI_Transmit_DMA+0x20>
 8004828:	2302      	movs	r3, #2
 800482a:	e09b      	b.n	8004964 <HAL_SPI_Transmit_DMA+0x158>
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800483a:	b2db      	uxtb	r3, r3
 800483c:	2b01      	cmp	r3, #1
 800483e:	d002      	beq.n	8004846 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8004840:	2302      	movs	r3, #2
 8004842:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004844:	e089      	b.n	800495a <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d002      	beq.n	8004852 <HAL_SPI_Transmit_DMA+0x46>
 800484c:	88fb      	ldrh	r3, [r7, #6]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d102      	bne.n	8004858 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004856:	e080      	b.n	800495a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2203      	movs	r2, #3
 800485c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2200      	movs	r2, #0
 8004864:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	68ba      	ldr	r2, [r7, #8]
 800486a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	88fa      	ldrh	r2, [r7, #6]
 8004870:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	88fa      	ldrh	r2, [r7, #6]
 8004876:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2200      	movs	r2, #0
 800487c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2200      	movs	r2, #0
 8004882:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2200      	movs	r2, #0
 8004888:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2200      	movs	r2, #0
 800488e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2200      	movs	r2, #0
 8004894:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800489e:	d10f      	bne.n	80048c0 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048ae:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048be:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048c4:	4a29      	ldr	r2, [pc, #164]	; (800496c <HAL_SPI_Transmit_DMA+0x160>)
 80048c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048cc:	4a28      	ldr	r2, [pc, #160]	; (8004970 <HAL_SPI_Transmit_DMA+0x164>)
 80048ce:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048d4:	4a27      	ldr	r2, [pc, #156]	; (8004974 <HAL_SPI_Transmit_DMA+0x168>)
 80048d6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048dc:	2200      	movs	r2, #0
 80048de:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e8:	4619      	mov	r1, r3
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	330c      	adds	r3, #12
 80048f0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048f6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80048f8:	f7fe fcd6 	bl	80032a8 <HAL_DMA_Start_IT>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00c      	beq.n	800491c <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004906:	f043 0210 	orr.w	r2, r3, #16
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2201      	movs	r2, #1
 8004916:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800491a:	e01e      	b.n	800495a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004926:	2b40      	cmp	r3, #64	; 0x40
 8004928:	d007      	beq.n	800493a <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004938:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	685a      	ldr	r2, [r3, #4]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f042 0220 	orr.w	r2, r2, #32
 8004948:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	685a      	ldr	r2, [r3, #4]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f042 0202 	orr.w	r2, r2, #2
 8004958:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2200      	movs	r2, #0
 800495e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004962:	7dfb      	ldrb	r3, [r7, #23]
}
 8004964:	4618      	mov	r0, r3
 8004966:	3718      	adds	r7, #24
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}
 800496c:	08004a5d 	.word	0x08004a5d
 8004970:	080049b5 	.word	0x080049b5
 8004974:	08004a79 	.word	0x08004a79

08004978 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8004980:	bf00      	nop
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004994:	bf00      	nop
 8004996:	370c      	adds	r7, #12
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80049a8:	bf00      	nop
 80049aa:	370c      	adds	r7, #12
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b086      	sub	sp, #24
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049c2:	f7fd fce5 	bl	8002390 <HAL_GetTick>
 80049c6:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049d6:	d03b      	beq.n	8004a50 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	685a      	ldr	r2, [r3, #4]
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f022 0220 	bic.w	r2, r2, #32
 80049e6:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	685a      	ldr	r2, [r3, #4]
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f022 0202 	bic.w	r2, r2, #2
 80049f6:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80049f8:	693a      	ldr	r2, [r7, #16]
 80049fa:	2164      	movs	r1, #100	; 0x64
 80049fc:	6978      	ldr	r0, [r7, #20]
 80049fe:	f000 f8e3 	bl	8004bc8 <SPI_EndRxTxTransaction>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d005      	beq.n	8004a14 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a0c:	f043 0220 	orr.w	r2, r3, #32
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d10a      	bne.n	8004a32 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	60fb      	str	r3, [r7, #12]
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	60fb      	str	r3, [r7, #12]
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	60fb      	str	r3, [r7, #12]
 8004a30:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	2200      	movs	r2, #0
 8004a36:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d003      	beq.n	8004a50 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004a48:	6978      	ldr	r0, [r7, #20]
 8004a4a:	f7ff ffa9 	bl	80049a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004a4e:	e002      	b.n	8004a56 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004a50:	6978      	ldr	r0, [r7, #20]
 8004a52:	f7ff ff91 	bl	8004978 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004a56:	3718      	adds	r7, #24
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a68:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004a6a:	68f8      	ldr	r0, [r7, #12]
 8004a6c:	f7ff ff8e 	bl	800498c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004a70:	bf00      	nop
 8004a72:	3710      	adds	r7, #16
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a84:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	685a      	ldr	r2, [r3, #4]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f022 0203 	bic.w	r2, r2, #3
 8004a94:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a9a:	f043 0210 	orr.w	r2, r3, #16
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004aaa:	68f8      	ldr	r0, [r7, #12]
 8004aac:	f7ff ff78 	bl	80049a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004ab0:	bf00      	nop
 8004ab2:	3710      	adds	r7, #16
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b088      	sub	sp, #32
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	60b9      	str	r1, [r7, #8]
 8004ac2:	603b      	str	r3, [r7, #0]
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ac8:	f7fd fc62 	bl	8002390 <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad0:	1a9b      	subs	r3, r3, r2
 8004ad2:	683a      	ldr	r2, [r7, #0]
 8004ad4:	4413      	add	r3, r2
 8004ad6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ad8:	f7fd fc5a 	bl	8002390 <HAL_GetTick>
 8004adc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004ade:	4b39      	ldr	r3, [pc, #228]	; (8004bc4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	015b      	lsls	r3, r3, #5
 8004ae4:	0d1b      	lsrs	r3, r3, #20
 8004ae6:	69fa      	ldr	r2, [r7, #28]
 8004ae8:	fb02 f303 	mul.w	r3, r2, r3
 8004aec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004aee:	e054      	b.n	8004b9a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af6:	d050      	beq.n	8004b9a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004af8:	f7fd fc4a 	bl	8002390 <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	69fa      	ldr	r2, [r7, #28]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d902      	bls.n	8004b0e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004b08:	69fb      	ldr	r3, [r7, #28]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d13d      	bne.n	8004b8a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	685a      	ldr	r2, [r3, #4]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004b1c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b26:	d111      	bne.n	8004b4c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b30:	d004      	beq.n	8004b3c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b3a:	d107      	bne.n	8004b4c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b4a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b54:	d10f      	bne.n	8004b76 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b64:	601a      	str	r2, [r3, #0]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b74:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e017      	b.n	8004bba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d101      	bne.n	8004b94 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004b90:	2300      	movs	r3, #0
 8004b92:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	3b01      	subs	r3, #1
 8004b98:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	689a      	ldr	r2, [r3, #8]
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	68ba      	ldr	r2, [r7, #8]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	bf0c      	ite	eq
 8004baa:	2301      	moveq	r3, #1
 8004bac:	2300      	movne	r3, #0
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	79fb      	ldrb	r3, [r7, #7]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d19b      	bne.n	8004af0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3720      	adds	r7, #32
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	20000000 	.word	0x20000000

08004bc8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b088      	sub	sp, #32
 8004bcc:	af02      	add	r7, sp, #8
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	60b9      	str	r1, [r7, #8]
 8004bd2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004bd4:	4b1b      	ldr	r3, [pc, #108]	; (8004c44 <SPI_EndRxTxTransaction+0x7c>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a1b      	ldr	r2, [pc, #108]	; (8004c48 <SPI_EndRxTxTransaction+0x80>)
 8004bda:	fba2 2303 	umull	r2, r3, r2, r3
 8004bde:	0d5b      	lsrs	r3, r3, #21
 8004be0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004be4:	fb02 f303 	mul.w	r3, r2, r3
 8004be8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bf2:	d112      	bne.n	8004c1a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	9300      	str	r3, [sp, #0]
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	2180      	movs	r1, #128	; 0x80
 8004bfe:	68f8      	ldr	r0, [r7, #12]
 8004c00:	f7ff ff5a 	bl	8004ab8 <SPI_WaitFlagStateUntilTimeout>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d016      	beq.n	8004c38 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c0e:	f043 0220 	orr.w	r2, r3, #32
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004c16:	2303      	movs	r3, #3
 8004c18:	e00f      	b.n	8004c3a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d00a      	beq.n	8004c36 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	3b01      	subs	r3, #1
 8004c24:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c30:	2b80      	cmp	r3, #128	; 0x80
 8004c32:	d0f2      	beq.n	8004c1a <SPI_EndRxTxTransaction+0x52>
 8004c34:	e000      	b.n	8004c38 <SPI_EndRxTxTransaction+0x70>
        break;
 8004c36:	bf00      	nop
  }

  return HAL_OK;
 8004c38:	2300      	movs	r3, #0
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3718      	adds	r7, #24
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	20000000 	.word	0x20000000
 8004c48:	165e9f81 	.word	0x165e9f81

08004c4c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b082      	sub	sp, #8
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d101      	bne.n	8004c5e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e041      	b.n	8004ce2 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d106      	bne.n	8004c78 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f7fd f916 	bl	8001ea4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2202      	movs	r2, #2
 8004c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	3304      	adds	r3, #4
 8004c88:	4619      	mov	r1, r3
 8004c8a:	4610      	mov	r0, r2
 8004c8c:	f000 fcd4 	bl	8005638 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3708      	adds	r7, #8
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
	...

08004cec <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d109      	bne.n	8004d10 <HAL_TIM_OC_Start+0x24>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	bf14      	ite	ne
 8004d08:	2301      	movne	r3, #1
 8004d0a:	2300      	moveq	r3, #0
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	e022      	b.n	8004d56 <HAL_TIM_OC_Start+0x6a>
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	2b04      	cmp	r3, #4
 8004d14:	d109      	bne.n	8004d2a <HAL_TIM_OC_Start+0x3e>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	bf14      	ite	ne
 8004d22:	2301      	movne	r3, #1
 8004d24:	2300      	moveq	r3, #0
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	e015      	b.n	8004d56 <HAL_TIM_OC_Start+0x6a>
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	2b08      	cmp	r3, #8
 8004d2e:	d109      	bne.n	8004d44 <HAL_TIM_OC_Start+0x58>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	bf14      	ite	ne
 8004d3c:	2301      	movne	r3, #1
 8004d3e:	2300      	moveq	r3, #0
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	e008      	b.n	8004d56 <HAL_TIM_OC_Start+0x6a>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	bf14      	ite	ne
 8004d50:	2301      	movne	r3, #1
 8004d52:	2300      	moveq	r3, #0
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d001      	beq.n	8004d5e <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e068      	b.n	8004e30 <HAL_TIM_OC_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d104      	bne.n	8004d6e <HAL_TIM_OC_Start+0x82>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2202      	movs	r2, #2
 8004d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d6c:	e013      	b.n	8004d96 <HAL_TIM_OC_Start+0xaa>
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	2b04      	cmp	r3, #4
 8004d72:	d104      	bne.n	8004d7e <HAL_TIM_OC_Start+0x92>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2202      	movs	r2, #2
 8004d78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d7c:	e00b      	b.n	8004d96 <HAL_TIM_OC_Start+0xaa>
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	2b08      	cmp	r3, #8
 8004d82:	d104      	bne.n	8004d8e <HAL_TIM_OC_Start+0xa2>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2202      	movs	r2, #2
 8004d88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d8c:	e003      	b.n	8004d96 <HAL_TIM_OC_Start+0xaa>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2202      	movs	r2, #2
 8004d92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	6839      	ldr	r1, [r7, #0]
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f000 fe56 	bl	8005a50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a23      	ldr	r2, [pc, #140]	; (8004e38 <HAL_TIM_OC_Start+0x14c>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d107      	bne.n	8004dbe <HAL_TIM_OC_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004dbc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a1d      	ldr	r2, [pc, #116]	; (8004e38 <HAL_TIM_OC_Start+0x14c>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d018      	beq.n	8004dfa <HAL_TIM_OC_Start+0x10e>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dd0:	d013      	beq.n	8004dfa <HAL_TIM_OC_Start+0x10e>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a19      	ldr	r2, [pc, #100]	; (8004e3c <HAL_TIM_OC_Start+0x150>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d00e      	beq.n	8004dfa <HAL_TIM_OC_Start+0x10e>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a17      	ldr	r2, [pc, #92]	; (8004e40 <HAL_TIM_OC_Start+0x154>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d009      	beq.n	8004dfa <HAL_TIM_OC_Start+0x10e>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a16      	ldr	r2, [pc, #88]	; (8004e44 <HAL_TIM_OC_Start+0x158>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d004      	beq.n	8004dfa <HAL_TIM_OC_Start+0x10e>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a14      	ldr	r2, [pc, #80]	; (8004e48 <HAL_TIM_OC_Start+0x15c>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d111      	bne.n	8004e1e <HAL_TIM_OC_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	f003 0307 	and.w	r3, r3, #7
 8004e04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2b06      	cmp	r3, #6
 8004e0a:	d010      	beq.n	8004e2e <HAL_TIM_OC_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f042 0201 	orr.w	r2, r2, #1
 8004e1a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e1c:	e007      	b.n	8004e2e <HAL_TIM_OC_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f042 0201 	orr.w	r2, r2, #1
 8004e2c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e2e:	2300      	movs	r3, #0
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3710      	adds	r7, #16
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	40010000 	.word	0x40010000
 8004e3c:	40000400 	.word	0x40000400
 8004e40:	40000800 	.word	0x40000800
 8004e44:	40000c00 	.word	0x40000c00
 8004e48:	40014000 	.word	0x40014000

08004e4c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e56:	2300      	movs	r3, #0
 8004e58:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d109      	bne.n	8004e74 <HAL_TIM_OC_Start_IT+0x28>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	bf14      	ite	ne
 8004e6c:	2301      	movne	r3, #1
 8004e6e:	2300      	moveq	r3, #0
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	e022      	b.n	8004eba <HAL_TIM_OC_Start_IT+0x6e>
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	2b04      	cmp	r3, #4
 8004e78:	d109      	bne.n	8004e8e <HAL_TIM_OC_Start_IT+0x42>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	bf14      	ite	ne
 8004e86:	2301      	movne	r3, #1
 8004e88:	2300      	moveq	r3, #0
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	e015      	b.n	8004eba <HAL_TIM_OC_Start_IT+0x6e>
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	2b08      	cmp	r3, #8
 8004e92:	d109      	bne.n	8004ea8 <HAL_TIM_OC_Start_IT+0x5c>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	bf14      	ite	ne
 8004ea0:	2301      	movne	r3, #1
 8004ea2:	2300      	moveq	r3, #0
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	e008      	b.n	8004eba <HAL_TIM_OC_Start_IT+0x6e>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	bf14      	ite	ne
 8004eb4:	2301      	movne	r3, #1
 8004eb6:	2300      	moveq	r3, #0
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d001      	beq.n	8004ec2 <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e0b3      	b.n	800502a <HAL_TIM_OC_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d104      	bne.n	8004ed2 <HAL_TIM_OC_Start_IT+0x86>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2202      	movs	r2, #2
 8004ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ed0:	e013      	b.n	8004efa <HAL_TIM_OC_Start_IT+0xae>
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	2b04      	cmp	r3, #4
 8004ed6:	d104      	bne.n	8004ee2 <HAL_TIM_OC_Start_IT+0x96>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2202      	movs	r2, #2
 8004edc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ee0:	e00b      	b.n	8004efa <HAL_TIM_OC_Start_IT+0xae>
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	2b08      	cmp	r3, #8
 8004ee6:	d104      	bne.n	8004ef2 <HAL_TIM_OC_Start_IT+0xa6>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2202      	movs	r2, #2
 8004eec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ef0:	e003      	b.n	8004efa <HAL_TIM_OC_Start_IT+0xae>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2202      	movs	r2, #2
 8004ef6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	2b0c      	cmp	r3, #12
 8004efe:	d841      	bhi.n	8004f84 <HAL_TIM_OC_Start_IT+0x138>
 8004f00:	a201      	add	r2, pc, #4	; (adr r2, 8004f08 <HAL_TIM_OC_Start_IT+0xbc>)
 8004f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f06:	bf00      	nop
 8004f08:	08004f3d 	.word	0x08004f3d
 8004f0c:	08004f85 	.word	0x08004f85
 8004f10:	08004f85 	.word	0x08004f85
 8004f14:	08004f85 	.word	0x08004f85
 8004f18:	08004f4f 	.word	0x08004f4f
 8004f1c:	08004f85 	.word	0x08004f85
 8004f20:	08004f85 	.word	0x08004f85
 8004f24:	08004f85 	.word	0x08004f85
 8004f28:	08004f61 	.word	0x08004f61
 8004f2c:	08004f85 	.word	0x08004f85
 8004f30:	08004f85 	.word	0x08004f85
 8004f34:	08004f85 	.word	0x08004f85
 8004f38:	08004f73 	.word	0x08004f73
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68da      	ldr	r2, [r3, #12]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f042 0202 	orr.w	r2, r2, #2
 8004f4a:	60da      	str	r2, [r3, #12]
      break;
 8004f4c:	e01d      	b.n	8004f8a <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68da      	ldr	r2, [r3, #12]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f042 0204 	orr.w	r2, r2, #4
 8004f5c:	60da      	str	r2, [r3, #12]
      break;
 8004f5e:	e014      	b.n	8004f8a <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68da      	ldr	r2, [r3, #12]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f042 0208 	orr.w	r2, r2, #8
 8004f6e:	60da      	str	r2, [r3, #12]
      break;
 8004f70:	e00b      	b.n	8004f8a <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68da      	ldr	r2, [r3, #12]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f042 0210 	orr.w	r2, r2, #16
 8004f80:	60da      	str	r2, [r3, #12]
      break;
 8004f82:	e002      	b.n	8004f8a <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	73fb      	strb	r3, [r7, #15]
      break;
 8004f88:	bf00      	nop
  }

  if (status == HAL_OK)
 8004f8a:	7bfb      	ldrb	r3, [r7, #15]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d14b      	bne.n	8005028 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2201      	movs	r2, #1
 8004f96:	6839      	ldr	r1, [r7, #0]
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f000 fd59 	bl	8005a50 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a24      	ldr	r2, [pc, #144]	; (8005034 <HAL_TIM_OC_Start_IT+0x1e8>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d107      	bne.n	8004fb8 <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004fb6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a1d      	ldr	r2, [pc, #116]	; (8005034 <HAL_TIM_OC_Start_IT+0x1e8>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d018      	beq.n	8004ff4 <HAL_TIM_OC_Start_IT+0x1a8>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fca:	d013      	beq.n	8004ff4 <HAL_TIM_OC_Start_IT+0x1a8>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a19      	ldr	r2, [pc, #100]	; (8005038 <HAL_TIM_OC_Start_IT+0x1ec>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d00e      	beq.n	8004ff4 <HAL_TIM_OC_Start_IT+0x1a8>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a18      	ldr	r2, [pc, #96]	; (800503c <HAL_TIM_OC_Start_IT+0x1f0>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d009      	beq.n	8004ff4 <HAL_TIM_OC_Start_IT+0x1a8>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a16      	ldr	r2, [pc, #88]	; (8005040 <HAL_TIM_OC_Start_IT+0x1f4>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d004      	beq.n	8004ff4 <HAL_TIM_OC_Start_IT+0x1a8>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a15      	ldr	r2, [pc, #84]	; (8005044 <HAL_TIM_OC_Start_IT+0x1f8>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d111      	bne.n	8005018 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	f003 0307 	and.w	r3, r3, #7
 8004ffe:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	2b06      	cmp	r3, #6
 8005004:	d010      	beq.n	8005028 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f042 0201 	orr.w	r2, r2, #1
 8005014:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005016:	e007      	b.n	8005028 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f042 0201 	orr.w	r2, r2, #1
 8005026:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005028:	7bfb      	ldrb	r3, [r7, #15]
}
 800502a:	4618      	mov	r0, r3
 800502c:	3710      	adds	r7, #16
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	40010000 	.word	0x40010000
 8005038:	40000400 	.word	0x40000400
 800503c:	40000800 	.word	0x40000800
 8005040:	40000c00 	.word	0x40000c00
 8005044:	40014000 	.word	0x40014000

08005048 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b082      	sub	sp, #8
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d101      	bne.n	800505a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e041      	b.n	80050de <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005060:	b2db      	uxtb	r3, r3
 8005062:	2b00      	cmp	r3, #0
 8005064:	d106      	bne.n	8005074 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f7fc fee2 	bl	8001e38 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2202      	movs	r2, #2
 8005078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	3304      	adds	r3, #4
 8005084:	4619      	mov	r1, r3
 8005086:	4610      	mov	r0, r2
 8005088:	f000 fad6 	bl	8005638 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3708      	adds	r7, #8
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}

080050e6 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80050e6:	b580      	push	{r7, lr}
 80050e8:	b082      	sub	sp, #8
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
 80050ee:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d101      	bne.n	80050fa <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e041      	b.n	800517e <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005100:	b2db      	uxtb	r3, r3
 8005102:	2b00      	cmp	r3, #0
 8005104:	d106      	bne.n	8005114 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 f839 	bl	8005186 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2202      	movs	r2, #2
 8005118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	3304      	adds	r3, #4
 8005124:	4619      	mov	r1, r3
 8005126:	4610      	mov	r0, r2
 8005128:	f000 fa86 	bl	8005638 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f022 0208 	bic.w	r2, r2, #8
 800513a:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	6819      	ldr	r1, [r3, #0]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	683a      	ldr	r2, [r7, #0]
 8005148:	430a      	orrs	r2, r1
 800514a:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3708      	adds	r7, #8
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}

08005186 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8005186:	b480      	push	{r7}
 8005188:	b083      	sub	sp, #12
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800518e:	bf00      	nop
 8005190:	370c      	adds	r7, #12
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr

0800519a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800519a:	b580      	push	{r7, lr}
 800519c:	b082      	sub	sp, #8
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	691b      	ldr	r3, [r3, #16]
 80051a8:	f003 0302 	and.w	r3, r3, #2
 80051ac:	2b02      	cmp	r3, #2
 80051ae:	d122      	bne.n	80051f6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	f003 0302 	and.w	r3, r3, #2
 80051ba:	2b02      	cmp	r3, #2
 80051bc:	d11b      	bne.n	80051f6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f06f 0202 	mvn.w	r2, #2
 80051c6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	699b      	ldr	r3, [r3, #24]
 80051d4:	f003 0303 	and.w	r3, r3, #3
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d003      	beq.n	80051e4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f000 fa0d 	bl	80055fc <HAL_TIM_IC_CaptureCallback>
 80051e2:	e005      	b.n	80051f0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f7fc fce5 	bl	8001bb4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f000 fa10 	bl	8005610 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	691b      	ldr	r3, [r3, #16]
 80051fc:	f003 0304 	and.w	r3, r3, #4
 8005200:	2b04      	cmp	r3, #4
 8005202:	d122      	bne.n	800524a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	f003 0304 	and.w	r3, r3, #4
 800520e:	2b04      	cmp	r3, #4
 8005210:	d11b      	bne.n	800524a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f06f 0204 	mvn.w	r2, #4
 800521a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2202      	movs	r2, #2
 8005220:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	699b      	ldr	r3, [r3, #24]
 8005228:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800522c:	2b00      	cmp	r3, #0
 800522e:	d003      	beq.n	8005238 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f000 f9e3 	bl	80055fc <HAL_TIM_IC_CaptureCallback>
 8005236:	e005      	b.n	8005244 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f7fc fcbb 	bl	8001bb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 f9e6 	bl	8005610 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	691b      	ldr	r3, [r3, #16]
 8005250:	f003 0308 	and.w	r3, r3, #8
 8005254:	2b08      	cmp	r3, #8
 8005256:	d122      	bne.n	800529e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	f003 0308 	and.w	r3, r3, #8
 8005262:	2b08      	cmp	r3, #8
 8005264:	d11b      	bne.n	800529e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f06f 0208 	mvn.w	r2, #8
 800526e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2204      	movs	r2, #4
 8005274:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	69db      	ldr	r3, [r3, #28]
 800527c:	f003 0303 	and.w	r3, r3, #3
 8005280:	2b00      	cmp	r3, #0
 8005282:	d003      	beq.n	800528c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 f9b9 	bl	80055fc <HAL_TIM_IC_CaptureCallback>
 800528a:	e005      	b.n	8005298 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f7fc fc91 	bl	8001bb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 f9bc 	bl	8005610 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	691b      	ldr	r3, [r3, #16]
 80052a4:	f003 0310 	and.w	r3, r3, #16
 80052a8:	2b10      	cmp	r3, #16
 80052aa:	d122      	bne.n	80052f2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	f003 0310 	and.w	r3, r3, #16
 80052b6:	2b10      	cmp	r3, #16
 80052b8:	d11b      	bne.n	80052f2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f06f 0210 	mvn.w	r2, #16
 80052c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2208      	movs	r2, #8
 80052c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	69db      	ldr	r3, [r3, #28]
 80052d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d003      	beq.n	80052e0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f000 f98f 	bl	80055fc <HAL_TIM_IC_CaptureCallback>
 80052de:	e005      	b.n	80052ec <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f7fc fc67 	bl	8001bb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 f992 	bl	8005610 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	f003 0301 	and.w	r3, r3, #1
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d10e      	bne.n	800531e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	f003 0301 	and.w	r3, r3, #1
 800530a:	2b01      	cmp	r3, #1
 800530c:	d107      	bne.n	800531e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f06f 0201 	mvn.w	r2, #1
 8005316:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f000 f965 	bl	80055e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	691b      	ldr	r3, [r3, #16]
 8005324:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005328:	2b80      	cmp	r3, #128	; 0x80
 800532a:	d10e      	bne.n	800534a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005336:	2b80      	cmp	r3, #128	; 0x80
 8005338:	d107      	bne.n	800534a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005342:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f000 fc21 	bl	8005b8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005354:	2b40      	cmp	r3, #64	; 0x40
 8005356:	d10e      	bne.n	8005376 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005362:	2b40      	cmp	r3, #64	; 0x40
 8005364:	d107      	bne.n	8005376 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800536e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f000 f957 	bl	8005624 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	691b      	ldr	r3, [r3, #16]
 800537c:	f003 0320 	and.w	r3, r3, #32
 8005380:	2b20      	cmp	r3, #32
 8005382:	d10e      	bne.n	80053a2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	f003 0320 	and.w	r3, r3, #32
 800538e:	2b20      	cmp	r3, #32
 8005390:	d107      	bne.n	80053a2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f06f 0220 	mvn.w	r2, #32
 800539a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f000 fbeb 	bl	8005b78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053a2:	bf00      	nop
 80053a4:	3708      	adds	r7, #8
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
	...

080053ac <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b086      	sub	sp, #24
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	60b9      	str	r1, [r7, #8]
 80053b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053b8:	2300      	movs	r3, #0
 80053ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d101      	bne.n	80053ca <HAL_TIM_OC_ConfigChannel+0x1e>
 80053c6:	2302      	movs	r3, #2
 80053c8:	e048      	b.n	800545c <HAL_TIM_OC_ConfigChannel+0xb0>
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2201      	movs	r2, #1
 80053ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2b0c      	cmp	r3, #12
 80053d6:	d839      	bhi.n	800544c <HAL_TIM_OC_ConfigChannel+0xa0>
 80053d8:	a201      	add	r2, pc, #4	; (adr r2, 80053e0 <HAL_TIM_OC_ConfigChannel+0x34>)
 80053da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053de:	bf00      	nop
 80053e0:	08005415 	.word	0x08005415
 80053e4:	0800544d 	.word	0x0800544d
 80053e8:	0800544d 	.word	0x0800544d
 80053ec:	0800544d 	.word	0x0800544d
 80053f0:	08005423 	.word	0x08005423
 80053f4:	0800544d 	.word	0x0800544d
 80053f8:	0800544d 	.word	0x0800544d
 80053fc:	0800544d 	.word	0x0800544d
 8005400:	08005431 	.word	0x08005431
 8005404:	0800544d 	.word	0x0800544d
 8005408:	0800544d 	.word	0x0800544d
 800540c:	0800544d 	.word	0x0800544d
 8005410:	0800543f 	.word	0x0800543f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68b9      	ldr	r1, [r7, #8]
 800541a:	4618      	mov	r0, r3
 800541c:	f000 f98c 	bl	8005738 <TIM_OC1_SetConfig>
      break;
 8005420:	e017      	b.n	8005452 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	68b9      	ldr	r1, [r7, #8]
 8005428:	4618      	mov	r0, r3
 800542a:	f000 f9eb 	bl	8005804 <TIM_OC2_SetConfig>
      break;
 800542e:	e010      	b.n	8005452 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68b9      	ldr	r1, [r7, #8]
 8005436:	4618      	mov	r0, r3
 8005438:	f000 fa50 	bl	80058dc <TIM_OC3_SetConfig>
      break;
 800543c:	e009      	b.n	8005452 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	68b9      	ldr	r1, [r7, #8]
 8005444:	4618      	mov	r0, r3
 8005446:	f000 fab3 	bl	80059b0 <TIM_OC4_SetConfig>
      break;
 800544a:	e002      	b.n	8005452 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	75fb      	strb	r3, [r7, #23]
      break;
 8005450:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2200      	movs	r2, #0
 8005456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800545a:	7dfb      	ldrb	r3, [r7, #23]
}
 800545c:	4618      	mov	r0, r3
 800545e:	3718      	adds	r7, #24
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}

08005464 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b086      	sub	sp, #24
 8005468:	af00      	add	r7, sp, #0
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005470:	2300      	movs	r3, #0
 8005472:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800547a:	2b01      	cmp	r3, #1
 800547c:	d101      	bne.n	8005482 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800547e:	2302      	movs	r3, #2
 8005480:	e0ae      	b.n	80055e0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2201      	movs	r2, #1
 8005486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2b0c      	cmp	r3, #12
 800548e:	f200 809f 	bhi.w	80055d0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005492:	a201      	add	r2, pc, #4	; (adr r2, 8005498 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005498:	080054cd 	.word	0x080054cd
 800549c:	080055d1 	.word	0x080055d1
 80054a0:	080055d1 	.word	0x080055d1
 80054a4:	080055d1 	.word	0x080055d1
 80054a8:	0800550d 	.word	0x0800550d
 80054ac:	080055d1 	.word	0x080055d1
 80054b0:	080055d1 	.word	0x080055d1
 80054b4:	080055d1 	.word	0x080055d1
 80054b8:	0800554f 	.word	0x0800554f
 80054bc:	080055d1 	.word	0x080055d1
 80054c0:	080055d1 	.word	0x080055d1
 80054c4:	080055d1 	.word	0x080055d1
 80054c8:	0800558f 	.word	0x0800558f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68b9      	ldr	r1, [r7, #8]
 80054d2:	4618      	mov	r0, r3
 80054d4:	f000 f930 	bl	8005738 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	699a      	ldr	r2, [r3, #24]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f042 0208 	orr.w	r2, r2, #8
 80054e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	699a      	ldr	r2, [r3, #24]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f022 0204 	bic.w	r2, r2, #4
 80054f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	6999      	ldr	r1, [r3, #24]
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	691a      	ldr	r2, [r3, #16]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	430a      	orrs	r2, r1
 8005508:	619a      	str	r2, [r3, #24]
      break;
 800550a:	e064      	b.n	80055d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68b9      	ldr	r1, [r7, #8]
 8005512:	4618      	mov	r0, r3
 8005514:	f000 f976 	bl	8005804 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	699a      	ldr	r2, [r3, #24]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005526:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	699a      	ldr	r2, [r3, #24]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005536:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	6999      	ldr	r1, [r3, #24]
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	021a      	lsls	r2, r3, #8
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	430a      	orrs	r2, r1
 800554a:	619a      	str	r2, [r3, #24]
      break;
 800554c:	e043      	b.n	80055d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	68b9      	ldr	r1, [r7, #8]
 8005554:	4618      	mov	r0, r3
 8005556:	f000 f9c1 	bl	80058dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	69da      	ldr	r2, [r3, #28]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f042 0208 	orr.w	r2, r2, #8
 8005568:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	69da      	ldr	r2, [r3, #28]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f022 0204 	bic.w	r2, r2, #4
 8005578:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	69d9      	ldr	r1, [r3, #28]
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	691a      	ldr	r2, [r3, #16]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	430a      	orrs	r2, r1
 800558a:	61da      	str	r2, [r3, #28]
      break;
 800558c:	e023      	b.n	80055d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68b9      	ldr	r1, [r7, #8]
 8005594:	4618      	mov	r0, r3
 8005596:	f000 fa0b 	bl	80059b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	69da      	ldr	r2, [r3, #28]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	69da      	ldr	r2, [r3, #28]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	69d9      	ldr	r1, [r3, #28]
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	691b      	ldr	r3, [r3, #16]
 80055c4:	021a      	lsls	r2, r3, #8
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	430a      	orrs	r2, r1
 80055cc:	61da      	str	r2, [r3, #28]
      break;
 80055ce:	e002      	b.n	80055d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	75fb      	strb	r3, [r7, #23]
      break;
 80055d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2200      	movs	r2, #0
 80055da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80055de:	7dfb      	ldrb	r3, [r7, #23]
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3718      	adds	r7, #24
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80055f0:	bf00      	nop
 80055f2:	370c      	adds	r7, #12
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005604:	bf00      	nop
 8005606:	370c      	adds	r7, #12
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005618:	bf00      	nop
 800561a:	370c      	adds	r7, #12
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800562c:	bf00      	nop
 800562e:	370c      	adds	r7, #12
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005638:	b480      	push	{r7}
 800563a:	b085      	sub	sp, #20
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a34      	ldr	r2, [pc, #208]	; (800571c <TIM_Base_SetConfig+0xe4>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d00f      	beq.n	8005670 <TIM_Base_SetConfig+0x38>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005656:	d00b      	beq.n	8005670 <TIM_Base_SetConfig+0x38>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a31      	ldr	r2, [pc, #196]	; (8005720 <TIM_Base_SetConfig+0xe8>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d007      	beq.n	8005670 <TIM_Base_SetConfig+0x38>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4a30      	ldr	r2, [pc, #192]	; (8005724 <TIM_Base_SetConfig+0xec>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d003      	beq.n	8005670 <TIM_Base_SetConfig+0x38>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4a2f      	ldr	r2, [pc, #188]	; (8005728 <TIM_Base_SetConfig+0xf0>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d108      	bne.n	8005682 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005676:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	4313      	orrs	r3, r2
 8005680:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a25      	ldr	r2, [pc, #148]	; (800571c <TIM_Base_SetConfig+0xe4>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d01b      	beq.n	80056c2 <TIM_Base_SetConfig+0x8a>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005690:	d017      	beq.n	80056c2 <TIM_Base_SetConfig+0x8a>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a22      	ldr	r2, [pc, #136]	; (8005720 <TIM_Base_SetConfig+0xe8>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d013      	beq.n	80056c2 <TIM_Base_SetConfig+0x8a>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a21      	ldr	r2, [pc, #132]	; (8005724 <TIM_Base_SetConfig+0xec>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d00f      	beq.n	80056c2 <TIM_Base_SetConfig+0x8a>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a20      	ldr	r2, [pc, #128]	; (8005728 <TIM_Base_SetConfig+0xf0>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d00b      	beq.n	80056c2 <TIM_Base_SetConfig+0x8a>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a1f      	ldr	r2, [pc, #124]	; (800572c <TIM_Base_SetConfig+0xf4>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d007      	beq.n	80056c2 <TIM_Base_SetConfig+0x8a>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a1e      	ldr	r2, [pc, #120]	; (8005730 <TIM_Base_SetConfig+0xf8>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d003      	beq.n	80056c2 <TIM_Base_SetConfig+0x8a>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a1d      	ldr	r2, [pc, #116]	; (8005734 <TIM_Base_SetConfig+0xfc>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d108      	bne.n	80056d4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	68fa      	ldr	r2, [r7, #12]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	695b      	ldr	r3, [r3, #20]
 80056de:	4313      	orrs	r3, r2
 80056e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	68fa      	ldr	r2, [r7, #12]
 80056e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	689a      	ldr	r2, [r3, #8]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4a08      	ldr	r2, [pc, #32]	; (800571c <TIM_Base_SetConfig+0xe4>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d103      	bne.n	8005708 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	691a      	ldr	r2, [r3, #16]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	615a      	str	r2, [r3, #20]
}
 800570e:	bf00      	nop
 8005710:	3714      	adds	r7, #20
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr
 800571a:	bf00      	nop
 800571c:	40010000 	.word	0x40010000
 8005720:	40000400 	.word	0x40000400
 8005724:	40000800 	.word	0x40000800
 8005728:	40000c00 	.word	0x40000c00
 800572c:	40014000 	.word	0x40014000
 8005730:	40014400 	.word	0x40014400
 8005734:	40014800 	.word	0x40014800

08005738 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005738:	b480      	push	{r7}
 800573a:	b087      	sub	sp, #28
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6a1b      	ldr	r3, [r3, #32]
 8005746:	f023 0201 	bic.w	r2, r3, #1
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a1b      	ldr	r3, [r3, #32]
 8005752:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	699b      	ldr	r3, [r3, #24]
 800575e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005766:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f023 0303 	bic.w	r3, r3, #3
 800576e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	4313      	orrs	r3, r2
 8005778:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	f023 0302 	bic.w	r3, r3, #2
 8005780:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	697a      	ldr	r2, [r7, #20]
 8005788:	4313      	orrs	r3, r2
 800578a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4a1c      	ldr	r2, [pc, #112]	; (8005800 <TIM_OC1_SetConfig+0xc8>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d10c      	bne.n	80057ae <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	f023 0308 	bic.w	r3, r3, #8
 800579a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	68db      	ldr	r3, [r3, #12]
 80057a0:	697a      	ldr	r2, [r7, #20]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	f023 0304 	bic.w	r3, r3, #4
 80057ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a13      	ldr	r2, [pc, #76]	; (8005800 <TIM_OC1_SetConfig+0xc8>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d111      	bne.n	80057da <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	695b      	ldr	r3, [r3, #20]
 80057ca:	693a      	ldr	r2, [r7, #16]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	699b      	ldr	r3, [r3, #24]
 80057d4:	693a      	ldr	r2, [r7, #16]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	693a      	ldr	r2, [r7, #16]
 80057de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	68fa      	ldr	r2, [r7, #12]
 80057e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	685a      	ldr	r2, [r3, #4]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	697a      	ldr	r2, [r7, #20]
 80057f2:	621a      	str	r2, [r3, #32]
}
 80057f4:	bf00      	nop
 80057f6:	371c      	adds	r7, #28
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr
 8005800:	40010000 	.word	0x40010000

08005804 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005804:	b480      	push	{r7}
 8005806:	b087      	sub	sp, #28
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a1b      	ldr	r3, [r3, #32]
 8005812:	f023 0210 	bic.w	r2, r3, #16
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a1b      	ldr	r3, [r3, #32]
 800581e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	699b      	ldr	r3, [r3, #24]
 800582a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005832:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800583a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	021b      	lsls	r3, r3, #8
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	4313      	orrs	r3, r2
 8005846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	f023 0320 	bic.w	r3, r3, #32
 800584e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	011b      	lsls	r3, r3, #4
 8005856:	697a      	ldr	r2, [r7, #20]
 8005858:	4313      	orrs	r3, r2
 800585a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	4a1e      	ldr	r2, [pc, #120]	; (80058d8 <TIM_OC2_SetConfig+0xd4>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d10d      	bne.n	8005880 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800586a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	011b      	lsls	r3, r3, #4
 8005872:	697a      	ldr	r2, [r7, #20]
 8005874:	4313      	orrs	r3, r2
 8005876:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800587e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a15      	ldr	r2, [pc, #84]	; (80058d8 <TIM_OC2_SetConfig+0xd4>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d113      	bne.n	80058b0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800588e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005896:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	695b      	ldr	r3, [r3, #20]
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	693a      	ldr	r2, [r7, #16]
 80058a0:	4313      	orrs	r3, r2
 80058a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	699b      	ldr	r3, [r3, #24]
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	693a      	ldr	r2, [r7, #16]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	693a      	ldr	r2, [r7, #16]
 80058b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	68fa      	ldr	r2, [r7, #12]
 80058ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	685a      	ldr	r2, [r3, #4]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	697a      	ldr	r2, [r7, #20]
 80058c8:	621a      	str	r2, [r3, #32]
}
 80058ca:	bf00      	nop
 80058cc:	371c      	adds	r7, #28
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr
 80058d6:	bf00      	nop
 80058d8:	40010000 	.word	0x40010000

080058dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058dc:	b480      	push	{r7}
 80058de:	b087      	sub	sp, #28
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a1b      	ldr	r3, [r3, #32]
 80058ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6a1b      	ldr	r3, [r3, #32]
 80058f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	69db      	ldr	r3, [r3, #28]
 8005902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800590a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f023 0303 	bic.w	r3, r3, #3
 8005912:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	68fa      	ldr	r2, [r7, #12]
 800591a:	4313      	orrs	r3, r2
 800591c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005924:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	021b      	lsls	r3, r3, #8
 800592c:	697a      	ldr	r2, [r7, #20]
 800592e:	4313      	orrs	r3, r2
 8005930:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a1d      	ldr	r2, [pc, #116]	; (80059ac <TIM_OC3_SetConfig+0xd0>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d10d      	bne.n	8005956 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005940:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	021b      	lsls	r3, r3, #8
 8005948:	697a      	ldr	r2, [r7, #20]
 800594a:	4313      	orrs	r3, r2
 800594c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005954:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a14      	ldr	r2, [pc, #80]	; (80059ac <TIM_OC3_SetConfig+0xd0>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d113      	bne.n	8005986 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005964:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800596c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	695b      	ldr	r3, [r3, #20]
 8005972:	011b      	lsls	r3, r3, #4
 8005974:	693a      	ldr	r2, [r7, #16]
 8005976:	4313      	orrs	r3, r2
 8005978:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	699b      	ldr	r3, [r3, #24]
 800597e:	011b      	lsls	r3, r3, #4
 8005980:	693a      	ldr	r2, [r7, #16]
 8005982:	4313      	orrs	r3, r2
 8005984:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	693a      	ldr	r2, [r7, #16]
 800598a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	68fa      	ldr	r2, [r7, #12]
 8005990:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	685a      	ldr	r2, [r3, #4]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	697a      	ldr	r2, [r7, #20]
 800599e:	621a      	str	r2, [r3, #32]
}
 80059a0:	bf00      	nop
 80059a2:	371c      	adds	r7, #28
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr
 80059ac:	40010000 	.word	0x40010000

080059b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b087      	sub	sp, #28
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6a1b      	ldr	r3, [r3, #32]
 80059be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a1b      	ldr	r3, [r3, #32]
 80059ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	69db      	ldr	r3, [r3, #28]
 80059d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	021b      	lsls	r3, r3, #8
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	031b      	lsls	r3, r3, #12
 8005a02:	693a      	ldr	r2, [r7, #16]
 8005a04:	4313      	orrs	r3, r2
 8005a06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4a10      	ldr	r2, [pc, #64]	; (8005a4c <TIM_OC4_SetConfig+0x9c>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d109      	bne.n	8005a24 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	695b      	ldr	r3, [r3, #20]
 8005a1c:	019b      	lsls	r3, r3, #6
 8005a1e:	697a      	ldr	r2, [r7, #20]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	697a      	ldr	r2, [r7, #20]
 8005a28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	685a      	ldr	r2, [r3, #4]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	693a      	ldr	r2, [r7, #16]
 8005a3c:	621a      	str	r2, [r3, #32]
}
 8005a3e:	bf00      	nop
 8005a40:	371c      	adds	r7, #28
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr
 8005a4a:	bf00      	nop
 8005a4c:	40010000 	.word	0x40010000

08005a50 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b087      	sub	sp, #28
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	f003 031f 	and.w	r3, r3, #31
 8005a62:	2201      	movs	r2, #1
 8005a64:	fa02 f303 	lsl.w	r3, r2, r3
 8005a68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	6a1a      	ldr	r2, [r3, #32]
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	43db      	mvns	r3, r3
 8005a72:	401a      	ands	r2, r3
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6a1a      	ldr	r2, [r3, #32]
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	f003 031f 	and.w	r3, r3, #31
 8005a82:	6879      	ldr	r1, [r7, #4]
 8005a84:	fa01 f303 	lsl.w	r3, r1, r3
 8005a88:	431a      	orrs	r2, r3
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	621a      	str	r2, [r3, #32]
}
 8005a8e:	bf00      	nop
 8005a90:	371c      	adds	r7, #28
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr
	...

08005a9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b085      	sub	sp, #20
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d101      	bne.n	8005ab4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ab0:	2302      	movs	r3, #2
 8005ab2:	e050      	b.n	8005b56 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2202      	movs	r2, #2
 8005ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ada:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a1c      	ldr	r2, [pc, #112]	; (8005b64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d018      	beq.n	8005b2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b00:	d013      	beq.n	8005b2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a18      	ldr	r2, [pc, #96]	; (8005b68 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d00e      	beq.n	8005b2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a16      	ldr	r2, [pc, #88]	; (8005b6c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d009      	beq.n	8005b2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a15      	ldr	r2, [pc, #84]	; (8005b70 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d004      	beq.n	8005b2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a13      	ldr	r2, [pc, #76]	; (8005b74 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d10c      	bne.n	8005b44 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	68ba      	ldr	r2, [r7, #8]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	68ba      	ldr	r2, [r7, #8]
 8005b42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b54:	2300      	movs	r3, #0
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3714      	adds	r7, #20
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr
 8005b62:	bf00      	nop
 8005b64:	40010000 	.word	0x40010000
 8005b68:	40000400 	.word	0x40000400
 8005b6c:	40000800 	.word	0x40000800
 8005b70:	40000c00 	.word	0x40000c00
 8005b74:	40014000 	.word	0x40014000

08005b78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b083      	sub	sp, #12
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b80:	bf00      	nop
 8005b82:	370c      	adds	r7, #12
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b083      	sub	sp, #12
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b94:	bf00      	nop
 8005b96:	370c      	adds	r7, #12
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b082      	sub	sp, #8
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d101      	bne.n	8005bb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e03f      	b.n	8005c32 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d106      	bne.n	8005bcc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f7fc f9f4 	bl	8001fb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2224      	movs	r2, #36	; 0x24
 8005bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	68da      	ldr	r2, [r3, #12]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005be2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f000 f829 	bl	8005c3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	691a      	ldr	r2, [r3, #16]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005bf8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	695a      	ldr	r2, [r3, #20]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	68da      	ldr	r2, [r3, #12]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2220      	movs	r2, #32
 8005c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2220      	movs	r2, #32
 8005c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3708      	adds	r7, #8
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
	...

08005c3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c40:	b09f      	sub	sp, #124	; 0x7c
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	691b      	ldr	r3, [r3, #16]
 8005c4c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005c50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c52:	68d9      	ldr	r1, [r3, #12]
 8005c54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	ea40 0301 	orr.w	r3, r0, r1
 8005c5c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005c5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c60:	689a      	ldr	r2, [r3, #8]
 8005c62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	431a      	orrs	r2, r3
 8005c68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c6a:	695b      	ldr	r3, [r3, #20]
 8005c6c:	431a      	orrs	r2, r3
 8005c6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c70:	69db      	ldr	r3, [r3, #28]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005c76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005c80:	f021 010c 	bic.w	r1, r1, #12
 8005c84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c8a:	430b      	orrs	r3, r1
 8005c8c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	695b      	ldr	r3, [r3, #20]
 8005c94:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005c98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c9a:	6999      	ldr	r1, [r3, #24]
 8005c9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	ea40 0301 	orr.w	r3, r0, r1
 8005ca4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ca6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	4bc5      	ldr	r3, [pc, #788]	; (8005fc0 <UART_SetConfig+0x384>)
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d004      	beq.n	8005cba <UART_SetConfig+0x7e>
 8005cb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	4bc3      	ldr	r3, [pc, #780]	; (8005fc4 <UART_SetConfig+0x388>)
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d103      	bne.n	8005cc2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005cba:	f7fe fbcd 	bl	8004458 <HAL_RCC_GetPCLK2Freq>
 8005cbe:	6778      	str	r0, [r7, #116]	; 0x74
 8005cc0:	e002      	b.n	8005cc8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005cc2:	f7fe fbb5 	bl	8004430 <HAL_RCC_GetPCLK1Freq>
 8005cc6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cca:	69db      	ldr	r3, [r3, #28]
 8005ccc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cd0:	f040 80b6 	bne.w	8005e40 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005cd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cd6:	461c      	mov	r4, r3
 8005cd8:	f04f 0500 	mov.w	r5, #0
 8005cdc:	4622      	mov	r2, r4
 8005cde:	462b      	mov	r3, r5
 8005ce0:	1891      	adds	r1, r2, r2
 8005ce2:	6439      	str	r1, [r7, #64]	; 0x40
 8005ce4:	415b      	adcs	r3, r3
 8005ce6:	647b      	str	r3, [r7, #68]	; 0x44
 8005ce8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005cec:	1912      	adds	r2, r2, r4
 8005cee:	eb45 0303 	adc.w	r3, r5, r3
 8005cf2:	f04f 0000 	mov.w	r0, #0
 8005cf6:	f04f 0100 	mov.w	r1, #0
 8005cfa:	00d9      	lsls	r1, r3, #3
 8005cfc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005d00:	00d0      	lsls	r0, r2, #3
 8005d02:	4602      	mov	r2, r0
 8005d04:	460b      	mov	r3, r1
 8005d06:	1911      	adds	r1, r2, r4
 8005d08:	6639      	str	r1, [r7, #96]	; 0x60
 8005d0a:	416b      	adcs	r3, r5
 8005d0c:	667b      	str	r3, [r7, #100]	; 0x64
 8005d0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	461a      	mov	r2, r3
 8005d14:	f04f 0300 	mov.w	r3, #0
 8005d18:	1891      	adds	r1, r2, r2
 8005d1a:	63b9      	str	r1, [r7, #56]	; 0x38
 8005d1c:	415b      	adcs	r3, r3
 8005d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d20:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005d24:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005d28:	f7fa ff96 	bl	8000c58 <__aeabi_uldivmod>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	460b      	mov	r3, r1
 8005d30:	4ba5      	ldr	r3, [pc, #660]	; (8005fc8 <UART_SetConfig+0x38c>)
 8005d32:	fba3 2302 	umull	r2, r3, r3, r2
 8005d36:	095b      	lsrs	r3, r3, #5
 8005d38:	011e      	lsls	r6, r3, #4
 8005d3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d3c:	461c      	mov	r4, r3
 8005d3e:	f04f 0500 	mov.w	r5, #0
 8005d42:	4622      	mov	r2, r4
 8005d44:	462b      	mov	r3, r5
 8005d46:	1891      	adds	r1, r2, r2
 8005d48:	6339      	str	r1, [r7, #48]	; 0x30
 8005d4a:	415b      	adcs	r3, r3
 8005d4c:	637b      	str	r3, [r7, #52]	; 0x34
 8005d4e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005d52:	1912      	adds	r2, r2, r4
 8005d54:	eb45 0303 	adc.w	r3, r5, r3
 8005d58:	f04f 0000 	mov.w	r0, #0
 8005d5c:	f04f 0100 	mov.w	r1, #0
 8005d60:	00d9      	lsls	r1, r3, #3
 8005d62:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005d66:	00d0      	lsls	r0, r2, #3
 8005d68:	4602      	mov	r2, r0
 8005d6a:	460b      	mov	r3, r1
 8005d6c:	1911      	adds	r1, r2, r4
 8005d6e:	65b9      	str	r1, [r7, #88]	; 0x58
 8005d70:	416b      	adcs	r3, r5
 8005d72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	461a      	mov	r2, r3
 8005d7a:	f04f 0300 	mov.w	r3, #0
 8005d7e:	1891      	adds	r1, r2, r2
 8005d80:	62b9      	str	r1, [r7, #40]	; 0x28
 8005d82:	415b      	adcs	r3, r3
 8005d84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005d8a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005d8e:	f7fa ff63 	bl	8000c58 <__aeabi_uldivmod>
 8005d92:	4602      	mov	r2, r0
 8005d94:	460b      	mov	r3, r1
 8005d96:	4b8c      	ldr	r3, [pc, #560]	; (8005fc8 <UART_SetConfig+0x38c>)
 8005d98:	fba3 1302 	umull	r1, r3, r3, r2
 8005d9c:	095b      	lsrs	r3, r3, #5
 8005d9e:	2164      	movs	r1, #100	; 0x64
 8005da0:	fb01 f303 	mul.w	r3, r1, r3
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	00db      	lsls	r3, r3, #3
 8005da8:	3332      	adds	r3, #50	; 0x32
 8005daa:	4a87      	ldr	r2, [pc, #540]	; (8005fc8 <UART_SetConfig+0x38c>)
 8005dac:	fba2 2303 	umull	r2, r3, r2, r3
 8005db0:	095b      	lsrs	r3, r3, #5
 8005db2:	005b      	lsls	r3, r3, #1
 8005db4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005db8:	441e      	add	r6, r3
 8005dba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f04f 0100 	mov.w	r1, #0
 8005dc2:	4602      	mov	r2, r0
 8005dc4:	460b      	mov	r3, r1
 8005dc6:	1894      	adds	r4, r2, r2
 8005dc8:	623c      	str	r4, [r7, #32]
 8005dca:	415b      	adcs	r3, r3
 8005dcc:	627b      	str	r3, [r7, #36]	; 0x24
 8005dce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005dd2:	1812      	adds	r2, r2, r0
 8005dd4:	eb41 0303 	adc.w	r3, r1, r3
 8005dd8:	f04f 0400 	mov.w	r4, #0
 8005ddc:	f04f 0500 	mov.w	r5, #0
 8005de0:	00dd      	lsls	r5, r3, #3
 8005de2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005de6:	00d4      	lsls	r4, r2, #3
 8005de8:	4622      	mov	r2, r4
 8005dea:	462b      	mov	r3, r5
 8005dec:	1814      	adds	r4, r2, r0
 8005dee:	653c      	str	r4, [r7, #80]	; 0x50
 8005df0:	414b      	adcs	r3, r1
 8005df2:	657b      	str	r3, [r7, #84]	; 0x54
 8005df4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	461a      	mov	r2, r3
 8005dfa:	f04f 0300 	mov.w	r3, #0
 8005dfe:	1891      	adds	r1, r2, r2
 8005e00:	61b9      	str	r1, [r7, #24]
 8005e02:	415b      	adcs	r3, r3
 8005e04:	61fb      	str	r3, [r7, #28]
 8005e06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e0a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005e0e:	f7fa ff23 	bl	8000c58 <__aeabi_uldivmod>
 8005e12:	4602      	mov	r2, r0
 8005e14:	460b      	mov	r3, r1
 8005e16:	4b6c      	ldr	r3, [pc, #432]	; (8005fc8 <UART_SetConfig+0x38c>)
 8005e18:	fba3 1302 	umull	r1, r3, r3, r2
 8005e1c:	095b      	lsrs	r3, r3, #5
 8005e1e:	2164      	movs	r1, #100	; 0x64
 8005e20:	fb01 f303 	mul.w	r3, r1, r3
 8005e24:	1ad3      	subs	r3, r2, r3
 8005e26:	00db      	lsls	r3, r3, #3
 8005e28:	3332      	adds	r3, #50	; 0x32
 8005e2a:	4a67      	ldr	r2, [pc, #412]	; (8005fc8 <UART_SetConfig+0x38c>)
 8005e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8005e30:	095b      	lsrs	r3, r3, #5
 8005e32:	f003 0207 	and.w	r2, r3, #7
 8005e36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4432      	add	r2, r6
 8005e3c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005e3e:	e0b9      	b.n	8005fb4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e42:	461c      	mov	r4, r3
 8005e44:	f04f 0500 	mov.w	r5, #0
 8005e48:	4622      	mov	r2, r4
 8005e4a:	462b      	mov	r3, r5
 8005e4c:	1891      	adds	r1, r2, r2
 8005e4e:	6139      	str	r1, [r7, #16]
 8005e50:	415b      	adcs	r3, r3
 8005e52:	617b      	str	r3, [r7, #20]
 8005e54:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005e58:	1912      	adds	r2, r2, r4
 8005e5a:	eb45 0303 	adc.w	r3, r5, r3
 8005e5e:	f04f 0000 	mov.w	r0, #0
 8005e62:	f04f 0100 	mov.w	r1, #0
 8005e66:	00d9      	lsls	r1, r3, #3
 8005e68:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005e6c:	00d0      	lsls	r0, r2, #3
 8005e6e:	4602      	mov	r2, r0
 8005e70:	460b      	mov	r3, r1
 8005e72:	eb12 0804 	adds.w	r8, r2, r4
 8005e76:	eb43 0905 	adc.w	r9, r3, r5
 8005e7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f04f 0100 	mov.w	r1, #0
 8005e84:	f04f 0200 	mov.w	r2, #0
 8005e88:	f04f 0300 	mov.w	r3, #0
 8005e8c:	008b      	lsls	r3, r1, #2
 8005e8e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005e92:	0082      	lsls	r2, r0, #2
 8005e94:	4640      	mov	r0, r8
 8005e96:	4649      	mov	r1, r9
 8005e98:	f7fa fede 	bl	8000c58 <__aeabi_uldivmod>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	460b      	mov	r3, r1
 8005ea0:	4b49      	ldr	r3, [pc, #292]	; (8005fc8 <UART_SetConfig+0x38c>)
 8005ea2:	fba3 2302 	umull	r2, r3, r3, r2
 8005ea6:	095b      	lsrs	r3, r3, #5
 8005ea8:	011e      	lsls	r6, r3, #4
 8005eaa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005eac:	4618      	mov	r0, r3
 8005eae:	f04f 0100 	mov.w	r1, #0
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	460b      	mov	r3, r1
 8005eb6:	1894      	adds	r4, r2, r2
 8005eb8:	60bc      	str	r4, [r7, #8]
 8005eba:	415b      	adcs	r3, r3
 8005ebc:	60fb      	str	r3, [r7, #12]
 8005ebe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ec2:	1812      	adds	r2, r2, r0
 8005ec4:	eb41 0303 	adc.w	r3, r1, r3
 8005ec8:	f04f 0400 	mov.w	r4, #0
 8005ecc:	f04f 0500 	mov.w	r5, #0
 8005ed0:	00dd      	lsls	r5, r3, #3
 8005ed2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005ed6:	00d4      	lsls	r4, r2, #3
 8005ed8:	4622      	mov	r2, r4
 8005eda:	462b      	mov	r3, r5
 8005edc:	1814      	adds	r4, r2, r0
 8005ede:	64bc      	str	r4, [r7, #72]	; 0x48
 8005ee0:	414b      	adcs	r3, r1
 8005ee2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ee4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f04f 0100 	mov.w	r1, #0
 8005eee:	f04f 0200 	mov.w	r2, #0
 8005ef2:	f04f 0300 	mov.w	r3, #0
 8005ef6:	008b      	lsls	r3, r1, #2
 8005ef8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005efc:	0082      	lsls	r2, r0, #2
 8005efe:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005f02:	f7fa fea9 	bl	8000c58 <__aeabi_uldivmod>
 8005f06:	4602      	mov	r2, r0
 8005f08:	460b      	mov	r3, r1
 8005f0a:	4b2f      	ldr	r3, [pc, #188]	; (8005fc8 <UART_SetConfig+0x38c>)
 8005f0c:	fba3 1302 	umull	r1, r3, r3, r2
 8005f10:	095b      	lsrs	r3, r3, #5
 8005f12:	2164      	movs	r1, #100	; 0x64
 8005f14:	fb01 f303 	mul.w	r3, r1, r3
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	011b      	lsls	r3, r3, #4
 8005f1c:	3332      	adds	r3, #50	; 0x32
 8005f1e:	4a2a      	ldr	r2, [pc, #168]	; (8005fc8 <UART_SetConfig+0x38c>)
 8005f20:	fba2 2303 	umull	r2, r3, r2, r3
 8005f24:	095b      	lsrs	r3, r3, #5
 8005f26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f2a:	441e      	add	r6, r3
 8005f2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f04f 0100 	mov.w	r1, #0
 8005f34:	4602      	mov	r2, r0
 8005f36:	460b      	mov	r3, r1
 8005f38:	1894      	adds	r4, r2, r2
 8005f3a:	603c      	str	r4, [r7, #0]
 8005f3c:	415b      	adcs	r3, r3
 8005f3e:	607b      	str	r3, [r7, #4]
 8005f40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f44:	1812      	adds	r2, r2, r0
 8005f46:	eb41 0303 	adc.w	r3, r1, r3
 8005f4a:	f04f 0400 	mov.w	r4, #0
 8005f4e:	f04f 0500 	mov.w	r5, #0
 8005f52:	00dd      	lsls	r5, r3, #3
 8005f54:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005f58:	00d4      	lsls	r4, r2, #3
 8005f5a:	4622      	mov	r2, r4
 8005f5c:	462b      	mov	r3, r5
 8005f5e:	eb12 0a00 	adds.w	sl, r2, r0
 8005f62:	eb43 0b01 	adc.w	fp, r3, r1
 8005f66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f04f 0100 	mov.w	r1, #0
 8005f70:	f04f 0200 	mov.w	r2, #0
 8005f74:	f04f 0300 	mov.w	r3, #0
 8005f78:	008b      	lsls	r3, r1, #2
 8005f7a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005f7e:	0082      	lsls	r2, r0, #2
 8005f80:	4650      	mov	r0, sl
 8005f82:	4659      	mov	r1, fp
 8005f84:	f7fa fe68 	bl	8000c58 <__aeabi_uldivmod>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	460b      	mov	r3, r1
 8005f8c:	4b0e      	ldr	r3, [pc, #56]	; (8005fc8 <UART_SetConfig+0x38c>)
 8005f8e:	fba3 1302 	umull	r1, r3, r3, r2
 8005f92:	095b      	lsrs	r3, r3, #5
 8005f94:	2164      	movs	r1, #100	; 0x64
 8005f96:	fb01 f303 	mul.w	r3, r1, r3
 8005f9a:	1ad3      	subs	r3, r2, r3
 8005f9c:	011b      	lsls	r3, r3, #4
 8005f9e:	3332      	adds	r3, #50	; 0x32
 8005fa0:	4a09      	ldr	r2, [pc, #36]	; (8005fc8 <UART_SetConfig+0x38c>)
 8005fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8005fa6:	095b      	lsrs	r3, r3, #5
 8005fa8:	f003 020f 	and.w	r2, r3, #15
 8005fac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4432      	add	r2, r6
 8005fb2:	609a      	str	r2, [r3, #8]
}
 8005fb4:	bf00      	nop
 8005fb6:	377c      	adds	r7, #124	; 0x7c
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fbe:	bf00      	nop
 8005fc0:	40011000 	.word	0x40011000
 8005fc4:	40011400 	.word	0x40011400
 8005fc8:	51eb851f 	.word	0x51eb851f

08005fcc <delay_ms>:
u16 POINT_COLOR = 0x0000,BACK_COLOR = 0xFFFF;  
u16 DeviceCode;	 


static void delay_ms(uint32_t ms)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b082      	sub	sp, #8
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f7fc f9e7 	bl	80023a8 <HAL_Delay>
}
 8005fda:	bf00      	nop
 8005fdc:	3708      	adds	r7, #8
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
	...

08005fe4 <LCD_WR_REG>:
 * @function   :Write an 8-bit command to the LCD screen
 * @parameters :data:Command value to be written
 * @retvalue   :None
******************************************************************************/
void LCD_WR_REG(u8 data)
{ 
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b082      	sub	sp, #8
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	4603      	mov	r3, r0
 8005fec:	71fb      	strb	r3, [r7, #7]
   LCD_CS_CLR;     
 8005fee:	2200      	movs	r2, #0
 8005ff0:	2140      	movs	r1, #64	; 0x40
 8005ff2:	480c      	ldr	r0, [pc, #48]	; (8006024 <LCD_WR_REG+0x40>)
 8005ff4:	f7fd fd9e 	bl	8003b34 <HAL_GPIO_WritePin>
	 LCD_RS_CLR;	  
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	2180      	movs	r1, #128	; 0x80
 8005ffc:	480a      	ldr	r0, [pc, #40]	; (8006028 <LCD_WR_REG+0x44>)
 8005ffe:	f7fd fd99 	bl	8003b34 <HAL_GPIO_WritePin>
   //SPI_WriteByte(SPI1,data);
   HAL_SPI_Transmit(&hspi1, &data, 1, 10000);
 8006002:	1df9      	adds	r1, r7, #7
 8006004:	f242 7310 	movw	r3, #10000	; 0x2710
 8006008:	2201      	movs	r2, #1
 800600a:	4808      	ldr	r0, [pc, #32]	; (800602c <LCD_WR_REG+0x48>)
 800600c:	f7fe fac1 	bl	8004592 <HAL_SPI_Transmit>
   LCD_CS_SET;	
 8006010:	2201      	movs	r2, #1
 8006012:	2140      	movs	r1, #64	; 0x40
 8006014:	4803      	ldr	r0, [pc, #12]	; (8006024 <LCD_WR_REG+0x40>)
 8006016:	f7fd fd8d 	bl	8003b34 <HAL_GPIO_WritePin>
}
 800601a:	bf00      	nop
 800601c:	3708      	adds	r7, #8
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
 8006022:	bf00      	nop
 8006024:	40020400 	.word	0x40020400
 8006028:	40020800 	.word	0x40020800
 800602c:	20000ccc 	.word	0x20000ccc

08006030 <LCD_WR_DATA>:
 * @function   :Write an 8-bit data to the LCD screen
 * @parameters :data:data value to be written
 * @retvalue   :None
******************************************************************************/
void LCD_WR_DATA(u8 data)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b082      	sub	sp, #8
 8006034:	af00      	add	r7, sp, #0
 8006036:	4603      	mov	r3, r0
 8006038:	71fb      	strb	r3, [r7, #7]
   LCD_CS_CLR;
 800603a:	2200      	movs	r2, #0
 800603c:	2140      	movs	r1, #64	; 0x40
 800603e:	480c      	ldr	r0, [pc, #48]	; (8006070 <LCD_WR_DATA+0x40>)
 8006040:	f7fd fd78 	bl	8003b34 <HAL_GPIO_WritePin>
	 LCD_RS_SET;
 8006044:	2201      	movs	r2, #1
 8006046:	2180      	movs	r1, #128	; 0x80
 8006048:	480a      	ldr	r0, [pc, #40]	; (8006074 <LCD_WR_DATA+0x44>)
 800604a:	f7fd fd73 	bl	8003b34 <HAL_GPIO_WritePin>
   //SPI_WriteByte(SPI1,data);
   HAL_SPI_Transmit(&hspi1, &data, 1, 10000);
 800604e:	1df9      	adds	r1, r7, #7
 8006050:	f242 7310 	movw	r3, #10000	; 0x2710
 8006054:	2201      	movs	r2, #1
 8006056:	4808      	ldr	r0, [pc, #32]	; (8006078 <LCD_WR_DATA+0x48>)
 8006058:	f7fe fa9b 	bl	8004592 <HAL_SPI_Transmit>
   LCD_CS_SET;
 800605c:	2201      	movs	r2, #1
 800605e:	2140      	movs	r1, #64	; 0x40
 8006060:	4803      	ldr	r0, [pc, #12]	; (8006070 <LCD_WR_DATA+0x40>)
 8006062:	f7fd fd67 	bl	8003b34 <HAL_GPIO_WritePin>
}
 8006066:	bf00      	nop
 8006068:	3708      	adds	r7, #8
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
 800606e:	bf00      	nop
 8006070:	40020400 	.word	0x40020400
 8006074:	40020800 	.word	0x40020800
 8006078:	20000ccc 	.word	0x20000ccc

0800607c <LCD_WriteReg>:
 * @parameters :LCD_Reg:Register address
                LCD_RegValue:Data to be written
 * @retvalue   :None
******************************************************************************/
void LCD_WriteReg(u8 LCD_Reg, u16 LCD_RegValue)
{	
 800607c:	b580      	push	{r7, lr}
 800607e:	b082      	sub	sp, #8
 8006080:	af00      	add	r7, sp, #0
 8006082:	4603      	mov	r3, r0
 8006084:	460a      	mov	r2, r1
 8006086:	71fb      	strb	r3, [r7, #7]
 8006088:	4613      	mov	r3, r2
 800608a:	80bb      	strh	r3, [r7, #4]
	LCD_WR_REG(LCD_Reg);  
 800608c:	79fb      	ldrb	r3, [r7, #7]
 800608e:	4618      	mov	r0, r3
 8006090:	f7ff ffa8 	bl	8005fe4 <LCD_WR_REG>
	LCD_WR_DATA(LCD_RegValue);	    		 
 8006094:	88bb      	ldrh	r3, [r7, #4]
 8006096:	b2db      	uxtb	r3, r3
 8006098:	4618      	mov	r0, r3
 800609a:	f7ff ffc9 	bl	8006030 <LCD_WR_DATA>
}	   
 800609e:	bf00      	nop
 80060a0:	3708      	adds	r7, #8
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
	...

080060a8 <LCD_WriteRAM_Prepare>:
 * @function   :Write GRAM
 * @parameters :None
 * @retvalue   :None
******************************************************************************/	 
void LCD_WriteRAM_Prepare(void)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	af00      	add	r7, sp, #0
	LCD_WR_REG(lcddev.wramcmd);
 80060ac:	4b03      	ldr	r3, [pc, #12]	; (80060bc <LCD_WriteRAM_Prepare+0x14>)
 80060ae:	891b      	ldrh	r3, [r3, #8]
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	4618      	mov	r0, r3
 80060b4:	f7ff ff96 	bl	8005fe4 <LCD_WR_REG>
}	 
 80060b8:	bf00      	nop
 80060ba:	bd80      	pop	{r7, pc}
 80060bc:	20000e14 	.word	0x20000e14

080060c0 <Lcd_WriteData_16Bit>:
 * @function   :Write an 16-bit command to the LCD screen
 * @parameters :Data:Data to be written
 * @retvalue   :None
******************************************************************************/	 
void Lcd_WriteData_16Bit(u16 Data)
{	
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	4603      	mov	r3, r0
 80060c8:	80fb      	strh	r3, [r7, #6]
   u8 data;

   LCD_CS_CLR;
 80060ca:	2200      	movs	r2, #0
 80060cc:	2140      	movs	r1, #64	; 0x40
 80060ce:	4814      	ldr	r0, [pc, #80]	; (8006120 <Lcd_WriteData_16Bit+0x60>)
 80060d0:	f7fd fd30 	bl	8003b34 <HAL_GPIO_WritePin>
   LCD_RS_SET;  
 80060d4:	2201      	movs	r2, #1
 80060d6:	2180      	movs	r1, #128	; 0x80
 80060d8:	4812      	ldr	r0, [pc, #72]	; (8006124 <Lcd_WriteData_16Bit+0x64>)
 80060da:	f7fd fd2b 	bl	8003b34 <HAL_GPIO_WritePin>
//   SPI_WriteByte(SPI1,Data>>8);
//	 SPI_WriteByte(SPI1,Data);
   data = Data>>8;
 80060de:	88fb      	ldrh	r3, [r7, #6]
 80060e0:	0a1b      	lsrs	r3, r3, #8
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	73fb      	strb	r3, [r7, #15]
   HAL_SPI_Transmit(&hspi1, &data, 1, 10000);
 80060e8:	f107 010f 	add.w	r1, r7, #15
 80060ec:	f242 7310 	movw	r3, #10000	; 0x2710
 80060f0:	2201      	movs	r2, #1
 80060f2:	480d      	ldr	r0, [pc, #52]	; (8006128 <Lcd_WriteData_16Bit+0x68>)
 80060f4:	f7fe fa4d 	bl	8004592 <HAL_SPI_Transmit>
   data = (u8)Data;
 80060f8:	88fb      	ldrh	r3, [r7, #6]
 80060fa:	b2db      	uxtb	r3, r3
 80060fc:	73fb      	strb	r3, [r7, #15]
   HAL_SPI_Transmit(&hspi1, &data, 1, 10000);
 80060fe:	f107 010f 	add.w	r1, r7, #15
 8006102:	f242 7310 	movw	r3, #10000	; 0x2710
 8006106:	2201      	movs	r2, #1
 8006108:	4807      	ldr	r0, [pc, #28]	; (8006128 <Lcd_WriteData_16Bit+0x68>)
 800610a:	f7fe fa42 	bl	8004592 <HAL_SPI_Transmit>
   LCD_CS_SET;
 800610e:	2201      	movs	r2, #1
 8006110:	2140      	movs	r1, #64	; 0x40
 8006112:	4803      	ldr	r0, [pc, #12]	; (8006120 <Lcd_WriteData_16Bit+0x60>)
 8006114:	f7fd fd0e 	bl	8003b34 <HAL_GPIO_WritePin>
}
 8006118:	bf00      	nop
 800611a:	3710      	adds	r7, #16
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}
 8006120:	40020400 	.word	0x40020400
 8006124:	40020800 	.word	0x40020800
 8006128:	20000ccc 	.word	0x20000ccc

0800612c <LCD_Clear>:
 * @function   :Full screen filled LCD screen
 * @parameters :color:Filled color
 * @retvalue   :None
******************************************************************************/	
void LCD_Clear(u16 Color)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	4603      	mov	r3, r0
 8006134:	80fb      	strh	r3, [r7, #6]
  unsigned int i,m;  
	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);   
 8006136:	4b1d      	ldr	r3, [pc, #116]	; (80061ac <LCD_Clear+0x80>)
 8006138:	881b      	ldrh	r3, [r3, #0]
 800613a:	3b01      	subs	r3, #1
 800613c:	b29a      	uxth	r2, r3
 800613e:	4b1b      	ldr	r3, [pc, #108]	; (80061ac <LCD_Clear+0x80>)
 8006140:	885b      	ldrh	r3, [r3, #2]
 8006142:	3b01      	subs	r3, #1
 8006144:	b29b      	uxth	r3, r3
 8006146:	2100      	movs	r1, #0
 8006148:	2000      	movs	r0, #0
 800614a:	f000 f96f 	bl	800642c <LCD_SetWindows>
	LCD_CS_CLR;
 800614e:	2200      	movs	r2, #0
 8006150:	2140      	movs	r1, #64	; 0x40
 8006152:	4817      	ldr	r0, [pc, #92]	; (80061b0 <LCD_Clear+0x84>)
 8006154:	f7fd fcee 	bl	8003b34 <HAL_GPIO_WritePin>
	LCD_RS_SET;
 8006158:	2201      	movs	r2, #1
 800615a:	2180      	movs	r1, #128	; 0x80
 800615c:	4815      	ldr	r0, [pc, #84]	; (80061b4 <LCD_Clear+0x88>)
 800615e:	f7fd fce9 	bl	8003b34 <HAL_GPIO_WritePin>
	for(i=0;i<lcddev.height;i++)
 8006162:	2300      	movs	r3, #0
 8006164:	60fb      	str	r3, [r7, #12]
 8006166:	e012      	b.n	800618e <LCD_Clear+0x62>
	{
        for(m=0;m<lcddev.width;m++)
 8006168:	2300      	movs	r3, #0
 800616a:	60bb      	str	r3, [r7, #8]
 800616c:	e006      	b.n	800617c <LCD_Clear+0x50>
        {
			Lcd_WriteData_16Bit(Color);
 800616e:	88fb      	ldrh	r3, [r7, #6]
 8006170:	4618      	mov	r0, r3
 8006172:	f7ff ffa5 	bl	80060c0 <Lcd_WriteData_16Bit>
        for(m=0;m<lcddev.width;m++)
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	3301      	adds	r3, #1
 800617a:	60bb      	str	r3, [r7, #8]
 800617c:	4b0b      	ldr	r3, [pc, #44]	; (80061ac <LCD_Clear+0x80>)
 800617e:	881b      	ldrh	r3, [r3, #0]
 8006180:	461a      	mov	r2, r3
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	4293      	cmp	r3, r2
 8006186:	d3f2      	bcc.n	800616e <LCD_Clear+0x42>
	for(i=0;i<lcddev.height;i++)
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	3301      	adds	r3, #1
 800618c:	60fb      	str	r3, [r7, #12]
 800618e:	4b07      	ldr	r3, [pc, #28]	; (80061ac <LCD_Clear+0x80>)
 8006190:	885b      	ldrh	r3, [r3, #2]
 8006192:	461a      	mov	r2, r3
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	4293      	cmp	r3, r2
 8006198:	d3e6      	bcc.n	8006168 <LCD_Clear+0x3c>
		}
	}
	 LCD_CS_SET;
 800619a:	2201      	movs	r2, #1
 800619c:	2140      	movs	r1, #64	; 0x40
 800619e:	4804      	ldr	r0, [pc, #16]	; (80061b0 <LCD_Clear+0x84>)
 80061a0:	f7fd fcc8 	bl	8003b34 <HAL_GPIO_WritePin>
} 
 80061a4:	bf00      	nop
 80061a6:	3710      	adds	r7, #16
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	20000e14 	.word	0x20000e14
 80061b0:	40020400 	.word	0x40020400
 80061b4:	40020800 	.word	0x40020800

080061b8 <LCD_RESET>:
 * @function   :Reset LCD screen
 * @parameters :None
 * @retvalue   :None
******************************************************************************/	
void LCD_RESET(void)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	af00      	add	r7, sp, #0
	LCD_RST_CLR;
 80061bc:	2200      	movs	r2, #0
 80061be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80061c2:	4808      	ldr	r0, [pc, #32]	; (80061e4 <LCD_RESET+0x2c>)
 80061c4:	f7fd fcb6 	bl	8003b34 <HAL_GPIO_WritePin>
	delay_ms(100);
 80061c8:	2064      	movs	r0, #100	; 0x64
 80061ca:	f7ff feff 	bl	8005fcc <delay_ms>
	LCD_RST_SET;
 80061ce:	2201      	movs	r2, #1
 80061d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80061d4:	4803      	ldr	r0, [pc, #12]	; (80061e4 <LCD_RESET+0x2c>)
 80061d6:	f7fd fcad 	bl	8003b34 <HAL_GPIO_WritePin>
	delay_ms(50);
 80061da:	2032      	movs	r0, #50	; 0x32
 80061dc:	f7ff fef6 	bl	8005fcc <delay_ms>
}
 80061e0:	bf00      	nop
 80061e2:	bd80      	pop	{r7, pc}
 80061e4:	40020000 	.word	0x40020000

080061e8 <LCD_Init>:
 * @function   :Initialization LCD screen
 * @parameters :None
 * @retvalue   :None
******************************************************************************/	 	 
void LCD_Init(void)
{  
 80061e8:	b580      	push	{r7, lr}
 80061ea:	af00      	add	r7, sp, #0
//	SPI1_Init(); //Ӳ��SPI��ʼ��
//	SPI_SetSpeed(SPI1,SPI_BaudRatePrescaler_2);
//	LCD_GPIOInit();//LCD GPIO��ʼ��
 	LCD_RESET(); //LCD ��λ
 80061ec:	f7ff ffe4 	bl	80061b8 <LCD_RESET>
//*************2.8inch ILI9341��ʼ��**********//	
	LCD_WR_REG(0xCF);  
 80061f0:	20cf      	movs	r0, #207	; 0xcf
 80061f2:	f7ff fef7 	bl	8005fe4 <LCD_WR_REG>
	LCD_WR_DATA(0x00); 
 80061f6:	2000      	movs	r0, #0
 80061f8:	f7ff ff1a 	bl	8006030 <LCD_WR_DATA>
	LCD_WR_DATA(0xC9); //C1 
 80061fc:	20c9      	movs	r0, #201	; 0xc9
 80061fe:	f7ff ff17 	bl	8006030 <LCD_WR_DATA>
	LCD_WR_DATA(0X30); 
 8006202:	2030      	movs	r0, #48	; 0x30
 8006204:	f7ff ff14 	bl	8006030 <LCD_WR_DATA>
	LCD_WR_REG(0xED);  
 8006208:	20ed      	movs	r0, #237	; 0xed
 800620a:	f7ff feeb 	bl	8005fe4 <LCD_WR_REG>
	LCD_WR_DATA(0x64); 
 800620e:	2064      	movs	r0, #100	; 0x64
 8006210:	f7ff ff0e 	bl	8006030 <LCD_WR_DATA>
	LCD_WR_DATA(0x03); 
 8006214:	2003      	movs	r0, #3
 8006216:	f7ff ff0b 	bl	8006030 <LCD_WR_DATA>
	LCD_WR_DATA(0X12); 
 800621a:	2012      	movs	r0, #18
 800621c:	f7ff ff08 	bl	8006030 <LCD_WR_DATA>
	LCD_WR_DATA(0X81); 
 8006220:	2081      	movs	r0, #129	; 0x81
 8006222:	f7ff ff05 	bl	8006030 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);  
 8006226:	20e8      	movs	r0, #232	; 0xe8
 8006228:	f7ff fedc 	bl	8005fe4 <LCD_WR_REG>
	LCD_WR_DATA(0x85); 
 800622c:	2085      	movs	r0, #133	; 0x85
 800622e:	f7ff feff 	bl	8006030 <LCD_WR_DATA>
	LCD_WR_DATA(0x10); 
 8006232:	2010      	movs	r0, #16
 8006234:	f7ff fefc 	bl	8006030 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A); 
 8006238:	207a      	movs	r0, #122	; 0x7a
 800623a:	f7ff fef9 	bl	8006030 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);  
 800623e:	20cb      	movs	r0, #203	; 0xcb
 8006240:	f7ff fed0 	bl	8005fe4 <LCD_WR_REG>
	LCD_WR_DATA(0x39); 
 8006244:	2039      	movs	r0, #57	; 0x39
 8006246:	f7ff fef3 	bl	8006030 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C); 
 800624a:	202c      	movs	r0, #44	; 0x2c
 800624c:	f7ff fef0 	bl	8006030 <LCD_WR_DATA>
	LCD_WR_DATA(0x00); 
 8006250:	2000      	movs	r0, #0
 8006252:	f7ff feed 	bl	8006030 <LCD_WR_DATA>
	LCD_WR_DATA(0x34); 
 8006256:	2034      	movs	r0, #52	; 0x34
 8006258:	f7ff feea 	bl	8006030 <LCD_WR_DATA>
	LCD_WR_DATA(0x02); 
 800625c:	2002      	movs	r0, #2
 800625e:	f7ff fee7 	bl	8006030 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);  
 8006262:	20f7      	movs	r0, #247	; 0xf7
 8006264:	f7ff febe 	bl	8005fe4 <LCD_WR_REG>
	LCD_WR_DATA(0x20); 
 8006268:	2020      	movs	r0, #32
 800626a:	f7ff fee1 	bl	8006030 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);  
 800626e:	20ea      	movs	r0, #234	; 0xea
 8006270:	f7ff feb8 	bl	8005fe4 <LCD_WR_REG>
	LCD_WR_DATA(0x00); 
 8006274:	2000      	movs	r0, #0
 8006276:	f7ff fedb 	bl	8006030 <LCD_WR_DATA>
	LCD_WR_DATA(0x00); 
 800627a:	2000      	movs	r0, #0
 800627c:	f7ff fed8 	bl	8006030 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control 
 8006280:	20c0      	movs	r0, #192	; 0xc0
 8006282:	f7ff feaf 	bl	8005fe4 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0] 
 8006286:	201b      	movs	r0, #27
 8006288:	f7ff fed2 	bl	8006030 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control 
 800628c:	20c1      	movs	r0, #193	; 0xc1
 800628e:	f7ff fea9 	bl	8005fe4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);   //SAP[2:0];BT[3:0] 01 
 8006292:	2000      	movs	r0, #0
 8006294:	f7ff fecc 	bl	8006030 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control 
 8006298:	20c5      	movs	r0, #197	; 0xc5
 800629a:	f7ff fea3 	bl	8005fe4 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 800629e:	2030      	movs	r0, #48	; 0x30
 80062a0:	f7ff fec6 	bl	8006030 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 80062a4:	2030      	movs	r0, #48	; 0x30
 80062a6:	f7ff fec3 	bl	8006030 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2 
 80062aa:	20c7      	movs	r0, #199	; 0xc7
 80062ac:	f7ff fe9a 	bl	8005fe4 <LCD_WR_REG>
	LCD_WR_DATA(0XB7); 
 80062b0:	20b7      	movs	r0, #183	; 0xb7
 80062b2:	f7ff febd 	bl	8006030 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control 
 80062b6:	2036      	movs	r0, #54	; 0x36
 80062b8:	f7ff fe94 	bl	8005fe4 <LCD_WR_REG>
	LCD_WR_DATA(0x08); 
 80062bc:	2008      	movs	r0, #8
 80062be:	f7ff feb7 	bl	8006030 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);   
 80062c2:	203a      	movs	r0, #58	; 0x3a
 80062c4:	f7ff fe8e 	bl	8005fe4 <LCD_WR_REG>
	LCD_WR_DATA(0x55); 
 80062c8:	2055      	movs	r0, #85	; 0x55
 80062ca:	f7ff feb1 	bl	8006030 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);   
 80062ce:	20b1      	movs	r0, #177	; 0xb1
 80062d0:	f7ff fe88 	bl	8005fe4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);   
 80062d4:	2000      	movs	r0, #0
 80062d6:	f7ff feab 	bl	8006030 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A); 
 80062da:	201a      	movs	r0, #26
 80062dc:	f7ff fea8 	bl	8006030 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control 
 80062e0:	20b6      	movs	r0, #182	; 0xb6
 80062e2:	f7ff fe7f 	bl	8005fe4 <LCD_WR_REG>
	LCD_WR_DATA(0x0A); 
 80062e6:	200a      	movs	r0, #10
 80062e8:	f7ff fea2 	bl	8006030 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2); 
 80062ec:	20a2      	movs	r0, #162	; 0xa2
 80062ee:	f7ff fe9f 	bl	8006030 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable 
 80062f2:	20f2      	movs	r0, #242	; 0xf2
 80062f4:	f7ff fe76 	bl	8005fe4 <LCD_WR_REG>
	LCD_WR_DATA(0x00); 
 80062f8:	2000      	movs	r0, #0
 80062fa:	f7ff fe99 	bl	8006030 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected 
 80062fe:	2026      	movs	r0, #38	; 0x26
 8006300:	f7ff fe70 	bl	8005fe4 <LCD_WR_REG>
	LCD_WR_DATA(0x01); 
 8006304:	2001      	movs	r0, #1
 8006306:	f7ff fe93 	bl	8006030 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma 
 800630a:	20e0      	movs	r0, #224	; 0xe0
 800630c:	f7ff fe6a 	bl	8005fe4 <LCD_WR_REG>
	LCD_WR_DATA(0x0F); 
 8006310:	200f      	movs	r0, #15
 8006312:	f7ff fe8d 	bl	8006030 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A); 
 8006316:	202a      	movs	r0, #42	; 0x2a
 8006318:	f7ff fe8a 	bl	8006030 <LCD_WR_DATA>
	LCD_WR_DATA(0x28); 
 800631c:	2028      	movs	r0, #40	; 0x28
 800631e:	f7ff fe87 	bl	8006030 <LCD_WR_DATA>
	LCD_WR_DATA(0x08); 
 8006322:	2008      	movs	r0, #8
 8006324:	f7ff fe84 	bl	8006030 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E); 
 8006328:	200e      	movs	r0, #14
 800632a:	f7ff fe81 	bl	8006030 <LCD_WR_DATA>
	LCD_WR_DATA(0x08); 
 800632e:	2008      	movs	r0, #8
 8006330:	f7ff fe7e 	bl	8006030 <LCD_WR_DATA>
	LCD_WR_DATA(0x54); 
 8006334:	2054      	movs	r0, #84	; 0x54
 8006336:	f7ff fe7b 	bl	8006030 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9); 
 800633a:	20a9      	movs	r0, #169	; 0xa9
 800633c:	f7ff fe78 	bl	8006030 <LCD_WR_DATA>
	LCD_WR_DATA(0x43); 
 8006340:	2043      	movs	r0, #67	; 0x43
 8006342:	f7ff fe75 	bl	8006030 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A); 
 8006346:	200a      	movs	r0, #10
 8006348:	f7ff fe72 	bl	8006030 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F); 
 800634c:	200f      	movs	r0, #15
 800634e:	f7ff fe6f 	bl	8006030 <LCD_WR_DATA>
	LCD_WR_DATA(0x00); 
 8006352:	2000      	movs	r0, #0
 8006354:	f7ff fe6c 	bl	8006030 <LCD_WR_DATA>
	LCD_WR_DATA(0x00); 
 8006358:	2000      	movs	r0, #0
 800635a:	f7ff fe69 	bl	8006030 <LCD_WR_DATA>
	LCD_WR_DATA(0x00); 
 800635e:	2000      	movs	r0, #0
 8006360:	f7ff fe66 	bl	8006030 <LCD_WR_DATA>
	LCD_WR_DATA(0x00); 		 
 8006364:	2000      	movs	r0, #0
 8006366:	f7ff fe63 	bl	8006030 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma 
 800636a:	20e1      	movs	r0, #225	; 0xe1
 800636c:	f7ff fe3a 	bl	8005fe4 <LCD_WR_REG>
	LCD_WR_DATA(0x00); 
 8006370:	2000      	movs	r0, #0
 8006372:	f7ff fe5d 	bl	8006030 <LCD_WR_DATA>
	LCD_WR_DATA(0x15); 
 8006376:	2015      	movs	r0, #21
 8006378:	f7ff fe5a 	bl	8006030 <LCD_WR_DATA>
	LCD_WR_DATA(0x17); 
 800637c:	2017      	movs	r0, #23
 800637e:	f7ff fe57 	bl	8006030 <LCD_WR_DATA>
	LCD_WR_DATA(0x07); 
 8006382:	2007      	movs	r0, #7
 8006384:	f7ff fe54 	bl	8006030 <LCD_WR_DATA>
	LCD_WR_DATA(0x11); 
 8006388:	2011      	movs	r0, #17
 800638a:	f7ff fe51 	bl	8006030 <LCD_WR_DATA>
	LCD_WR_DATA(0x06); 
 800638e:	2006      	movs	r0, #6
 8006390:	f7ff fe4e 	bl	8006030 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B); 
 8006394:	202b      	movs	r0, #43	; 0x2b
 8006396:	f7ff fe4b 	bl	8006030 <LCD_WR_DATA>
	LCD_WR_DATA(0x56); 
 800639a:	2056      	movs	r0, #86	; 0x56
 800639c:	f7ff fe48 	bl	8006030 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C); 
 80063a0:	203c      	movs	r0, #60	; 0x3c
 80063a2:	f7ff fe45 	bl	8006030 <LCD_WR_DATA>
	LCD_WR_DATA(0x05); 
 80063a6:	2005      	movs	r0, #5
 80063a8:	f7ff fe42 	bl	8006030 <LCD_WR_DATA>
	LCD_WR_DATA(0x10); 
 80063ac:	2010      	movs	r0, #16
 80063ae:	f7ff fe3f 	bl	8006030 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F); 
 80063b2:	200f      	movs	r0, #15
 80063b4:	f7ff fe3c 	bl	8006030 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F); 
 80063b8:	203f      	movs	r0, #63	; 0x3f
 80063ba:	f7ff fe39 	bl	8006030 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F); 
 80063be:	203f      	movs	r0, #63	; 0x3f
 80063c0:	f7ff fe36 	bl	8006030 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F); 
 80063c4:	200f      	movs	r0, #15
 80063c6:	f7ff fe33 	bl	8006030 <LCD_WR_DATA>
	LCD_WR_REG(0x2B); 
 80063ca:	202b      	movs	r0, #43	; 0x2b
 80063cc:	f7ff fe0a 	bl	8005fe4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80063d0:	2000      	movs	r0, #0
 80063d2:	f7ff fe2d 	bl	8006030 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80063d6:	2000      	movs	r0, #0
 80063d8:	f7ff fe2a 	bl	8006030 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 80063dc:	2001      	movs	r0, #1
 80063de:	f7ff fe27 	bl	8006030 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 80063e2:	203f      	movs	r0, #63	; 0x3f
 80063e4:	f7ff fe24 	bl	8006030 <LCD_WR_DATA>
	LCD_WR_REG(0x2A); 
 80063e8:	202a      	movs	r0, #42	; 0x2a
 80063ea:	f7ff fdfb 	bl	8005fe4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80063ee:	2000      	movs	r0, #0
 80063f0:	f7ff fe1e 	bl	8006030 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80063f4:	2000      	movs	r0, #0
 80063f6:	f7ff fe1b 	bl	8006030 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80063fa:	2000      	movs	r0, #0
 80063fc:	f7ff fe18 	bl	8006030 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);	 
 8006400:	20ef      	movs	r0, #239	; 0xef
 8006402:	f7ff fe15 	bl	8006030 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8006406:	2011      	movs	r0, #17
 8006408:	f7ff fdec 	bl	8005fe4 <LCD_WR_REG>
	delay_ms(120);
 800640c:	2078      	movs	r0, #120	; 0x78
 800640e:	f7ff fddd 	bl	8005fcc <delay_ms>
	LCD_WR_REG(0x29); //display on		
 8006412:	2029      	movs	r0, #41	; 0x29
 8006414:	f7ff fde6 	bl	8005fe4 <LCD_WR_REG>

  //LCD_direction(USE_HORIZONTAL);//����LCD��ʾ����
  LCD_direction(3);//����LCD��ʾ����
 8006418:	2003      	movs	r0, #3
 800641a:	f000 f85b 	bl	80064d4 <LCD_direction>
//	LCD_LED=1;//��������
	LCD_Clear(WHITE);//��ȫ����ɫ
 800641e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006422:	f7ff fe83 	bl	800612c <LCD_Clear>
}
 8006426:	bf00      	nop
 8006428:	bd80      	pop	{r7, pc}
	...

0800642c <LCD_SetWindows>:
								xEnd:the endning x coordinate of the LCD display window
								yEnd:the endning y coordinate of the LCD display window
 * @retvalue   :None
******************************************************************************/ 
void LCD_SetWindows(u16 xStar, u16 yStar,u16 xEnd,u16 yEnd)
{	
 800642c:	b590      	push	{r4, r7, lr}
 800642e:	b083      	sub	sp, #12
 8006430:	af00      	add	r7, sp, #0
 8006432:	4604      	mov	r4, r0
 8006434:	4608      	mov	r0, r1
 8006436:	4611      	mov	r1, r2
 8006438:	461a      	mov	r2, r3
 800643a:	4623      	mov	r3, r4
 800643c:	80fb      	strh	r3, [r7, #6]
 800643e:	4603      	mov	r3, r0
 8006440:	80bb      	strh	r3, [r7, #4]
 8006442:	460b      	mov	r3, r1
 8006444:	807b      	strh	r3, [r7, #2]
 8006446:	4613      	mov	r3, r2
 8006448:	803b      	strh	r3, [r7, #0]
	LCD_WR_REG(lcddev.setxcmd);	
 800644a:	4b21      	ldr	r3, [pc, #132]	; (80064d0 <LCD_SetWindows+0xa4>)
 800644c:	895b      	ldrh	r3, [r3, #10]
 800644e:	b2db      	uxtb	r3, r3
 8006450:	4618      	mov	r0, r3
 8006452:	f7ff fdc7 	bl	8005fe4 <LCD_WR_REG>
	LCD_WR_DATA(xStar>>8);
 8006456:	88fb      	ldrh	r3, [r7, #6]
 8006458:	0a1b      	lsrs	r3, r3, #8
 800645a:	b29b      	uxth	r3, r3
 800645c:	b2db      	uxtb	r3, r3
 800645e:	4618      	mov	r0, r3
 8006460:	f7ff fde6 	bl	8006030 <LCD_WR_DATA>
	LCD_WR_DATA(0x00FF&xStar);		
 8006464:	88fb      	ldrh	r3, [r7, #6]
 8006466:	b2db      	uxtb	r3, r3
 8006468:	4618      	mov	r0, r3
 800646a:	f7ff fde1 	bl	8006030 <LCD_WR_DATA>
	LCD_WR_DATA(xEnd>>8);
 800646e:	887b      	ldrh	r3, [r7, #2]
 8006470:	0a1b      	lsrs	r3, r3, #8
 8006472:	b29b      	uxth	r3, r3
 8006474:	b2db      	uxtb	r3, r3
 8006476:	4618      	mov	r0, r3
 8006478:	f7ff fdda 	bl	8006030 <LCD_WR_DATA>
	LCD_WR_DATA(0x00FF&xEnd);
 800647c:	887b      	ldrh	r3, [r7, #2]
 800647e:	b2db      	uxtb	r3, r3
 8006480:	4618      	mov	r0, r3
 8006482:	f7ff fdd5 	bl	8006030 <LCD_WR_DATA>

	LCD_WR_REG(lcddev.setycmd);	
 8006486:	4b12      	ldr	r3, [pc, #72]	; (80064d0 <LCD_SetWindows+0xa4>)
 8006488:	899b      	ldrh	r3, [r3, #12]
 800648a:	b2db      	uxtb	r3, r3
 800648c:	4618      	mov	r0, r3
 800648e:	f7ff fda9 	bl	8005fe4 <LCD_WR_REG>
	LCD_WR_DATA(yStar>>8);
 8006492:	88bb      	ldrh	r3, [r7, #4]
 8006494:	0a1b      	lsrs	r3, r3, #8
 8006496:	b29b      	uxth	r3, r3
 8006498:	b2db      	uxtb	r3, r3
 800649a:	4618      	mov	r0, r3
 800649c:	f7ff fdc8 	bl	8006030 <LCD_WR_DATA>
	LCD_WR_DATA(0x00FF&yStar);		
 80064a0:	88bb      	ldrh	r3, [r7, #4]
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	4618      	mov	r0, r3
 80064a6:	f7ff fdc3 	bl	8006030 <LCD_WR_DATA>
	LCD_WR_DATA(yEnd>>8);
 80064aa:	883b      	ldrh	r3, [r7, #0]
 80064ac:	0a1b      	lsrs	r3, r3, #8
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	4618      	mov	r0, r3
 80064b4:	f7ff fdbc 	bl	8006030 <LCD_WR_DATA>
	LCD_WR_DATA(0x00FF&yEnd);
 80064b8:	883b      	ldrh	r3, [r7, #0]
 80064ba:	b2db      	uxtb	r3, r3
 80064bc:	4618      	mov	r0, r3
 80064be:	f7ff fdb7 	bl	8006030 <LCD_WR_DATA>

	LCD_WriteRAM_Prepare();	//��ʼд��GRAM			
 80064c2:	f7ff fdf1 	bl	80060a8 <LCD_WriteRAM_Prepare>
}   
 80064c6:	bf00      	nop
 80064c8:	370c      	adds	r7, #12
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd90      	pop	{r4, r7, pc}
 80064ce:	bf00      	nop
 80064d0:	20000e14 	.word	0x20000e14

080064d4 <LCD_direction>:
													2-180 degree
													3-270 degree
 * @retvalue   :None
******************************************************************************/ 
void LCD_direction(u8 direction)
{ 
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b082      	sub	sp, #8
 80064d8:	af00      	add	r7, sp, #0
 80064da:	4603      	mov	r3, r0
 80064dc:	71fb      	strb	r3, [r7, #7]
			lcddev.setxcmd=0x2A;
 80064de:	4b26      	ldr	r3, [pc, #152]	; (8006578 <LCD_direction+0xa4>)
 80064e0:	222a      	movs	r2, #42	; 0x2a
 80064e2:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0x2B;
 80064e4:	4b24      	ldr	r3, [pc, #144]	; (8006578 <LCD_direction+0xa4>)
 80064e6:	222b      	movs	r2, #43	; 0x2b
 80064e8:	819a      	strh	r2, [r3, #12]
			lcddev.wramcmd=0x2C;
 80064ea:	4b23      	ldr	r3, [pc, #140]	; (8006578 <LCD_direction+0xa4>)
 80064ec:	222c      	movs	r2, #44	; 0x2c
 80064ee:	811a      	strh	r2, [r3, #8]
	switch(direction){		  
 80064f0:	79fb      	ldrb	r3, [r7, #7]
 80064f2:	2b03      	cmp	r3, #3
 80064f4:	d83a      	bhi.n	800656c <LCD_direction+0x98>
 80064f6:	a201      	add	r2, pc, #4	; (adr r2, 80064fc <LCD_direction+0x28>)
 80064f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064fc:	0800650d 	.word	0x0800650d
 8006500:	08006525 	.word	0x08006525
 8006504:	0800653d 	.word	0x0800653d
 8006508:	08006555 	.word	0x08006555
		case 0:						 	 		
			lcddev.width=LCD_W;
 800650c:	4b1a      	ldr	r3, [pc, #104]	; (8006578 <LCD_direction+0xa4>)
 800650e:	22f0      	movs	r2, #240	; 0xf0
 8006510:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_H;		
 8006512:	4b19      	ldr	r3, [pc, #100]	; (8006578 <LCD_direction+0xa4>)
 8006514:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8006518:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3)|(0<<6)|(0<<7));//BGR==1,MY==0,MX==0,MV==0
 800651a:	2108      	movs	r1, #8
 800651c:	2036      	movs	r0, #54	; 0x36
 800651e:	f7ff fdad 	bl	800607c <LCD_WriteReg>
		break;
 8006522:	e024      	b.n	800656e <LCD_direction+0x9a>
		case 1:
			lcddev.width=LCD_H;
 8006524:	4b14      	ldr	r3, [pc, #80]	; (8006578 <LCD_direction+0xa4>)
 8006526:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800652a:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_W;
 800652c:	4b12      	ldr	r3, [pc, #72]	; (8006578 <LCD_direction+0xa4>)
 800652e:	22f0      	movs	r2, #240	; 0xf0
 8006530:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3)|(0<<7)|(1<<6)|(1<<5));//BGR==1,MY==1,MX==0,MV==1
 8006532:	2168      	movs	r1, #104	; 0x68
 8006534:	2036      	movs	r0, #54	; 0x36
 8006536:	f7ff fda1 	bl	800607c <LCD_WriteReg>
		break;
 800653a:	e018      	b.n	800656e <LCD_direction+0x9a>
		case 2:						 	 		
			lcddev.width=LCD_W;
 800653c:	4b0e      	ldr	r3, [pc, #56]	; (8006578 <LCD_direction+0xa4>)
 800653e:	22f0      	movs	r2, #240	; 0xf0
 8006540:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_H;	
 8006542:	4b0d      	ldr	r3, [pc, #52]	; (8006578 <LCD_direction+0xa4>)
 8006544:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8006548:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3)|(1<<6)|(1<<7));//BGR==1,MY==0,MX==0,MV==0
 800654a:	21c8      	movs	r1, #200	; 0xc8
 800654c:	2036      	movs	r0, #54	; 0x36
 800654e:	f7ff fd95 	bl	800607c <LCD_WriteReg>
		break;
 8006552:	e00c      	b.n	800656e <LCD_direction+0x9a>
		case 3:
			lcddev.width=LCD_H;
 8006554:	4b08      	ldr	r3, [pc, #32]	; (8006578 <LCD_direction+0xa4>)
 8006556:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800655a:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_W;
 800655c:	4b06      	ldr	r3, [pc, #24]	; (8006578 <LCD_direction+0xa4>)
 800655e:	22f0      	movs	r2, #240	; 0xf0
 8006560:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3)|(1<<7)|(1<<5));//BGR==1,MY==1,MX==0,MV==1
 8006562:	21a8      	movs	r1, #168	; 0xa8
 8006564:	2036      	movs	r0, #54	; 0x36
 8006566:	f7ff fd89 	bl	800607c <LCD_WriteReg>
		break;	
 800656a:	e000      	b.n	800656e <LCD_direction+0x9a>
		default:break;
 800656c:	bf00      	nop
	}		
}	 
 800656e:	bf00      	nop
 8006570:	3708      	adds	r7, #8
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
 8006576:	bf00      	nop
 8006578:	20000e14 	.word	0x20000e14

0800657c <LCD_Clear2>:
 * @function   :Full screen filled LCD screen
 * @parameters :color:Filled color
 * @retvalue   :None
******************************************************************************/
void LCD_Clear2(u16 color_idx)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b082      	sub	sp, #8
 8006580:	af00      	add	r7, sp, #0
 8006582:	4603      	mov	r3, r0
 8006584:	80fb      	strh	r3, [r7, #6]
	memset(g_lcd_buf, color_idx, LCD_BUF_SIZE);
 8006586:	88fb      	ldrh	r3, [r7, #6]
 8006588:	f44f 3296 	mov.w	r2, #76800	; 0x12c00
 800658c:	4619      	mov	r1, r3
 800658e:	4803      	ldr	r0, [pc, #12]	; (800659c <LCD_Clear2+0x20>)
 8006590:	f000 fa24 	bl	80069dc <memset>
}
 8006594:	bf00      	nop
 8006596:	3708      	adds	r7, #8
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}
 800659c:	20004a24 	.word	0x20004a24

080065a0 <LCD_DrawLine2>:
				x2:the ending x coordinate of the line
				y2:the ending y coordinate of the line
 * @retvalue   :None
********************************************************************/
void LCD_DrawLine2(u16 x1, u16 y1, u16 x2, u16 y2, u16 color_idx)
{
 80065a0:	b590      	push	{r4, r7, lr}
 80065a2:	b08d      	sub	sp, #52	; 0x34
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	4604      	mov	r4, r0
 80065a8:	4608      	mov	r0, r1
 80065aa:	4611      	mov	r1, r2
 80065ac:	461a      	mov	r2, r3
 80065ae:	4623      	mov	r3, r4
 80065b0:	80fb      	strh	r3, [r7, #6]
 80065b2:	4603      	mov	r3, r0
 80065b4:	80bb      	strh	r3, [r7, #4]
 80065b6:	460b      	mov	r3, r1
 80065b8:	807b      	strh	r3, [r7, #2]
 80065ba:	4613      	mov	r3, r2
 80065bc:	803b      	strh	r3, [r7, #0]
	u16 t;
	s32 xerr=0,yerr=0,delta_x,delta_y,distance;
 80065be:	2300      	movs	r3, #0
 80065c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80065c2:	2300      	movs	r3, #0
 80065c4:	627b      	str	r3, [r7, #36]	; 0x24
	s32 incx,incy,uRow,uCol;

	delta_x=x2-x1;
 80065c6:	887a      	ldrh	r2, [r7, #2]
 80065c8:	88fb      	ldrh	r3, [r7, #6]
 80065ca:	1ad3      	subs	r3, r2, r3
 80065cc:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1;
 80065ce:	883a      	ldrh	r2, [r7, #0]
 80065d0:	88bb      	ldrh	r3, [r7, #4]
 80065d2:	1ad3      	subs	r3, r2, r3
 80065d4:	61fb      	str	r3, [r7, #28]
	uRow=x1;
 80065d6:	88fb      	ldrh	r3, [r7, #6]
 80065d8:	60fb      	str	r3, [r7, #12]
	uCol=y1;
 80065da:	88bb      	ldrh	r3, [r7, #4]
 80065dc:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1;
 80065de:	6a3b      	ldr	r3, [r7, #32]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	dd02      	ble.n	80065ea <LCD_DrawLine2+0x4a>
 80065e4:	2301      	movs	r3, #1
 80065e6:	617b      	str	r3, [r7, #20]
 80065e8:	e00b      	b.n	8006602 <LCD_DrawLine2+0x62>
	else if(delta_x==0)incx=0;
 80065ea:	6a3b      	ldr	r3, [r7, #32]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d102      	bne.n	80065f6 <LCD_DrawLine2+0x56>
 80065f0:	2300      	movs	r3, #0
 80065f2:	617b      	str	r3, [r7, #20]
 80065f4:	e005      	b.n	8006602 <LCD_DrawLine2+0x62>
	else {incx=-1;delta_x=-delta_x;}
 80065f6:	f04f 33ff 	mov.w	r3, #4294967295
 80065fa:	617b      	str	r3, [r7, #20]
 80065fc:	6a3b      	ldr	r3, [r7, #32]
 80065fe:	425b      	negs	r3, r3
 8006600:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1;
 8006602:	69fb      	ldr	r3, [r7, #28]
 8006604:	2b00      	cmp	r3, #0
 8006606:	dd02      	ble.n	800660e <LCD_DrawLine2+0x6e>
 8006608:	2301      	movs	r3, #1
 800660a:	613b      	str	r3, [r7, #16]
 800660c:	e00b      	b.n	8006626 <LCD_DrawLine2+0x86>
	else if(delta_y==0)incy=0;
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d102      	bne.n	800661a <LCD_DrawLine2+0x7a>
 8006614:	2300      	movs	r3, #0
 8006616:	613b      	str	r3, [r7, #16]
 8006618:	e005      	b.n	8006626 <LCD_DrawLine2+0x86>
	else{incy=-1;delta_y=-delta_y;}
 800661a:	f04f 33ff 	mov.w	r3, #4294967295
 800661e:	613b      	str	r3, [r7, #16]
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	425b      	negs	r3, r3
 8006624:	61fb      	str	r3, [r7, #28]
	if( delta_x>delta_y)distance=delta_x;
 8006626:	6a3a      	ldr	r2, [r7, #32]
 8006628:	69fb      	ldr	r3, [r7, #28]
 800662a:	429a      	cmp	r2, r3
 800662c:	dd02      	ble.n	8006634 <LCD_DrawLine2+0x94>
 800662e:	6a3b      	ldr	r3, [r7, #32]
 8006630:	61bb      	str	r3, [r7, #24]
 8006632:	e001      	b.n	8006638 <LCD_DrawLine2+0x98>
	else distance=delta_y;
 8006634:	69fb      	ldr	r3, [r7, #28]
 8006636:	61bb      	str	r3, [r7, #24]
	for(t=0;t<=distance+1;t++ )
 8006638:	2300      	movs	r3, #0
 800663a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800663c:	e02b      	b.n	8006696 <LCD_DrawLine2+0xf6>
	{
		LCD_DrawPoint2(uRow,uCol,color_idx);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	b29b      	uxth	r3, r3
 8006642:	68ba      	ldr	r2, [r7, #8]
 8006644:	b291      	uxth	r1, r2
 8006646:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800664a:	4618      	mov	r0, r3
 800664c:	f000 f82e 	bl	80066ac <LCD_DrawPoint2>
		xerr+=delta_x ;
 8006650:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006652:	6a3b      	ldr	r3, [r7, #32]
 8006654:	4413      	add	r3, r2
 8006656:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr+=delta_y ;
 8006658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800665a:	69fb      	ldr	r3, [r7, #28]
 800665c:	4413      	add	r3, r2
 800665e:	627b      	str	r3, [r7, #36]	; 0x24
		if(xerr>distance)
 8006660:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006662:	69bb      	ldr	r3, [r7, #24]
 8006664:	429a      	cmp	r2, r3
 8006666:	dd07      	ble.n	8006678 <LCD_DrawLine2+0xd8>
		{
			xerr-=distance;
 8006668:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800666a:	69bb      	ldr	r3, [r7, #24]
 800666c:	1ad3      	subs	r3, r2, r3
 800666e:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow+=incx;
 8006670:	68fa      	ldr	r2, [r7, #12]
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	4413      	add	r3, r2
 8006676:	60fb      	str	r3, [r7, #12]
		}
		if(yerr>distance)
 8006678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800667a:	69bb      	ldr	r3, [r7, #24]
 800667c:	429a      	cmp	r2, r3
 800667e:	dd07      	ble.n	8006690 <LCD_DrawLine2+0xf0>
		{
			yerr-=distance;
 8006680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006682:	69bb      	ldr	r3, [r7, #24]
 8006684:	1ad3      	subs	r3, r2, r3
 8006686:	627b      	str	r3, [r7, #36]	; 0x24
			uCol+=incy;
 8006688:	68ba      	ldr	r2, [r7, #8]
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	4413      	add	r3, r2
 800668e:	60bb      	str	r3, [r7, #8]
	for(t=0;t<=distance+1;t++ )
 8006690:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006692:	3301      	adds	r3, #1
 8006694:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006696:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006698:	69bb      	ldr	r3, [r7, #24]
 800669a:	3301      	adds	r3, #1
 800669c:	429a      	cmp	r2, r3
 800669e:	ddce      	ble.n	800663e <LCD_DrawLine2+0x9e>
		}
	}
}
 80066a0:	bf00      	nop
 80066a2:	bf00      	nop
 80066a4:	3734      	adds	r7, #52	; 0x34
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd90      	pop	{r4, r7, pc}
	...

080066ac <LCD_DrawPoint2>:
 * @parameters :x:the x coordinate of the pixel
                y:the y coordinate of the pixel
 * @retvalue   :None
******************************************************************************/
void LCD_DrawPoint2(u16 x, u16 y, u16 color_idx)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	4603      	mov	r3, r0
 80066b4:	80fb      	strh	r3, [r7, #6]
 80066b6:	460b      	mov	r3, r1
 80066b8:	80bb      	strh	r3, [r7, #4]
 80066ba:	4613      	mov	r3, r2
 80066bc:	807b      	strh	r3, [r7, #2]
	//LCD_SetCursor(x,y);
	//Lcd_WriteData_16Bit(POINT_COLOR);
	g_lcd_buf[y*320 + x] = color_idx;
 80066be:	88ba      	ldrh	r2, [r7, #4]
 80066c0:	4613      	mov	r3, r2
 80066c2:	009b      	lsls	r3, r3, #2
 80066c4:	4413      	add	r3, r2
 80066c6:	019b      	lsls	r3, r3, #6
 80066c8:	461a      	mov	r2, r3
 80066ca:	88fb      	ldrh	r3, [r7, #6]
 80066cc:	4413      	add	r3, r2
 80066ce:	887a      	ldrh	r2, [r7, #2]
 80066d0:	b251      	sxtb	r1, r2
 80066d2:	4a04      	ldr	r2, [pc, #16]	; (80066e4 <LCD_DrawPoint2+0x38>)
 80066d4:	54d1      	strb	r1, [r2, r3]
}
 80066d6:	bf00      	nop
 80066d8:	370c      	adds	r7, #12
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr
 80066e2:	bf00      	nop
 80066e4:	20004a24 	.word	0x20004a24

080066e8 <LCD_ShowChar2>:
								size:the size of display character
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/
void LCD_ShowChar2(u16 x, u16 y, u8 num, u8 size, u16 color_idx)
{
 80066e8:	b590      	push	{r4, r7, lr}
 80066ea:	b085      	sub	sp, #20
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	4604      	mov	r4, r0
 80066f0:	4608      	mov	r0, r1
 80066f2:	4611      	mov	r1, r2
 80066f4:	461a      	mov	r2, r3
 80066f6:	4623      	mov	r3, r4
 80066f8:	80fb      	strh	r3, [r7, #6]
 80066fa:	4603      	mov	r3, r0
 80066fc:	80bb      	strh	r3, [r7, #4]
 80066fe:	460b      	mov	r3, r1
 8006700:	70fb      	strb	r3, [r7, #3]
 8006702:	4613      	mov	r3, r2
 8006704:	70bb      	strb	r3, [r7, #2]
    u8 temp;
    u8 pos,t;
	//u16 colortemp=POINT_COLOR;

	num=num-' ';//�õ�ƫ�ƺ��ֵ
 8006706:	78fb      	ldrb	r3, [r7, #3]
 8006708:	3b20      	subs	r3, #32
 800670a:	70fb      	strb	r3, [r7, #3]
	//LCD_SetWindows(x,y,x+size/2-1,y+size-1);//���õ���������ʾ����


	for(pos=0;pos<size;pos++)
 800670c:	2300      	movs	r3, #0
 800670e:	73bb      	strb	r3, [r7, #14]
 8006710:	e03b      	b.n	800678a <LCD_ShowChar2+0xa2>
	{
		if(size==12)temp=asc2_1206[num][pos];//����1206����
 8006712:	78bb      	ldrb	r3, [r7, #2]
 8006714:	2b0c      	cmp	r3, #12
 8006716:	d10b      	bne.n	8006730 <LCD_ShowChar2+0x48>
 8006718:	78fa      	ldrb	r2, [r7, #3]
 800671a:	7bb9      	ldrb	r1, [r7, #14]
 800671c:	481f      	ldr	r0, [pc, #124]	; (800679c <LCD_ShowChar2+0xb4>)
 800671e:	4613      	mov	r3, r2
 8006720:	005b      	lsls	r3, r3, #1
 8006722:	4413      	add	r3, r2
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	4403      	add	r3, r0
 8006728:	440b      	add	r3, r1
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	73fb      	strb	r3, [r7, #15]
 800672e:	e007      	b.n	8006740 <LCD_ShowChar2+0x58>
		else temp=asc2_1608[num][pos];		 //����1608����
 8006730:	78fa      	ldrb	r2, [r7, #3]
 8006732:	7bbb      	ldrb	r3, [r7, #14]
 8006734:	491a      	ldr	r1, [pc, #104]	; (80067a0 <LCD_ShowChar2+0xb8>)
 8006736:	0112      	lsls	r2, r2, #4
 8006738:	440a      	add	r2, r1
 800673a:	4413      	add	r3, r2
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	73fb      	strb	r3, [r7, #15]
		for(t=0;t<size/2;t++)
 8006740:	2300      	movs	r3, #0
 8006742:	737b      	strb	r3, [r7, #13]
 8006744:	e018      	b.n	8006778 <LCD_ShowChar2+0x90>
		{
			//POINT_COLOR=fc;
			if(temp&0x01)LCD_DrawPoint2(x+t,y+pos,color_idx);//��һ����
 8006746:	7bfb      	ldrb	r3, [r7, #15]
 8006748:	f003 0301 	and.w	r3, r3, #1
 800674c:	2b00      	cmp	r3, #0
 800674e:	d00d      	beq.n	800676c <LCD_ShowChar2+0x84>
 8006750:	7b7b      	ldrb	r3, [r7, #13]
 8006752:	b29a      	uxth	r2, r3
 8006754:	88fb      	ldrh	r3, [r7, #6]
 8006756:	4413      	add	r3, r2
 8006758:	b298      	uxth	r0, r3
 800675a:	7bbb      	ldrb	r3, [r7, #14]
 800675c:	b29a      	uxth	r2, r3
 800675e:	88bb      	ldrh	r3, [r7, #4]
 8006760:	4413      	add	r3, r2
 8006762:	b29b      	uxth	r3, r3
 8006764:	8c3a      	ldrh	r2, [r7, #32]
 8006766:	4619      	mov	r1, r3
 8006768:	f7ff ffa0 	bl	80066ac <LCD_DrawPoint2>
			temp>>=1;
 800676c:	7bfb      	ldrb	r3, [r7, #15]
 800676e:	085b      	lsrs	r3, r3, #1
 8006770:	73fb      	strb	r3, [r7, #15]
		for(t=0;t<size/2;t++)
 8006772:	7b7b      	ldrb	r3, [r7, #13]
 8006774:	3301      	adds	r3, #1
 8006776:	737b      	strb	r3, [r7, #13]
 8006778:	78bb      	ldrb	r3, [r7, #2]
 800677a:	085b      	lsrs	r3, r3, #1
 800677c:	b2db      	uxtb	r3, r3
 800677e:	7b7a      	ldrb	r2, [r7, #13]
 8006780:	429a      	cmp	r2, r3
 8006782:	d3e0      	bcc.n	8006746 <LCD_ShowChar2+0x5e>
	for(pos=0;pos<size;pos++)
 8006784:	7bbb      	ldrb	r3, [r7, #14]
 8006786:	3301      	adds	r3, #1
 8006788:	73bb      	strb	r3, [r7, #14]
 800678a:	7bba      	ldrb	r2, [r7, #14]
 800678c:	78bb      	ldrb	r3, [r7, #2]
 800678e:	429a      	cmp	r2, r3
 8006790:	d3bf      	bcc.n	8006712 <LCD_ShowChar2+0x2a>
		}
	}

	//POINT_COLOR=colortemp;
	//LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);//�ָ�����Ϊȫ��
}
 8006792:	bf00      	nop
 8006794:	bf00      	nop
 8006796:	3714      	adds	r7, #20
 8006798:	46bd      	mov	sp, r7
 800679a:	bd90      	pop	{r4, r7, pc}
 800679c:	08009878 	.word	0x08009878
 80067a0:	08009cec 	.word	0x08009cec

080067a4 <Show_Str2>:
								size:the size of Chinese and English strings
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/
void Show_Str2(u16 x, u16 y, u8 *str, u8 size, u16 color_idx)
{
 80067a4:	b590      	push	{r4, r7, lr}
 80067a6:	b089      	sub	sp, #36	; 0x24
 80067a8:	af02      	add	r7, sp, #8
 80067aa:	60ba      	str	r2, [r7, #8]
 80067ac:	461a      	mov	r2, r3
 80067ae:	4603      	mov	r3, r0
 80067b0:	81fb      	strh	r3, [r7, #14]
 80067b2:	460b      	mov	r3, r1
 80067b4:	81bb      	strh	r3, [r7, #12]
 80067b6:	4613      	mov	r3, r2
 80067b8:	71fb      	strb	r3, [r7, #7]
	u16 x0=x;
 80067ba:	89fb      	ldrh	r3, [r7, #14]
 80067bc:	82fb      	strh	r3, [r7, #22]

    while(*str!=0)//����δ����
 80067be:	e044      	b.n	800684a <Show_Str2+0xa6>
    {

		if(x>(lcddev.width-size/2)||y>(lcddev.height-size))
 80067c0:	89fa      	ldrh	r2, [r7, #14]
 80067c2:	4b26      	ldr	r3, [pc, #152]	; (800685c <Show_Str2+0xb8>)
 80067c4:	881b      	ldrh	r3, [r3, #0]
 80067c6:	4619      	mov	r1, r3
 80067c8:	79fb      	ldrb	r3, [r7, #7]
 80067ca:	085b      	lsrs	r3, r3, #1
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	1acb      	subs	r3, r1, r3
 80067d0:	429a      	cmp	r2, r3
 80067d2:	dc3f      	bgt.n	8006854 <Show_Str2+0xb0>
 80067d4:	89ba      	ldrh	r2, [r7, #12]
 80067d6:	4b21      	ldr	r3, [pc, #132]	; (800685c <Show_Str2+0xb8>)
 80067d8:	885b      	ldrh	r3, [r3, #2]
 80067da:	4619      	mov	r1, r3
 80067dc:	79fb      	ldrb	r3, [r7, #7]
 80067de:	1acb      	subs	r3, r1, r3
 80067e0:	429a      	cmp	r2, r3
 80067e2:	dc37      	bgt.n	8006854 <Show_Str2+0xb0>
		return;

		if(*str==0x0D)//���з���
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	2b0d      	cmp	r3, #13
 80067ea:	d10a      	bne.n	8006802 <Show_Str2+0x5e>
		{
			y+=size;
 80067ec:	79fb      	ldrb	r3, [r7, #7]
 80067ee:	b29a      	uxth	r2, r3
 80067f0:	89bb      	ldrh	r3, [r7, #12]
 80067f2:	4413      	add	r3, r2
 80067f4:	81bb      	strh	r3, [r7, #12]
			x=x0;
 80067f6:	8afb      	ldrh	r3, [r7, #22]
 80067f8:	81fb      	strh	r3, [r7, #14]
			str++;
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	3301      	adds	r3, #1
 80067fe:	60bb      	str	r3, [r7, #8]
 8006800:	e020      	b.n	8006844 <Show_Str2+0xa0>
		}
		else
		{
			if(size>16)//�ֿ���û�м���12X24 16X32��Ӣ������,��8X16����
 8006802:	79fb      	ldrb	r3, [r7, #7]
 8006804:	2b10      	cmp	r3, #16
 8006806:	d90c      	bls.n	8006822 <Show_Str2+0x7e>
			{
			LCD_ShowChar2(x,y,*str,16,color_idx);
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	781a      	ldrb	r2, [r3, #0]
 800680c:	89b9      	ldrh	r1, [r7, #12]
 800680e:	89f8      	ldrh	r0, [r7, #14]
 8006810:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006812:	9300      	str	r3, [sp, #0]
 8006814:	2310      	movs	r3, #16
 8006816:	f7ff ff67 	bl	80066e8 <LCD_ShowChar2>
			x+=8; //�ַ�,Ϊȫ�ֵ�һ��
 800681a:	89fb      	ldrh	r3, [r7, #14]
 800681c:	3308      	adds	r3, #8
 800681e:	81fb      	strh	r3, [r7, #14]
 8006820:	e010      	b.n	8006844 <Show_Str2+0xa0>
			}
			else
			{
			LCD_ShowChar2(x,y,*str,size,color_idx);
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	781a      	ldrb	r2, [r3, #0]
 8006826:	79fc      	ldrb	r4, [r7, #7]
 8006828:	89b9      	ldrh	r1, [r7, #12]
 800682a:	89f8      	ldrh	r0, [r7, #14]
 800682c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800682e:	9300      	str	r3, [sp, #0]
 8006830:	4623      	mov	r3, r4
 8006832:	f7ff ff59 	bl	80066e8 <LCD_ShowChar2>
			x+=size/2; //�ַ�,Ϊȫ�ֵ�һ��
 8006836:	79fb      	ldrb	r3, [r7, #7]
 8006838:	085b      	lsrs	r3, r3, #1
 800683a:	b2db      	uxtb	r3, r3
 800683c:	b29a      	uxth	r2, r3
 800683e:	89fb      	ldrh	r3, [r7, #14]
 8006840:	4413      	add	r3, r2
 8006842:	81fb      	strh	r3, [r7, #14]
			}
		}
		str++;
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	3301      	adds	r3, #1
 8006848:	60bb      	str	r3, [r7, #8]
    while(*str!=0)//����δ����
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d1b6      	bne.n	80067c0 <Show_Str2+0x1c>
 8006852:	e000      	b.n	8006856 <Show_Str2+0xb2>
		return;
 8006854:	bf00      	nop

    }
}
 8006856:	371c      	adds	r7, #28
 8006858:	46bd      	mov	sp, r7
 800685a:	bd90      	pop	{r4, r7, pc}
 800685c:	20000e14 	.word	0x20000e14

08006860 <Gui_StrCenter2>:
				size:the size of English strings
				color_idx:the color value of English strings
 * @retvalue   :None
******************************************************************************/
void Gui_StrCenter2(u16 x, u16 y, u8 *str, u8 size, u16 color_idx)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b088      	sub	sp, #32
 8006864:	af02      	add	r7, sp, #8
 8006866:	60ba      	str	r2, [r7, #8]
 8006868:	461a      	mov	r2, r3
 800686a:	4603      	mov	r3, r0
 800686c:	81fb      	strh	r3, [r7, #14]
 800686e:	460b      	mov	r3, r1
 8006870:	81bb      	strh	r3, [r7, #12]
 8006872:	4613      	mov	r3, r2
 8006874:	71fb      	strb	r3, [r7, #7]
	u16 len=strlen((const char *)str);
 8006876:	68b8      	ldr	r0, [r7, #8]
 8006878:	f7f9 fcb2 	bl	80001e0 <strlen>
 800687c:	4603      	mov	r3, r0
 800687e:	82fb      	strh	r3, [r7, #22]
	u16 x1=(lcddev.width-len*8)/2;
 8006880:	4b0b      	ldr	r3, [pc, #44]	; (80068b0 <Gui_StrCenter2+0x50>)
 8006882:	881b      	ldrh	r3, [r3, #0]
 8006884:	461a      	mov	r2, r3
 8006886:	8afb      	ldrh	r3, [r7, #22]
 8006888:	00db      	lsls	r3, r3, #3
 800688a:	1ad3      	subs	r3, r2, r3
 800688c:	0fda      	lsrs	r2, r3, #31
 800688e:	4413      	add	r3, r2
 8006890:	105b      	asrs	r3, r3, #1
 8006892:	82bb      	strh	r3, [r7, #20]
	Show_Str2(x1,y,str,size,color_idx);
 8006894:	79fa      	ldrb	r2, [r7, #7]
 8006896:	89b9      	ldrh	r1, [r7, #12]
 8006898:	8ab8      	ldrh	r0, [r7, #20]
 800689a:	8c3b      	ldrh	r3, [r7, #32]
 800689c:	9300      	str	r3, [sp, #0]
 800689e:	4613      	mov	r3, r2
 80068a0:	68ba      	ldr	r2, [r7, #8]
 80068a2:	f7ff ff7f 	bl	80067a4 <Show_Str2>
}
 80068a6:	bf00      	nop
 80068a8:	3718      	adds	r7, #24
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
 80068ae:	bf00      	nop
 80068b0:	20000e14 	.word	0x20000e14

080068b4 <LCD_SendBuffer>:
 * @parameters :hspi:the SPI　handler
                hdma:the DMA handler
 * @retvalue   :None
******************************************************************************/
void LCD_SendBuffer(SPI_HandleTypeDef *hspi, DMA_HandleTypeDef *hdma)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b086      	sub	sp, #24
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
	s32 i, p, ps;

	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);
 80068be:	4b2b      	ldr	r3, [pc, #172]	; (800696c <LCD_SendBuffer+0xb8>)
 80068c0:	881b      	ldrh	r3, [r3, #0]
 80068c2:	3b01      	subs	r3, #1
 80068c4:	b29a      	uxth	r2, r3
 80068c6:	4b29      	ldr	r3, [pc, #164]	; (800696c <LCD_SendBuffer+0xb8>)
 80068c8:	885b      	ldrh	r3, [r3, #2]
 80068ca:	3b01      	subs	r3, #1
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	2100      	movs	r1, #0
 80068d0:	2000      	movs	r0, #0
 80068d2:	f7ff fdab 	bl	800642c <LCD_SetWindows>

	LCD_CS_CLR;
 80068d6:	2200      	movs	r2, #0
 80068d8:	2140      	movs	r1, #64	; 0x40
 80068da:	4825      	ldr	r0, [pc, #148]	; (8006970 <LCD_SendBuffer+0xbc>)
 80068dc:	f7fd f92a 	bl	8003b34 <HAL_GPIO_WritePin>
	LCD_RS_SET;
 80068e0:	2201      	movs	r2, #1
 80068e2:	2180      	movs	r1, #128	; 0x80
 80068e4:	4823      	ldr	r0, [pc, #140]	; (8006974 <LCD_SendBuffer+0xc0>)
 80068e6:	f7fd f925 	bl	8003b34 <HAL_GPIO_WritePin>

	for(i=0; i<LCD_SPLIT_SEND_NUM; i++){
 80068ea:	2300      	movs	r3, #0
 80068ec:	617b      	str	r3, [r7, #20]
 80068ee:	e030      	b.n	8006952 <LCD_SendBuffer+0x9e>

		ps = i * LCD_SEND_SIZE;
 80068f0:	697a      	ldr	r2, [r7, #20]
 80068f2:	4613      	mov	r3, r2
 80068f4:	011b      	lsls	r3, r3, #4
 80068f6:	1a9b      	subs	r3, r3, r2
 80068f8:	025b      	lsls	r3, r3, #9
 80068fa:	60fb      	str	r3, [r7, #12]

		for(p=0; p<LCD_SEND_SIZE; p++){
 80068fc:	2300      	movs	r3, #0
 80068fe:	613b      	str	r3, [r7, #16]
 8006900:	e00f      	b.n	8006922 <LCD_SendBuffer+0x6e>
			g_lcd_send_buf[p] = g_color_table[ g_lcd_buf[ps+p] ];
 8006902:	68fa      	ldr	r2, [r7, #12]
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	4413      	add	r3, r2
 8006908:	4a1b      	ldr	r2, [pc, #108]	; (8006978 <LCD_SendBuffer+0xc4>)
 800690a:	56d3      	ldrsb	r3, [r2, r3]
 800690c:	461a      	mov	r2, r3
 800690e:	4b1b      	ldr	r3, [pc, #108]	; (800697c <LCD_SendBuffer+0xc8>)
 8006910:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8006914:	4a1a      	ldr	r2, [pc, #104]	; (8006980 <LCD_SendBuffer+0xcc>)
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(p=0; p<LCD_SEND_SIZE; p++){
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	3301      	adds	r3, #1
 8006920:	613b      	str	r3, [r7, #16]
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 8006928:	dbeb      	blt.n	8006902 <LCD_SendBuffer+0x4e>
		}

		HAL_SPI_Transmit_DMA(hspi, (uint8_t*)g_lcd_send_buf, LCD_SEND_SIZE * 2);
 800692a:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800692e:	4914      	ldr	r1, [pc, #80]	; (8006980 <LCD_SendBuffer+0xcc>)
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f7fd ff6b 	bl	800480c <HAL_SPI_Transmit_DMA>
				hspi1.State = HAL_SPI_STATE_READY;
				break;
			}
#endif

			if(hdma->State == HAL_DMA_STATE_READY){
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800693c:	b2db      	uxtb	r3, r3
 800693e:	2b01      	cmp	r3, #1
 8006940:	d1f9      	bne.n	8006936 <LCD_SendBuffer+0x82>
				hspi1.State = HAL_SPI_STATE_READY;
 8006942:	4b10      	ldr	r3, [pc, #64]	; (8006984 <LCD_SendBuffer+0xd0>)
 8006944:	2201      	movs	r2, #1
 8006946:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
				break;
 800694a:	bf00      	nop
	for(i=0; i<LCD_SPLIT_SEND_NUM; i++){
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	3301      	adds	r3, #1
 8006950:	617b      	str	r3, [r7, #20]
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	2b09      	cmp	r3, #9
 8006956:	ddcb      	ble.n	80068f0 <LCD_SendBuffer+0x3c>
			}
		}
	}

	LCD_CS_SET;
 8006958:	2201      	movs	r2, #1
 800695a:	2140      	movs	r1, #64	; 0x40
 800695c:	4804      	ldr	r0, [pc, #16]	; (8006970 <LCD_SendBuffer+0xbc>)
 800695e:	f7fd f8e9 	bl	8003b34 <HAL_GPIO_WritePin>

}
 8006962:	bf00      	nop
 8006964:	3718      	adds	r7, #24
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}
 800696a:	bf00      	nop
 800696c:	20000e14 	.word	0x20000e14
 8006970:	40020400 	.word	0x40020400
 8006974:	40020800 	.word	0x40020800
 8006978:	20004a24 	.word	0x20004a24
 800697c:	2000000c 	.word	0x2000000c
 8006980:	20000e24 	.word	0x20000e24
 8006984:	20000ccc 	.word	0x20000ccc

08006988 <__errno>:
 8006988:	4b01      	ldr	r3, [pc, #4]	; (8006990 <__errno+0x8>)
 800698a:	6818      	ldr	r0, [r3, #0]
 800698c:	4770      	bx	lr
 800698e:	bf00      	nop
 8006990:	20000038 	.word	0x20000038

08006994 <__libc_init_array>:
 8006994:	b570      	push	{r4, r5, r6, lr}
 8006996:	4d0d      	ldr	r5, [pc, #52]	; (80069cc <__libc_init_array+0x38>)
 8006998:	4c0d      	ldr	r4, [pc, #52]	; (80069d0 <__libc_init_array+0x3c>)
 800699a:	1b64      	subs	r4, r4, r5
 800699c:	10a4      	asrs	r4, r4, #2
 800699e:	2600      	movs	r6, #0
 80069a0:	42a6      	cmp	r6, r4
 80069a2:	d109      	bne.n	80069b8 <__libc_init_array+0x24>
 80069a4:	4d0b      	ldr	r5, [pc, #44]	; (80069d4 <__libc_init_array+0x40>)
 80069a6:	4c0c      	ldr	r4, [pc, #48]	; (80069d8 <__libc_init_array+0x44>)
 80069a8:	f002 ff2c 	bl	8009804 <_init>
 80069ac:	1b64      	subs	r4, r4, r5
 80069ae:	10a4      	asrs	r4, r4, #2
 80069b0:	2600      	movs	r6, #0
 80069b2:	42a6      	cmp	r6, r4
 80069b4:	d105      	bne.n	80069c2 <__libc_init_array+0x2e>
 80069b6:	bd70      	pop	{r4, r5, r6, pc}
 80069b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80069bc:	4798      	blx	r3
 80069be:	3601      	adds	r6, #1
 80069c0:	e7ee      	b.n	80069a0 <__libc_init_array+0xc>
 80069c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80069c6:	4798      	blx	r3
 80069c8:	3601      	adds	r6, #1
 80069ca:	e7f2      	b.n	80069b2 <__libc_init_array+0x1e>
 80069cc:	0800a6c4 	.word	0x0800a6c4
 80069d0:	0800a6c4 	.word	0x0800a6c4
 80069d4:	0800a6c4 	.word	0x0800a6c4
 80069d8:	0800a6c8 	.word	0x0800a6c8

080069dc <memset>:
 80069dc:	4402      	add	r2, r0
 80069de:	4603      	mov	r3, r0
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d100      	bne.n	80069e6 <memset+0xa>
 80069e4:	4770      	bx	lr
 80069e6:	f803 1b01 	strb.w	r1, [r3], #1
 80069ea:	e7f9      	b.n	80069e0 <memset+0x4>

080069ec <__cvt>:
 80069ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069f0:	ec55 4b10 	vmov	r4, r5, d0
 80069f4:	2d00      	cmp	r5, #0
 80069f6:	460e      	mov	r6, r1
 80069f8:	4619      	mov	r1, r3
 80069fa:	462b      	mov	r3, r5
 80069fc:	bfbb      	ittet	lt
 80069fe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006a02:	461d      	movlt	r5, r3
 8006a04:	2300      	movge	r3, #0
 8006a06:	232d      	movlt	r3, #45	; 0x2d
 8006a08:	700b      	strb	r3, [r1, #0]
 8006a0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a0c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006a10:	4691      	mov	r9, r2
 8006a12:	f023 0820 	bic.w	r8, r3, #32
 8006a16:	bfbc      	itt	lt
 8006a18:	4622      	movlt	r2, r4
 8006a1a:	4614      	movlt	r4, r2
 8006a1c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006a20:	d005      	beq.n	8006a2e <__cvt+0x42>
 8006a22:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006a26:	d100      	bne.n	8006a2a <__cvt+0x3e>
 8006a28:	3601      	adds	r6, #1
 8006a2a:	2102      	movs	r1, #2
 8006a2c:	e000      	b.n	8006a30 <__cvt+0x44>
 8006a2e:	2103      	movs	r1, #3
 8006a30:	ab03      	add	r3, sp, #12
 8006a32:	9301      	str	r3, [sp, #4]
 8006a34:	ab02      	add	r3, sp, #8
 8006a36:	9300      	str	r3, [sp, #0]
 8006a38:	ec45 4b10 	vmov	d0, r4, r5
 8006a3c:	4653      	mov	r3, sl
 8006a3e:	4632      	mov	r2, r6
 8006a40:	f000 fe22 	bl	8007688 <_dtoa_r>
 8006a44:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006a48:	4607      	mov	r7, r0
 8006a4a:	d102      	bne.n	8006a52 <__cvt+0x66>
 8006a4c:	f019 0f01 	tst.w	r9, #1
 8006a50:	d022      	beq.n	8006a98 <__cvt+0xac>
 8006a52:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006a56:	eb07 0906 	add.w	r9, r7, r6
 8006a5a:	d110      	bne.n	8006a7e <__cvt+0x92>
 8006a5c:	783b      	ldrb	r3, [r7, #0]
 8006a5e:	2b30      	cmp	r3, #48	; 0x30
 8006a60:	d10a      	bne.n	8006a78 <__cvt+0x8c>
 8006a62:	2200      	movs	r2, #0
 8006a64:	2300      	movs	r3, #0
 8006a66:	4620      	mov	r0, r4
 8006a68:	4629      	mov	r1, r5
 8006a6a:	f7fa f835 	bl	8000ad8 <__aeabi_dcmpeq>
 8006a6e:	b918      	cbnz	r0, 8006a78 <__cvt+0x8c>
 8006a70:	f1c6 0601 	rsb	r6, r6, #1
 8006a74:	f8ca 6000 	str.w	r6, [sl]
 8006a78:	f8da 3000 	ldr.w	r3, [sl]
 8006a7c:	4499      	add	r9, r3
 8006a7e:	2200      	movs	r2, #0
 8006a80:	2300      	movs	r3, #0
 8006a82:	4620      	mov	r0, r4
 8006a84:	4629      	mov	r1, r5
 8006a86:	f7fa f827 	bl	8000ad8 <__aeabi_dcmpeq>
 8006a8a:	b108      	cbz	r0, 8006a90 <__cvt+0xa4>
 8006a8c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006a90:	2230      	movs	r2, #48	; 0x30
 8006a92:	9b03      	ldr	r3, [sp, #12]
 8006a94:	454b      	cmp	r3, r9
 8006a96:	d307      	bcc.n	8006aa8 <__cvt+0xbc>
 8006a98:	9b03      	ldr	r3, [sp, #12]
 8006a9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a9c:	1bdb      	subs	r3, r3, r7
 8006a9e:	4638      	mov	r0, r7
 8006aa0:	6013      	str	r3, [r2, #0]
 8006aa2:	b004      	add	sp, #16
 8006aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aa8:	1c59      	adds	r1, r3, #1
 8006aaa:	9103      	str	r1, [sp, #12]
 8006aac:	701a      	strb	r2, [r3, #0]
 8006aae:	e7f0      	b.n	8006a92 <__cvt+0xa6>

08006ab0 <__exponent>:
 8006ab0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	2900      	cmp	r1, #0
 8006ab6:	bfb8      	it	lt
 8006ab8:	4249      	neglt	r1, r1
 8006aba:	f803 2b02 	strb.w	r2, [r3], #2
 8006abe:	bfb4      	ite	lt
 8006ac0:	222d      	movlt	r2, #45	; 0x2d
 8006ac2:	222b      	movge	r2, #43	; 0x2b
 8006ac4:	2909      	cmp	r1, #9
 8006ac6:	7042      	strb	r2, [r0, #1]
 8006ac8:	dd2a      	ble.n	8006b20 <__exponent+0x70>
 8006aca:	f10d 0407 	add.w	r4, sp, #7
 8006ace:	46a4      	mov	ip, r4
 8006ad0:	270a      	movs	r7, #10
 8006ad2:	46a6      	mov	lr, r4
 8006ad4:	460a      	mov	r2, r1
 8006ad6:	fb91 f6f7 	sdiv	r6, r1, r7
 8006ada:	fb07 1516 	mls	r5, r7, r6, r1
 8006ade:	3530      	adds	r5, #48	; 0x30
 8006ae0:	2a63      	cmp	r2, #99	; 0x63
 8006ae2:	f104 34ff 	add.w	r4, r4, #4294967295
 8006ae6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006aea:	4631      	mov	r1, r6
 8006aec:	dcf1      	bgt.n	8006ad2 <__exponent+0x22>
 8006aee:	3130      	adds	r1, #48	; 0x30
 8006af0:	f1ae 0502 	sub.w	r5, lr, #2
 8006af4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006af8:	1c44      	adds	r4, r0, #1
 8006afa:	4629      	mov	r1, r5
 8006afc:	4561      	cmp	r1, ip
 8006afe:	d30a      	bcc.n	8006b16 <__exponent+0x66>
 8006b00:	f10d 0209 	add.w	r2, sp, #9
 8006b04:	eba2 020e 	sub.w	r2, r2, lr
 8006b08:	4565      	cmp	r5, ip
 8006b0a:	bf88      	it	hi
 8006b0c:	2200      	movhi	r2, #0
 8006b0e:	4413      	add	r3, r2
 8006b10:	1a18      	subs	r0, r3, r0
 8006b12:	b003      	add	sp, #12
 8006b14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b1a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006b1e:	e7ed      	b.n	8006afc <__exponent+0x4c>
 8006b20:	2330      	movs	r3, #48	; 0x30
 8006b22:	3130      	adds	r1, #48	; 0x30
 8006b24:	7083      	strb	r3, [r0, #2]
 8006b26:	70c1      	strb	r1, [r0, #3]
 8006b28:	1d03      	adds	r3, r0, #4
 8006b2a:	e7f1      	b.n	8006b10 <__exponent+0x60>

08006b2c <_printf_float>:
 8006b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b30:	ed2d 8b02 	vpush	{d8}
 8006b34:	b08d      	sub	sp, #52	; 0x34
 8006b36:	460c      	mov	r4, r1
 8006b38:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006b3c:	4616      	mov	r6, r2
 8006b3e:	461f      	mov	r7, r3
 8006b40:	4605      	mov	r5, r0
 8006b42:	f001 fd45 	bl	80085d0 <_localeconv_r>
 8006b46:	f8d0 a000 	ldr.w	sl, [r0]
 8006b4a:	4650      	mov	r0, sl
 8006b4c:	f7f9 fb48 	bl	80001e0 <strlen>
 8006b50:	2300      	movs	r3, #0
 8006b52:	930a      	str	r3, [sp, #40]	; 0x28
 8006b54:	6823      	ldr	r3, [r4, #0]
 8006b56:	9305      	str	r3, [sp, #20]
 8006b58:	f8d8 3000 	ldr.w	r3, [r8]
 8006b5c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006b60:	3307      	adds	r3, #7
 8006b62:	f023 0307 	bic.w	r3, r3, #7
 8006b66:	f103 0208 	add.w	r2, r3, #8
 8006b6a:	f8c8 2000 	str.w	r2, [r8]
 8006b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b72:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006b76:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006b7a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006b7e:	9307      	str	r3, [sp, #28]
 8006b80:	f8cd 8018 	str.w	r8, [sp, #24]
 8006b84:	ee08 0a10 	vmov	s16, r0
 8006b88:	4b9f      	ldr	r3, [pc, #636]	; (8006e08 <_printf_float+0x2dc>)
 8006b8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b8e:	f04f 32ff 	mov.w	r2, #4294967295
 8006b92:	f7f9 ffd3 	bl	8000b3c <__aeabi_dcmpun>
 8006b96:	bb88      	cbnz	r0, 8006bfc <_printf_float+0xd0>
 8006b98:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b9c:	4b9a      	ldr	r3, [pc, #616]	; (8006e08 <_printf_float+0x2dc>)
 8006b9e:	f04f 32ff 	mov.w	r2, #4294967295
 8006ba2:	f7f9 ffad 	bl	8000b00 <__aeabi_dcmple>
 8006ba6:	bb48      	cbnz	r0, 8006bfc <_printf_float+0xd0>
 8006ba8:	2200      	movs	r2, #0
 8006baa:	2300      	movs	r3, #0
 8006bac:	4640      	mov	r0, r8
 8006bae:	4649      	mov	r1, r9
 8006bb0:	f7f9 ff9c 	bl	8000aec <__aeabi_dcmplt>
 8006bb4:	b110      	cbz	r0, 8006bbc <_printf_float+0x90>
 8006bb6:	232d      	movs	r3, #45	; 0x2d
 8006bb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bbc:	4b93      	ldr	r3, [pc, #588]	; (8006e0c <_printf_float+0x2e0>)
 8006bbe:	4894      	ldr	r0, [pc, #592]	; (8006e10 <_printf_float+0x2e4>)
 8006bc0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006bc4:	bf94      	ite	ls
 8006bc6:	4698      	movls	r8, r3
 8006bc8:	4680      	movhi	r8, r0
 8006bca:	2303      	movs	r3, #3
 8006bcc:	6123      	str	r3, [r4, #16]
 8006bce:	9b05      	ldr	r3, [sp, #20]
 8006bd0:	f023 0204 	bic.w	r2, r3, #4
 8006bd4:	6022      	str	r2, [r4, #0]
 8006bd6:	f04f 0900 	mov.w	r9, #0
 8006bda:	9700      	str	r7, [sp, #0]
 8006bdc:	4633      	mov	r3, r6
 8006bde:	aa0b      	add	r2, sp, #44	; 0x2c
 8006be0:	4621      	mov	r1, r4
 8006be2:	4628      	mov	r0, r5
 8006be4:	f000 f9d8 	bl	8006f98 <_printf_common>
 8006be8:	3001      	adds	r0, #1
 8006bea:	f040 8090 	bne.w	8006d0e <_printf_float+0x1e2>
 8006bee:	f04f 30ff 	mov.w	r0, #4294967295
 8006bf2:	b00d      	add	sp, #52	; 0x34
 8006bf4:	ecbd 8b02 	vpop	{d8}
 8006bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bfc:	4642      	mov	r2, r8
 8006bfe:	464b      	mov	r3, r9
 8006c00:	4640      	mov	r0, r8
 8006c02:	4649      	mov	r1, r9
 8006c04:	f7f9 ff9a 	bl	8000b3c <__aeabi_dcmpun>
 8006c08:	b140      	cbz	r0, 8006c1c <_printf_float+0xf0>
 8006c0a:	464b      	mov	r3, r9
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	bfbc      	itt	lt
 8006c10:	232d      	movlt	r3, #45	; 0x2d
 8006c12:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006c16:	487f      	ldr	r0, [pc, #508]	; (8006e14 <_printf_float+0x2e8>)
 8006c18:	4b7f      	ldr	r3, [pc, #508]	; (8006e18 <_printf_float+0x2ec>)
 8006c1a:	e7d1      	b.n	8006bc0 <_printf_float+0x94>
 8006c1c:	6863      	ldr	r3, [r4, #4]
 8006c1e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006c22:	9206      	str	r2, [sp, #24]
 8006c24:	1c5a      	adds	r2, r3, #1
 8006c26:	d13f      	bne.n	8006ca8 <_printf_float+0x17c>
 8006c28:	2306      	movs	r3, #6
 8006c2a:	6063      	str	r3, [r4, #4]
 8006c2c:	9b05      	ldr	r3, [sp, #20]
 8006c2e:	6861      	ldr	r1, [r4, #4]
 8006c30:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006c34:	2300      	movs	r3, #0
 8006c36:	9303      	str	r3, [sp, #12]
 8006c38:	ab0a      	add	r3, sp, #40	; 0x28
 8006c3a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006c3e:	ab09      	add	r3, sp, #36	; 0x24
 8006c40:	ec49 8b10 	vmov	d0, r8, r9
 8006c44:	9300      	str	r3, [sp, #0]
 8006c46:	6022      	str	r2, [r4, #0]
 8006c48:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006c4c:	4628      	mov	r0, r5
 8006c4e:	f7ff fecd 	bl	80069ec <__cvt>
 8006c52:	9b06      	ldr	r3, [sp, #24]
 8006c54:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c56:	2b47      	cmp	r3, #71	; 0x47
 8006c58:	4680      	mov	r8, r0
 8006c5a:	d108      	bne.n	8006c6e <_printf_float+0x142>
 8006c5c:	1cc8      	adds	r0, r1, #3
 8006c5e:	db02      	blt.n	8006c66 <_printf_float+0x13a>
 8006c60:	6863      	ldr	r3, [r4, #4]
 8006c62:	4299      	cmp	r1, r3
 8006c64:	dd41      	ble.n	8006cea <_printf_float+0x1be>
 8006c66:	f1ab 0b02 	sub.w	fp, fp, #2
 8006c6a:	fa5f fb8b 	uxtb.w	fp, fp
 8006c6e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006c72:	d820      	bhi.n	8006cb6 <_printf_float+0x18a>
 8006c74:	3901      	subs	r1, #1
 8006c76:	465a      	mov	r2, fp
 8006c78:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006c7c:	9109      	str	r1, [sp, #36]	; 0x24
 8006c7e:	f7ff ff17 	bl	8006ab0 <__exponent>
 8006c82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c84:	1813      	adds	r3, r2, r0
 8006c86:	2a01      	cmp	r2, #1
 8006c88:	4681      	mov	r9, r0
 8006c8a:	6123      	str	r3, [r4, #16]
 8006c8c:	dc02      	bgt.n	8006c94 <_printf_float+0x168>
 8006c8e:	6822      	ldr	r2, [r4, #0]
 8006c90:	07d2      	lsls	r2, r2, #31
 8006c92:	d501      	bpl.n	8006c98 <_printf_float+0x16c>
 8006c94:	3301      	adds	r3, #1
 8006c96:	6123      	str	r3, [r4, #16]
 8006c98:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d09c      	beq.n	8006bda <_printf_float+0xae>
 8006ca0:	232d      	movs	r3, #45	; 0x2d
 8006ca2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ca6:	e798      	b.n	8006bda <_printf_float+0xae>
 8006ca8:	9a06      	ldr	r2, [sp, #24]
 8006caa:	2a47      	cmp	r2, #71	; 0x47
 8006cac:	d1be      	bne.n	8006c2c <_printf_float+0x100>
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d1bc      	bne.n	8006c2c <_printf_float+0x100>
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e7b9      	b.n	8006c2a <_printf_float+0xfe>
 8006cb6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006cba:	d118      	bne.n	8006cee <_printf_float+0x1c2>
 8006cbc:	2900      	cmp	r1, #0
 8006cbe:	6863      	ldr	r3, [r4, #4]
 8006cc0:	dd0b      	ble.n	8006cda <_printf_float+0x1ae>
 8006cc2:	6121      	str	r1, [r4, #16]
 8006cc4:	b913      	cbnz	r3, 8006ccc <_printf_float+0x1a0>
 8006cc6:	6822      	ldr	r2, [r4, #0]
 8006cc8:	07d0      	lsls	r0, r2, #31
 8006cca:	d502      	bpl.n	8006cd2 <_printf_float+0x1a6>
 8006ccc:	3301      	adds	r3, #1
 8006cce:	440b      	add	r3, r1
 8006cd0:	6123      	str	r3, [r4, #16]
 8006cd2:	65a1      	str	r1, [r4, #88]	; 0x58
 8006cd4:	f04f 0900 	mov.w	r9, #0
 8006cd8:	e7de      	b.n	8006c98 <_printf_float+0x16c>
 8006cda:	b913      	cbnz	r3, 8006ce2 <_printf_float+0x1b6>
 8006cdc:	6822      	ldr	r2, [r4, #0]
 8006cde:	07d2      	lsls	r2, r2, #31
 8006ce0:	d501      	bpl.n	8006ce6 <_printf_float+0x1ba>
 8006ce2:	3302      	adds	r3, #2
 8006ce4:	e7f4      	b.n	8006cd0 <_printf_float+0x1a4>
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	e7f2      	b.n	8006cd0 <_printf_float+0x1a4>
 8006cea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006cee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cf0:	4299      	cmp	r1, r3
 8006cf2:	db05      	blt.n	8006d00 <_printf_float+0x1d4>
 8006cf4:	6823      	ldr	r3, [r4, #0]
 8006cf6:	6121      	str	r1, [r4, #16]
 8006cf8:	07d8      	lsls	r0, r3, #31
 8006cfa:	d5ea      	bpl.n	8006cd2 <_printf_float+0x1a6>
 8006cfc:	1c4b      	adds	r3, r1, #1
 8006cfe:	e7e7      	b.n	8006cd0 <_printf_float+0x1a4>
 8006d00:	2900      	cmp	r1, #0
 8006d02:	bfd4      	ite	le
 8006d04:	f1c1 0202 	rsble	r2, r1, #2
 8006d08:	2201      	movgt	r2, #1
 8006d0a:	4413      	add	r3, r2
 8006d0c:	e7e0      	b.n	8006cd0 <_printf_float+0x1a4>
 8006d0e:	6823      	ldr	r3, [r4, #0]
 8006d10:	055a      	lsls	r2, r3, #21
 8006d12:	d407      	bmi.n	8006d24 <_printf_float+0x1f8>
 8006d14:	6923      	ldr	r3, [r4, #16]
 8006d16:	4642      	mov	r2, r8
 8006d18:	4631      	mov	r1, r6
 8006d1a:	4628      	mov	r0, r5
 8006d1c:	47b8      	blx	r7
 8006d1e:	3001      	adds	r0, #1
 8006d20:	d12c      	bne.n	8006d7c <_printf_float+0x250>
 8006d22:	e764      	b.n	8006bee <_printf_float+0xc2>
 8006d24:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006d28:	f240 80e0 	bls.w	8006eec <_printf_float+0x3c0>
 8006d2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006d30:	2200      	movs	r2, #0
 8006d32:	2300      	movs	r3, #0
 8006d34:	f7f9 fed0 	bl	8000ad8 <__aeabi_dcmpeq>
 8006d38:	2800      	cmp	r0, #0
 8006d3a:	d034      	beq.n	8006da6 <_printf_float+0x27a>
 8006d3c:	4a37      	ldr	r2, [pc, #220]	; (8006e1c <_printf_float+0x2f0>)
 8006d3e:	2301      	movs	r3, #1
 8006d40:	4631      	mov	r1, r6
 8006d42:	4628      	mov	r0, r5
 8006d44:	47b8      	blx	r7
 8006d46:	3001      	adds	r0, #1
 8006d48:	f43f af51 	beq.w	8006bee <_printf_float+0xc2>
 8006d4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d50:	429a      	cmp	r2, r3
 8006d52:	db02      	blt.n	8006d5a <_printf_float+0x22e>
 8006d54:	6823      	ldr	r3, [r4, #0]
 8006d56:	07d8      	lsls	r0, r3, #31
 8006d58:	d510      	bpl.n	8006d7c <_printf_float+0x250>
 8006d5a:	ee18 3a10 	vmov	r3, s16
 8006d5e:	4652      	mov	r2, sl
 8006d60:	4631      	mov	r1, r6
 8006d62:	4628      	mov	r0, r5
 8006d64:	47b8      	blx	r7
 8006d66:	3001      	adds	r0, #1
 8006d68:	f43f af41 	beq.w	8006bee <_printf_float+0xc2>
 8006d6c:	f04f 0800 	mov.w	r8, #0
 8006d70:	f104 091a 	add.w	r9, r4, #26
 8006d74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d76:	3b01      	subs	r3, #1
 8006d78:	4543      	cmp	r3, r8
 8006d7a:	dc09      	bgt.n	8006d90 <_printf_float+0x264>
 8006d7c:	6823      	ldr	r3, [r4, #0]
 8006d7e:	079b      	lsls	r3, r3, #30
 8006d80:	f100 8105 	bmi.w	8006f8e <_printf_float+0x462>
 8006d84:	68e0      	ldr	r0, [r4, #12]
 8006d86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d88:	4298      	cmp	r0, r3
 8006d8a:	bfb8      	it	lt
 8006d8c:	4618      	movlt	r0, r3
 8006d8e:	e730      	b.n	8006bf2 <_printf_float+0xc6>
 8006d90:	2301      	movs	r3, #1
 8006d92:	464a      	mov	r2, r9
 8006d94:	4631      	mov	r1, r6
 8006d96:	4628      	mov	r0, r5
 8006d98:	47b8      	blx	r7
 8006d9a:	3001      	adds	r0, #1
 8006d9c:	f43f af27 	beq.w	8006bee <_printf_float+0xc2>
 8006da0:	f108 0801 	add.w	r8, r8, #1
 8006da4:	e7e6      	b.n	8006d74 <_printf_float+0x248>
 8006da6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	dc39      	bgt.n	8006e20 <_printf_float+0x2f4>
 8006dac:	4a1b      	ldr	r2, [pc, #108]	; (8006e1c <_printf_float+0x2f0>)
 8006dae:	2301      	movs	r3, #1
 8006db0:	4631      	mov	r1, r6
 8006db2:	4628      	mov	r0, r5
 8006db4:	47b8      	blx	r7
 8006db6:	3001      	adds	r0, #1
 8006db8:	f43f af19 	beq.w	8006bee <_printf_float+0xc2>
 8006dbc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	d102      	bne.n	8006dca <_printf_float+0x29e>
 8006dc4:	6823      	ldr	r3, [r4, #0]
 8006dc6:	07d9      	lsls	r1, r3, #31
 8006dc8:	d5d8      	bpl.n	8006d7c <_printf_float+0x250>
 8006dca:	ee18 3a10 	vmov	r3, s16
 8006dce:	4652      	mov	r2, sl
 8006dd0:	4631      	mov	r1, r6
 8006dd2:	4628      	mov	r0, r5
 8006dd4:	47b8      	blx	r7
 8006dd6:	3001      	adds	r0, #1
 8006dd8:	f43f af09 	beq.w	8006bee <_printf_float+0xc2>
 8006ddc:	f04f 0900 	mov.w	r9, #0
 8006de0:	f104 0a1a 	add.w	sl, r4, #26
 8006de4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006de6:	425b      	negs	r3, r3
 8006de8:	454b      	cmp	r3, r9
 8006dea:	dc01      	bgt.n	8006df0 <_printf_float+0x2c4>
 8006dec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dee:	e792      	b.n	8006d16 <_printf_float+0x1ea>
 8006df0:	2301      	movs	r3, #1
 8006df2:	4652      	mov	r2, sl
 8006df4:	4631      	mov	r1, r6
 8006df6:	4628      	mov	r0, r5
 8006df8:	47b8      	blx	r7
 8006dfa:	3001      	adds	r0, #1
 8006dfc:	f43f aef7 	beq.w	8006bee <_printf_float+0xc2>
 8006e00:	f109 0901 	add.w	r9, r9, #1
 8006e04:	e7ee      	b.n	8006de4 <_printf_float+0x2b8>
 8006e06:	bf00      	nop
 8006e08:	7fefffff 	.word	0x7fefffff
 8006e0c:	0800a2e0 	.word	0x0800a2e0
 8006e10:	0800a2e4 	.word	0x0800a2e4
 8006e14:	0800a2ec 	.word	0x0800a2ec
 8006e18:	0800a2e8 	.word	0x0800a2e8
 8006e1c:	0800a2f0 	.word	0x0800a2f0
 8006e20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e22:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e24:	429a      	cmp	r2, r3
 8006e26:	bfa8      	it	ge
 8006e28:	461a      	movge	r2, r3
 8006e2a:	2a00      	cmp	r2, #0
 8006e2c:	4691      	mov	r9, r2
 8006e2e:	dc37      	bgt.n	8006ea0 <_printf_float+0x374>
 8006e30:	f04f 0b00 	mov.w	fp, #0
 8006e34:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e38:	f104 021a 	add.w	r2, r4, #26
 8006e3c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e3e:	9305      	str	r3, [sp, #20]
 8006e40:	eba3 0309 	sub.w	r3, r3, r9
 8006e44:	455b      	cmp	r3, fp
 8006e46:	dc33      	bgt.n	8006eb0 <_printf_float+0x384>
 8006e48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	db3b      	blt.n	8006ec8 <_printf_float+0x39c>
 8006e50:	6823      	ldr	r3, [r4, #0]
 8006e52:	07da      	lsls	r2, r3, #31
 8006e54:	d438      	bmi.n	8006ec8 <_printf_float+0x39c>
 8006e56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e58:	9b05      	ldr	r3, [sp, #20]
 8006e5a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e5c:	1ad3      	subs	r3, r2, r3
 8006e5e:	eba2 0901 	sub.w	r9, r2, r1
 8006e62:	4599      	cmp	r9, r3
 8006e64:	bfa8      	it	ge
 8006e66:	4699      	movge	r9, r3
 8006e68:	f1b9 0f00 	cmp.w	r9, #0
 8006e6c:	dc35      	bgt.n	8006eda <_printf_float+0x3ae>
 8006e6e:	f04f 0800 	mov.w	r8, #0
 8006e72:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e76:	f104 0a1a 	add.w	sl, r4, #26
 8006e7a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e7e:	1a9b      	subs	r3, r3, r2
 8006e80:	eba3 0309 	sub.w	r3, r3, r9
 8006e84:	4543      	cmp	r3, r8
 8006e86:	f77f af79 	ble.w	8006d7c <_printf_float+0x250>
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	4652      	mov	r2, sl
 8006e8e:	4631      	mov	r1, r6
 8006e90:	4628      	mov	r0, r5
 8006e92:	47b8      	blx	r7
 8006e94:	3001      	adds	r0, #1
 8006e96:	f43f aeaa 	beq.w	8006bee <_printf_float+0xc2>
 8006e9a:	f108 0801 	add.w	r8, r8, #1
 8006e9e:	e7ec      	b.n	8006e7a <_printf_float+0x34e>
 8006ea0:	4613      	mov	r3, r2
 8006ea2:	4631      	mov	r1, r6
 8006ea4:	4642      	mov	r2, r8
 8006ea6:	4628      	mov	r0, r5
 8006ea8:	47b8      	blx	r7
 8006eaa:	3001      	adds	r0, #1
 8006eac:	d1c0      	bne.n	8006e30 <_printf_float+0x304>
 8006eae:	e69e      	b.n	8006bee <_printf_float+0xc2>
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	4631      	mov	r1, r6
 8006eb4:	4628      	mov	r0, r5
 8006eb6:	9205      	str	r2, [sp, #20]
 8006eb8:	47b8      	blx	r7
 8006eba:	3001      	adds	r0, #1
 8006ebc:	f43f ae97 	beq.w	8006bee <_printf_float+0xc2>
 8006ec0:	9a05      	ldr	r2, [sp, #20]
 8006ec2:	f10b 0b01 	add.w	fp, fp, #1
 8006ec6:	e7b9      	b.n	8006e3c <_printf_float+0x310>
 8006ec8:	ee18 3a10 	vmov	r3, s16
 8006ecc:	4652      	mov	r2, sl
 8006ece:	4631      	mov	r1, r6
 8006ed0:	4628      	mov	r0, r5
 8006ed2:	47b8      	blx	r7
 8006ed4:	3001      	adds	r0, #1
 8006ed6:	d1be      	bne.n	8006e56 <_printf_float+0x32a>
 8006ed8:	e689      	b.n	8006bee <_printf_float+0xc2>
 8006eda:	9a05      	ldr	r2, [sp, #20]
 8006edc:	464b      	mov	r3, r9
 8006ede:	4442      	add	r2, r8
 8006ee0:	4631      	mov	r1, r6
 8006ee2:	4628      	mov	r0, r5
 8006ee4:	47b8      	blx	r7
 8006ee6:	3001      	adds	r0, #1
 8006ee8:	d1c1      	bne.n	8006e6e <_printf_float+0x342>
 8006eea:	e680      	b.n	8006bee <_printf_float+0xc2>
 8006eec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006eee:	2a01      	cmp	r2, #1
 8006ef0:	dc01      	bgt.n	8006ef6 <_printf_float+0x3ca>
 8006ef2:	07db      	lsls	r3, r3, #31
 8006ef4:	d538      	bpl.n	8006f68 <_printf_float+0x43c>
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	4642      	mov	r2, r8
 8006efa:	4631      	mov	r1, r6
 8006efc:	4628      	mov	r0, r5
 8006efe:	47b8      	blx	r7
 8006f00:	3001      	adds	r0, #1
 8006f02:	f43f ae74 	beq.w	8006bee <_printf_float+0xc2>
 8006f06:	ee18 3a10 	vmov	r3, s16
 8006f0a:	4652      	mov	r2, sl
 8006f0c:	4631      	mov	r1, r6
 8006f0e:	4628      	mov	r0, r5
 8006f10:	47b8      	blx	r7
 8006f12:	3001      	adds	r0, #1
 8006f14:	f43f ae6b 	beq.w	8006bee <_printf_float+0xc2>
 8006f18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	2300      	movs	r3, #0
 8006f20:	f7f9 fdda 	bl	8000ad8 <__aeabi_dcmpeq>
 8006f24:	b9d8      	cbnz	r0, 8006f5e <_printf_float+0x432>
 8006f26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f28:	f108 0201 	add.w	r2, r8, #1
 8006f2c:	3b01      	subs	r3, #1
 8006f2e:	4631      	mov	r1, r6
 8006f30:	4628      	mov	r0, r5
 8006f32:	47b8      	blx	r7
 8006f34:	3001      	adds	r0, #1
 8006f36:	d10e      	bne.n	8006f56 <_printf_float+0x42a>
 8006f38:	e659      	b.n	8006bee <_printf_float+0xc2>
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	4652      	mov	r2, sl
 8006f3e:	4631      	mov	r1, r6
 8006f40:	4628      	mov	r0, r5
 8006f42:	47b8      	blx	r7
 8006f44:	3001      	adds	r0, #1
 8006f46:	f43f ae52 	beq.w	8006bee <_printf_float+0xc2>
 8006f4a:	f108 0801 	add.w	r8, r8, #1
 8006f4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f50:	3b01      	subs	r3, #1
 8006f52:	4543      	cmp	r3, r8
 8006f54:	dcf1      	bgt.n	8006f3a <_printf_float+0x40e>
 8006f56:	464b      	mov	r3, r9
 8006f58:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006f5c:	e6dc      	b.n	8006d18 <_printf_float+0x1ec>
 8006f5e:	f04f 0800 	mov.w	r8, #0
 8006f62:	f104 0a1a 	add.w	sl, r4, #26
 8006f66:	e7f2      	b.n	8006f4e <_printf_float+0x422>
 8006f68:	2301      	movs	r3, #1
 8006f6a:	4642      	mov	r2, r8
 8006f6c:	e7df      	b.n	8006f2e <_printf_float+0x402>
 8006f6e:	2301      	movs	r3, #1
 8006f70:	464a      	mov	r2, r9
 8006f72:	4631      	mov	r1, r6
 8006f74:	4628      	mov	r0, r5
 8006f76:	47b8      	blx	r7
 8006f78:	3001      	adds	r0, #1
 8006f7a:	f43f ae38 	beq.w	8006bee <_printf_float+0xc2>
 8006f7e:	f108 0801 	add.w	r8, r8, #1
 8006f82:	68e3      	ldr	r3, [r4, #12]
 8006f84:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006f86:	1a5b      	subs	r3, r3, r1
 8006f88:	4543      	cmp	r3, r8
 8006f8a:	dcf0      	bgt.n	8006f6e <_printf_float+0x442>
 8006f8c:	e6fa      	b.n	8006d84 <_printf_float+0x258>
 8006f8e:	f04f 0800 	mov.w	r8, #0
 8006f92:	f104 0919 	add.w	r9, r4, #25
 8006f96:	e7f4      	b.n	8006f82 <_printf_float+0x456>

08006f98 <_printf_common>:
 8006f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f9c:	4616      	mov	r6, r2
 8006f9e:	4699      	mov	r9, r3
 8006fa0:	688a      	ldr	r2, [r1, #8]
 8006fa2:	690b      	ldr	r3, [r1, #16]
 8006fa4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	bfb8      	it	lt
 8006fac:	4613      	movlt	r3, r2
 8006fae:	6033      	str	r3, [r6, #0]
 8006fb0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006fb4:	4607      	mov	r7, r0
 8006fb6:	460c      	mov	r4, r1
 8006fb8:	b10a      	cbz	r2, 8006fbe <_printf_common+0x26>
 8006fba:	3301      	adds	r3, #1
 8006fbc:	6033      	str	r3, [r6, #0]
 8006fbe:	6823      	ldr	r3, [r4, #0]
 8006fc0:	0699      	lsls	r1, r3, #26
 8006fc2:	bf42      	ittt	mi
 8006fc4:	6833      	ldrmi	r3, [r6, #0]
 8006fc6:	3302      	addmi	r3, #2
 8006fc8:	6033      	strmi	r3, [r6, #0]
 8006fca:	6825      	ldr	r5, [r4, #0]
 8006fcc:	f015 0506 	ands.w	r5, r5, #6
 8006fd0:	d106      	bne.n	8006fe0 <_printf_common+0x48>
 8006fd2:	f104 0a19 	add.w	sl, r4, #25
 8006fd6:	68e3      	ldr	r3, [r4, #12]
 8006fd8:	6832      	ldr	r2, [r6, #0]
 8006fda:	1a9b      	subs	r3, r3, r2
 8006fdc:	42ab      	cmp	r3, r5
 8006fde:	dc26      	bgt.n	800702e <_printf_common+0x96>
 8006fe0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006fe4:	1e13      	subs	r3, r2, #0
 8006fe6:	6822      	ldr	r2, [r4, #0]
 8006fe8:	bf18      	it	ne
 8006fea:	2301      	movne	r3, #1
 8006fec:	0692      	lsls	r2, r2, #26
 8006fee:	d42b      	bmi.n	8007048 <_printf_common+0xb0>
 8006ff0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ff4:	4649      	mov	r1, r9
 8006ff6:	4638      	mov	r0, r7
 8006ff8:	47c0      	blx	r8
 8006ffa:	3001      	adds	r0, #1
 8006ffc:	d01e      	beq.n	800703c <_printf_common+0xa4>
 8006ffe:	6823      	ldr	r3, [r4, #0]
 8007000:	68e5      	ldr	r5, [r4, #12]
 8007002:	6832      	ldr	r2, [r6, #0]
 8007004:	f003 0306 	and.w	r3, r3, #6
 8007008:	2b04      	cmp	r3, #4
 800700a:	bf08      	it	eq
 800700c:	1aad      	subeq	r5, r5, r2
 800700e:	68a3      	ldr	r3, [r4, #8]
 8007010:	6922      	ldr	r2, [r4, #16]
 8007012:	bf0c      	ite	eq
 8007014:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007018:	2500      	movne	r5, #0
 800701a:	4293      	cmp	r3, r2
 800701c:	bfc4      	itt	gt
 800701e:	1a9b      	subgt	r3, r3, r2
 8007020:	18ed      	addgt	r5, r5, r3
 8007022:	2600      	movs	r6, #0
 8007024:	341a      	adds	r4, #26
 8007026:	42b5      	cmp	r5, r6
 8007028:	d11a      	bne.n	8007060 <_printf_common+0xc8>
 800702a:	2000      	movs	r0, #0
 800702c:	e008      	b.n	8007040 <_printf_common+0xa8>
 800702e:	2301      	movs	r3, #1
 8007030:	4652      	mov	r2, sl
 8007032:	4649      	mov	r1, r9
 8007034:	4638      	mov	r0, r7
 8007036:	47c0      	blx	r8
 8007038:	3001      	adds	r0, #1
 800703a:	d103      	bne.n	8007044 <_printf_common+0xac>
 800703c:	f04f 30ff 	mov.w	r0, #4294967295
 8007040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007044:	3501      	adds	r5, #1
 8007046:	e7c6      	b.n	8006fd6 <_printf_common+0x3e>
 8007048:	18e1      	adds	r1, r4, r3
 800704a:	1c5a      	adds	r2, r3, #1
 800704c:	2030      	movs	r0, #48	; 0x30
 800704e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007052:	4422      	add	r2, r4
 8007054:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007058:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800705c:	3302      	adds	r3, #2
 800705e:	e7c7      	b.n	8006ff0 <_printf_common+0x58>
 8007060:	2301      	movs	r3, #1
 8007062:	4622      	mov	r2, r4
 8007064:	4649      	mov	r1, r9
 8007066:	4638      	mov	r0, r7
 8007068:	47c0      	blx	r8
 800706a:	3001      	adds	r0, #1
 800706c:	d0e6      	beq.n	800703c <_printf_common+0xa4>
 800706e:	3601      	adds	r6, #1
 8007070:	e7d9      	b.n	8007026 <_printf_common+0x8e>
	...

08007074 <_printf_i>:
 8007074:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007078:	460c      	mov	r4, r1
 800707a:	4691      	mov	r9, r2
 800707c:	7e27      	ldrb	r7, [r4, #24]
 800707e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007080:	2f78      	cmp	r7, #120	; 0x78
 8007082:	4680      	mov	r8, r0
 8007084:	469a      	mov	sl, r3
 8007086:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800708a:	d807      	bhi.n	800709c <_printf_i+0x28>
 800708c:	2f62      	cmp	r7, #98	; 0x62
 800708e:	d80a      	bhi.n	80070a6 <_printf_i+0x32>
 8007090:	2f00      	cmp	r7, #0
 8007092:	f000 80d8 	beq.w	8007246 <_printf_i+0x1d2>
 8007096:	2f58      	cmp	r7, #88	; 0x58
 8007098:	f000 80a3 	beq.w	80071e2 <_printf_i+0x16e>
 800709c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80070a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80070a4:	e03a      	b.n	800711c <_printf_i+0xa8>
 80070a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80070aa:	2b15      	cmp	r3, #21
 80070ac:	d8f6      	bhi.n	800709c <_printf_i+0x28>
 80070ae:	a001      	add	r0, pc, #4	; (adr r0, 80070b4 <_printf_i+0x40>)
 80070b0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80070b4:	0800710d 	.word	0x0800710d
 80070b8:	08007121 	.word	0x08007121
 80070bc:	0800709d 	.word	0x0800709d
 80070c0:	0800709d 	.word	0x0800709d
 80070c4:	0800709d 	.word	0x0800709d
 80070c8:	0800709d 	.word	0x0800709d
 80070cc:	08007121 	.word	0x08007121
 80070d0:	0800709d 	.word	0x0800709d
 80070d4:	0800709d 	.word	0x0800709d
 80070d8:	0800709d 	.word	0x0800709d
 80070dc:	0800709d 	.word	0x0800709d
 80070e0:	0800722d 	.word	0x0800722d
 80070e4:	08007151 	.word	0x08007151
 80070e8:	0800720f 	.word	0x0800720f
 80070ec:	0800709d 	.word	0x0800709d
 80070f0:	0800709d 	.word	0x0800709d
 80070f4:	0800724f 	.word	0x0800724f
 80070f8:	0800709d 	.word	0x0800709d
 80070fc:	08007151 	.word	0x08007151
 8007100:	0800709d 	.word	0x0800709d
 8007104:	0800709d 	.word	0x0800709d
 8007108:	08007217 	.word	0x08007217
 800710c:	680b      	ldr	r3, [r1, #0]
 800710e:	1d1a      	adds	r2, r3, #4
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	600a      	str	r2, [r1, #0]
 8007114:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007118:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800711c:	2301      	movs	r3, #1
 800711e:	e0a3      	b.n	8007268 <_printf_i+0x1f4>
 8007120:	6825      	ldr	r5, [r4, #0]
 8007122:	6808      	ldr	r0, [r1, #0]
 8007124:	062e      	lsls	r6, r5, #24
 8007126:	f100 0304 	add.w	r3, r0, #4
 800712a:	d50a      	bpl.n	8007142 <_printf_i+0xce>
 800712c:	6805      	ldr	r5, [r0, #0]
 800712e:	600b      	str	r3, [r1, #0]
 8007130:	2d00      	cmp	r5, #0
 8007132:	da03      	bge.n	800713c <_printf_i+0xc8>
 8007134:	232d      	movs	r3, #45	; 0x2d
 8007136:	426d      	negs	r5, r5
 8007138:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800713c:	485e      	ldr	r0, [pc, #376]	; (80072b8 <_printf_i+0x244>)
 800713e:	230a      	movs	r3, #10
 8007140:	e019      	b.n	8007176 <_printf_i+0x102>
 8007142:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007146:	6805      	ldr	r5, [r0, #0]
 8007148:	600b      	str	r3, [r1, #0]
 800714a:	bf18      	it	ne
 800714c:	b22d      	sxthne	r5, r5
 800714e:	e7ef      	b.n	8007130 <_printf_i+0xbc>
 8007150:	680b      	ldr	r3, [r1, #0]
 8007152:	6825      	ldr	r5, [r4, #0]
 8007154:	1d18      	adds	r0, r3, #4
 8007156:	6008      	str	r0, [r1, #0]
 8007158:	0628      	lsls	r0, r5, #24
 800715a:	d501      	bpl.n	8007160 <_printf_i+0xec>
 800715c:	681d      	ldr	r5, [r3, #0]
 800715e:	e002      	b.n	8007166 <_printf_i+0xf2>
 8007160:	0669      	lsls	r1, r5, #25
 8007162:	d5fb      	bpl.n	800715c <_printf_i+0xe8>
 8007164:	881d      	ldrh	r5, [r3, #0]
 8007166:	4854      	ldr	r0, [pc, #336]	; (80072b8 <_printf_i+0x244>)
 8007168:	2f6f      	cmp	r7, #111	; 0x6f
 800716a:	bf0c      	ite	eq
 800716c:	2308      	moveq	r3, #8
 800716e:	230a      	movne	r3, #10
 8007170:	2100      	movs	r1, #0
 8007172:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007176:	6866      	ldr	r6, [r4, #4]
 8007178:	60a6      	str	r6, [r4, #8]
 800717a:	2e00      	cmp	r6, #0
 800717c:	bfa2      	ittt	ge
 800717e:	6821      	ldrge	r1, [r4, #0]
 8007180:	f021 0104 	bicge.w	r1, r1, #4
 8007184:	6021      	strge	r1, [r4, #0]
 8007186:	b90d      	cbnz	r5, 800718c <_printf_i+0x118>
 8007188:	2e00      	cmp	r6, #0
 800718a:	d04d      	beq.n	8007228 <_printf_i+0x1b4>
 800718c:	4616      	mov	r6, r2
 800718e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007192:	fb03 5711 	mls	r7, r3, r1, r5
 8007196:	5dc7      	ldrb	r7, [r0, r7]
 8007198:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800719c:	462f      	mov	r7, r5
 800719e:	42bb      	cmp	r3, r7
 80071a0:	460d      	mov	r5, r1
 80071a2:	d9f4      	bls.n	800718e <_printf_i+0x11a>
 80071a4:	2b08      	cmp	r3, #8
 80071a6:	d10b      	bne.n	80071c0 <_printf_i+0x14c>
 80071a8:	6823      	ldr	r3, [r4, #0]
 80071aa:	07df      	lsls	r7, r3, #31
 80071ac:	d508      	bpl.n	80071c0 <_printf_i+0x14c>
 80071ae:	6923      	ldr	r3, [r4, #16]
 80071b0:	6861      	ldr	r1, [r4, #4]
 80071b2:	4299      	cmp	r1, r3
 80071b4:	bfde      	ittt	le
 80071b6:	2330      	movle	r3, #48	; 0x30
 80071b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80071bc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80071c0:	1b92      	subs	r2, r2, r6
 80071c2:	6122      	str	r2, [r4, #16]
 80071c4:	f8cd a000 	str.w	sl, [sp]
 80071c8:	464b      	mov	r3, r9
 80071ca:	aa03      	add	r2, sp, #12
 80071cc:	4621      	mov	r1, r4
 80071ce:	4640      	mov	r0, r8
 80071d0:	f7ff fee2 	bl	8006f98 <_printf_common>
 80071d4:	3001      	adds	r0, #1
 80071d6:	d14c      	bne.n	8007272 <_printf_i+0x1fe>
 80071d8:	f04f 30ff 	mov.w	r0, #4294967295
 80071dc:	b004      	add	sp, #16
 80071de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071e2:	4835      	ldr	r0, [pc, #212]	; (80072b8 <_printf_i+0x244>)
 80071e4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80071e8:	6823      	ldr	r3, [r4, #0]
 80071ea:	680e      	ldr	r6, [r1, #0]
 80071ec:	061f      	lsls	r7, r3, #24
 80071ee:	f856 5b04 	ldr.w	r5, [r6], #4
 80071f2:	600e      	str	r6, [r1, #0]
 80071f4:	d514      	bpl.n	8007220 <_printf_i+0x1ac>
 80071f6:	07d9      	lsls	r1, r3, #31
 80071f8:	bf44      	itt	mi
 80071fa:	f043 0320 	orrmi.w	r3, r3, #32
 80071fe:	6023      	strmi	r3, [r4, #0]
 8007200:	b91d      	cbnz	r5, 800720a <_printf_i+0x196>
 8007202:	6823      	ldr	r3, [r4, #0]
 8007204:	f023 0320 	bic.w	r3, r3, #32
 8007208:	6023      	str	r3, [r4, #0]
 800720a:	2310      	movs	r3, #16
 800720c:	e7b0      	b.n	8007170 <_printf_i+0xfc>
 800720e:	6823      	ldr	r3, [r4, #0]
 8007210:	f043 0320 	orr.w	r3, r3, #32
 8007214:	6023      	str	r3, [r4, #0]
 8007216:	2378      	movs	r3, #120	; 0x78
 8007218:	4828      	ldr	r0, [pc, #160]	; (80072bc <_printf_i+0x248>)
 800721a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800721e:	e7e3      	b.n	80071e8 <_printf_i+0x174>
 8007220:	065e      	lsls	r6, r3, #25
 8007222:	bf48      	it	mi
 8007224:	b2ad      	uxthmi	r5, r5
 8007226:	e7e6      	b.n	80071f6 <_printf_i+0x182>
 8007228:	4616      	mov	r6, r2
 800722a:	e7bb      	b.n	80071a4 <_printf_i+0x130>
 800722c:	680b      	ldr	r3, [r1, #0]
 800722e:	6826      	ldr	r6, [r4, #0]
 8007230:	6960      	ldr	r0, [r4, #20]
 8007232:	1d1d      	adds	r5, r3, #4
 8007234:	600d      	str	r5, [r1, #0]
 8007236:	0635      	lsls	r5, r6, #24
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	d501      	bpl.n	8007240 <_printf_i+0x1cc>
 800723c:	6018      	str	r0, [r3, #0]
 800723e:	e002      	b.n	8007246 <_printf_i+0x1d2>
 8007240:	0671      	lsls	r1, r6, #25
 8007242:	d5fb      	bpl.n	800723c <_printf_i+0x1c8>
 8007244:	8018      	strh	r0, [r3, #0]
 8007246:	2300      	movs	r3, #0
 8007248:	6123      	str	r3, [r4, #16]
 800724a:	4616      	mov	r6, r2
 800724c:	e7ba      	b.n	80071c4 <_printf_i+0x150>
 800724e:	680b      	ldr	r3, [r1, #0]
 8007250:	1d1a      	adds	r2, r3, #4
 8007252:	600a      	str	r2, [r1, #0]
 8007254:	681e      	ldr	r6, [r3, #0]
 8007256:	6862      	ldr	r2, [r4, #4]
 8007258:	2100      	movs	r1, #0
 800725a:	4630      	mov	r0, r6
 800725c:	f7f8 ffc8 	bl	80001f0 <memchr>
 8007260:	b108      	cbz	r0, 8007266 <_printf_i+0x1f2>
 8007262:	1b80      	subs	r0, r0, r6
 8007264:	6060      	str	r0, [r4, #4]
 8007266:	6863      	ldr	r3, [r4, #4]
 8007268:	6123      	str	r3, [r4, #16]
 800726a:	2300      	movs	r3, #0
 800726c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007270:	e7a8      	b.n	80071c4 <_printf_i+0x150>
 8007272:	6923      	ldr	r3, [r4, #16]
 8007274:	4632      	mov	r2, r6
 8007276:	4649      	mov	r1, r9
 8007278:	4640      	mov	r0, r8
 800727a:	47d0      	blx	sl
 800727c:	3001      	adds	r0, #1
 800727e:	d0ab      	beq.n	80071d8 <_printf_i+0x164>
 8007280:	6823      	ldr	r3, [r4, #0]
 8007282:	079b      	lsls	r3, r3, #30
 8007284:	d413      	bmi.n	80072ae <_printf_i+0x23a>
 8007286:	68e0      	ldr	r0, [r4, #12]
 8007288:	9b03      	ldr	r3, [sp, #12]
 800728a:	4298      	cmp	r0, r3
 800728c:	bfb8      	it	lt
 800728e:	4618      	movlt	r0, r3
 8007290:	e7a4      	b.n	80071dc <_printf_i+0x168>
 8007292:	2301      	movs	r3, #1
 8007294:	4632      	mov	r2, r6
 8007296:	4649      	mov	r1, r9
 8007298:	4640      	mov	r0, r8
 800729a:	47d0      	blx	sl
 800729c:	3001      	adds	r0, #1
 800729e:	d09b      	beq.n	80071d8 <_printf_i+0x164>
 80072a0:	3501      	adds	r5, #1
 80072a2:	68e3      	ldr	r3, [r4, #12]
 80072a4:	9903      	ldr	r1, [sp, #12]
 80072a6:	1a5b      	subs	r3, r3, r1
 80072a8:	42ab      	cmp	r3, r5
 80072aa:	dcf2      	bgt.n	8007292 <_printf_i+0x21e>
 80072ac:	e7eb      	b.n	8007286 <_printf_i+0x212>
 80072ae:	2500      	movs	r5, #0
 80072b0:	f104 0619 	add.w	r6, r4, #25
 80072b4:	e7f5      	b.n	80072a2 <_printf_i+0x22e>
 80072b6:	bf00      	nop
 80072b8:	0800a2f2 	.word	0x0800a2f2
 80072bc:	0800a303 	.word	0x0800a303

080072c0 <_puts_r>:
 80072c0:	b570      	push	{r4, r5, r6, lr}
 80072c2:	460e      	mov	r6, r1
 80072c4:	4605      	mov	r5, r0
 80072c6:	b118      	cbz	r0, 80072d0 <_puts_r+0x10>
 80072c8:	6983      	ldr	r3, [r0, #24]
 80072ca:	b90b      	cbnz	r3, 80072d0 <_puts_r+0x10>
 80072cc:	f001 f8e2 	bl	8008494 <__sinit>
 80072d0:	69ab      	ldr	r3, [r5, #24]
 80072d2:	68ac      	ldr	r4, [r5, #8]
 80072d4:	b913      	cbnz	r3, 80072dc <_puts_r+0x1c>
 80072d6:	4628      	mov	r0, r5
 80072d8:	f001 f8dc 	bl	8008494 <__sinit>
 80072dc:	4b2c      	ldr	r3, [pc, #176]	; (8007390 <_puts_r+0xd0>)
 80072de:	429c      	cmp	r4, r3
 80072e0:	d120      	bne.n	8007324 <_puts_r+0x64>
 80072e2:	686c      	ldr	r4, [r5, #4]
 80072e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80072e6:	07db      	lsls	r3, r3, #31
 80072e8:	d405      	bmi.n	80072f6 <_puts_r+0x36>
 80072ea:	89a3      	ldrh	r3, [r4, #12]
 80072ec:	0598      	lsls	r0, r3, #22
 80072ee:	d402      	bmi.n	80072f6 <_puts_r+0x36>
 80072f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80072f2:	f001 f972 	bl	80085da <__retarget_lock_acquire_recursive>
 80072f6:	89a3      	ldrh	r3, [r4, #12]
 80072f8:	0719      	lsls	r1, r3, #28
 80072fa:	d51d      	bpl.n	8007338 <_puts_r+0x78>
 80072fc:	6923      	ldr	r3, [r4, #16]
 80072fe:	b1db      	cbz	r3, 8007338 <_puts_r+0x78>
 8007300:	3e01      	subs	r6, #1
 8007302:	68a3      	ldr	r3, [r4, #8]
 8007304:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007308:	3b01      	subs	r3, #1
 800730a:	60a3      	str	r3, [r4, #8]
 800730c:	bb39      	cbnz	r1, 800735e <_puts_r+0x9e>
 800730e:	2b00      	cmp	r3, #0
 8007310:	da38      	bge.n	8007384 <_puts_r+0xc4>
 8007312:	4622      	mov	r2, r4
 8007314:	210a      	movs	r1, #10
 8007316:	4628      	mov	r0, r5
 8007318:	f000 f868 	bl	80073ec <__swbuf_r>
 800731c:	3001      	adds	r0, #1
 800731e:	d011      	beq.n	8007344 <_puts_r+0x84>
 8007320:	250a      	movs	r5, #10
 8007322:	e011      	b.n	8007348 <_puts_r+0x88>
 8007324:	4b1b      	ldr	r3, [pc, #108]	; (8007394 <_puts_r+0xd4>)
 8007326:	429c      	cmp	r4, r3
 8007328:	d101      	bne.n	800732e <_puts_r+0x6e>
 800732a:	68ac      	ldr	r4, [r5, #8]
 800732c:	e7da      	b.n	80072e4 <_puts_r+0x24>
 800732e:	4b1a      	ldr	r3, [pc, #104]	; (8007398 <_puts_r+0xd8>)
 8007330:	429c      	cmp	r4, r3
 8007332:	bf08      	it	eq
 8007334:	68ec      	ldreq	r4, [r5, #12]
 8007336:	e7d5      	b.n	80072e4 <_puts_r+0x24>
 8007338:	4621      	mov	r1, r4
 800733a:	4628      	mov	r0, r5
 800733c:	f000 f8a8 	bl	8007490 <__swsetup_r>
 8007340:	2800      	cmp	r0, #0
 8007342:	d0dd      	beq.n	8007300 <_puts_r+0x40>
 8007344:	f04f 35ff 	mov.w	r5, #4294967295
 8007348:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800734a:	07da      	lsls	r2, r3, #31
 800734c:	d405      	bmi.n	800735a <_puts_r+0x9a>
 800734e:	89a3      	ldrh	r3, [r4, #12]
 8007350:	059b      	lsls	r3, r3, #22
 8007352:	d402      	bmi.n	800735a <_puts_r+0x9a>
 8007354:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007356:	f001 f941 	bl	80085dc <__retarget_lock_release_recursive>
 800735a:	4628      	mov	r0, r5
 800735c:	bd70      	pop	{r4, r5, r6, pc}
 800735e:	2b00      	cmp	r3, #0
 8007360:	da04      	bge.n	800736c <_puts_r+0xac>
 8007362:	69a2      	ldr	r2, [r4, #24]
 8007364:	429a      	cmp	r2, r3
 8007366:	dc06      	bgt.n	8007376 <_puts_r+0xb6>
 8007368:	290a      	cmp	r1, #10
 800736a:	d004      	beq.n	8007376 <_puts_r+0xb6>
 800736c:	6823      	ldr	r3, [r4, #0]
 800736e:	1c5a      	adds	r2, r3, #1
 8007370:	6022      	str	r2, [r4, #0]
 8007372:	7019      	strb	r1, [r3, #0]
 8007374:	e7c5      	b.n	8007302 <_puts_r+0x42>
 8007376:	4622      	mov	r2, r4
 8007378:	4628      	mov	r0, r5
 800737a:	f000 f837 	bl	80073ec <__swbuf_r>
 800737e:	3001      	adds	r0, #1
 8007380:	d1bf      	bne.n	8007302 <_puts_r+0x42>
 8007382:	e7df      	b.n	8007344 <_puts_r+0x84>
 8007384:	6823      	ldr	r3, [r4, #0]
 8007386:	250a      	movs	r5, #10
 8007388:	1c5a      	adds	r2, r3, #1
 800738a:	6022      	str	r2, [r4, #0]
 800738c:	701d      	strb	r5, [r3, #0]
 800738e:	e7db      	b.n	8007348 <_puts_r+0x88>
 8007390:	0800a3c8 	.word	0x0800a3c8
 8007394:	0800a3e8 	.word	0x0800a3e8
 8007398:	0800a3a8 	.word	0x0800a3a8

0800739c <puts>:
 800739c:	4b02      	ldr	r3, [pc, #8]	; (80073a8 <puts+0xc>)
 800739e:	4601      	mov	r1, r0
 80073a0:	6818      	ldr	r0, [r3, #0]
 80073a2:	f7ff bf8d 	b.w	80072c0 <_puts_r>
 80073a6:	bf00      	nop
 80073a8:	20000038 	.word	0x20000038

080073ac <siprintf>:
 80073ac:	b40e      	push	{r1, r2, r3}
 80073ae:	b500      	push	{lr}
 80073b0:	b09c      	sub	sp, #112	; 0x70
 80073b2:	ab1d      	add	r3, sp, #116	; 0x74
 80073b4:	9002      	str	r0, [sp, #8]
 80073b6:	9006      	str	r0, [sp, #24]
 80073b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80073bc:	4809      	ldr	r0, [pc, #36]	; (80073e4 <siprintf+0x38>)
 80073be:	9107      	str	r1, [sp, #28]
 80073c0:	9104      	str	r1, [sp, #16]
 80073c2:	4909      	ldr	r1, [pc, #36]	; (80073e8 <siprintf+0x3c>)
 80073c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80073c8:	9105      	str	r1, [sp, #20]
 80073ca:	6800      	ldr	r0, [r0, #0]
 80073cc:	9301      	str	r3, [sp, #4]
 80073ce:	a902      	add	r1, sp, #8
 80073d0:	f001 fe14 	bl	8008ffc <_svfiprintf_r>
 80073d4:	9b02      	ldr	r3, [sp, #8]
 80073d6:	2200      	movs	r2, #0
 80073d8:	701a      	strb	r2, [r3, #0]
 80073da:	b01c      	add	sp, #112	; 0x70
 80073dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80073e0:	b003      	add	sp, #12
 80073e2:	4770      	bx	lr
 80073e4:	20000038 	.word	0x20000038
 80073e8:	ffff0208 	.word	0xffff0208

080073ec <__swbuf_r>:
 80073ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ee:	460e      	mov	r6, r1
 80073f0:	4614      	mov	r4, r2
 80073f2:	4605      	mov	r5, r0
 80073f4:	b118      	cbz	r0, 80073fe <__swbuf_r+0x12>
 80073f6:	6983      	ldr	r3, [r0, #24]
 80073f8:	b90b      	cbnz	r3, 80073fe <__swbuf_r+0x12>
 80073fa:	f001 f84b 	bl	8008494 <__sinit>
 80073fe:	4b21      	ldr	r3, [pc, #132]	; (8007484 <__swbuf_r+0x98>)
 8007400:	429c      	cmp	r4, r3
 8007402:	d12b      	bne.n	800745c <__swbuf_r+0x70>
 8007404:	686c      	ldr	r4, [r5, #4]
 8007406:	69a3      	ldr	r3, [r4, #24]
 8007408:	60a3      	str	r3, [r4, #8]
 800740a:	89a3      	ldrh	r3, [r4, #12]
 800740c:	071a      	lsls	r2, r3, #28
 800740e:	d52f      	bpl.n	8007470 <__swbuf_r+0x84>
 8007410:	6923      	ldr	r3, [r4, #16]
 8007412:	b36b      	cbz	r3, 8007470 <__swbuf_r+0x84>
 8007414:	6923      	ldr	r3, [r4, #16]
 8007416:	6820      	ldr	r0, [r4, #0]
 8007418:	1ac0      	subs	r0, r0, r3
 800741a:	6963      	ldr	r3, [r4, #20]
 800741c:	b2f6      	uxtb	r6, r6
 800741e:	4283      	cmp	r3, r0
 8007420:	4637      	mov	r7, r6
 8007422:	dc04      	bgt.n	800742e <__swbuf_r+0x42>
 8007424:	4621      	mov	r1, r4
 8007426:	4628      	mov	r0, r5
 8007428:	f000 ffa0 	bl	800836c <_fflush_r>
 800742c:	bb30      	cbnz	r0, 800747c <__swbuf_r+0x90>
 800742e:	68a3      	ldr	r3, [r4, #8]
 8007430:	3b01      	subs	r3, #1
 8007432:	60a3      	str	r3, [r4, #8]
 8007434:	6823      	ldr	r3, [r4, #0]
 8007436:	1c5a      	adds	r2, r3, #1
 8007438:	6022      	str	r2, [r4, #0]
 800743a:	701e      	strb	r6, [r3, #0]
 800743c:	6963      	ldr	r3, [r4, #20]
 800743e:	3001      	adds	r0, #1
 8007440:	4283      	cmp	r3, r0
 8007442:	d004      	beq.n	800744e <__swbuf_r+0x62>
 8007444:	89a3      	ldrh	r3, [r4, #12]
 8007446:	07db      	lsls	r3, r3, #31
 8007448:	d506      	bpl.n	8007458 <__swbuf_r+0x6c>
 800744a:	2e0a      	cmp	r6, #10
 800744c:	d104      	bne.n	8007458 <__swbuf_r+0x6c>
 800744e:	4621      	mov	r1, r4
 8007450:	4628      	mov	r0, r5
 8007452:	f000 ff8b 	bl	800836c <_fflush_r>
 8007456:	b988      	cbnz	r0, 800747c <__swbuf_r+0x90>
 8007458:	4638      	mov	r0, r7
 800745a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800745c:	4b0a      	ldr	r3, [pc, #40]	; (8007488 <__swbuf_r+0x9c>)
 800745e:	429c      	cmp	r4, r3
 8007460:	d101      	bne.n	8007466 <__swbuf_r+0x7a>
 8007462:	68ac      	ldr	r4, [r5, #8]
 8007464:	e7cf      	b.n	8007406 <__swbuf_r+0x1a>
 8007466:	4b09      	ldr	r3, [pc, #36]	; (800748c <__swbuf_r+0xa0>)
 8007468:	429c      	cmp	r4, r3
 800746a:	bf08      	it	eq
 800746c:	68ec      	ldreq	r4, [r5, #12]
 800746e:	e7ca      	b.n	8007406 <__swbuf_r+0x1a>
 8007470:	4621      	mov	r1, r4
 8007472:	4628      	mov	r0, r5
 8007474:	f000 f80c 	bl	8007490 <__swsetup_r>
 8007478:	2800      	cmp	r0, #0
 800747a:	d0cb      	beq.n	8007414 <__swbuf_r+0x28>
 800747c:	f04f 37ff 	mov.w	r7, #4294967295
 8007480:	e7ea      	b.n	8007458 <__swbuf_r+0x6c>
 8007482:	bf00      	nop
 8007484:	0800a3c8 	.word	0x0800a3c8
 8007488:	0800a3e8 	.word	0x0800a3e8
 800748c:	0800a3a8 	.word	0x0800a3a8

08007490 <__swsetup_r>:
 8007490:	4b32      	ldr	r3, [pc, #200]	; (800755c <__swsetup_r+0xcc>)
 8007492:	b570      	push	{r4, r5, r6, lr}
 8007494:	681d      	ldr	r5, [r3, #0]
 8007496:	4606      	mov	r6, r0
 8007498:	460c      	mov	r4, r1
 800749a:	b125      	cbz	r5, 80074a6 <__swsetup_r+0x16>
 800749c:	69ab      	ldr	r3, [r5, #24]
 800749e:	b913      	cbnz	r3, 80074a6 <__swsetup_r+0x16>
 80074a0:	4628      	mov	r0, r5
 80074a2:	f000 fff7 	bl	8008494 <__sinit>
 80074a6:	4b2e      	ldr	r3, [pc, #184]	; (8007560 <__swsetup_r+0xd0>)
 80074a8:	429c      	cmp	r4, r3
 80074aa:	d10f      	bne.n	80074cc <__swsetup_r+0x3c>
 80074ac:	686c      	ldr	r4, [r5, #4]
 80074ae:	89a3      	ldrh	r3, [r4, #12]
 80074b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80074b4:	0719      	lsls	r1, r3, #28
 80074b6:	d42c      	bmi.n	8007512 <__swsetup_r+0x82>
 80074b8:	06dd      	lsls	r5, r3, #27
 80074ba:	d411      	bmi.n	80074e0 <__swsetup_r+0x50>
 80074bc:	2309      	movs	r3, #9
 80074be:	6033      	str	r3, [r6, #0]
 80074c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80074c4:	81a3      	strh	r3, [r4, #12]
 80074c6:	f04f 30ff 	mov.w	r0, #4294967295
 80074ca:	e03e      	b.n	800754a <__swsetup_r+0xba>
 80074cc:	4b25      	ldr	r3, [pc, #148]	; (8007564 <__swsetup_r+0xd4>)
 80074ce:	429c      	cmp	r4, r3
 80074d0:	d101      	bne.n	80074d6 <__swsetup_r+0x46>
 80074d2:	68ac      	ldr	r4, [r5, #8]
 80074d4:	e7eb      	b.n	80074ae <__swsetup_r+0x1e>
 80074d6:	4b24      	ldr	r3, [pc, #144]	; (8007568 <__swsetup_r+0xd8>)
 80074d8:	429c      	cmp	r4, r3
 80074da:	bf08      	it	eq
 80074dc:	68ec      	ldreq	r4, [r5, #12]
 80074de:	e7e6      	b.n	80074ae <__swsetup_r+0x1e>
 80074e0:	0758      	lsls	r0, r3, #29
 80074e2:	d512      	bpl.n	800750a <__swsetup_r+0x7a>
 80074e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074e6:	b141      	cbz	r1, 80074fa <__swsetup_r+0x6a>
 80074e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80074ec:	4299      	cmp	r1, r3
 80074ee:	d002      	beq.n	80074f6 <__swsetup_r+0x66>
 80074f0:	4630      	mov	r0, r6
 80074f2:	f001 fc7d 	bl	8008df0 <_free_r>
 80074f6:	2300      	movs	r3, #0
 80074f8:	6363      	str	r3, [r4, #52]	; 0x34
 80074fa:	89a3      	ldrh	r3, [r4, #12]
 80074fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007500:	81a3      	strh	r3, [r4, #12]
 8007502:	2300      	movs	r3, #0
 8007504:	6063      	str	r3, [r4, #4]
 8007506:	6923      	ldr	r3, [r4, #16]
 8007508:	6023      	str	r3, [r4, #0]
 800750a:	89a3      	ldrh	r3, [r4, #12]
 800750c:	f043 0308 	orr.w	r3, r3, #8
 8007510:	81a3      	strh	r3, [r4, #12]
 8007512:	6923      	ldr	r3, [r4, #16]
 8007514:	b94b      	cbnz	r3, 800752a <__swsetup_r+0x9a>
 8007516:	89a3      	ldrh	r3, [r4, #12]
 8007518:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800751c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007520:	d003      	beq.n	800752a <__swsetup_r+0x9a>
 8007522:	4621      	mov	r1, r4
 8007524:	4630      	mov	r0, r6
 8007526:	f001 f87f 	bl	8008628 <__smakebuf_r>
 800752a:	89a0      	ldrh	r0, [r4, #12]
 800752c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007530:	f010 0301 	ands.w	r3, r0, #1
 8007534:	d00a      	beq.n	800754c <__swsetup_r+0xbc>
 8007536:	2300      	movs	r3, #0
 8007538:	60a3      	str	r3, [r4, #8]
 800753a:	6963      	ldr	r3, [r4, #20]
 800753c:	425b      	negs	r3, r3
 800753e:	61a3      	str	r3, [r4, #24]
 8007540:	6923      	ldr	r3, [r4, #16]
 8007542:	b943      	cbnz	r3, 8007556 <__swsetup_r+0xc6>
 8007544:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007548:	d1ba      	bne.n	80074c0 <__swsetup_r+0x30>
 800754a:	bd70      	pop	{r4, r5, r6, pc}
 800754c:	0781      	lsls	r1, r0, #30
 800754e:	bf58      	it	pl
 8007550:	6963      	ldrpl	r3, [r4, #20]
 8007552:	60a3      	str	r3, [r4, #8]
 8007554:	e7f4      	b.n	8007540 <__swsetup_r+0xb0>
 8007556:	2000      	movs	r0, #0
 8007558:	e7f7      	b.n	800754a <__swsetup_r+0xba>
 800755a:	bf00      	nop
 800755c:	20000038 	.word	0x20000038
 8007560:	0800a3c8 	.word	0x0800a3c8
 8007564:	0800a3e8 	.word	0x0800a3e8
 8007568:	0800a3a8 	.word	0x0800a3a8

0800756c <quorem>:
 800756c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007570:	6903      	ldr	r3, [r0, #16]
 8007572:	690c      	ldr	r4, [r1, #16]
 8007574:	42a3      	cmp	r3, r4
 8007576:	4607      	mov	r7, r0
 8007578:	f2c0 8081 	blt.w	800767e <quorem+0x112>
 800757c:	3c01      	subs	r4, #1
 800757e:	f101 0814 	add.w	r8, r1, #20
 8007582:	f100 0514 	add.w	r5, r0, #20
 8007586:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800758a:	9301      	str	r3, [sp, #4]
 800758c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007590:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007594:	3301      	adds	r3, #1
 8007596:	429a      	cmp	r2, r3
 8007598:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800759c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80075a0:	fbb2 f6f3 	udiv	r6, r2, r3
 80075a4:	d331      	bcc.n	800760a <quorem+0x9e>
 80075a6:	f04f 0e00 	mov.w	lr, #0
 80075aa:	4640      	mov	r0, r8
 80075ac:	46ac      	mov	ip, r5
 80075ae:	46f2      	mov	sl, lr
 80075b0:	f850 2b04 	ldr.w	r2, [r0], #4
 80075b4:	b293      	uxth	r3, r2
 80075b6:	fb06 e303 	mla	r3, r6, r3, lr
 80075ba:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80075be:	b29b      	uxth	r3, r3
 80075c0:	ebaa 0303 	sub.w	r3, sl, r3
 80075c4:	0c12      	lsrs	r2, r2, #16
 80075c6:	f8dc a000 	ldr.w	sl, [ip]
 80075ca:	fb06 e202 	mla	r2, r6, r2, lr
 80075ce:	fa13 f38a 	uxtah	r3, r3, sl
 80075d2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80075d6:	fa1f fa82 	uxth.w	sl, r2
 80075da:	f8dc 2000 	ldr.w	r2, [ip]
 80075de:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80075e2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80075ec:	4581      	cmp	r9, r0
 80075ee:	f84c 3b04 	str.w	r3, [ip], #4
 80075f2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80075f6:	d2db      	bcs.n	80075b0 <quorem+0x44>
 80075f8:	f855 300b 	ldr.w	r3, [r5, fp]
 80075fc:	b92b      	cbnz	r3, 800760a <quorem+0x9e>
 80075fe:	9b01      	ldr	r3, [sp, #4]
 8007600:	3b04      	subs	r3, #4
 8007602:	429d      	cmp	r5, r3
 8007604:	461a      	mov	r2, r3
 8007606:	d32e      	bcc.n	8007666 <quorem+0xfa>
 8007608:	613c      	str	r4, [r7, #16]
 800760a:	4638      	mov	r0, r7
 800760c:	f001 fae0 	bl	8008bd0 <__mcmp>
 8007610:	2800      	cmp	r0, #0
 8007612:	db24      	blt.n	800765e <quorem+0xf2>
 8007614:	3601      	adds	r6, #1
 8007616:	4628      	mov	r0, r5
 8007618:	f04f 0c00 	mov.w	ip, #0
 800761c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007620:	f8d0 e000 	ldr.w	lr, [r0]
 8007624:	b293      	uxth	r3, r2
 8007626:	ebac 0303 	sub.w	r3, ip, r3
 800762a:	0c12      	lsrs	r2, r2, #16
 800762c:	fa13 f38e 	uxtah	r3, r3, lr
 8007630:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007634:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007638:	b29b      	uxth	r3, r3
 800763a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800763e:	45c1      	cmp	r9, r8
 8007640:	f840 3b04 	str.w	r3, [r0], #4
 8007644:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007648:	d2e8      	bcs.n	800761c <quorem+0xb0>
 800764a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800764e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007652:	b922      	cbnz	r2, 800765e <quorem+0xf2>
 8007654:	3b04      	subs	r3, #4
 8007656:	429d      	cmp	r5, r3
 8007658:	461a      	mov	r2, r3
 800765a:	d30a      	bcc.n	8007672 <quorem+0x106>
 800765c:	613c      	str	r4, [r7, #16]
 800765e:	4630      	mov	r0, r6
 8007660:	b003      	add	sp, #12
 8007662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007666:	6812      	ldr	r2, [r2, #0]
 8007668:	3b04      	subs	r3, #4
 800766a:	2a00      	cmp	r2, #0
 800766c:	d1cc      	bne.n	8007608 <quorem+0x9c>
 800766e:	3c01      	subs	r4, #1
 8007670:	e7c7      	b.n	8007602 <quorem+0x96>
 8007672:	6812      	ldr	r2, [r2, #0]
 8007674:	3b04      	subs	r3, #4
 8007676:	2a00      	cmp	r2, #0
 8007678:	d1f0      	bne.n	800765c <quorem+0xf0>
 800767a:	3c01      	subs	r4, #1
 800767c:	e7eb      	b.n	8007656 <quorem+0xea>
 800767e:	2000      	movs	r0, #0
 8007680:	e7ee      	b.n	8007660 <quorem+0xf4>
 8007682:	0000      	movs	r0, r0
 8007684:	0000      	movs	r0, r0
	...

08007688 <_dtoa_r>:
 8007688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800768c:	ed2d 8b02 	vpush	{d8}
 8007690:	ec57 6b10 	vmov	r6, r7, d0
 8007694:	b095      	sub	sp, #84	; 0x54
 8007696:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007698:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800769c:	9105      	str	r1, [sp, #20]
 800769e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80076a2:	4604      	mov	r4, r0
 80076a4:	9209      	str	r2, [sp, #36]	; 0x24
 80076a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80076a8:	b975      	cbnz	r5, 80076c8 <_dtoa_r+0x40>
 80076aa:	2010      	movs	r0, #16
 80076ac:	f000 fffc 	bl	80086a8 <malloc>
 80076b0:	4602      	mov	r2, r0
 80076b2:	6260      	str	r0, [r4, #36]	; 0x24
 80076b4:	b920      	cbnz	r0, 80076c0 <_dtoa_r+0x38>
 80076b6:	4bb2      	ldr	r3, [pc, #712]	; (8007980 <_dtoa_r+0x2f8>)
 80076b8:	21ea      	movs	r1, #234	; 0xea
 80076ba:	48b2      	ldr	r0, [pc, #712]	; (8007984 <_dtoa_r+0x2fc>)
 80076bc:	f001 fe04 	bl	80092c8 <__assert_func>
 80076c0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80076c4:	6005      	str	r5, [r0, #0]
 80076c6:	60c5      	str	r5, [r0, #12]
 80076c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80076ca:	6819      	ldr	r1, [r3, #0]
 80076cc:	b151      	cbz	r1, 80076e4 <_dtoa_r+0x5c>
 80076ce:	685a      	ldr	r2, [r3, #4]
 80076d0:	604a      	str	r2, [r1, #4]
 80076d2:	2301      	movs	r3, #1
 80076d4:	4093      	lsls	r3, r2
 80076d6:	608b      	str	r3, [r1, #8]
 80076d8:	4620      	mov	r0, r4
 80076da:	f001 f83b 	bl	8008754 <_Bfree>
 80076de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80076e0:	2200      	movs	r2, #0
 80076e2:	601a      	str	r2, [r3, #0]
 80076e4:	1e3b      	subs	r3, r7, #0
 80076e6:	bfb9      	ittee	lt
 80076e8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80076ec:	9303      	strlt	r3, [sp, #12]
 80076ee:	2300      	movge	r3, #0
 80076f0:	f8c8 3000 	strge.w	r3, [r8]
 80076f4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80076f8:	4ba3      	ldr	r3, [pc, #652]	; (8007988 <_dtoa_r+0x300>)
 80076fa:	bfbc      	itt	lt
 80076fc:	2201      	movlt	r2, #1
 80076fe:	f8c8 2000 	strlt.w	r2, [r8]
 8007702:	ea33 0309 	bics.w	r3, r3, r9
 8007706:	d11b      	bne.n	8007740 <_dtoa_r+0xb8>
 8007708:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800770a:	f242 730f 	movw	r3, #9999	; 0x270f
 800770e:	6013      	str	r3, [r2, #0]
 8007710:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007714:	4333      	orrs	r3, r6
 8007716:	f000 857a 	beq.w	800820e <_dtoa_r+0xb86>
 800771a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800771c:	b963      	cbnz	r3, 8007738 <_dtoa_r+0xb0>
 800771e:	4b9b      	ldr	r3, [pc, #620]	; (800798c <_dtoa_r+0x304>)
 8007720:	e024      	b.n	800776c <_dtoa_r+0xe4>
 8007722:	4b9b      	ldr	r3, [pc, #620]	; (8007990 <_dtoa_r+0x308>)
 8007724:	9300      	str	r3, [sp, #0]
 8007726:	3308      	adds	r3, #8
 8007728:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800772a:	6013      	str	r3, [r2, #0]
 800772c:	9800      	ldr	r0, [sp, #0]
 800772e:	b015      	add	sp, #84	; 0x54
 8007730:	ecbd 8b02 	vpop	{d8}
 8007734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007738:	4b94      	ldr	r3, [pc, #592]	; (800798c <_dtoa_r+0x304>)
 800773a:	9300      	str	r3, [sp, #0]
 800773c:	3303      	adds	r3, #3
 800773e:	e7f3      	b.n	8007728 <_dtoa_r+0xa0>
 8007740:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007744:	2200      	movs	r2, #0
 8007746:	ec51 0b17 	vmov	r0, r1, d7
 800774a:	2300      	movs	r3, #0
 800774c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007750:	f7f9 f9c2 	bl	8000ad8 <__aeabi_dcmpeq>
 8007754:	4680      	mov	r8, r0
 8007756:	b158      	cbz	r0, 8007770 <_dtoa_r+0xe8>
 8007758:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800775a:	2301      	movs	r3, #1
 800775c:	6013      	str	r3, [r2, #0]
 800775e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007760:	2b00      	cmp	r3, #0
 8007762:	f000 8551 	beq.w	8008208 <_dtoa_r+0xb80>
 8007766:	488b      	ldr	r0, [pc, #556]	; (8007994 <_dtoa_r+0x30c>)
 8007768:	6018      	str	r0, [r3, #0]
 800776a:	1e43      	subs	r3, r0, #1
 800776c:	9300      	str	r3, [sp, #0]
 800776e:	e7dd      	b.n	800772c <_dtoa_r+0xa4>
 8007770:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007774:	aa12      	add	r2, sp, #72	; 0x48
 8007776:	a913      	add	r1, sp, #76	; 0x4c
 8007778:	4620      	mov	r0, r4
 800777a:	f001 facd 	bl	8008d18 <__d2b>
 800777e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007782:	4683      	mov	fp, r0
 8007784:	2d00      	cmp	r5, #0
 8007786:	d07c      	beq.n	8007882 <_dtoa_r+0x1fa>
 8007788:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800778a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800778e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007792:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8007796:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800779a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800779e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80077a2:	4b7d      	ldr	r3, [pc, #500]	; (8007998 <_dtoa_r+0x310>)
 80077a4:	2200      	movs	r2, #0
 80077a6:	4630      	mov	r0, r6
 80077a8:	4639      	mov	r1, r7
 80077aa:	f7f8 fd75 	bl	8000298 <__aeabi_dsub>
 80077ae:	a36e      	add	r3, pc, #440	; (adr r3, 8007968 <_dtoa_r+0x2e0>)
 80077b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b4:	f7f8 ff28 	bl	8000608 <__aeabi_dmul>
 80077b8:	a36d      	add	r3, pc, #436	; (adr r3, 8007970 <_dtoa_r+0x2e8>)
 80077ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077be:	f7f8 fd6d 	bl	800029c <__adddf3>
 80077c2:	4606      	mov	r6, r0
 80077c4:	4628      	mov	r0, r5
 80077c6:	460f      	mov	r7, r1
 80077c8:	f7f8 feb4 	bl	8000534 <__aeabi_i2d>
 80077cc:	a36a      	add	r3, pc, #424	; (adr r3, 8007978 <_dtoa_r+0x2f0>)
 80077ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d2:	f7f8 ff19 	bl	8000608 <__aeabi_dmul>
 80077d6:	4602      	mov	r2, r0
 80077d8:	460b      	mov	r3, r1
 80077da:	4630      	mov	r0, r6
 80077dc:	4639      	mov	r1, r7
 80077de:	f7f8 fd5d 	bl	800029c <__adddf3>
 80077e2:	4606      	mov	r6, r0
 80077e4:	460f      	mov	r7, r1
 80077e6:	f7f9 f9bf 	bl	8000b68 <__aeabi_d2iz>
 80077ea:	2200      	movs	r2, #0
 80077ec:	4682      	mov	sl, r0
 80077ee:	2300      	movs	r3, #0
 80077f0:	4630      	mov	r0, r6
 80077f2:	4639      	mov	r1, r7
 80077f4:	f7f9 f97a 	bl	8000aec <__aeabi_dcmplt>
 80077f8:	b148      	cbz	r0, 800780e <_dtoa_r+0x186>
 80077fa:	4650      	mov	r0, sl
 80077fc:	f7f8 fe9a 	bl	8000534 <__aeabi_i2d>
 8007800:	4632      	mov	r2, r6
 8007802:	463b      	mov	r3, r7
 8007804:	f7f9 f968 	bl	8000ad8 <__aeabi_dcmpeq>
 8007808:	b908      	cbnz	r0, 800780e <_dtoa_r+0x186>
 800780a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800780e:	f1ba 0f16 	cmp.w	sl, #22
 8007812:	d854      	bhi.n	80078be <_dtoa_r+0x236>
 8007814:	4b61      	ldr	r3, [pc, #388]	; (800799c <_dtoa_r+0x314>)
 8007816:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800781a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800781e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007822:	f7f9 f963 	bl	8000aec <__aeabi_dcmplt>
 8007826:	2800      	cmp	r0, #0
 8007828:	d04b      	beq.n	80078c2 <_dtoa_r+0x23a>
 800782a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800782e:	2300      	movs	r3, #0
 8007830:	930e      	str	r3, [sp, #56]	; 0x38
 8007832:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007834:	1b5d      	subs	r5, r3, r5
 8007836:	1e6b      	subs	r3, r5, #1
 8007838:	9304      	str	r3, [sp, #16]
 800783a:	bf43      	ittte	mi
 800783c:	2300      	movmi	r3, #0
 800783e:	f1c5 0801 	rsbmi	r8, r5, #1
 8007842:	9304      	strmi	r3, [sp, #16]
 8007844:	f04f 0800 	movpl.w	r8, #0
 8007848:	f1ba 0f00 	cmp.w	sl, #0
 800784c:	db3b      	blt.n	80078c6 <_dtoa_r+0x23e>
 800784e:	9b04      	ldr	r3, [sp, #16]
 8007850:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007854:	4453      	add	r3, sl
 8007856:	9304      	str	r3, [sp, #16]
 8007858:	2300      	movs	r3, #0
 800785a:	9306      	str	r3, [sp, #24]
 800785c:	9b05      	ldr	r3, [sp, #20]
 800785e:	2b09      	cmp	r3, #9
 8007860:	d869      	bhi.n	8007936 <_dtoa_r+0x2ae>
 8007862:	2b05      	cmp	r3, #5
 8007864:	bfc4      	itt	gt
 8007866:	3b04      	subgt	r3, #4
 8007868:	9305      	strgt	r3, [sp, #20]
 800786a:	9b05      	ldr	r3, [sp, #20]
 800786c:	f1a3 0302 	sub.w	r3, r3, #2
 8007870:	bfcc      	ite	gt
 8007872:	2500      	movgt	r5, #0
 8007874:	2501      	movle	r5, #1
 8007876:	2b03      	cmp	r3, #3
 8007878:	d869      	bhi.n	800794e <_dtoa_r+0x2c6>
 800787a:	e8df f003 	tbb	[pc, r3]
 800787e:	4e2c      	.short	0x4e2c
 8007880:	5a4c      	.short	0x5a4c
 8007882:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007886:	441d      	add	r5, r3
 8007888:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800788c:	2b20      	cmp	r3, #32
 800788e:	bfc1      	itttt	gt
 8007890:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007894:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007898:	fa09 f303 	lslgt.w	r3, r9, r3
 800789c:	fa26 f000 	lsrgt.w	r0, r6, r0
 80078a0:	bfda      	itte	le
 80078a2:	f1c3 0320 	rsble	r3, r3, #32
 80078a6:	fa06 f003 	lslle.w	r0, r6, r3
 80078aa:	4318      	orrgt	r0, r3
 80078ac:	f7f8 fe32 	bl	8000514 <__aeabi_ui2d>
 80078b0:	2301      	movs	r3, #1
 80078b2:	4606      	mov	r6, r0
 80078b4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80078b8:	3d01      	subs	r5, #1
 80078ba:	9310      	str	r3, [sp, #64]	; 0x40
 80078bc:	e771      	b.n	80077a2 <_dtoa_r+0x11a>
 80078be:	2301      	movs	r3, #1
 80078c0:	e7b6      	b.n	8007830 <_dtoa_r+0x1a8>
 80078c2:	900e      	str	r0, [sp, #56]	; 0x38
 80078c4:	e7b5      	b.n	8007832 <_dtoa_r+0x1aa>
 80078c6:	f1ca 0300 	rsb	r3, sl, #0
 80078ca:	9306      	str	r3, [sp, #24]
 80078cc:	2300      	movs	r3, #0
 80078ce:	eba8 080a 	sub.w	r8, r8, sl
 80078d2:	930d      	str	r3, [sp, #52]	; 0x34
 80078d4:	e7c2      	b.n	800785c <_dtoa_r+0x1d4>
 80078d6:	2300      	movs	r3, #0
 80078d8:	9308      	str	r3, [sp, #32]
 80078da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078dc:	2b00      	cmp	r3, #0
 80078de:	dc39      	bgt.n	8007954 <_dtoa_r+0x2cc>
 80078e0:	f04f 0901 	mov.w	r9, #1
 80078e4:	f8cd 9004 	str.w	r9, [sp, #4]
 80078e8:	464b      	mov	r3, r9
 80078ea:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80078ee:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80078f0:	2200      	movs	r2, #0
 80078f2:	6042      	str	r2, [r0, #4]
 80078f4:	2204      	movs	r2, #4
 80078f6:	f102 0614 	add.w	r6, r2, #20
 80078fa:	429e      	cmp	r6, r3
 80078fc:	6841      	ldr	r1, [r0, #4]
 80078fe:	d92f      	bls.n	8007960 <_dtoa_r+0x2d8>
 8007900:	4620      	mov	r0, r4
 8007902:	f000 fee7 	bl	80086d4 <_Balloc>
 8007906:	9000      	str	r0, [sp, #0]
 8007908:	2800      	cmp	r0, #0
 800790a:	d14b      	bne.n	80079a4 <_dtoa_r+0x31c>
 800790c:	4b24      	ldr	r3, [pc, #144]	; (80079a0 <_dtoa_r+0x318>)
 800790e:	4602      	mov	r2, r0
 8007910:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007914:	e6d1      	b.n	80076ba <_dtoa_r+0x32>
 8007916:	2301      	movs	r3, #1
 8007918:	e7de      	b.n	80078d8 <_dtoa_r+0x250>
 800791a:	2300      	movs	r3, #0
 800791c:	9308      	str	r3, [sp, #32]
 800791e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007920:	eb0a 0903 	add.w	r9, sl, r3
 8007924:	f109 0301 	add.w	r3, r9, #1
 8007928:	2b01      	cmp	r3, #1
 800792a:	9301      	str	r3, [sp, #4]
 800792c:	bfb8      	it	lt
 800792e:	2301      	movlt	r3, #1
 8007930:	e7dd      	b.n	80078ee <_dtoa_r+0x266>
 8007932:	2301      	movs	r3, #1
 8007934:	e7f2      	b.n	800791c <_dtoa_r+0x294>
 8007936:	2501      	movs	r5, #1
 8007938:	2300      	movs	r3, #0
 800793a:	9305      	str	r3, [sp, #20]
 800793c:	9508      	str	r5, [sp, #32]
 800793e:	f04f 39ff 	mov.w	r9, #4294967295
 8007942:	2200      	movs	r2, #0
 8007944:	f8cd 9004 	str.w	r9, [sp, #4]
 8007948:	2312      	movs	r3, #18
 800794a:	9209      	str	r2, [sp, #36]	; 0x24
 800794c:	e7cf      	b.n	80078ee <_dtoa_r+0x266>
 800794e:	2301      	movs	r3, #1
 8007950:	9308      	str	r3, [sp, #32]
 8007952:	e7f4      	b.n	800793e <_dtoa_r+0x2b6>
 8007954:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007958:	f8cd 9004 	str.w	r9, [sp, #4]
 800795c:	464b      	mov	r3, r9
 800795e:	e7c6      	b.n	80078ee <_dtoa_r+0x266>
 8007960:	3101      	adds	r1, #1
 8007962:	6041      	str	r1, [r0, #4]
 8007964:	0052      	lsls	r2, r2, #1
 8007966:	e7c6      	b.n	80078f6 <_dtoa_r+0x26e>
 8007968:	636f4361 	.word	0x636f4361
 800796c:	3fd287a7 	.word	0x3fd287a7
 8007970:	8b60c8b3 	.word	0x8b60c8b3
 8007974:	3fc68a28 	.word	0x3fc68a28
 8007978:	509f79fb 	.word	0x509f79fb
 800797c:	3fd34413 	.word	0x3fd34413
 8007980:	0800a321 	.word	0x0800a321
 8007984:	0800a338 	.word	0x0800a338
 8007988:	7ff00000 	.word	0x7ff00000
 800798c:	0800a31d 	.word	0x0800a31d
 8007990:	0800a314 	.word	0x0800a314
 8007994:	0800a2f1 	.word	0x0800a2f1
 8007998:	3ff80000 	.word	0x3ff80000
 800799c:	0800a490 	.word	0x0800a490
 80079a0:	0800a397 	.word	0x0800a397
 80079a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079a6:	9a00      	ldr	r2, [sp, #0]
 80079a8:	601a      	str	r2, [r3, #0]
 80079aa:	9b01      	ldr	r3, [sp, #4]
 80079ac:	2b0e      	cmp	r3, #14
 80079ae:	f200 80ad 	bhi.w	8007b0c <_dtoa_r+0x484>
 80079b2:	2d00      	cmp	r5, #0
 80079b4:	f000 80aa 	beq.w	8007b0c <_dtoa_r+0x484>
 80079b8:	f1ba 0f00 	cmp.w	sl, #0
 80079bc:	dd36      	ble.n	8007a2c <_dtoa_r+0x3a4>
 80079be:	4ac3      	ldr	r2, [pc, #780]	; (8007ccc <_dtoa_r+0x644>)
 80079c0:	f00a 030f 	and.w	r3, sl, #15
 80079c4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80079c8:	ed93 7b00 	vldr	d7, [r3]
 80079cc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80079d0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80079d4:	eeb0 8a47 	vmov.f32	s16, s14
 80079d8:	eef0 8a67 	vmov.f32	s17, s15
 80079dc:	d016      	beq.n	8007a0c <_dtoa_r+0x384>
 80079de:	4bbc      	ldr	r3, [pc, #752]	; (8007cd0 <_dtoa_r+0x648>)
 80079e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80079e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80079e8:	f7f8 ff38 	bl	800085c <__aeabi_ddiv>
 80079ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80079f0:	f007 070f 	and.w	r7, r7, #15
 80079f4:	2503      	movs	r5, #3
 80079f6:	4eb6      	ldr	r6, [pc, #728]	; (8007cd0 <_dtoa_r+0x648>)
 80079f8:	b957      	cbnz	r7, 8007a10 <_dtoa_r+0x388>
 80079fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079fe:	ec53 2b18 	vmov	r2, r3, d8
 8007a02:	f7f8 ff2b 	bl	800085c <__aeabi_ddiv>
 8007a06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a0a:	e029      	b.n	8007a60 <_dtoa_r+0x3d8>
 8007a0c:	2502      	movs	r5, #2
 8007a0e:	e7f2      	b.n	80079f6 <_dtoa_r+0x36e>
 8007a10:	07f9      	lsls	r1, r7, #31
 8007a12:	d508      	bpl.n	8007a26 <_dtoa_r+0x39e>
 8007a14:	ec51 0b18 	vmov	r0, r1, d8
 8007a18:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007a1c:	f7f8 fdf4 	bl	8000608 <__aeabi_dmul>
 8007a20:	ec41 0b18 	vmov	d8, r0, r1
 8007a24:	3501      	adds	r5, #1
 8007a26:	107f      	asrs	r7, r7, #1
 8007a28:	3608      	adds	r6, #8
 8007a2a:	e7e5      	b.n	80079f8 <_dtoa_r+0x370>
 8007a2c:	f000 80a6 	beq.w	8007b7c <_dtoa_r+0x4f4>
 8007a30:	f1ca 0600 	rsb	r6, sl, #0
 8007a34:	4ba5      	ldr	r3, [pc, #660]	; (8007ccc <_dtoa_r+0x644>)
 8007a36:	4fa6      	ldr	r7, [pc, #664]	; (8007cd0 <_dtoa_r+0x648>)
 8007a38:	f006 020f 	and.w	r2, r6, #15
 8007a3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a44:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007a48:	f7f8 fdde 	bl	8000608 <__aeabi_dmul>
 8007a4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a50:	1136      	asrs	r6, r6, #4
 8007a52:	2300      	movs	r3, #0
 8007a54:	2502      	movs	r5, #2
 8007a56:	2e00      	cmp	r6, #0
 8007a58:	f040 8085 	bne.w	8007b66 <_dtoa_r+0x4de>
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d1d2      	bne.n	8007a06 <_dtoa_r+0x37e>
 8007a60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	f000 808c 	beq.w	8007b80 <_dtoa_r+0x4f8>
 8007a68:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007a6c:	4b99      	ldr	r3, [pc, #612]	; (8007cd4 <_dtoa_r+0x64c>)
 8007a6e:	2200      	movs	r2, #0
 8007a70:	4630      	mov	r0, r6
 8007a72:	4639      	mov	r1, r7
 8007a74:	f7f9 f83a 	bl	8000aec <__aeabi_dcmplt>
 8007a78:	2800      	cmp	r0, #0
 8007a7a:	f000 8081 	beq.w	8007b80 <_dtoa_r+0x4f8>
 8007a7e:	9b01      	ldr	r3, [sp, #4]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d07d      	beq.n	8007b80 <_dtoa_r+0x4f8>
 8007a84:	f1b9 0f00 	cmp.w	r9, #0
 8007a88:	dd3c      	ble.n	8007b04 <_dtoa_r+0x47c>
 8007a8a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007a8e:	9307      	str	r3, [sp, #28]
 8007a90:	2200      	movs	r2, #0
 8007a92:	4b91      	ldr	r3, [pc, #580]	; (8007cd8 <_dtoa_r+0x650>)
 8007a94:	4630      	mov	r0, r6
 8007a96:	4639      	mov	r1, r7
 8007a98:	f7f8 fdb6 	bl	8000608 <__aeabi_dmul>
 8007a9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007aa0:	3501      	adds	r5, #1
 8007aa2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8007aa6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007aaa:	4628      	mov	r0, r5
 8007aac:	f7f8 fd42 	bl	8000534 <__aeabi_i2d>
 8007ab0:	4632      	mov	r2, r6
 8007ab2:	463b      	mov	r3, r7
 8007ab4:	f7f8 fda8 	bl	8000608 <__aeabi_dmul>
 8007ab8:	4b88      	ldr	r3, [pc, #544]	; (8007cdc <_dtoa_r+0x654>)
 8007aba:	2200      	movs	r2, #0
 8007abc:	f7f8 fbee 	bl	800029c <__adddf3>
 8007ac0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007ac4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ac8:	9303      	str	r3, [sp, #12]
 8007aca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d15c      	bne.n	8007b8a <_dtoa_r+0x502>
 8007ad0:	4b83      	ldr	r3, [pc, #524]	; (8007ce0 <_dtoa_r+0x658>)
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	4630      	mov	r0, r6
 8007ad6:	4639      	mov	r1, r7
 8007ad8:	f7f8 fbde 	bl	8000298 <__aeabi_dsub>
 8007adc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ae0:	4606      	mov	r6, r0
 8007ae2:	460f      	mov	r7, r1
 8007ae4:	f7f9 f820 	bl	8000b28 <__aeabi_dcmpgt>
 8007ae8:	2800      	cmp	r0, #0
 8007aea:	f040 8296 	bne.w	800801a <_dtoa_r+0x992>
 8007aee:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007af2:	4630      	mov	r0, r6
 8007af4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007af8:	4639      	mov	r1, r7
 8007afa:	f7f8 fff7 	bl	8000aec <__aeabi_dcmplt>
 8007afe:	2800      	cmp	r0, #0
 8007b00:	f040 8288 	bne.w	8008014 <_dtoa_r+0x98c>
 8007b04:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007b08:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007b0c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	f2c0 8158 	blt.w	8007dc4 <_dtoa_r+0x73c>
 8007b14:	f1ba 0f0e 	cmp.w	sl, #14
 8007b18:	f300 8154 	bgt.w	8007dc4 <_dtoa_r+0x73c>
 8007b1c:	4b6b      	ldr	r3, [pc, #428]	; (8007ccc <_dtoa_r+0x644>)
 8007b1e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007b22:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007b26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	f280 80e3 	bge.w	8007cf4 <_dtoa_r+0x66c>
 8007b2e:	9b01      	ldr	r3, [sp, #4]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	f300 80df 	bgt.w	8007cf4 <_dtoa_r+0x66c>
 8007b36:	f040 826d 	bne.w	8008014 <_dtoa_r+0x98c>
 8007b3a:	4b69      	ldr	r3, [pc, #420]	; (8007ce0 <_dtoa_r+0x658>)
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	4640      	mov	r0, r8
 8007b40:	4649      	mov	r1, r9
 8007b42:	f7f8 fd61 	bl	8000608 <__aeabi_dmul>
 8007b46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b4a:	f7f8 ffe3 	bl	8000b14 <__aeabi_dcmpge>
 8007b4e:	9e01      	ldr	r6, [sp, #4]
 8007b50:	4637      	mov	r7, r6
 8007b52:	2800      	cmp	r0, #0
 8007b54:	f040 8243 	bne.w	8007fde <_dtoa_r+0x956>
 8007b58:	9d00      	ldr	r5, [sp, #0]
 8007b5a:	2331      	movs	r3, #49	; 0x31
 8007b5c:	f805 3b01 	strb.w	r3, [r5], #1
 8007b60:	f10a 0a01 	add.w	sl, sl, #1
 8007b64:	e23f      	b.n	8007fe6 <_dtoa_r+0x95e>
 8007b66:	07f2      	lsls	r2, r6, #31
 8007b68:	d505      	bpl.n	8007b76 <_dtoa_r+0x4ee>
 8007b6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b6e:	f7f8 fd4b 	bl	8000608 <__aeabi_dmul>
 8007b72:	3501      	adds	r5, #1
 8007b74:	2301      	movs	r3, #1
 8007b76:	1076      	asrs	r6, r6, #1
 8007b78:	3708      	adds	r7, #8
 8007b7a:	e76c      	b.n	8007a56 <_dtoa_r+0x3ce>
 8007b7c:	2502      	movs	r5, #2
 8007b7e:	e76f      	b.n	8007a60 <_dtoa_r+0x3d8>
 8007b80:	9b01      	ldr	r3, [sp, #4]
 8007b82:	f8cd a01c 	str.w	sl, [sp, #28]
 8007b86:	930c      	str	r3, [sp, #48]	; 0x30
 8007b88:	e78d      	b.n	8007aa6 <_dtoa_r+0x41e>
 8007b8a:	9900      	ldr	r1, [sp, #0]
 8007b8c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007b8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007b90:	4b4e      	ldr	r3, [pc, #312]	; (8007ccc <_dtoa_r+0x644>)
 8007b92:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007b96:	4401      	add	r1, r0
 8007b98:	9102      	str	r1, [sp, #8]
 8007b9a:	9908      	ldr	r1, [sp, #32]
 8007b9c:	eeb0 8a47 	vmov.f32	s16, s14
 8007ba0:	eef0 8a67 	vmov.f32	s17, s15
 8007ba4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ba8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007bac:	2900      	cmp	r1, #0
 8007bae:	d045      	beq.n	8007c3c <_dtoa_r+0x5b4>
 8007bb0:	494c      	ldr	r1, [pc, #304]	; (8007ce4 <_dtoa_r+0x65c>)
 8007bb2:	2000      	movs	r0, #0
 8007bb4:	f7f8 fe52 	bl	800085c <__aeabi_ddiv>
 8007bb8:	ec53 2b18 	vmov	r2, r3, d8
 8007bbc:	f7f8 fb6c 	bl	8000298 <__aeabi_dsub>
 8007bc0:	9d00      	ldr	r5, [sp, #0]
 8007bc2:	ec41 0b18 	vmov	d8, r0, r1
 8007bc6:	4639      	mov	r1, r7
 8007bc8:	4630      	mov	r0, r6
 8007bca:	f7f8 ffcd 	bl	8000b68 <__aeabi_d2iz>
 8007bce:	900c      	str	r0, [sp, #48]	; 0x30
 8007bd0:	f7f8 fcb0 	bl	8000534 <__aeabi_i2d>
 8007bd4:	4602      	mov	r2, r0
 8007bd6:	460b      	mov	r3, r1
 8007bd8:	4630      	mov	r0, r6
 8007bda:	4639      	mov	r1, r7
 8007bdc:	f7f8 fb5c 	bl	8000298 <__aeabi_dsub>
 8007be0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007be2:	3330      	adds	r3, #48	; 0x30
 8007be4:	f805 3b01 	strb.w	r3, [r5], #1
 8007be8:	ec53 2b18 	vmov	r2, r3, d8
 8007bec:	4606      	mov	r6, r0
 8007bee:	460f      	mov	r7, r1
 8007bf0:	f7f8 ff7c 	bl	8000aec <__aeabi_dcmplt>
 8007bf4:	2800      	cmp	r0, #0
 8007bf6:	d165      	bne.n	8007cc4 <_dtoa_r+0x63c>
 8007bf8:	4632      	mov	r2, r6
 8007bfa:	463b      	mov	r3, r7
 8007bfc:	4935      	ldr	r1, [pc, #212]	; (8007cd4 <_dtoa_r+0x64c>)
 8007bfe:	2000      	movs	r0, #0
 8007c00:	f7f8 fb4a 	bl	8000298 <__aeabi_dsub>
 8007c04:	ec53 2b18 	vmov	r2, r3, d8
 8007c08:	f7f8 ff70 	bl	8000aec <__aeabi_dcmplt>
 8007c0c:	2800      	cmp	r0, #0
 8007c0e:	f040 80b9 	bne.w	8007d84 <_dtoa_r+0x6fc>
 8007c12:	9b02      	ldr	r3, [sp, #8]
 8007c14:	429d      	cmp	r5, r3
 8007c16:	f43f af75 	beq.w	8007b04 <_dtoa_r+0x47c>
 8007c1a:	4b2f      	ldr	r3, [pc, #188]	; (8007cd8 <_dtoa_r+0x650>)
 8007c1c:	ec51 0b18 	vmov	r0, r1, d8
 8007c20:	2200      	movs	r2, #0
 8007c22:	f7f8 fcf1 	bl	8000608 <__aeabi_dmul>
 8007c26:	4b2c      	ldr	r3, [pc, #176]	; (8007cd8 <_dtoa_r+0x650>)
 8007c28:	ec41 0b18 	vmov	d8, r0, r1
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	4630      	mov	r0, r6
 8007c30:	4639      	mov	r1, r7
 8007c32:	f7f8 fce9 	bl	8000608 <__aeabi_dmul>
 8007c36:	4606      	mov	r6, r0
 8007c38:	460f      	mov	r7, r1
 8007c3a:	e7c4      	b.n	8007bc6 <_dtoa_r+0x53e>
 8007c3c:	ec51 0b17 	vmov	r0, r1, d7
 8007c40:	f7f8 fce2 	bl	8000608 <__aeabi_dmul>
 8007c44:	9b02      	ldr	r3, [sp, #8]
 8007c46:	9d00      	ldr	r5, [sp, #0]
 8007c48:	930c      	str	r3, [sp, #48]	; 0x30
 8007c4a:	ec41 0b18 	vmov	d8, r0, r1
 8007c4e:	4639      	mov	r1, r7
 8007c50:	4630      	mov	r0, r6
 8007c52:	f7f8 ff89 	bl	8000b68 <__aeabi_d2iz>
 8007c56:	9011      	str	r0, [sp, #68]	; 0x44
 8007c58:	f7f8 fc6c 	bl	8000534 <__aeabi_i2d>
 8007c5c:	4602      	mov	r2, r0
 8007c5e:	460b      	mov	r3, r1
 8007c60:	4630      	mov	r0, r6
 8007c62:	4639      	mov	r1, r7
 8007c64:	f7f8 fb18 	bl	8000298 <__aeabi_dsub>
 8007c68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007c6a:	3330      	adds	r3, #48	; 0x30
 8007c6c:	f805 3b01 	strb.w	r3, [r5], #1
 8007c70:	9b02      	ldr	r3, [sp, #8]
 8007c72:	429d      	cmp	r5, r3
 8007c74:	4606      	mov	r6, r0
 8007c76:	460f      	mov	r7, r1
 8007c78:	f04f 0200 	mov.w	r2, #0
 8007c7c:	d134      	bne.n	8007ce8 <_dtoa_r+0x660>
 8007c7e:	4b19      	ldr	r3, [pc, #100]	; (8007ce4 <_dtoa_r+0x65c>)
 8007c80:	ec51 0b18 	vmov	r0, r1, d8
 8007c84:	f7f8 fb0a 	bl	800029c <__adddf3>
 8007c88:	4602      	mov	r2, r0
 8007c8a:	460b      	mov	r3, r1
 8007c8c:	4630      	mov	r0, r6
 8007c8e:	4639      	mov	r1, r7
 8007c90:	f7f8 ff4a 	bl	8000b28 <__aeabi_dcmpgt>
 8007c94:	2800      	cmp	r0, #0
 8007c96:	d175      	bne.n	8007d84 <_dtoa_r+0x6fc>
 8007c98:	ec53 2b18 	vmov	r2, r3, d8
 8007c9c:	4911      	ldr	r1, [pc, #68]	; (8007ce4 <_dtoa_r+0x65c>)
 8007c9e:	2000      	movs	r0, #0
 8007ca0:	f7f8 fafa 	bl	8000298 <__aeabi_dsub>
 8007ca4:	4602      	mov	r2, r0
 8007ca6:	460b      	mov	r3, r1
 8007ca8:	4630      	mov	r0, r6
 8007caa:	4639      	mov	r1, r7
 8007cac:	f7f8 ff1e 	bl	8000aec <__aeabi_dcmplt>
 8007cb0:	2800      	cmp	r0, #0
 8007cb2:	f43f af27 	beq.w	8007b04 <_dtoa_r+0x47c>
 8007cb6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007cb8:	1e6b      	subs	r3, r5, #1
 8007cba:	930c      	str	r3, [sp, #48]	; 0x30
 8007cbc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007cc0:	2b30      	cmp	r3, #48	; 0x30
 8007cc2:	d0f8      	beq.n	8007cb6 <_dtoa_r+0x62e>
 8007cc4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007cc8:	e04a      	b.n	8007d60 <_dtoa_r+0x6d8>
 8007cca:	bf00      	nop
 8007ccc:	0800a490 	.word	0x0800a490
 8007cd0:	0800a468 	.word	0x0800a468
 8007cd4:	3ff00000 	.word	0x3ff00000
 8007cd8:	40240000 	.word	0x40240000
 8007cdc:	401c0000 	.word	0x401c0000
 8007ce0:	40140000 	.word	0x40140000
 8007ce4:	3fe00000 	.word	0x3fe00000
 8007ce8:	4baf      	ldr	r3, [pc, #700]	; (8007fa8 <_dtoa_r+0x920>)
 8007cea:	f7f8 fc8d 	bl	8000608 <__aeabi_dmul>
 8007cee:	4606      	mov	r6, r0
 8007cf0:	460f      	mov	r7, r1
 8007cf2:	e7ac      	b.n	8007c4e <_dtoa_r+0x5c6>
 8007cf4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007cf8:	9d00      	ldr	r5, [sp, #0]
 8007cfa:	4642      	mov	r2, r8
 8007cfc:	464b      	mov	r3, r9
 8007cfe:	4630      	mov	r0, r6
 8007d00:	4639      	mov	r1, r7
 8007d02:	f7f8 fdab 	bl	800085c <__aeabi_ddiv>
 8007d06:	f7f8 ff2f 	bl	8000b68 <__aeabi_d2iz>
 8007d0a:	9002      	str	r0, [sp, #8]
 8007d0c:	f7f8 fc12 	bl	8000534 <__aeabi_i2d>
 8007d10:	4642      	mov	r2, r8
 8007d12:	464b      	mov	r3, r9
 8007d14:	f7f8 fc78 	bl	8000608 <__aeabi_dmul>
 8007d18:	4602      	mov	r2, r0
 8007d1a:	460b      	mov	r3, r1
 8007d1c:	4630      	mov	r0, r6
 8007d1e:	4639      	mov	r1, r7
 8007d20:	f7f8 faba 	bl	8000298 <__aeabi_dsub>
 8007d24:	9e02      	ldr	r6, [sp, #8]
 8007d26:	9f01      	ldr	r7, [sp, #4]
 8007d28:	3630      	adds	r6, #48	; 0x30
 8007d2a:	f805 6b01 	strb.w	r6, [r5], #1
 8007d2e:	9e00      	ldr	r6, [sp, #0]
 8007d30:	1bae      	subs	r6, r5, r6
 8007d32:	42b7      	cmp	r7, r6
 8007d34:	4602      	mov	r2, r0
 8007d36:	460b      	mov	r3, r1
 8007d38:	d137      	bne.n	8007daa <_dtoa_r+0x722>
 8007d3a:	f7f8 faaf 	bl	800029c <__adddf3>
 8007d3e:	4642      	mov	r2, r8
 8007d40:	464b      	mov	r3, r9
 8007d42:	4606      	mov	r6, r0
 8007d44:	460f      	mov	r7, r1
 8007d46:	f7f8 feef 	bl	8000b28 <__aeabi_dcmpgt>
 8007d4a:	b9c8      	cbnz	r0, 8007d80 <_dtoa_r+0x6f8>
 8007d4c:	4642      	mov	r2, r8
 8007d4e:	464b      	mov	r3, r9
 8007d50:	4630      	mov	r0, r6
 8007d52:	4639      	mov	r1, r7
 8007d54:	f7f8 fec0 	bl	8000ad8 <__aeabi_dcmpeq>
 8007d58:	b110      	cbz	r0, 8007d60 <_dtoa_r+0x6d8>
 8007d5a:	9b02      	ldr	r3, [sp, #8]
 8007d5c:	07d9      	lsls	r1, r3, #31
 8007d5e:	d40f      	bmi.n	8007d80 <_dtoa_r+0x6f8>
 8007d60:	4620      	mov	r0, r4
 8007d62:	4659      	mov	r1, fp
 8007d64:	f000 fcf6 	bl	8008754 <_Bfree>
 8007d68:	2300      	movs	r3, #0
 8007d6a:	702b      	strb	r3, [r5, #0]
 8007d6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007d6e:	f10a 0001 	add.w	r0, sl, #1
 8007d72:	6018      	str	r0, [r3, #0]
 8007d74:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	f43f acd8 	beq.w	800772c <_dtoa_r+0xa4>
 8007d7c:	601d      	str	r5, [r3, #0]
 8007d7e:	e4d5      	b.n	800772c <_dtoa_r+0xa4>
 8007d80:	f8cd a01c 	str.w	sl, [sp, #28]
 8007d84:	462b      	mov	r3, r5
 8007d86:	461d      	mov	r5, r3
 8007d88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d8c:	2a39      	cmp	r2, #57	; 0x39
 8007d8e:	d108      	bne.n	8007da2 <_dtoa_r+0x71a>
 8007d90:	9a00      	ldr	r2, [sp, #0]
 8007d92:	429a      	cmp	r2, r3
 8007d94:	d1f7      	bne.n	8007d86 <_dtoa_r+0x6fe>
 8007d96:	9a07      	ldr	r2, [sp, #28]
 8007d98:	9900      	ldr	r1, [sp, #0]
 8007d9a:	3201      	adds	r2, #1
 8007d9c:	9207      	str	r2, [sp, #28]
 8007d9e:	2230      	movs	r2, #48	; 0x30
 8007da0:	700a      	strb	r2, [r1, #0]
 8007da2:	781a      	ldrb	r2, [r3, #0]
 8007da4:	3201      	adds	r2, #1
 8007da6:	701a      	strb	r2, [r3, #0]
 8007da8:	e78c      	b.n	8007cc4 <_dtoa_r+0x63c>
 8007daa:	4b7f      	ldr	r3, [pc, #508]	; (8007fa8 <_dtoa_r+0x920>)
 8007dac:	2200      	movs	r2, #0
 8007dae:	f7f8 fc2b 	bl	8000608 <__aeabi_dmul>
 8007db2:	2200      	movs	r2, #0
 8007db4:	2300      	movs	r3, #0
 8007db6:	4606      	mov	r6, r0
 8007db8:	460f      	mov	r7, r1
 8007dba:	f7f8 fe8d 	bl	8000ad8 <__aeabi_dcmpeq>
 8007dbe:	2800      	cmp	r0, #0
 8007dc0:	d09b      	beq.n	8007cfa <_dtoa_r+0x672>
 8007dc2:	e7cd      	b.n	8007d60 <_dtoa_r+0x6d8>
 8007dc4:	9a08      	ldr	r2, [sp, #32]
 8007dc6:	2a00      	cmp	r2, #0
 8007dc8:	f000 80c4 	beq.w	8007f54 <_dtoa_r+0x8cc>
 8007dcc:	9a05      	ldr	r2, [sp, #20]
 8007dce:	2a01      	cmp	r2, #1
 8007dd0:	f300 80a8 	bgt.w	8007f24 <_dtoa_r+0x89c>
 8007dd4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007dd6:	2a00      	cmp	r2, #0
 8007dd8:	f000 80a0 	beq.w	8007f1c <_dtoa_r+0x894>
 8007ddc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007de0:	9e06      	ldr	r6, [sp, #24]
 8007de2:	4645      	mov	r5, r8
 8007de4:	9a04      	ldr	r2, [sp, #16]
 8007de6:	2101      	movs	r1, #1
 8007de8:	441a      	add	r2, r3
 8007dea:	4620      	mov	r0, r4
 8007dec:	4498      	add	r8, r3
 8007dee:	9204      	str	r2, [sp, #16]
 8007df0:	f000 fd6c 	bl	80088cc <__i2b>
 8007df4:	4607      	mov	r7, r0
 8007df6:	2d00      	cmp	r5, #0
 8007df8:	dd0b      	ble.n	8007e12 <_dtoa_r+0x78a>
 8007dfa:	9b04      	ldr	r3, [sp, #16]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	dd08      	ble.n	8007e12 <_dtoa_r+0x78a>
 8007e00:	42ab      	cmp	r3, r5
 8007e02:	9a04      	ldr	r2, [sp, #16]
 8007e04:	bfa8      	it	ge
 8007e06:	462b      	movge	r3, r5
 8007e08:	eba8 0803 	sub.w	r8, r8, r3
 8007e0c:	1aed      	subs	r5, r5, r3
 8007e0e:	1ad3      	subs	r3, r2, r3
 8007e10:	9304      	str	r3, [sp, #16]
 8007e12:	9b06      	ldr	r3, [sp, #24]
 8007e14:	b1fb      	cbz	r3, 8007e56 <_dtoa_r+0x7ce>
 8007e16:	9b08      	ldr	r3, [sp, #32]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	f000 809f 	beq.w	8007f5c <_dtoa_r+0x8d4>
 8007e1e:	2e00      	cmp	r6, #0
 8007e20:	dd11      	ble.n	8007e46 <_dtoa_r+0x7be>
 8007e22:	4639      	mov	r1, r7
 8007e24:	4632      	mov	r2, r6
 8007e26:	4620      	mov	r0, r4
 8007e28:	f000 fe0c 	bl	8008a44 <__pow5mult>
 8007e2c:	465a      	mov	r2, fp
 8007e2e:	4601      	mov	r1, r0
 8007e30:	4607      	mov	r7, r0
 8007e32:	4620      	mov	r0, r4
 8007e34:	f000 fd60 	bl	80088f8 <__multiply>
 8007e38:	4659      	mov	r1, fp
 8007e3a:	9007      	str	r0, [sp, #28]
 8007e3c:	4620      	mov	r0, r4
 8007e3e:	f000 fc89 	bl	8008754 <_Bfree>
 8007e42:	9b07      	ldr	r3, [sp, #28]
 8007e44:	469b      	mov	fp, r3
 8007e46:	9b06      	ldr	r3, [sp, #24]
 8007e48:	1b9a      	subs	r2, r3, r6
 8007e4a:	d004      	beq.n	8007e56 <_dtoa_r+0x7ce>
 8007e4c:	4659      	mov	r1, fp
 8007e4e:	4620      	mov	r0, r4
 8007e50:	f000 fdf8 	bl	8008a44 <__pow5mult>
 8007e54:	4683      	mov	fp, r0
 8007e56:	2101      	movs	r1, #1
 8007e58:	4620      	mov	r0, r4
 8007e5a:	f000 fd37 	bl	80088cc <__i2b>
 8007e5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	4606      	mov	r6, r0
 8007e64:	dd7c      	ble.n	8007f60 <_dtoa_r+0x8d8>
 8007e66:	461a      	mov	r2, r3
 8007e68:	4601      	mov	r1, r0
 8007e6a:	4620      	mov	r0, r4
 8007e6c:	f000 fdea 	bl	8008a44 <__pow5mult>
 8007e70:	9b05      	ldr	r3, [sp, #20]
 8007e72:	2b01      	cmp	r3, #1
 8007e74:	4606      	mov	r6, r0
 8007e76:	dd76      	ble.n	8007f66 <_dtoa_r+0x8de>
 8007e78:	2300      	movs	r3, #0
 8007e7a:	9306      	str	r3, [sp, #24]
 8007e7c:	6933      	ldr	r3, [r6, #16]
 8007e7e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007e82:	6918      	ldr	r0, [r3, #16]
 8007e84:	f000 fcd2 	bl	800882c <__hi0bits>
 8007e88:	f1c0 0020 	rsb	r0, r0, #32
 8007e8c:	9b04      	ldr	r3, [sp, #16]
 8007e8e:	4418      	add	r0, r3
 8007e90:	f010 001f 	ands.w	r0, r0, #31
 8007e94:	f000 8086 	beq.w	8007fa4 <_dtoa_r+0x91c>
 8007e98:	f1c0 0320 	rsb	r3, r0, #32
 8007e9c:	2b04      	cmp	r3, #4
 8007e9e:	dd7f      	ble.n	8007fa0 <_dtoa_r+0x918>
 8007ea0:	f1c0 001c 	rsb	r0, r0, #28
 8007ea4:	9b04      	ldr	r3, [sp, #16]
 8007ea6:	4403      	add	r3, r0
 8007ea8:	4480      	add	r8, r0
 8007eaa:	4405      	add	r5, r0
 8007eac:	9304      	str	r3, [sp, #16]
 8007eae:	f1b8 0f00 	cmp.w	r8, #0
 8007eb2:	dd05      	ble.n	8007ec0 <_dtoa_r+0x838>
 8007eb4:	4659      	mov	r1, fp
 8007eb6:	4642      	mov	r2, r8
 8007eb8:	4620      	mov	r0, r4
 8007eba:	f000 fe1d 	bl	8008af8 <__lshift>
 8007ebe:	4683      	mov	fp, r0
 8007ec0:	9b04      	ldr	r3, [sp, #16]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	dd05      	ble.n	8007ed2 <_dtoa_r+0x84a>
 8007ec6:	4631      	mov	r1, r6
 8007ec8:	461a      	mov	r2, r3
 8007eca:	4620      	mov	r0, r4
 8007ecc:	f000 fe14 	bl	8008af8 <__lshift>
 8007ed0:	4606      	mov	r6, r0
 8007ed2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d069      	beq.n	8007fac <_dtoa_r+0x924>
 8007ed8:	4631      	mov	r1, r6
 8007eda:	4658      	mov	r0, fp
 8007edc:	f000 fe78 	bl	8008bd0 <__mcmp>
 8007ee0:	2800      	cmp	r0, #0
 8007ee2:	da63      	bge.n	8007fac <_dtoa_r+0x924>
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	4659      	mov	r1, fp
 8007ee8:	220a      	movs	r2, #10
 8007eea:	4620      	mov	r0, r4
 8007eec:	f000 fc54 	bl	8008798 <__multadd>
 8007ef0:	9b08      	ldr	r3, [sp, #32]
 8007ef2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007ef6:	4683      	mov	fp, r0
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	f000 818f 	beq.w	800821c <_dtoa_r+0xb94>
 8007efe:	4639      	mov	r1, r7
 8007f00:	2300      	movs	r3, #0
 8007f02:	220a      	movs	r2, #10
 8007f04:	4620      	mov	r0, r4
 8007f06:	f000 fc47 	bl	8008798 <__multadd>
 8007f0a:	f1b9 0f00 	cmp.w	r9, #0
 8007f0e:	4607      	mov	r7, r0
 8007f10:	f300 808e 	bgt.w	8008030 <_dtoa_r+0x9a8>
 8007f14:	9b05      	ldr	r3, [sp, #20]
 8007f16:	2b02      	cmp	r3, #2
 8007f18:	dc50      	bgt.n	8007fbc <_dtoa_r+0x934>
 8007f1a:	e089      	b.n	8008030 <_dtoa_r+0x9a8>
 8007f1c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007f1e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007f22:	e75d      	b.n	8007de0 <_dtoa_r+0x758>
 8007f24:	9b01      	ldr	r3, [sp, #4]
 8007f26:	1e5e      	subs	r6, r3, #1
 8007f28:	9b06      	ldr	r3, [sp, #24]
 8007f2a:	42b3      	cmp	r3, r6
 8007f2c:	bfbf      	itttt	lt
 8007f2e:	9b06      	ldrlt	r3, [sp, #24]
 8007f30:	9606      	strlt	r6, [sp, #24]
 8007f32:	1af2      	sublt	r2, r6, r3
 8007f34:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8007f36:	bfb6      	itet	lt
 8007f38:	189b      	addlt	r3, r3, r2
 8007f3a:	1b9e      	subge	r6, r3, r6
 8007f3c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8007f3e:	9b01      	ldr	r3, [sp, #4]
 8007f40:	bfb8      	it	lt
 8007f42:	2600      	movlt	r6, #0
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	bfb5      	itete	lt
 8007f48:	eba8 0503 	sublt.w	r5, r8, r3
 8007f4c:	9b01      	ldrge	r3, [sp, #4]
 8007f4e:	2300      	movlt	r3, #0
 8007f50:	4645      	movge	r5, r8
 8007f52:	e747      	b.n	8007de4 <_dtoa_r+0x75c>
 8007f54:	9e06      	ldr	r6, [sp, #24]
 8007f56:	9f08      	ldr	r7, [sp, #32]
 8007f58:	4645      	mov	r5, r8
 8007f5a:	e74c      	b.n	8007df6 <_dtoa_r+0x76e>
 8007f5c:	9a06      	ldr	r2, [sp, #24]
 8007f5e:	e775      	b.n	8007e4c <_dtoa_r+0x7c4>
 8007f60:	9b05      	ldr	r3, [sp, #20]
 8007f62:	2b01      	cmp	r3, #1
 8007f64:	dc18      	bgt.n	8007f98 <_dtoa_r+0x910>
 8007f66:	9b02      	ldr	r3, [sp, #8]
 8007f68:	b9b3      	cbnz	r3, 8007f98 <_dtoa_r+0x910>
 8007f6a:	9b03      	ldr	r3, [sp, #12]
 8007f6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f70:	b9a3      	cbnz	r3, 8007f9c <_dtoa_r+0x914>
 8007f72:	9b03      	ldr	r3, [sp, #12]
 8007f74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007f78:	0d1b      	lsrs	r3, r3, #20
 8007f7a:	051b      	lsls	r3, r3, #20
 8007f7c:	b12b      	cbz	r3, 8007f8a <_dtoa_r+0x902>
 8007f7e:	9b04      	ldr	r3, [sp, #16]
 8007f80:	3301      	adds	r3, #1
 8007f82:	9304      	str	r3, [sp, #16]
 8007f84:	f108 0801 	add.w	r8, r8, #1
 8007f88:	2301      	movs	r3, #1
 8007f8a:	9306      	str	r3, [sp, #24]
 8007f8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	f47f af74 	bne.w	8007e7c <_dtoa_r+0x7f4>
 8007f94:	2001      	movs	r0, #1
 8007f96:	e779      	b.n	8007e8c <_dtoa_r+0x804>
 8007f98:	2300      	movs	r3, #0
 8007f9a:	e7f6      	b.n	8007f8a <_dtoa_r+0x902>
 8007f9c:	9b02      	ldr	r3, [sp, #8]
 8007f9e:	e7f4      	b.n	8007f8a <_dtoa_r+0x902>
 8007fa0:	d085      	beq.n	8007eae <_dtoa_r+0x826>
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	301c      	adds	r0, #28
 8007fa6:	e77d      	b.n	8007ea4 <_dtoa_r+0x81c>
 8007fa8:	40240000 	.word	0x40240000
 8007fac:	9b01      	ldr	r3, [sp, #4]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	dc38      	bgt.n	8008024 <_dtoa_r+0x99c>
 8007fb2:	9b05      	ldr	r3, [sp, #20]
 8007fb4:	2b02      	cmp	r3, #2
 8007fb6:	dd35      	ble.n	8008024 <_dtoa_r+0x99c>
 8007fb8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007fbc:	f1b9 0f00 	cmp.w	r9, #0
 8007fc0:	d10d      	bne.n	8007fde <_dtoa_r+0x956>
 8007fc2:	4631      	mov	r1, r6
 8007fc4:	464b      	mov	r3, r9
 8007fc6:	2205      	movs	r2, #5
 8007fc8:	4620      	mov	r0, r4
 8007fca:	f000 fbe5 	bl	8008798 <__multadd>
 8007fce:	4601      	mov	r1, r0
 8007fd0:	4606      	mov	r6, r0
 8007fd2:	4658      	mov	r0, fp
 8007fd4:	f000 fdfc 	bl	8008bd0 <__mcmp>
 8007fd8:	2800      	cmp	r0, #0
 8007fda:	f73f adbd 	bgt.w	8007b58 <_dtoa_r+0x4d0>
 8007fde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fe0:	9d00      	ldr	r5, [sp, #0]
 8007fe2:	ea6f 0a03 	mvn.w	sl, r3
 8007fe6:	f04f 0800 	mov.w	r8, #0
 8007fea:	4631      	mov	r1, r6
 8007fec:	4620      	mov	r0, r4
 8007fee:	f000 fbb1 	bl	8008754 <_Bfree>
 8007ff2:	2f00      	cmp	r7, #0
 8007ff4:	f43f aeb4 	beq.w	8007d60 <_dtoa_r+0x6d8>
 8007ff8:	f1b8 0f00 	cmp.w	r8, #0
 8007ffc:	d005      	beq.n	800800a <_dtoa_r+0x982>
 8007ffe:	45b8      	cmp	r8, r7
 8008000:	d003      	beq.n	800800a <_dtoa_r+0x982>
 8008002:	4641      	mov	r1, r8
 8008004:	4620      	mov	r0, r4
 8008006:	f000 fba5 	bl	8008754 <_Bfree>
 800800a:	4639      	mov	r1, r7
 800800c:	4620      	mov	r0, r4
 800800e:	f000 fba1 	bl	8008754 <_Bfree>
 8008012:	e6a5      	b.n	8007d60 <_dtoa_r+0x6d8>
 8008014:	2600      	movs	r6, #0
 8008016:	4637      	mov	r7, r6
 8008018:	e7e1      	b.n	8007fde <_dtoa_r+0x956>
 800801a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800801c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008020:	4637      	mov	r7, r6
 8008022:	e599      	b.n	8007b58 <_dtoa_r+0x4d0>
 8008024:	9b08      	ldr	r3, [sp, #32]
 8008026:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800802a:	2b00      	cmp	r3, #0
 800802c:	f000 80fd 	beq.w	800822a <_dtoa_r+0xba2>
 8008030:	2d00      	cmp	r5, #0
 8008032:	dd05      	ble.n	8008040 <_dtoa_r+0x9b8>
 8008034:	4639      	mov	r1, r7
 8008036:	462a      	mov	r2, r5
 8008038:	4620      	mov	r0, r4
 800803a:	f000 fd5d 	bl	8008af8 <__lshift>
 800803e:	4607      	mov	r7, r0
 8008040:	9b06      	ldr	r3, [sp, #24]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d05c      	beq.n	8008100 <_dtoa_r+0xa78>
 8008046:	6879      	ldr	r1, [r7, #4]
 8008048:	4620      	mov	r0, r4
 800804a:	f000 fb43 	bl	80086d4 <_Balloc>
 800804e:	4605      	mov	r5, r0
 8008050:	b928      	cbnz	r0, 800805e <_dtoa_r+0x9d6>
 8008052:	4b80      	ldr	r3, [pc, #512]	; (8008254 <_dtoa_r+0xbcc>)
 8008054:	4602      	mov	r2, r0
 8008056:	f240 21ea 	movw	r1, #746	; 0x2ea
 800805a:	f7ff bb2e 	b.w	80076ba <_dtoa_r+0x32>
 800805e:	693a      	ldr	r2, [r7, #16]
 8008060:	3202      	adds	r2, #2
 8008062:	0092      	lsls	r2, r2, #2
 8008064:	f107 010c 	add.w	r1, r7, #12
 8008068:	300c      	adds	r0, #12
 800806a:	f000 fb25 	bl	80086b8 <memcpy>
 800806e:	2201      	movs	r2, #1
 8008070:	4629      	mov	r1, r5
 8008072:	4620      	mov	r0, r4
 8008074:	f000 fd40 	bl	8008af8 <__lshift>
 8008078:	9b00      	ldr	r3, [sp, #0]
 800807a:	3301      	adds	r3, #1
 800807c:	9301      	str	r3, [sp, #4]
 800807e:	9b00      	ldr	r3, [sp, #0]
 8008080:	444b      	add	r3, r9
 8008082:	9307      	str	r3, [sp, #28]
 8008084:	9b02      	ldr	r3, [sp, #8]
 8008086:	f003 0301 	and.w	r3, r3, #1
 800808a:	46b8      	mov	r8, r7
 800808c:	9306      	str	r3, [sp, #24]
 800808e:	4607      	mov	r7, r0
 8008090:	9b01      	ldr	r3, [sp, #4]
 8008092:	4631      	mov	r1, r6
 8008094:	3b01      	subs	r3, #1
 8008096:	4658      	mov	r0, fp
 8008098:	9302      	str	r3, [sp, #8]
 800809a:	f7ff fa67 	bl	800756c <quorem>
 800809e:	4603      	mov	r3, r0
 80080a0:	3330      	adds	r3, #48	; 0x30
 80080a2:	9004      	str	r0, [sp, #16]
 80080a4:	4641      	mov	r1, r8
 80080a6:	4658      	mov	r0, fp
 80080a8:	9308      	str	r3, [sp, #32]
 80080aa:	f000 fd91 	bl	8008bd0 <__mcmp>
 80080ae:	463a      	mov	r2, r7
 80080b0:	4681      	mov	r9, r0
 80080b2:	4631      	mov	r1, r6
 80080b4:	4620      	mov	r0, r4
 80080b6:	f000 fda7 	bl	8008c08 <__mdiff>
 80080ba:	68c2      	ldr	r2, [r0, #12]
 80080bc:	9b08      	ldr	r3, [sp, #32]
 80080be:	4605      	mov	r5, r0
 80080c0:	bb02      	cbnz	r2, 8008104 <_dtoa_r+0xa7c>
 80080c2:	4601      	mov	r1, r0
 80080c4:	4658      	mov	r0, fp
 80080c6:	f000 fd83 	bl	8008bd0 <__mcmp>
 80080ca:	9b08      	ldr	r3, [sp, #32]
 80080cc:	4602      	mov	r2, r0
 80080ce:	4629      	mov	r1, r5
 80080d0:	4620      	mov	r0, r4
 80080d2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80080d6:	f000 fb3d 	bl	8008754 <_Bfree>
 80080da:	9b05      	ldr	r3, [sp, #20]
 80080dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080de:	9d01      	ldr	r5, [sp, #4]
 80080e0:	ea43 0102 	orr.w	r1, r3, r2
 80080e4:	9b06      	ldr	r3, [sp, #24]
 80080e6:	430b      	orrs	r3, r1
 80080e8:	9b08      	ldr	r3, [sp, #32]
 80080ea:	d10d      	bne.n	8008108 <_dtoa_r+0xa80>
 80080ec:	2b39      	cmp	r3, #57	; 0x39
 80080ee:	d029      	beq.n	8008144 <_dtoa_r+0xabc>
 80080f0:	f1b9 0f00 	cmp.w	r9, #0
 80080f4:	dd01      	ble.n	80080fa <_dtoa_r+0xa72>
 80080f6:	9b04      	ldr	r3, [sp, #16]
 80080f8:	3331      	adds	r3, #49	; 0x31
 80080fa:	9a02      	ldr	r2, [sp, #8]
 80080fc:	7013      	strb	r3, [r2, #0]
 80080fe:	e774      	b.n	8007fea <_dtoa_r+0x962>
 8008100:	4638      	mov	r0, r7
 8008102:	e7b9      	b.n	8008078 <_dtoa_r+0x9f0>
 8008104:	2201      	movs	r2, #1
 8008106:	e7e2      	b.n	80080ce <_dtoa_r+0xa46>
 8008108:	f1b9 0f00 	cmp.w	r9, #0
 800810c:	db06      	blt.n	800811c <_dtoa_r+0xa94>
 800810e:	9905      	ldr	r1, [sp, #20]
 8008110:	ea41 0909 	orr.w	r9, r1, r9
 8008114:	9906      	ldr	r1, [sp, #24]
 8008116:	ea59 0101 	orrs.w	r1, r9, r1
 800811a:	d120      	bne.n	800815e <_dtoa_r+0xad6>
 800811c:	2a00      	cmp	r2, #0
 800811e:	ddec      	ble.n	80080fa <_dtoa_r+0xa72>
 8008120:	4659      	mov	r1, fp
 8008122:	2201      	movs	r2, #1
 8008124:	4620      	mov	r0, r4
 8008126:	9301      	str	r3, [sp, #4]
 8008128:	f000 fce6 	bl	8008af8 <__lshift>
 800812c:	4631      	mov	r1, r6
 800812e:	4683      	mov	fp, r0
 8008130:	f000 fd4e 	bl	8008bd0 <__mcmp>
 8008134:	2800      	cmp	r0, #0
 8008136:	9b01      	ldr	r3, [sp, #4]
 8008138:	dc02      	bgt.n	8008140 <_dtoa_r+0xab8>
 800813a:	d1de      	bne.n	80080fa <_dtoa_r+0xa72>
 800813c:	07da      	lsls	r2, r3, #31
 800813e:	d5dc      	bpl.n	80080fa <_dtoa_r+0xa72>
 8008140:	2b39      	cmp	r3, #57	; 0x39
 8008142:	d1d8      	bne.n	80080f6 <_dtoa_r+0xa6e>
 8008144:	9a02      	ldr	r2, [sp, #8]
 8008146:	2339      	movs	r3, #57	; 0x39
 8008148:	7013      	strb	r3, [r2, #0]
 800814a:	462b      	mov	r3, r5
 800814c:	461d      	mov	r5, r3
 800814e:	3b01      	subs	r3, #1
 8008150:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008154:	2a39      	cmp	r2, #57	; 0x39
 8008156:	d050      	beq.n	80081fa <_dtoa_r+0xb72>
 8008158:	3201      	adds	r2, #1
 800815a:	701a      	strb	r2, [r3, #0]
 800815c:	e745      	b.n	8007fea <_dtoa_r+0x962>
 800815e:	2a00      	cmp	r2, #0
 8008160:	dd03      	ble.n	800816a <_dtoa_r+0xae2>
 8008162:	2b39      	cmp	r3, #57	; 0x39
 8008164:	d0ee      	beq.n	8008144 <_dtoa_r+0xabc>
 8008166:	3301      	adds	r3, #1
 8008168:	e7c7      	b.n	80080fa <_dtoa_r+0xa72>
 800816a:	9a01      	ldr	r2, [sp, #4]
 800816c:	9907      	ldr	r1, [sp, #28]
 800816e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008172:	428a      	cmp	r2, r1
 8008174:	d02a      	beq.n	80081cc <_dtoa_r+0xb44>
 8008176:	4659      	mov	r1, fp
 8008178:	2300      	movs	r3, #0
 800817a:	220a      	movs	r2, #10
 800817c:	4620      	mov	r0, r4
 800817e:	f000 fb0b 	bl	8008798 <__multadd>
 8008182:	45b8      	cmp	r8, r7
 8008184:	4683      	mov	fp, r0
 8008186:	f04f 0300 	mov.w	r3, #0
 800818a:	f04f 020a 	mov.w	r2, #10
 800818e:	4641      	mov	r1, r8
 8008190:	4620      	mov	r0, r4
 8008192:	d107      	bne.n	80081a4 <_dtoa_r+0xb1c>
 8008194:	f000 fb00 	bl	8008798 <__multadd>
 8008198:	4680      	mov	r8, r0
 800819a:	4607      	mov	r7, r0
 800819c:	9b01      	ldr	r3, [sp, #4]
 800819e:	3301      	adds	r3, #1
 80081a0:	9301      	str	r3, [sp, #4]
 80081a2:	e775      	b.n	8008090 <_dtoa_r+0xa08>
 80081a4:	f000 faf8 	bl	8008798 <__multadd>
 80081a8:	4639      	mov	r1, r7
 80081aa:	4680      	mov	r8, r0
 80081ac:	2300      	movs	r3, #0
 80081ae:	220a      	movs	r2, #10
 80081b0:	4620      	mov	r0, r4
 80081b2:	f000 faf1 	bl	8008798 <__multadd>
 80081b6:	4607      	mov	r7, r0
 80081b8:	e7f0      	b.n	800819c <_dtoa_r+0xb14>
 80081ba:	f1b9 0f00 	cmp.w	r9, #0
 80081be:	9a00      	ldr	r2, [sp, #0]
 80081c0:	bfcc      	ite	gt
 80081c2:	464d      	movgt	r5, r9
 80081c4:	2501      	movle	r5, #1
 80081c6:	4415      	add	r5, r2
 80081c8:	f04f 0800 	mov.w	r8, #0
 80081cc:	4659      	mov	r1, fp
 80081ce:	2201      	movs	r2, #1
 80081d0:	4620      	mov	r0, r4
 80081d2:	9301      	str	r3, [sp, #4]
 80081d4:	f000 fc90 	bl	8008af8 <__lshift>
 80081d8:	4631      	mov	r1, r6
 80081da:	4683      	mov	fp, r0
 80081dc:	f000 fcf8 	bl	8008bd0 <__mcmp>
 80081e0:	2800      	cmp	r0, #0
 80081e2:	dcb2      	bgt.n	800814a <_dtoa_r+0xac2>
 80081e4:	d102      	bne.n	80081ec <_dtoa_r+0xb64>
 80081e6:	9b01      	ldr	r3, [sp, #4]
 80081e8:	07db      	lsls	r3, r3, #31
 80081ea:	d4ae      	bmi.n	800814a <_dtoa_r+0xac2>
 80081ec:	462b      	mov	r3, r5
 80081ee:	461d      	mov	r5, r3
 80081f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80081f4:	2a30      	cmp	r2, #48	; 0x30
 80081f6:	d0fa      	beq.n	80081ee <_dtoa_r+0xb66>
 80081f8:	e6f7      	b.n	8007fea <_dtoa_r+0x962>
 80081fa:	9a00      	ldr	r2, [sp, #0]
 80081fc:	429a      	cmp	r2, r3
 80081fe:	d1a5      	bne.n	800814c <_dtoa_r+0xac4>
 8008200:	f10a 0a01 	add.w	sl, sl, #1
 8008204:	2331      	movs	r3, #49	; 0x31
 8008206:	e779      	b.n	80080fc <_dtoa_r+0xa74>
 8008208:	4b13      	ldr	r3, [pc, #76]	; (8008258 <_dtoa_r+0xbd0>)
 800820a:	f7ff baaf 	b.w	800776c <_dtoa_r+0xe4>
 800820e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008210:	2b00      	cmp	r3, #0
 8008212:	f47f aa86 	bne.w	8007722 <_dtoa_r+0x9a>
 8008216:	4b11      	ldr	r3, [pc, #68]	; (800825c <_dtoa_r+0xbd4>)
 8008218:	f7ff baa8 	b.w	800776c <_dtoa_r+0xe4>
 800821c:	f1b9 0f00 	cmp.w	r9, #0
 8008220:	dc03      	bgt.n	800822a <_dtoa_r+0xba2>
 8008222:	9b05      	ldr	r3, [sp, #20]
 8008224:	2b02      	cmp	r3, #2
 8008226:	f73f aec9 	bgt.w	8007fbc <_dtoa_r+0x934>
 800822a:	9d00      	ldr	r5, [sp, #0]
 800822c:	4631      	mov	r1, r6
 800822e:	4658      	mov	r0, fp
 8008230:	f7ff f99c 	bl	800756c <quorem>
 8008234:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008238:	f805 3b01 	strb.w	r3, [r5], #1
 800823c:	9a00      	ldr	r2, [sp, #0]
 800823e:	1aaa      	subs	r2, r5, r2
 8008240:	4591      	cmp	r9, r2
 8008242:	ddba      	ble.n	80081ba <_dtoa_r+0xb32>
 8008244:	4659      	mov	r1, fp
 8008246:	2300      	movs	r3, #0
 8008248:	220a      	movs	r2, #10
 800824a:	4620      	mov	r0, r4
 800824c:	f000 faa4 	bl	8008798 <__multadd>
 8008250:	4683      	mov	fp, r0
 8008252:	e7eb      	b.n	800822c <_dtoa_r+0xba4>
 8008254:	0800a397 	.word	0x0800a397
 8008258:	0800a2f0 	.word	0x0800a2f0
 800825c:	0800a314 	.word	0x0800a314

08008260 <__sflush_r>:
 8008260:	898a      	ldrh	r2, [r1, #12]
 8008262:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008266:	4605      	mov	r5, r0
 8008268:	0710      	lsls	r0, r2, #28
 800826a:	460c      	mov	r4, r1
 800826c:	d458      	bmi.n	8008320 <__sflush_r+0xc0>
 800826e:	684b      	ldr	r3, [r1, #4]
 8008270:	2b00      	cmp	r3, #0
 8008272:	dc05      	bgt.n	8008280 <__sflush_r+0x20>
 8008274:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008276:	2b00      	cmp	r3, #0
 8008278:	dc02      	bgt.n	8008280 <__sflush_r+0x20>
 800827a:	2000      	movs	r0, #0
 800827c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008280:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008282:	2e00      	cmp	r6, #0
 8008284:	d0f9      	beq.n	800827a <__sflush_r+0x1a>
 8008286:	2300      	movs	r3, #0
 8008288:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800828c:	682f      	ldr	r7, [r5, #0]
 800828e:	602b      	str	r3, [r5, #0]
 8008290:	d032      	beq.n	80082f8 <__sflush_r+0x98>
 8008292:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008294:	89a3      	ldrh	r3, [r4, #12]
 8008296:	075a      	lsls	r2, r3, #29
 8008298:	d505      	bpl.n	80082a6 <__sflush_r+0x46>
 800829a:	6863      	ldr	r3, [r4, #4]
 800829c:	1ac0      	subs	r0, r0, r3
 800829e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80082a0:	b10b      	cbz	r3, 80082a6 <__sflush_r+0x46>
 80082a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80082a4:	1ac0      	subs	r0, r0, r3
 80082a6:	2300      	movs	r3, #0
 80082a8:	4602      	mov	r2, r0
 80082aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80082ac:	6a21      	ldr	r1, [r4, #32]
 80082ae:	4628      	mov	r0, r5
 80082b0:	47b0      	blx	r6
 80082b2:	1c43      	adds	r3, r0, #1
 80082b4:	89a3      	ldrh	r3, [r4, #12]
 80082b6:	d106      	bne.n	80082c6 <__sflush_r+0x66>
 80082b8:	6829      	ldr	r1, [r5, #0]
 80082ba:	291d      	cmp	r1, #29
 80082bc:	d82c      	bhi.n	8008318 <__sflush_r+0xb8>
 80082be:	4a2a      	ldr	r2, [pc, #168]	; (8008368 <__sflush_r+0x108>)
 80082c0:	40ca      	lsrs	r2, r1
 80082c2:	07d6      	lsls	r6, r2, #31
 80082c4:	d528      	bpl.n	8008318 <__sflush_r+0xb8>
 80082c6:	2200      	movs	r2, #0
 80082c8:	6062      	str	r2, [r4, #4]
 80082ca:	04d9      	lsls	r1, r3, #19
 80082cc:	6922      	ldr	r2, [r4, #16]
 80082ce:	6022      	str	r2, [r4, #0]
 80082d0:	d504      	bpl.n	80082dc <__sflush_r+0x7c>
 80082d2:	1c42      	adds	r2, r0, #1
 80082d4:	d101      	bne.n	80082da <__sflush_r+0x7a>
 80082d6:	682b      	ldr	r3, [r5, #0]
 80082d8:	b903      	cbnz	r3, 80082dc <__sflush_r+0x7c>
 80082da:	6560      	str	r0, [r4, #84]	; 0x54
 80082dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80082de:	602f      	str	r7, [r5, #0]
 80082e0:	2900      	cmp	r1, #0
 80082e2:	d0ca      	beq.n	800827a <__sflush_r+0x1a>
 80082e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80082e8:	4299      	cmp	r1, r3
 80082ea:	d002      	beq.n	80082f2 <__sflush_r+0x92>
 80082ec:	4628      	mov	r0, r5
 80082ee:	f000 fd7f 	bl	8008df0 <_free_r>
 80082f2:	2000      	movs	r0, #0
 80082f4:	6360      	str	r0, [r4, #52]	; 0x34
 80082f6:	e7c1      	b.n	800827c <__sflush_r+0x1c>
 80082f8:	6a21      	ldr	r1, [r4, #32]
 80082fa:	2301      	movs	r3, #1
 80082fc:	4628      	mov	r0, r5
 80082fe:	47b0      	blx	r6
 8008300:	1c41      	adds	r1, r0, #1
 8008302:	d1c7      	bne.n	8008294 <__sflush_r+0x34>
 8008304:	682b      	ldr	r3, [r5, #0]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d0c4      	beq.n	8008294 <__sflush_r+0x34>
 800830a:	2b1d      	cmp	r3, #29
 800830c:	d001      	beq.n	8008312 <__sflush_r+0xb2>
 800830e:	2b16      	cmp	r3, #22
 8008310:	d101      	bne.n	8008316 <__sflush_r+0xb6>
 8008312:	602f      	str	r7, [r5, #0]
 8008314:	e7b1      	b.n	800827a <__sflush_r+0x1a>
 8008316:	89a3      	ldrh	r3, [r4, #12]
 8008318:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800831c:	81a3      	strh	r3, [r4, #12]
 800831e:	e7ad      	b.n	800827c <__sflush_r+0x1c>
 8008320:	690f      	ldr	r7, [r1, #16]
 8008322:	2f00      	cmp	r7, #0
 8008324:	d0a9      	beq.n	800827a <__sflush_r+0x1a>
 8008326:	0793      	lsls	r3, r2, #30
 8008328:	680e      	ldr	r6, [r1, #0]
 800832a:	bf08      	it	eq
 800832c:	694b      	ldreq	r3, [r1, #20]
 800832e:	600f      	str	r7, [r1, #0]
 8008330:	bf18      	it	ne
 8008332:	2300      	movne	r3, #0
 8008334:	eba6 0807 	sub.w	r8, r6, r7
 8008338:	608b      	str	r3, [r1, #8]
 800833a:	f1b8 0f00 	cmp.w	r8, #0
 800833e:	dd9c      	ble.n	800827a <__sflush_r+0x1a>
 8008340:	6a21      	ldr	r1, [r4, #32]
 8008342:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008344:	4643      	mov	r3, r8
 8008346:	463a      	mov	r2, r7
 8008348:	4628      	mov	r0, r5
 800834a:	47b0      	blx	r6
 800834c:	2800      	cmp	r0, #0
 800834e:	dc06      	bgt.n	800835e <__sflush_r+0xfe>
 8008350:	89a3      	ldrh	r3, [r4, #12]
 8008352:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008356:	81a3      	strh	r3, [r4, #12]
 8008358:	f04f 30ff 	mov.w	r0, #4294967295
 800835c:	e78e      	b.n	800827c <__sflush_r+0x1c>
 800835e:	4407      	add	r7, r0
 8008360:	eba8 0800 	sub.w	r8, r8, r0
 8008364:	e7e9      	b.n	800833a <__sflush_r+0xda>
 8008366:	bf00      	nop
 8008368:	20400001 	.word	0x20400001

0800836c <_fflush_r>:
 800836c:	b538      	push	{r3, r4, r5, lr}
 800836e:	690b      	ldr	r3, [r1, #16]
 8008370:	4605      	mov	r5, r0
 8008372:	460c      	mov	r4, r1
 8008374:	b913      	cbnz	r3, 800837c <_fflush_r+0x10>
 8008376:	2500      	movs	r5, #0
 8008378:	4628      	mov	r0, r5
 800837a:	bd38      	pop	{r3, r4, r5, pc}
 800837c:	b118      	cbz	r0, 8008386 <_fflush_r+0x1a>
 800837e:	6983      	ldr	r3, [r0, #24]
 8008380:	b90b      	cbnz	r3, 8008386 <_fflush_r+0x1a>
 8008382:	f000 f887 	bl	8008494 <__sinit>
 8008386:	4b14      	ldr	r3, [pc, #80]	; (80083d8 <_fflush_r+0x6c>)
 8008388:	429c      	cmp	r4, r3
 800838a:	d11b      	bne.n	80083c4 <_fflush_r+0x58>
 800838c:	686c      	ldr	r4, [r5, #4]
 800838e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d0ef      	beq.n	8008376 <_fflush_r+0xa>
 8008396:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008398:	07d0      	lsls	r0, r2, #31
 800839a:	d404      	bmi.n	80083a6 <_fflush_r+0x3a>
 800839c:	0599      	lsls	r1, r3, #22
 800839e:	d402      	bmi.n	80083a6 <_fflush_r+0x3a>
 80083a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80083a2:	f000 f91a 	bl	80085da <__retarget_lock_acquire_recursive>
 80083a6:	4628      	mov	r0, r5
 80083a8:	4621      	mov	r1, r4
 80083aa:	f7ff ff59 	bl	8008260 <__sflush_r>
 80083ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80083b0:	07da      	lsls	r2, r3, #31
 80083b2:	4605      	mov	r5, r0
 80083b4:	d4e0      	bmi.n	8008378 <_fflush_r+0xc>
 80083b6:	89a3      	ldrh	r3, [r4, #12]
 80083b8:	059b      	lsls	r3, r3, #22
 80083ba:	d4dd      	bmi.n	8008378 <_fflush_r+0xc>
 80083bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80083be:	f000 f90d 	bl	80085dc <__retarget_lock_release_recursive>
 80083c2:	e7d9      	b.n	8008378 <_fflush_r+0xc>
 80083c4:	4b05      	ldr	r3, [pc, #20]	; (80083dc <_fflush_r+0x70>)
 80083c6:	429c      	cmp	r4, r3
 80083c8:	d101      	bne.n	80083ce <_fflush_r+0x62>
 80083ca:	68ac      	ldr	r4, [r5, #8]
 80083cc:	e7df      	b.n	800838e <_fflush_r+0x22>
 80083ce:	4b04      	ldr	r3, [pc, #16]	; (80083e0 <_fflush_r+0x74>)
 80083d0:	429c      	cmp	r4, r3
 80083d2:	bf08      	it	eq
 80083d4:	68ec      	ldreq	r4, [r5, #12]
 80083d6:	e7da      	b.n	800838e <_fflush_r+0x22>
 80083d8:	0800a3c8 	.word	0x0800a3c8
 80083dc:	0800a3e8 	.word	0x0800a3e8
 80083e0:	0800a3a8 	.word	0x0800a3a8

080083e4 <std>:
 80083e4:	2300      	movs	r3, #0
 80083e6:	b510      	push	{r4, lr}
 80083e8:	4604      	mov	r4, r0
 80083ea:	e9c0 3300 	strd	r3, r3, [r0]
 80083ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80083f2:	6083      	str	r3, [r0, #8]
 80083f4:	8181      	strh	r1, [r0, #12]
 80083f6:	6643      	str	r3, [r0, #100]	; 0x64
 80083f8:	81c2      	strh	r2, [r0, #14]
 80083fa:	6183      	str	r3, [r0, #24]
 80083fc:	4619      	mov	r1, r3
 80083fe:	2208      	movs	r2, #8
 8008400:	305c      	adds	r0, #92	; 0x5c
 8008402:	f7fe faeb 	bl	80069dc <memset>
 8008406:	4b05      	ldr	r3, [pc, #20]	; (800841c <std+0x38>)
 8008408:	6263      	str	r3, [r4, #36]	; 0x24
 800840a:	4b05      	ldr	r3, [pc, #20]	; (8008420 <std+0x3c>)
 800840c:	62a3      	str	r3, [r4, #40]	; 0x28
 800840e:	4b05      	ldr	r3, [pc, #20]	; (8008424 <std+0x40>)
 8008410:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008412:	4b05      	ldr	r3, [pc, #20]	; (8008428 <std+0x44>)
 8008414:	6224      	str	r4, [r4, #32]
 8008416:	6323      	str	r3, [r4, #48]	; 0x30
 8008418:	bd10      	pop	{r4, pc}
 800841a:	bf00      	nop
 800841c:	0800921d 	.word	0x0800921d
 8008420:	0800923f 	.word	0x0800923f
 8008424:	08009277 	.word	0x08009277
 8008428:	0800929b 	.word	0x0800929b

0800842c <_cleanup_r>:
 800842c:	4901      	ldr	r1, [pc, #4]	; (8008434 <_cleanup_r+0x8>)
 800842e:	f000 b8af 	b.w	8008590 <_fwalk_reent>
 8008432:	bf00      	nop
 8008434:	0800836d 	.word	0x0800836d

08008438 <__sfmoreglue>:
 8008438:	b570      	push	{r4, r5, r6, lr}
 800843a:	1e4a      	subs	r2, r1, #1
 800843c:	2568      	movs	r5, #104	; 0x68
 800843e:	4355      	muls	r5, r2
 8008440:	460e      	mov	r6, r1
 8008442:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008446:	f000 fd23 	bl	8008e90 <_malloc_r>
 800844a:	4604      	mov	r4, r0
 800844c:	b140      	cbz	r0, 8008460 <__sfmoreglue+0x28>
 800844e:	2100      	movs	r1, #0
 8008450:	e9c0 1600 	strd	r1, r6, [r0]
 8008454:	300c      	adds	r0, #12
 8008456:	60a0      	str	r0, [r4, #8]
 8008458:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800845c:	f7fe fabe 	bl	80069dc <memset>
 8008460:	4620      	mov	r0, r4
 8008462:	bd70      	pop	{r4, r5, r6, pc}

08008464 <__sfp_lock_acquire>:
 8008464:	4801      	ldr	r0, [pc, #4]	; (800846c <__sfp_lock_acquire+0x8>)
 8008466:	f000 b8b8 	b.w	80085da <__retarget_lock_acquire_recursive>
 800846a:	bf00      	nop
 800846c:	2001762c 	.word	0x2001762c

08008470 <__sfp_lock_release>:
 8008470:	4801      	ldr	r0, [pc, #4]	; (8008478 <__sfp_lock_release+0x8>)
 8008472:	f000 b8b3 	b.w	80085dc <__retarget_lock_release_recursive>
 8008476:	bf00      	nop
 8008478:	2001762c 	.word	0x2001762c

0800847c <__sinit_lock_acquire>:
 800847c:	4801      	ldr	r0, [pc, #4]	; (8008484 <__sinit_lock_acquire+0x8>)
 800847e:	f000 b8ac 	b.w	80085da <__retarget_lock_acquire_recursive>
 8008482:	bf00      	nop
 8008484:	20017627 	.word	0x20017627

08008488 <__sinit_lock_release>:
 8008488:	4801      	ldr	r0, [pc, #4]	; (8008490 <__sinit_lock_release+0x8>)
 800848a:	f000 b8a7 	b.w	80085dc <__retarget_lock_release_recursive>
 800848e:	bf00      	nop
 8008490:	20017627 	.word	0x20017627

08008494 <__sinit>:
 8008494:	b510      	push	{r4, lr}
 8008496:	4604      	mov	r4, r0
 8008498:	f7ff fff0 	bl	800847c <__sinit_lock_acquire>
 800849c:	69a3      	ldr	r3, [r4, #24]
 800849e:	b11b      	cbz	r3, 80084a8 <__sinit+0x14>
 80084a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084a4:	f7ff bff0 	b.w	8008488 <__sinit_lock_release>
 80084a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80084ac:	6523      	str	r3, [r4, #80]	; 0x50
 80084ae:	4b13      	ldr	r3, [pc, #76]	; (80084fc <__sinit+0x68>)
 80084b0:	4a13      	ldr	r2, [pc, #76]	; (8008500 <__sinit+0x6c>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	62a2      	str	r2, [r4, #40]	; 0x28
 80084b6:	42a3      	cmp	r3, r4
 80084b8:	bf04      	itt	eq
 80084ba:	2301      	moveq	r3, #1
 80084bc:	61a3      	streq	r3, [r4, #24]
 80084be:	4620      	mov	r0, r4
 80084c0:	f000 f820 	bl	8008504 <__sfp>
 80084c4:	6060      	str	r0, [r4, #4]
 80084c6:	4620      	mov	r0, r4
 80084c8:	f000 f81c 	bl	8008504 <__sfp>
 80084cc:	60a0      	str	r0, [r4, #8]
 80084ce:	4620      	mov	r0, r4
 80084d0:	f000 f818 	bl	8008504 <__sfp>
 80084d4:	2200      	movs	r2, #0
 80084d6:	60e0      	str	r0, [r4, #12]
 80084d8:	2104      	movs	r1, #4
 80084da:	6860      	ldr	r0, [r4, #4]
 80084dc:	f7ff ff82 	bl	80083e4 <std>
 80084e0:	68a0      	ldr	r0, [r4, #8]
 80084e2:	2201      	movs	r2, #1
 80084e4:	2109      	movs	r1, #9
 80084e6:	f7ff ff7d 	bl	80083e4 <std>
 80084ea:	68e0      	ldr	r0, [r4, #12]
 80084ec:	2202      	movs	r2, #2
 80084ee:	2112      	movs	r1, #18
 80084f0:	f7ff ff78 	bl	80083e4 <std>
 80084f4:	2301      	movs	r3, #1
 80084f6:	61a3      	str	r3, [r4, #24]
 80084f8:	e7d2      	b.n	80084a0 <__sinit+0xc>
 80084fa:	bf00      	nop
 80084fc:	0800a2dc 	.word	0x0800a2dc
 8008500:	0800842d 	.word	0x0800842d

08008504 <__sfp>:
 8008504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008506:	4607      	mov	r7, r0
 8008508:	f7ff ffac 	bl	8008464 <__sfp_lock_acquire>
 800850c:	4b1e      	ldr	r3, [pc, #120]	; (8008588 <__sfp+0x84>)
 800850e:	681e      	ldr	r6, [r3, #0]
 8008510:	69b3      	ldr	r3, [r6, #24]
 8008512:	b913      	cbnz	r3, 800851a <__sfp+0x16>
 8008514:	4630      	mov	r0, r6
 8008516:	f7ff ffbd 	bl	8008494 <__sinit>
 800851a:	3648      	adds	r6, #72	; 0x48
 800851c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008520:	3b01      	subs	r3, #1
 8008522:	d503      	bpl.n	800852c <__sfp+0x28>
 8008524:	6833      	ldr	r3, [r6, #0]
 8008526:	b30b      	cbz	r3, 800856c <__sfp+0x68>
 8008528:	6836      	ldr	r6, [r6, #0]
 800852a:	e7f7      	b.n	800851c <__sfp+0x18>
 800852c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008530:	b9d5      	cbnz	r5, 8008568 <__sfp+0x64>
 8008532:	4b16      	ldr	r3, [pc, #88]	; (800858c <__sfp+0x88>)
 8008534:	60e3      	str	r3, [r4, #12]
 8008536:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800853a:	6665      	str	r5, [r4, #100]	; 0x64
 800853c:	f000 f84c 	bl	80085d8 <__retarget_lock_init_recursive>
 8008540:	f7ff ff96 	bl	8008470 <__sfp_lock_release>
 8008544:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008548:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800854c:	6025      	str	r5, [r4, #0]
 800854e:	61a5      	str	r5, [r4, #24]
 8008550:	2208      	movs	r2, #8
 8008552:	4629      	mov	r1, r5
 8008554:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008558:	f7fe fa40 	bl	80069dc <memset>
 800855c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008560:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008564:	4620      	mov	r0, r4
 8008566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008568:	3468      	adds	r4, #104	; 0x68
 800856a:	e7d9      	b.n	8008520 <__sfp+0x1c>
 800856c:	2104      	movs	r1, #4
 800856e:	4638      	mov	r0, r7
 8008570:	f7ff ff62 	bl	8008438 <__sfmoreglue>
 8008574:	4604      	mov	r4, r0
 8008576:	6030      	str	r0, [r6, #0]
 8008578:	2800      	cmp	r0, #0
 800857a:	d1d5      	bne.n	8008528 <__sfp+0x24>
 800857c:	f7ff ff78 	bl	8008470 <__sfp_lock_release>
 8008580:	230c      	movs	r3, #12
 8008582:	603b      	str	r3, [r7, #0]
 8008584:	e7ee      	b.n	8008564 <__sfp+0x60>
 8008586:	bf00      	nop
 8008588:	0800a2dc 	.word	0x0800a2dc
 800858c:	ffff0001 	.word	0xffff0001

08008590 <_fwalk_reent>:
 8008590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008594:	4606      	mov	r6, r0
 8008596:	4688      	mov	r8, r1
 8008598:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800859c:	2700      	movs	r7, #0
 800859e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80085a2:	f1b9 0901 	subs.w	r9, r9, #1
 80085a6:	d505      	bpl.n	80085b4 <_fwalk_reent+0x24>
 80085a8:	6824      	ldr	r4, [r4, #0]
 80085aa:	2c00      	cmp	r4, #0
 80085ac:	d1f7      	bne.n	800859e <_fwalk_reent+0xe>
 80085ae:	4638      	mov	r0, r7
 80085b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085b4:	89ab      	ldrh	r3, [r5, #12]
 80085b6:	2b01      	cmp	r3, #1
 80085b8:	d907      	bls.n	80085ca <_fwalk_reent+0x3a>
 80085ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80085be:	3301      	adds	r3, #1
 80085c0:	d003      	beq.n	80085ca <_fwalk_reent+0x3a>
 80085c2:	4629      	mov	r1, r5
 80085c4:	4630      	mov	r0, r6
 80085c6:	47c0      	blx	r8
 80085c8:	4307      	orrs	r7, r0
 80085ca:	3568      	adds	r5, #104	; 0x68
 80085cc:	e7e9      	b.n	80085a2 <_fwalk_reent+0x12>
	...

080085d0 <_localeconv_r>:
 80085d0:	4800      	ldr	r0, [pc, #0]	; (80085d4 <_localeconv_r+0x4>)
 80085d2:	4770      	bx	lr
 80085d4:	2000018c 	.word	0x2000018c

080085d8 <__retarget_lock_init_recursive>:
 80085d8:	4770      	bx	lr

080085da <__retarget_lock_acquire_recursive>:
 80085da:	4770      	bx	lr

080085dc <__retarget_lock_release_recursive>:
 80085dc:	4770      	bx	lr

080085de <__swhatbuf_r>:
 80085de:	b570      	push	{r4, r5, r6, lr}
 80085e0:	460e      	mov	r6, r1
 80085e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085e6:	2900      	cmp	r1, #0
 80085e8:	b096      	sub	sp, #88	; 0x58
 80085ea:	4614      	mov	r4, r2
 80085ec:	461d      	mov	r5, r3
 80085ee:	da07      	bge.n	8008600 <__swhatbuf_r+0x22>
 80085f0:	2300      	movs	r3, #0
 80085f2:	602b      	str	r3, [r5, #0]
 80085f4:	89b3      	ldrh	r3, [r6, #12]
 80085f6:	061a      	lsls	r2, r3, #24
 80085f8:	d410      	bmi.n	800861c <__swhatbuf_r+0x3e>
 80085fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085fe:	e00e      	b.n	800861e <__swhatbuf_r+0x40>
 8008600:	466a      	mov	r2, sp
 8008602:	f000 fea1 	bl	8009348 <_fstat_r>
 8008606:	2800      	cmp	r0, #0
 8008608:	dbf2      	blt.n	80085f0 <__swhatbuf_r+0x12>
 800860a:	9a01      	ldr	r2, [sp, #4]
 800860c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008610:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008614:	425a      	negs	r2, r3
 8008616:	415a      	adcs	r2, r3
 8008618:	602a      	str	r2, [r5, #0]
 800861a:	e7ee      	b.n	80085fa <__swhatbuf_r+0x1c>
 800861c:	2340      	movs	r3, #64	; 0x40
 800861e:	2000      	movs	r0, #0
 8008620:	6023      	str	r3, [r4, #0]
 8008622:	b016      	add	sp, #88	; 0x58
 8008624:	bd70      	pop	{r4, r5, r6, pc}
	...

08008628 <__smakebuf_r>:
 8008628:	898b      	ldrh	r3, [r1, #12]
 800862a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800862c:	079d      	lsls	r5, r3, #30
 800862e:	4606      	mov	r6, r0
 8008630:	460c      	mov	r4, r1
 8008632:	d507      	bpl.n	8008644 <__smakebuf_r+0x1c>
 8008634:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008638:	6023      	str	r3, [r4, #0]
 800863a:	6123      	str	r3, [r4, #16]
 800863c:	2301      	movs	r3, #1
 800863e:	6163      	str	r3, [r4, #20]
 8008640:	b002      	add	sp, #8
 8008642:	bd70      	pop	{r4, r5, r6, pc}
 8008644:	ab01      	add	r3, sp, #4
 8008646:	466a      	mov	r2, sp
 8008648:	f7ff ffc9 	bl	80085de <__swhatbuf_r>
 800864c:	9900      	ldr	r1, [sp, #0]
 800864e:	4605      	mov	r5, r0
 8008650:	4630      	mov	r0, r6
 8008652:	f000 fc1d 	bl	8008e90 <_malloc_r>
 8008656:	b948      	cbnz	r0, 800866c <__smakebuf_r+0x44>
 8008658:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800865c:	059a      	lsls	r2, r3, #22
 800865e:	d4ef      	bmi.n	8008640 <__smakebuf_r+0x18>
 8008660:	f023 0303 	bic.w	r3, r3, #3
 8008664:	f043 0302 	orr.w	r3, r3, #2
 8008668:	81a3      	strh	r3, [r4, #12]
 800866a:	e7e3      	b.n	8008634 <__smakebuf_r+0xc>
 800866c:	4b0d      	ldr	r3, [pc, #52]	; (80086a4 <__smakebuf_r+0x7c>)
 800866e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008670:	89a3      	ldrh	r3, [r4, #12]
 8008672:	6020      	str	r0, [r4, #0]
 8008674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008678:	81a3      	strh	r3, [r4, #12]
 800867a:	9b00      	ldr	r3, [sp, #0]
 800867c:	6163      	str	r3, [r4, #20]
 800867e:	9b01      	ldr	r3, [sp, #4]
 8008680:	6120      	str	r0, [r4, #16]
 8008682:	b15b      	cbz	r3, 800869c <__smakebuf_r+0x74>
 8008684:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008688:	4630      	mov	r0, r6
 800868a:	f000 fe6f 	bl	800936c <_isatty_r>
 800868e:	b128      	cbz	r0, 800869c <__smakebuf_r+0x74>
 8008690:	89a3      	ldrh	r3, [r4, #12]
 8008692:	f023 0303 	bic.w	r3, r3, #3
 8008696:	f043 0301 	orr.w	r3, r3, #1
 800869a:	81a3      	strh	r3, [r4, #12]
 800869c:	89a0      	ldrh	r0, [r4, #12]
 800869e:	4305      	orrs	r5, r0
 80086a0:	81a5      	strh	r5, [r4, #12]
 80086a2:	e7cd      	b.n	8008640 <__smakebuf_r+0x18>
 80086a4:	0800842d 	.word	0x0800842d

080086a8 <malloc>:
 80086a8:	4b02      	ldr	r3, [pc, #8]	; (80086b4 <malloc+0xc>)
 80086aa:	4601      	mov	r1, r0
 80086ac:	6818      	ldr	r0, [r3, #0]
 80086ae:	f000 bbef 	b.w	8008e90 <_malloc_r>
 80086b2:	bf00      	nop
 80086b4:	20000038 	.word	0x20000038

080086b8 <memcpy>:
 80086b8:	440a      	add	r2, r1
 80086ba:	4291      	cmp	r1, r2
 80086bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80086c0:	d100      	bne.n	80086c4 <memcpy+0xc>
 80086c2:	4770      	bx	lr
 80086c4:	b510      	push	{r4, lr}
 80086c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80086ce:	4291      	cmp	r1, r2
 80086d0:	d1f9      	bne.n	80086c6 <memcpy+0xe>
 80086d2:	bd10      	pop	{r4, pc}

080086d4 <_Balloc>:
 80086d4:	b570      	push	{r4, r5, r6, lr}
 80086d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80086d8:	4604      	mov	r4, r0
 80086da:	460d      	mov	r5, r1
 80086dc:	b976      	cbnz	r6, 80086fc <_Balloc+0x28>
 80086de:	2010      	movs	r0, #16
 80086e0:	f7ff ffe2 	bl	80086a8 <malloc>
 80086e4:	4602      	mov	r2, r0
 80086e6:	6260      	str	r0, [r4, #36]	; 0x24
 80086e8:	b920      	cbnz	r0, 80086f4 <_Balloc+0x20>
 80086ea:	4b18      	ldr	r3, [pc, #96]	; (800874c <_Balloc+0x78>)
 80086ec:	4818      	ldr	r0, [pc, #96]	; (8008750 <_Balloc+0x7c>)
 80086ee:	2166      	movs	r1, #102	; 0x66
 80086f0:	f000 fdea 	bl	80092c8 <__assert_func>
 80086f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80086f8:	6006      	str	r6, [r0, #0]
 80086fa:	60c6      	str	r6, [r0, #12]
 80086fc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80086fe:	68f3      	ldr	r3, [r6, #12]
 8008700:	b183      	cbz	r3, 8008724 <_Balloc+0x50>
 8008702:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008704:	68db      	ldr	r3, [r3, #12]
 8008706:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800870a:	b9b8      	cbnz	r0, 800873c <_Balloc+0x68>
 800870c:	2101      	movs	r1, #1
 800870e:	fa01 f605 	lsl.w	r6, r1, r5
 8008712:	1d72      	adds	r2, r6, #5
 8008714:	0092      	lsls	r2, r2, #2
 8008716:	4620      	mov	r0, r4
 8008718:	f000 fb5a 	bl	8008dd0 <_calloc_r>
 800871c:	b160      	cbz	r0, 8008738 <_Balloc+0x64>
 800871e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008722:	e00e      	b.n	8008742 <_Balloc+0x6e>
 8008724:	2221      	movs	r2, #33	; 0x21
 8008726:	2104      	movs	r1, #4
 8008728:	4620      	mov	r0, r4
 800872a:	f000 fb51 	bl	8008dd0 <_calloc_r>
 800872e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008730:	60f0      	str	r0, [r6, #12]
 8008732:	68db      	ldr	r3, [r3, #12]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d1e4      	bne.n	8008702 <_Balloc+0x2e>
 8008738:	2000      	movs	r0, #0
 800873a:	bd70      	pop	{r4, r5, r6, pc}
 800873c:	6802      	ldr	r2, [r0, #0]
 800873e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008742:	2300      	movs	r3, #0
 8008744:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008748:	e7f7      	b.n	800873a <_Balloc+0x66>
 800874a:	bf00      	nop
 800874c:	0800a321 	.word	0x0800a321
 8008750:	0800a408 	.word	0x0800a408

08008754 <_Bfree>:
 8008754:	b570      	push	{r4, r5, r6, lr}
 8008756:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008758:	4605      	mov	r5, r0
 800875a:	460c      	mov	r4, r1
 800875c:	b976      	cbnz	r6, 800877c <_Bfree+0x28>
 800875e:	2010      	movs	r0, #16
 8008760:	f7ff ffa2 	bl	80086a8 <malloc>
 8008764:	4602      	mov	r2, r0
 8008766:	6268      	str	r0, [r5, #36]	; 0x24
 8008768:	b920      	cbnz	r0, 8008774 <_Bfree+0x20>
 800876a:	4b09      	ldr	r3, [pc, #36]	; (8008790 <_Bfree+0x3c>)
 800876c:	4809      	ldr	r0, [pc, #36]	; (8008794 <_Bfree+0x40>)
 800876e:	218a      	movs	r1, #138	; 0x8a
 8008770:	f000 fdaa 	bl	80092c8 <__assert_func>
 8008774:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008778:	6006      	str	r6, [r0, #0]
 800877a:	60c6      	str	r6, [r0, #12]
 800877c:	b13c      	cbz	r4, 800878e <_Bfree+0x3a>
 800877e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008780:	6862      	ldr	r2, [r4, #4]
 8008782:	68db      	ldr	r3, [r3, #12]
 8008784:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008788:	6021      	str	r1, [r4, #0]
 800878a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800878e:	bd70      	pop	{r4, r5, r6, pc}
 8008790:	0800a321 	.word	0x0800a321
 8008794:	0800a408 	.word	0x0800a408

08008798 <__multadd>:
 8008798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800879c:	690e      	ldr	r6, [r1, #16]
 800879e:	4607      	mov	r7, r0
 80087a0:	4698      	mov	r8, r3
 80087a2:	460c      	mov	r4, r1
 80087a4:	f101 0014 	add.w	r0, r1, #20
 80087a8:	2300      	movs	r3, #0
 80087aa:	6805      	ldr	r5, [r0, #0]
 80087ac:	b2a9      	uxth	r1, r5
 80087ae:	fb02 8101 	mla	r1, r2, r1, r8
 80087b2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80087b6:	0c2d      	lsrs	r5, r5, #16
 80087b8:	fb02 c505 	mla	r5, r2, r5, ip
 80087bc:	b289      	uxth	r1, r1
 80087be:	3301      	adds	r3, #1
 80087c0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80087c4:	429e      	cmp	r6, r3
 80087c6:	f840 1b04 	str.w	r1, [r0], #4
 80087ca:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80087ce:	dcec      	bgt.n	80087aa <__multadd+0x12>
 80087d0:	f1b8 0f00 	cmp.w	r8, #0
 80087d4:	d022      	beq.n	800881c <__multadd+0x84>
 80087d6:	68a3      	ldr	r3, [r4, #8]
 80087d8:	42b3      	cmp	r3, r6
 80087da:	dc19      	bgt.n	8008810 <__multadd+0x78>
 80087dc:	6861      	ldr	r1, [r4, #4]
 80087de:	4638      	mov	r0, r7
 80087e0:	3101      	adds	r1, #1
 80087e2:	f7ff ff77 	bl	80086d4 <_Balloc>
 80087e6:	4605      	mov	r5, r0
 80087e8:	b928      	cbnz	r0, 80087f6 <__multadd+0x5e>
 80087ea:	4602      	mov	r2, r0
 80087ec:	4b0d      	ldr	r3, [pc, #52]	; (8008824 <__multadd+0x8c>)
 80087ee:	480e      	ldr	r0, [pc, #56]	; (8008828 <__multadd+0x90>)
 80087f0:	21b5      	movs	r1, #181	; 0xb5
 80087f2:	f000 fd69 	bl	80092c8 <__assert_func>
 80087f6:	6922      	ldr	r2, [r4, #16]
 80087f8:	3202      	adds	r2, #2
 80087fa:	f104 010c 	add.w	r1, r4, #12
 80087fe:	0092      	lsls	r2, r2, #2
 8008800:	300c      	adds	r0, #12
 8008802:	f7ff ff59 	bl	80086b8 <memcpy>
 8008806:	4621      	mov	r1, r4
 8008808:	4638      	mov	r0, r7
 800880a:	f7ff ffa3 	bl	8008754 <_Bfree>
 800880e:	462c      	mov	r4, r5
 8008810:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008814:	3601      	adds	r6, #1
 8008816:	f8c3 8014 	str.w	r8, [r3, #20]
 800881a:	6126      	str	r6, [r4, #16]
 800881c:	4620      	mov	r0, r4
 800881e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008822:	bf00      	nop
 8008824:	0800a397 	.word	0x0800a397
 8008828:	0800a408 	.word	0x0800a408

0800882c <__hi0bits>:
 800882c:	0c03      	lsrs	r3, r0, #16
 800882e:	041b      	lsls	r3, r3, #16
 8008830:	b9d3      	cbnz	r3, 8008868 <__hi0bits+0x3c>
 8008832:	0400      	lsls	r0, r0, #16
 8008834:	2310      	movs	r3, #16
 8008836:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800883a:	bf04      	itt	eq
 800883c:	0200      	lsleq	r0, r0, #8
 800883e:	3308      	addeq	r3, #8
 8008840:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008844:	bf04      	itt	eq
 8008846:	0100      	lsleq	r0, r0, #4
 8008848:	3304      	addeq	r3, #4
 800884a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800884e:	bf04      	itt	eq
 8008850:	0080      	lsleq	r0, r0, #2
 8008852:	3302      	addeq	r3, #2
 8008854:	2800      	cmp	r0, #0
 8008856:	db05      	blt.n	8008864 <__hi0bits+0x38>
 8008858:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800885c:	f103 0301 	add.w	r3, r3, #1
 8008860:	bf08      	it	eq
 8008862:	2320      	moveq	r3, #32
 8008864:	4618      	mov	r0, r3
 8008866:	4770      	bx	lr
 8008868:	2300      	movs	r3, #0
 800886a:	e7e4      	b.n	8008836 <__hi0bits+0xa>

0800886c <__lo0bits>:
 800886c:	6803      	ldr	r3, [r0, #0]
 800886e:	f013 0207 	ands.w	r2, r3, #7
 8008872:	4601      	mov	r1, r0
 8008874:	d00b      	beq.n	800888e <__lo0bits+0x22>
 8008876:	07da      	lsls	r2, r3, #31
 8008878:	d424      	bmi.n	80088c4 <__lo0bits+0x58>
 800887a:	0798      	lsls	r0, r3, #30
 800887c:	bf49      	itett	mi
 800887e:	085b      	lsrmi	r3, r3, #1
 8008880:	089b      	lsrpl	r3, r3, #2
 8008882:	2001      	movmi	r0, #1
 8008884:	600b      	strmi	r3, [r1, #0]
 8008886:	bf5c      	itt	pl
 8008888:	600b      	strpl	r3, [r1, #0]
 800888a:	2002      	movpl	r0, #2
 800888c:	4770      	bx	lr
 800888e:	b298      	uxth	r0, r3
 8008890:	b9b0      	cbnz	r0, 80088c0 <__lo0bits+0x54>
 8008892:	0c1b      	lsrs	r3, r3, #16
 8008894:	2010      	movs	r0, #16
 8008896:	f013 0fff 	tst.w	r3, #255	; 0xff
 800889a:	bf04      	itt	eq
 800889c:	0a1b      	lsreq	r3, r3, #8
 800889e:	3008      	addeq	r0, #8
 80088a0:	071a      	lsls	r2, r3, #28
 80088a2:	bf04      	itt	eq
 80088a4:	091b      	lsreq	r3, r3, #4
 80088a6:	3004      	addeq	r0, #4
 80088a8:	079a      	lsls	r2, r3, #30
 80088aa:	bf04      	itt	eq
 80088ac:	089b      	lsreq	r3, r3, #2
 80088ae:	3002      	addeq	r0, #2
 80088b0:	07da      	lsls	r2, r3, #31
 80088b2:	d403      	bmi.n	80088bc <__lo0bits+0x50>
 80088b4:	085b      	lsrs	r3, r3, #1
 80088b6:	f100 0001 	add.w	r0, r0, #1
 80088ba:	d005      	beq.n	80088c8 <__lo0bits+0x5c>
 80088bc:	600b      	str	r3, [r1, #0]
 80088be:	4770      	bx	lr
 80088c0:	4610      	mov	r0, r2
 80088c2:	e7e8      	b.n	8008896 <__lo0bits+0x2a>
 80088c4:	2000      	movs	r0, #0
 80088c6:	4770      	bx	lr
 80088c8:	2020      	movs	r0, #32
 80088ca:	4770      	bx	lr

080088cc <__i2b>:
 80088cc:	b510      	push	{r4, lr}
 80088ce:	460c      	mov	r4, r1
 80088d0:	2101      	movs	r1, #1
 80088d2:	f7ff feff 	bl	80086d4 <_Balloc>
 80088d6:	4602      	mov	r2, r0
 80088d8:	b928      	cbnz	r0, 80088e6 <__i2b+0x1a>
 80088da:	4b05      	ldr	r3, [pc, #20]	; (80088f0 <__i2b+0x24>)
 80088dc:	4805      	ldr	r0, [pc, #20]	; (80088f4 <__i2b+0x28>)
 80088de:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80088e2:	f000 fcf1 	bl	80092c8 <__assert_func>
 80088e6:	2301      	movs	r3, #1
 80088e8:	6144      	str	r4, [r0, #20]
 80088ea:	6103      	str	r3, [r0, #16]
 80088ec:	bd10      	pop	{r4, pc}
 80088ee:	bf00      	nop
 80088f0:	0800a397 	.word	0x0800a397
 80088f4:	0800a408 	.word	0x0800a408

080088f8 <__multiply>:
 80088f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088fc:	4614      	mov	r4, r2
 80088fe:	690a      	ldr	r2, [r1, #16]
 8008900:	6923      	ldr	r3, [r4, #16]
 8008902:	429a      	cmp	r2, r3
 8008904:	bfb8      	it	lt
 8008906:	460b      	movlt	r3, r1
 8008908:	460d      	mov	r5, r1
 800890a:	bfbc      	itt	lt
 800890c:	4625      	movlt	r5, r4
 800890e:	461c      	movlt	r4, r3
 8008910:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008914:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008918:	68ab      	ldr	r3, [r5, #8]
 800891a:	6869      	ldr	r1, [r5, #4]
 800891c:	eb0a 0709 	add.w	r7, sl, r9
 8008920:	42bb      	cmp	r3, r7
 8008922:	b085      	sub	sp, #20
 8008924:	bfb8      	it	lt
 8008926:	3101      	addlt	r1, #1
 8008928:	f7ff fed4 	bl	80086d4 <_Balloc>
 800892c:	b930      	cbnz	r0, 800893c <__multiply+0x44>
 800892e:	4602      	mov	r2, r0
 8008930:	4b42      	ldr	r3, [pc, #264]	; (8008a3c <__multiply+0x144>)
 8008932:	4843      	ldr	r0, [pc, #268]	; (8008a40 <__multiply+0x148>)
 8008934:	f240 115d 	movw	r1, #349	; 0x15d
 8008938:	f000 fcc6 	bl	80092c8 <__assert_func>
 800893c:	f100 0614 	add.w	r6, r0, #20
 8008940:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008944:	4633      	mov	r3, r6
 8008946:	2200      	movs	r2, #0
 8008948:	4543      	cmp	r3, r8
 800894a:	d31e      	bcc.n	800898a <__multiply+0x92>
 800894c:	f105 0c14 	add.w	ip, r5, #20
 8008950:	f104 0314 	add.w	r3, r4, #20
 8008954:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008958:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800895c:	9202      	str	r2, [sp, #8]
 800895e:	ebac 0205 	sub.w	r2, ip, r5
 8008962:	3a15      	subs	r2, #21
 8008964:	f022 0203 	bic.w	r2, r2, #3
 8008968:	3204      	adds	r2, #4
 800896a:	f105 0115 	add.w	r1, r5, #21
 800896e:	458c      	cmp	ip, r1
 8008970:	bf38      	it	cc
 8008972:	2204      	movcc	r2, #4
 8008974:	9201      	str	r2, [sp, #4]
 8008976:	9a02      	ldr	r2, [sp, #8]
 8008978:	9303      	str	r3, [sp, #12]
 800897a:	429a      	cmp	r2, r3
 800897c:	d808      	bhi.n	8008990 <__multiply+0x98>
 800897e:	2f00      	cmp	r7, #0
 8008980:	dc55      	bgt.n	8008a2e <__multiply+0x136>
 8008982:	6107      	str	r7, [r0, #16]
 8008984:	b005      	add	sp, #20
 8008986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800898a:	f843 2b04 	str.w	r2, [r3], #4
 800898e:	e7db      	b.n	8008948 <__multiply+0x50>
 8008990:	f8b3 a000 	ldrh.w	sl, [r3]
 8008994:	f1ba 0f00 	cmp.w	sl, #0
 8008998:	d020      	beq.n	80089dc <__multiply+0xe4>
 800899a:	f105 0e14 	add.w	lr, r5, #20
 800899e:	46b1      	mov	r9, r6
 80089a0:	2200      	movs	r2, #0
 80089a2:	f85e 4b04 	ldr.w	r4, [lr], #4
 80089a6:	f8d9 b000 	ldr.w	fp, [r9]
 80089aa:	b2a1      	uxth	r1, r4
 80089ac:	fa1f fb8b 	uxth.w	fp, fp
 80089b0:	fb0a b101 	mla	r1, sl, r1, fp
 80089b4:	4411      	add	r1, r2
 80089b6:	f8d9 2000 	ldr.w	r2, [r9]
 80089ba:	0c24      	lsrs	r4, r4, #16
 80089bc:	0c12      	lsrs	r2, r2, #16
 80089be:	fb0a 2404 	mla	r4, sl, r4, r2
 80089c2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80089c6:	b289      	uxth	r1, r1
 80089c8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80089cc:	45f4      	cmp	ip, lr
 80089ce:	f849 1b04 	str.w	r1, [r9], #4
 80089d2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80089d6:	d8e4      	bhi.n	80089a2 <__multiply+0xaa>
 80089d8:	9901      	ldr	r1, [sp, #4]
 80089da:	5072      	str	r2, [r6, r1]
 80089dc:	9a03      	ldr	r2, [sp, #12]
 80089de:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80089e2:	3304      	adds	r3, #4
 80089e4:	f1b9 0f00 	cmp.w	r9, #0
 80089e8:	d01f      	beq.n	8008a2a <__multiply+0x132>
 80089ea:	6834      	ldr	r4, [r6, #0]
 80089ec:	f105 0114 	add.w	r1, r5, #20
 80089f0:	46b6      	mov	lr, r6
 80089f2:	f04f 0a00 	mov.w	sl, #0
 80089f6:	880a      	ldrh	r2, [r1, #0]
 80089f8:	f8be b002 	ldrh.w	fp, [lr, #2]
 80089fc:	fb09 b202 	mla	r2, r9, r2, fp
 8008a00:	4492      	add	sl, r2
 8008a02:	b2a4      	uxth	r4, r4
 8008a04:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008a08:	f84e 4b04 	str.w	r4, [lr], #4
 8008a0c:	f851 4b04 	ldr.w	r4, [r1], #4
 8008a10:	f8be 2000 	ldrh.w	r2, [lr]
 8008a14:	0c24      	lsrs	r4, r4, #16
 8008a16:	fb09 2404 	mla	r4, r9, r4, r2
 8008a1a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008a1e:	458c      	cmp	ip, r1
 8008a20:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008a24:	d8e7      	bhi.n	80089f6 <__multiply+0xfe>
 8008a26:	9a01      	ldr	r2, [sp, #4]
 8008a28:	50b4      	str	r4, [r6, r2]
 8008a2a:	3604      	adds	r6, #4
 8008a2c:	e7a3      	b.n	8008976 <__multiply+0x7e>
 8008a2e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d1a5      	bne.n	8008982 <__multiply+0x8a>
 8008a36:	3f01      	subs	r7, #1
 8008a38:	e7a1      	b.n	800897e <__multiply+0x86>
 8008a3a:	bf00      	nop
 8008a3c:	0800a397 	.word	0x0800a397
 8008a40:	0800a408 	.word	0x0800a408

08008a44 <__pow5mult>:
 8008a44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a48:	4615      	mov	r5, r2
 8008a4a:	f012 0203 	ands.w	r2, r2, #3
 8008a4e:	4606      	mov	r6, r0
 8008a50:	460f      	mov	r7, r1
 8008a52:	d007      	beq.n	8008a64 <__pow5mult+0x20>
 8008a54:	4c25      	ldr	r4, [pc, #148]	; (8008aec <__pow5mult+0xa8>)
 8008a56:	3a01      	subs	r2, #1
 8008a58:	2300      	movs	r3, #0
 8008a5a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008a5e:	f7ff fe9b 	bl	8008798 <__multadd>
 8008a62:	4607      	mov	r7, r0
 8008a64:	10ad      	asrs	r5, r5, #2
 8008a66:	d03d      	beq.n	8008ae4 <__pow5mult+0xa0>
 8008a68:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008a6a:	b97c      	cbnz	r4, 8008a8c <__pow5mult+0x48>
 8008a6c:	2010      	movs	r0, #16
 8008a6e:	f7ff fe1b 	bl	80086a8 <malloc>
 8008a72:	4602      	mov	r2, r0
 8008a74:	6270      	str	r0, [r6, #36]	; 0x24
 8008a76:	b928      	cbnz	r0, 8008a84 <__pow5mult+0x40>
 8008a78:	4b1d      	ldr	r3, [pc, #116]	; (8008af0 <__pow5mult+0xac>)
 8008a7a:	481e      	ldr	r0, [pc, #120]	; (8008af4 <__pow5mult+0xb0>)
 8008a7c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008a80:	f000 fc22 	bl	80092c8 <__assert_func>
 8008a84:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008a88:	6004      	str	r4, [r0, #0]
 8008a8a:	60c4      	str	r4, [r0, #12]
 8008a8c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008a90:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008a94:	b94c      	cbnz	r4, 8008aaa <__pow5mult+0x66>
 8008a96:	f240 2171 	movw	r1, #625	; 0x271
 8008a9a:	4630      	mov	r0, r6
 8008a9c:	f7ff ff16 	bl	80088cc <__i2b>
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	f8c8 0008 	str.w	r0, [r8, #8]
 8008aa6:	4604      	mov	r4, r0
 8008aa8:	6003      	str	r3, [r0, #0]
 8008aaa:	f04f 0900 	mov.w	r9, #0
 8008aae:	07eb      	lsls	r3, r5, #31
 8008ab0:	d50a      	bpl.n	8008ac8 <__pow5mult+0x84>
 8008ab2:	4639      	mov	r1, r7
 8008ab4:	4622      	mov	r2, r4
 8008ab6:	4630      	mov	r0, r6
 8008ab8:	f7ff ff1e 	bl	80088f8 <__multiply>
 8008abc:	4639      	mov	r1, r7
 8008abe:	4680      	mov	r8, r0
 8008ac0:	4630      	mov	r0, r6
 8008ac2:	f7ff fe47 	bl	8008754 <_Bfree>
 8008ac6:	4647      	mov	r7, r8
 8008ac8:	106d      	asrs	r5, r5, #1
 8008aca:	d00b      	beq.n	8008ae4 <__pow5mult+0xa0>
 8008acc:	6820      	ldr	r0, [r4, #0]
 8008ace:	b938      	cbnz	r0, 8008ae0 <__pow5mult+0x9c>
 8008ad0:	4622      	mov	r2, r4
 8008ad2:	4621      	mov	r1, r4
 8008ad4:	4630      	mov	r0, r6
 8008ad6:	f7ff ff0f 	bl	80088f8 <__multiply>
 8008ada:	6020      	str	r0, [r4, #0]
 8008adc:	f8c0 9000 	str.w	r9, [r0]
 8008ae0:	4604      	mov	r4, r0
 8008ae2:	e7e4      	b.n	8008aae <__pow5mult+0x6a>
 8008ae4:	4638      	mov	r0, r7
 8008ae6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008aea:	bf00      	nop
 8008aec:	0800a558 	.word	0x0800a558
 8008af0:	0800a321 	.word	0x0800a321
 8008af4:	0800a408 	.word	0x0800a408

08008af8 <__lshift>:
 8008af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008afc:	460c      	mov	r4, r1
 8008afe:	6849      	ldr	r1, [r1, #4]
 8008b00:	6923      	ldr	r3, [r4, #16]
 8008b02:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008b06:	68a3      	ldr	r3, [r4, #8]
 8008b08:	4607      	mov	r7, r0
 8008b0a:	4691      	mov	r9, r2
 8008b0c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008b10:	f108 0601 	add.w	r6, r8, #1
 8008b14:	42b3      	cmp	r3, r6
 8008b16:	db0b      	blt.n	8008b30 <__lshift+0x38>
 8008b18:	4638      	mov	r0, r7
 8008b1a:	f7ff fddb 	bl	80086d4 <_Balloc>
 8008b1e:	4605      	mov	r5, r0
 8008b20:	b948      	cbnz	r0, 8008b36 <__lshift+0x3e>
 8008b22:	4602      	mov	r2, r0
 8008b24:	4b28      	ldr	r3, [pc, #160]	; (8008bc8 <__lshift+0xd0>)
 8008b26:	4829      	ldr	r0, [pc, #164]	; (8008bcc <__lshift+0xd4>)
 8008b28:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008b2c:	f000 fbcc 	bl	80092c8 <__assert_func>
 8008b30:	3101      	adds	r1, #1
 8008b32:	005b      	lsls	r3, r3, #1
 8008b34:	e7ee      	b.n	8008b14 <__lshift+0x1c>
 8008b36:	2300      	movs	r3, #0
 8008b38:	f100 0114 	add.w	r1, r0, #20
 8008b3c:	f100 0210 	add.w	r2, r0, #16
 8008b40:	4618      	mov	r0, r3
 8008b42:	4553      	cmp	r3, sl
 8008b44:	db33      	blt.n	8008bae <__lshift+0xb6>
 8008b46:	6920      	ldr	r0, [r4, #16]
 8008b48:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008b4c:	f104 0314 	add.w	r3, r4, #20
 8008b50:	f019 091f 	ands.w	r9, r9, #31
 8008b54:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008b58:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008b5c:	d02b      	beq.n	8008bb6 <__lshift+0xbe>
 8008b5e:	f1c9 0e20 	rsb	lr, r9, #32
 8008b62:	468a      	mov	sl, r1
 8008b64:	2200      	movs	r2, #0
 8008b66:	6818      	ldr	r0, [r3, #0]
 8008b68:	fa00 f009 	lsl.w	r0, r0, r9
 8008b6c:	4302      	orrs	r2, r0
 8008b6e:	f84a 2b04 	str.w	r2, [sl], #4
 8008b72:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b76:	459c      	cmp	ip, r3
 8008b78:	fa22 f20e 	lsr.w	r2, r2, lr
 8008b7c:	d8f3      	bhi.n	8008b66 <__lshift+0x6e>
 8008b7e:	ebac 0304 	sub.w	r3, ip, r4
 8008b82:	3b15      	subs	r3, #21
 8008b84:	f023 0303 	bic.w	r3, r3, #3
 8008b88:	3304      	adds	r3, #4
 8008b8a:	f104 0015 	add.w	r0, r4, #21
 8008b8e:	4584      	cmp	ip, r0
 8008b90:	bf38      	it	cc
 8008b92:	2304      	movcc	r3, #4
 8008b94:	50ca      	str	r2, [r1, r3]
 8008b96:	b10a      	cbz	r2, 8008b9c <__lshift+0xa4>
 8008b98:	f108 0602 	add.w	r6, r8, #2
 8008b9c:	3e01      	subs	r6, #1
 8008b9e:	4638      	mov	r0, r7
 8008ba0:	612e      	str	r6, [r5, #16]
 8008ba2:	4621      	mov	r1, r4
 8008ba4:	f7ff fdd6 	bl	8008754 <_Bfree>
 8008ba8:	4628      	mov	r0, r5
 8008baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bae:	f842 0f04 	str.w	r0, [r2, #4]!
 8008bb2:	3301      	adds	r3, #1
 8008bb4:	e7c5      	b.n	8008b42 <__lshift+0x4a>
 8008bb6:	3904      	subs	r1, #4
 8008bb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bbc:	f841 2f04 	str.w	r2, [r1, #4]!
 8008bc0:	459c      	cmp	ip, r3
 8008bc2:	d8f9      	bhi.n	8008bb8 <__lshift+0xc0>
 8008bc4:	e7ea      	b.n	8008b9c <__lshift+0xa4>
 8008bc6:	bf00      	nop
 8008bc8:	0800a397 	.word	0x0800a397
 8008bcc:	0800a408 	.word	0x0800a408

08008bd0 <__mcmp>:
 8008bd0:	b530      	push	{r4, r5, lr}
 8008bd2:	6902      	ldr	r2, [r0, #16]
 8008bd4:	690c      	ldr	r4, [r1, #16]
 8008bd6:	1b12      	subs	r2, r2, r4
 8008bd8:	d10e      	bne.n	8008bf8 <__mcmp+0x28>
 8008bda:	f100 0314 	add.w	r3, r0, #20
 8008bde:	3114      	adds	r1, #20
 8008be0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008be4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008be8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008bec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008bf0:	42a5      	cmp	r5, r4
 8008bf2:	d003      	beq.n	8008bfc <__mcmp+0x2c>
 8008bf4:	d305      	bcc.n	8008c02 <__mcmp+0x32>
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	4610      	mov	r0, r2
 8008bfa:	bd30      	pop	{r4, r5, pc}
 8008bfc:	4283      	cmp	r3, r0
 8008bfe:	d3f3      	bcc.n	8008be8 <__mcmp+0x18>
 8008c00:	e7fa      	b.n	8008bf8 <__mcmp+0x28>
 8008c02:	f04f 32ff 	mov.w	r2, #4294967295
 8008c06:	e7f7      	b.n	8008bf8 <__mcmp+0x28>

08008c08 <__mdiff>:
 8008c08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c0c:	460c      	mov	r4, r1
 8008c0e:	4606      	mov	r6, r0
 8008c10:	4611      	mov	r1, r2
 8008c12:	4620      	mov	r0, r4
 8008c14:	4617      	mov	r7, r2
 8008c16:	f7ff ffdb 	bl	8008bd0 <__mcmp>
 8008c1a:	1e05      	subs	r5, r0, #0
 8008c1c:	d110      	bne.n	8008c40 <__mdiff+0x38>
 8008c1e:	4629      	mov	r1, r5
 8008c20:	4630      	mov	r0, r6
 8008c22:	f7ff fd57 	bl	80086d4 <_Balloc>
 8008c26:	b930      	cbnz	r0, 8008c36 <__mdiff+0x2e>
 8008c28:	4b39      	ldr	r3, [pc, #228]	; (8008d10 <__mdiff+0x108>)
 8008c2a:	4602      	mov	r2, r0
 8008c2c:	f240 2132 	movw	r1, #562	; 0x232
 8008c30:	4838      	ldr	r0, [pc, #224]	; (8008d14 <__mdiff+0x10c>)
 8008c32:	f000 fb49 	bl	80092c8 <__assert_func>
 8008c36:	2301      	movs	r3, #1
 8008c38:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008c3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c40:	bfa4      	itt	ge
 8008c42:	463b      	movge	r3, r7
 8008c44:	4627      	movge	r7, r4
 8008c46:	4630      	mov	r0, r6
 8008c48:	6879      	ldr	r1, [r7, #4]
 8008c4a:	bfa6      	itte	ge
 8008c4c:	461c      	movge	r4, r3
 8008c4e:	2500      	movge	r5, #0
 8008c50:	2501      	movlt	r5, #1
 8008c52:	f7ff fd3f 	bl	80086d4 <_Balloc>
 8008c56:	b920      	cbnz	r0, 8008c62 <__mdiff+0x5a>
 8008c58:	4b2d      	ldr	r3, [pc, #180]	; (8008d10 <__mdiff+0x108>)
 8008c5a:	4602      	mov	r2, r0
 8008c5c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008c60:	e7e6      	b.n	8008c30 <__mdiff+0x28>
 8008c62:	693e      	ldr	r6, [r7, #16]
 8008c64:	60c5      	str	r5, [r0, #12]
 8008c66:	6925      	ldr	r5, [r4, #16]
 8008c68:	f107 0114 	add.w	r1, r7, #20
 8008c6c:	f104 0914 	add.w	r9, r4, #20
 8008c70:	f100 0e14 	add.w	lr, r0, #20
 8008c74:	f107 0210 	add.w	r2, r7, #16
 8008c78:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008c7c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008c80:	46f2      	mov	sl, lr
 8008c82:	2700      	movs	r7, #0
 8008c84:	f859 3b04 	ldr.w	r3, [r9], #4
 8008c88:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008c8c:	fa1f f883 	uxth.w	r8, r3
 8008c90:	fa17 f78b 	uxtah	r7, r7, fp
 8008c94:	0c1b      	lsrs	r3, r3, #16
 8008c96:	eba7 0808 	sub.w	r8, r7, r8
 8008c9a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008c9e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008ca2:	fa1f f888 	uxth.w	r8, r8
 8008ca6:	141f      	asrs	r7, r3, #16
 8008ca8:	454d      	cmp	r5, r9
 8008caa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008cae:	f84a 3b04 	str.w	r3, [sl], #4
 8008cb2:	d8e7      	bhi.n	8008c84 <__mdiff+0x7c>
 8008cb4:	1b2b      	subs	r3, r5, r4
 8008cb6:	3b15      	subs	r3, #21
 8008cb8:	f023 0303 	bic.w	r3, r3, #3
 8008cbc:	3304      	adds	r3, #4
 8008cbe:	3415      	adds	r4, #21
 8008cc0:	42a5      	cmp	r5, r4
 8008cc2:	bf38      	it	cc
 8008cc4:	2304      	movcc	r3, #4
 8008cc6:	4419      	add	r1, r3
 8008cc8:	4473      	add	r3, lr
 8008cca:	469e      	mov	lr, r3
 8008ccc:	460d      	mov	r5, r1
 8008cce:	4565      	cmp	r5, ip
 8008cd0:	d30e      	bcc.n	8008cf0 <__mdiff+0xe8>
 8008cd2:	f10c 0203 	add.w	r2, ip, #3
 8008cd6:	1a52      	subs	r2, r2, r1
 8008cd8:	f022 0203 	bic.w	r2, r2, #3
 8008cdc:	3903      	subs	r1, #3
 8008cde:	458c      	cmp	ip, r1
 8008ce0:	bf38      	it	cc
 8008ce2:	2200      	movcc	r2, #0
 8008ce4:	441a      	add	r2, r3
 8008ce6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008cea:	b17b      	cbz	r3, 8008d0c <__mdiff+0x104>
 8008cec:	6106      	str	r6, [r0, #16]
 8008cee:	e7a5      	b.n	8008c3c <__mdiff+0x34>
 8008cf0:	f855 8b04 	ldr.w	r8, [r5], #4
 8008cf4:	fa17 f488 	uxtah	r4, r7, r8
 8008cf8:	1422      	asrs	r2, r4, #16
 8008cfa:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8008cfe:	b2a4      	uxth	r4, r4
 8008d00:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008d04:	f84e 4b04 	str.w	r4, [lr], #4
 8008d08:	1417      	asrs	r7, r2, #16
 8008d0a:	e7e0      	b.n	8008cce <__mdiff+0xc6>
 8008d0c:	3e01      	subs	r6, #1
 8008d0e:	e7ea      	b.n	8008ce6 <__mdiff+0xde>
 8008d10:	0800a397 	.word	0x0800a397
 8008d14:	0800a408 	.word	0x0800a408

08008d18 <__d2b>:
 8008d18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008d1c:	4689      	mov	r9, r1
 8008d1e:	2101      	movs	r1, #1
 8008d20:	ec57 6b10 	vmov	r6, r7, d0
 8008d24:	4690      	mov	r8, r2
 8008d26:	f7ff fcd5 	bl	80086d4 <_Balloc>
 8008d2a:	4604      	mov	r4, r0
 8008d2c:	b930      	cbnz	r0, 8008d3c <__d2b+0x24>
 8008d2e:	4602      	mov	r2, r0
 8008d30:	4b25      	ldr	r3, [pc, #148]	; (8008dc8 <__d2b+0xb0>)
 8008d32:	4826      	ldr	r0, [pc, #152]	; (8008dcc <__d2b+0xb4>)
 8008d34:	f240 310a 	movw	r1, #778	; 0x30a
 8008d38:	f000 fac6 	bl	80092c8 <__assert_func>
 8008d3c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008d40:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008d44:	bb35      	cbnz	r5, 8008d94 <__d2b+0x7c>
 8008d46:	2e00      	cmp	r6, #0
 8008d48:	9301      	str	r3, [sp, #4]
 8008d4a:	d028      	beq.n	8008d9e <__d2b+0x86>
 8008d4c:	4668      	mov	r0, sp
 8008d4e:	9600      	str	r6, [sp, #0]
 8008d50:	f7ff fd8c 	bl	800886c <__lo0bits>
 8008d54:	9900      	ldr	r1, [sp, #0]
 8008d56:	b300      	cbz	r0, 8008d9a <__d2b+0x82>
 8008d58:	9a01      	ldr	r2, [sp, #4]
 8008d5a:	f1c0 0320 	rsb	r3, r0, #32
 8008d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d62:	430b      	orrs	r3, r1
 8008d64:	40c2      	lsrs	r2, r0
 8008d66:	6163      	str	r3, [r4, #20]
 8008d68:	9201      	str	r2, [sp, #4]
 8008d6a:	9b01      	ldr	r3, [sp, #4]
 8008d6c:	61a3      	str	r3, [r4, #24]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	bf14      	ite	ne
 8008d72:	2202      	movne	r2, #2
 8008d74:	2201      	moveq	r2, #1
 8008d76:	6122      	str	r2, [r4, #16]
 8008d78:	b1d5      	cbz	r5, 8008db0 <__d2b+0x98>
 8008d7a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008d7e:	4405      	add	r5, r0
 8008d80:	f8c9 5000 	str.w	r5, [r9]
 8008d84:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008d88:	f8c8 0000 	str.w	r0, [r8]
 8008d8c:	4620      	mov	r0, r4
 8008d8e:	b003      	add	sp, #12
 8008d90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008d98:	e7d5      	b.n	8008d46 <__d2b+0x2e>
 8008d9a:	6161      	str	r1, [r4, #20]
 8008d9c:	e7e5      	b.n	8008d6a <__d2b+0x52>
 8008d9e:	a801      	add	r0, sp, #4
 8008da0:	f7ff fd64 	bl	800886c <__lo0bits>
 8008da4:	9b01      	ldr	r3, [sp, #4]
 8008da6:	6163      	str	r3, [r4, #20]
 8008da8:	2201      	movs	r2, #1
 8008daa:	6122      	str	r2, [r4, #16]
 8008dac:	3020      	adds	r0, #32
 8008dae:	e7e3      	b.n	8008d78 <__d2b+0x60>
 8008db0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008db4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008db8:	f8c9 0000 	str.w	r0, [r9]
 8008dbc:	6918      	ldr	r0, [r3, #16]
 8008dbe:	f7ff fd35 	bl	800882c <__hi0bits>
 8008dc2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008dc6:	e7df      	b.n	8008d88 <__d2b+0x70>
 8008dc8:	0800a397 	.word	0x0800a397
 8008dcc:	0800a408 	.word	0x0800a408

08008dd0 <_calloc_r>:
 8008dd0:	b513      	push	{r0, r1, r4, lr}
 8008dd2:	434a      	muls	r2, r1
 8008dd4:	4611      	mov	r1, r2
 8008dd6:	9201      	str	r2, [sp, #4]
 8008dd8:	f000 f85a 	bl	8008e90 <_malloc_r>
 8008ddc:	4604      	mov	r4, r0
 8008dde:	b118      	cbz	r0, 8008de8 <_calloc_r+0x18>
 8008de0:	9a01      	ldr	r2, [sp, #4]
 8008de2:	2100      	movs	r1, #0
 8008de4:	f7fd fdfa 	bl	80069dc <memset>
 8008de8:	4620      	mov	r0, r4
 8008dea:	b002      	add	sp, #8
 8008dec:	bd10      	pop	{r4, pc}
	...

08008df0 <_free_r>:
 8008df0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008df2:	2900      	cmp	r1, #0
 8008df4:	d048      	beq.n	8008e88 <_free_r+0x98>
 8008df6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dfa:	9001      	str	r0, [sp, #4]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	f1a1 0404 	sub.w	r4, r1, #4
 8008e02:	bfb8      	it	lt
 8008e04:	18e4      	addlt	r4, r4, r3
 8008e06:	f000 faff 	bl	8009408 <__malloc_lock>
 8008e0a:	4a20      	ldr	r2, [pc, #128]	; (8008e8c <_free_r+0x9c>)
 8008e0c:	9801      	ldr	r0, [sp, #4]
 8008e0e:	6813      	ldr	r3, [r2, #0]
 8008e10:	4615      	mov	r5, r2
 8008e12:	b933      	cbnz	r3, 8008e22 <_free_r+0x32>
 8008e14:	6063      	str	r3, [r4, #4]
 8008e16:	6014      	str	r4, [r2, #0]
 8008e18:	b003      	add	sp, #12
 8008e1a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e1e:	f000 baf9 	b.w	8009414 <__malloc_unlock>
 8008e22:	42a3      	cmp	r3, r4
 8008e24:	d90b      	bls.n	8008e3e <_free_r+0x4e>
 8008e26:	6821      	ldr	r1, [r4, #0]
 8008e28:	1862      	adds	r2, r4, r1
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	bf04      	itt	eq
 8008e2e:	681a      	ldreq	r2, [r3, #0]
 8008e30:	685b      	ldreq	r3, [r3, #4]
 8008e32:	6063      	str	r3, [r4, #4]
 8008e34:	bf04      	itt	eq
 8008e36:	1852      	addeq	r2, r2, r1
 8008e38:	6022      	streq	r2, [r4, #0]
 8008e3a:	602c      	str	r4, [r5, #0]
 8008e3c:	e7ec      	b.n	8008e18 <_free_r+0x28>
 8008e3e:	461a      	mov	r2, r3
 8008e40:	685b      	ldr	r3, [r3, #4]
 8008e42:	b10b      	cbz	r3, 8008e48 <_free_r+0x58>
 8008e44:	42a3      	cmp	r3, r4
 8008e46:	d9fa      	bls.n	8008e3e <_free_r+0x4e>
 8008e48:	6811      	ldr	r1, [r2, #0]
 8008e4a:	1855      	adds	r5, r2, r1
 8008e4c:	42a5      	cmp	r5, r4
 8008e4e:	d10b      	bne.n	8008e68 <_free_r+0x78>
 8008e50:	6824      	ldr	r4, [r4, #0]
 8008e52:	4421      	add	r1, r4
 8008e54:	1854      	adds	r4, r2, r1
 8008e56:	42a3      	cmp	r3, r4
 8008e58:	6011      	str	r1, [r2, #0]
 8008e5a:	d1dd      	bne.n	8008e18 <_free_r+0x28>
 8008e5c:	681c      	ldr	r4, [r3, #0]
 8008e5e:	685b      	ldr	r3, [r3, #4]
 8008e60:	6053      	str	r3, [r2, #4]
 8008e62:	4421      	add	r1, r4
 8008e64:	6011      	str	r1, [r2, #0]
 8008e66:	e7d7      	b.n	8008e18 <_free_r+0x28>
 8008e68:	d902      	bls.n	8008e70 <_free_r+0x80>
 8008e6a:	230c      	movs	r3, #12
 8008e6c:	6003      	str	r3, [r0, #0]
 8008e6e:	e7d3      	b.n	8008e18 <_free_r+0x28>
 8008e70:	6825      	ldr	r5, [r4, #0]
 8008e72:	1961      	adds	r1, r4, r5
 8008e74:	428b      	cmp	r3, r1
 8008e76:	bf04      	itt	eq
 8008e78:	6819      	ldreq	r1, [r3, #0]
 8008e7a:	685b      	ldreq	r3, [r3, #4]
 8008e7c:	6063      	str	r3, [r4, #4]
 8008e7e:	bf04      	itt	eq
 8008e80:	1949      	addeq	r1, r1, r5
 8008e82:	6021      	streq	r1, [r4, #0]
 8008e84:	6054      	str	r4, [r2, #4]
 8008e86:	e7c7      	b.n	8008e18 <_free_r+0x28>
 8008e88:	b003      	add	sp, #12
 8008e8a:	bd30      	pop	{r4, r5, pc}
 8008e8c:	20000b8c 	.word	0x20000b8c

08008e90 <_malloc_r>:
 8008e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e92:	1ccd      	adds	r5, r1, #3
 8008e94:	f025 0503 	bic.w	r5, r5, #3
 8008e98:	3508      	adds	r5, #8
 8008e9a:	2d0c      	cmp	r5, #12
 8008e9c:	bf38      	it	cc
 8008e9e:	250c      	movcc	r5, #12
 8008ea0:	2d00      	cmp	r5, #0
 8008ea2:	4606      	mov	r6, r0
 8008ea4:	db01      	blt.n	8008eaa <_malloc_r+0x1a>
 8008ea6:	42a9      	cmp	r1, r5
 8008ea8:	d903      	bls.n	8008eb2 <_malloc_r+0x22>
 8008eaa:	230c      	movs	r3, #12
 8008eac:	6033      	str	r3, [r6, #0]
 8008eae:	2000      	movs	r0, #0
 8008eb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008eb2:	f000 faa9 	bl	8009408 <__malloc_lock>
 8008eb6:	4921      	ldr	r1, [pc, #132]	; (8008f3c <_malloc_r+0xac>)
 8008eb8:	680a      	ldr	r2, [r1, #0]
 8008eba:	4614      	mov	r4, r2
 8008ebc:	b99c      	cbnz	r4, 8008ee6 <_malloc_r+0x56>
 8008ebe:	4f20      	ldr	r7, [pc, #128]	; (8008f40 <_malloc_r+0xb0>)
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	b923      	cbnz	r3, 8008ece <_malloc_r+0x3e>
 8008ec4:	4621      	mov	r1, r4
 8008ec6:	4630      	mov	r0, r6
 8008ec8:	f000 f998 	bl	80091fc <_sbrk_r>
 8008ecc:	6038      	str	r0, [r7, #0]
 8008ece:	4629      	mov	r1, r5
 8008ed0:	4630      	mov	r0, r6
 8008ed2:	f000 f993 	bl	80091fc <_sbrk_r>
 8008ed6:	1c43      	adds	r3, r0, #1
 8008ed8:	d123      	bne.n	8008f22 <_malloc_r+0x92>
 8008eda:	230c      	movs	r3, #12
 8008edc:	6033      	str	r3, [r6, #0]
 8008ede:	4630      	mov	r0, r6
 8008ee0:	f000 fa98 	bl	8009414 <__malloc_unlock>
 8008ee4:	e7e3      	b.n	8008eae <_malloc_r+0x1e>
 8008ee6:	6823      	ldr	r3, [r4, #0]
 8008ee8:	1b5b      	subs	r3, r3, r5
 8008eea:	d417      	bmi.n	8008f1c <_malloc_r+0x8c>
 8008eec:	2b0b      	cmp	r3, #11
 8008eee:	d903      	bls.n	8008ef8 <_malloc_r+0x68>
 8008ef0:	6023      	str	r3, [r4, #0]
 8008ef2:	441c      	add	r4, r3
 8008ef4:	6025      	str	r5, [r4, #0]
 8008ef6:	e004      	b.n	8008f02 <_malloc_r+0x72>
 8008ef8:	6863      	ldr	r3, [r4, #4]
 8008efa:	42a2      	cmp	r2, r4
 8008efc:	bf0c      	ite	eq
 8008efe:	600b      	streq	r3, [r1, #0]
 8008f00:	6053      	strne	r3, [r2, #4]
 8008f02:	4630      	mov	r0, r6
 8008f04:	f000 fa86 	bl	8009414 <__malloc_unlock>
 8008f08:	f104 000b 	add.w	r0, r4, #11
 8008f0c:	1d23      	adds	r3, r4, #4
 8008f0e:	f020 0007 	bic.w	r0, r0, #7
 8008f12:	1ac2      	subs	r2, r0, r3
 8008f14:	d0cc      	beq.n	8008eb0 <_malloc_r+0x20>
 8008f16:	1a1b      	subs	r3, r3, r0
 8008f18:	50a3      	str	r3, [r4, r2]
 8008f1a:	e7c9      	b.n	8008eb0 <_malloc_r+0x20>
 8008f1c:	4622      	mov	r2, r4
 8008f1e:	6864      	ldr	r4, [r4, #4]
 8008f20:	e7cc      	b.n	8008ebc <_malloc_r+0x2c>
 8008f22:	1cc4      	adds	r4, r0, #3
 8008f24:	f024 0403 	bic.w	r4, r4, #3
 8008f28:	42a0      	cmp	r0, r4
 8008f2a:	d0e3      	beq.n	8008ef4 <_malloc_r+0x64>
 8008f2c:	1a21      	subs	r1, r4, r0
 8008f2e:	4630      	mov	r0, r6
 8008f30:	f000 f964 	bl	80091fc <_sbrk_r>
 8008f34:	3001      	adds	r0, #1
 8008f36:	d1dd      	bne.n	8008ef4 <_malloc_r+0x64>
 8008f38:	e7cf      	b.n	8008eda <_malloc_r+0x4a>
 8008f3a:	bf00      	nop
 8008f3c:	20000b8c 	.word	0x20000b8c
 8008f40:	20000b90 	.word	0x20000b90

08008f44 <__ssputs_r>:
 8008f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f48:	688e      	ldr	r6, [r1, #8]
 8008f4a:	429e      	cmp	r6, r3
 8008f4c:	4682      	mov	sl, r0
 8008f4e:	460c      	mov	r4, r1
 8008f50:	4690      	mov	r8, r2
 8008f52:	461f      	mov	r7, r3
 8008f54:	d838      	bhi.n	8008fc8 <__ssputs_r+0x84>
 8008f56:	898a      	ldrh	r2, [r1, #12]
 8008f58:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008f5c:	d032      	beq.n	8008fc4 <__ssputs_r+0x80>
 8008f5e:	6825      	ldr	r5, [r4, #0]
 8008f60:	6909      	ldr	r1, [r1, #16]
 8008f62:	eba5 0901 	sub.w	r9, r5, r1
 8008f66:	6965      	ldr	r5, [r4, #20]
 8008f68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008f6c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008f70:	3301      	adds	r3, #1
 8008f72:	444b      	add	r3, r9
 8008f74:	106d      	asrs	r5, r5, #1
 8008f76:	429d      	cmp	r5, r3
 8008f78:	bf38      	it	cc
 8008f7a:	461d      	movcc	r5, r3
 8008f7c:	0553      	lsls	r3, r2, #21
 8008f7e:	d531      	bpl.n	8008fe4 <__ssputs_r+0xa0>
 8008f80:	4629      	mov	r1, r5
 8008f82:	f7ff ff85 	bl	8008e90 <_malloc_r>
 8008f86:	4606      	mov	r6, r0
 8008f88:	b950      	cbnz	r0, 8008fa0 <__ssputs_r+0x5c>
 8008f8a:	230c      	movs	r3, #12
 8008f8c:	f8ca 3000 	str.w	r3, [sl]
 8008f90:	89a3      	ldrh	r3, [r4, #12]
 8008f92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f96:	81a3      	strh	r3, [r4, #12]
 8008f98:	f04f 30ff 	mov.w	r0, #4294967295
 8008f9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fa0:	6921      	ldr	r1, [r4, #16]
 8008fa2:	464a      	mov	r2, r9
 8008fa4:	f7ff fb88 	bl	80086b8 <memcpy>
 8008fa8:	89a3      	ldrh	r3, [r4, #12]
 8008faa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008fae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fb2:	81a3      	strh	r3, [r4, #12]
 8008fb4:	6126      	str	r6, [r4, #16]
 8008fb6:	6165      	str	r5, [r4, #20]
 8008fb8:	444e      	add	r6, r9
 8008fba:	eba5 0509 	sub.w	r5, r5, r9
 8008fbe:	6026      	str	r6, [r4, #0]
 8008fc0:	60a5      	str	r5, [r4, #8]
 8008fc2:	463e      	mov	r6, r7
 8008fc4:	42be      	cmp	r6, r7
 8008fc6:	d900      	bls.n	8008fca <__ssputs_r+0x86>
 8008fc8:	463e      	mov	r6, r7
 8008fca:	4632      	mov	r2, r6
 8008fcc:	6820      	ldr	r0, [r4, #0]
 8008fce:	4641      	mov	r1, r8
 8008fd0:	f000 fa00 	bl	80093d4 <memmove>
 8008fd4:	68a3      	ldr	r3, [r4, #8]
 8008fd6:	6822      	ldr	r2, [r4, #0]
 8008fd8:	1b9b      	subs	r3, r3, r6
 8008fda:	4432      	add	r2, r6
 8008fdc:	60a3      	str	r3, [r4, #8]
 8008fde:	6022      	str	r2, [r4, #0]
 8008fe0:	2000      	movs	r0, #0
 8008fe2:	e7db      	b.n	8008f9c <__ssputs_r+0x58>
 8008fe4:	462a      	mov	r2, r5
 8008fe6:	f000 fa1b 	bl	8009420 <_realloc_r>
 8008fea:	4606      	mov	r6, r0
 8008fec:	2800      	cmp	r0, #0
 8008fee:	d1e1      	bne.n	8008fb4 <__ssputs_r+0x70>
 8008ff0:	6921      	ldr	r1, [r4, #16]
 8008ff2:	4650      	mov	r0, sl
 8008ff4:	f7ff fefc 	bl	8008df0 <_free_r>
 8008ff8:	e7c7      	b.n	8008f8a <__ssputs_r+0x46>
	...

08008ffc <_svfiprintf_r>:
 8008ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009000:	4698      	mov	r8, r3
 8009002:	898b      	ldrh	r3, [r1, #12]
 8009004:	061b      	lsls	r3, r3, #24
 8009006:	b09d      	sub	sp, #116	; 0x74
 8009008:	4607      	mov	r7, r0
 800900a:	460d      	mov	r5, r1
 800900c:	4614      	mov	r4, r2
 800900e:	d50e      	bpl.n	800902e <_svfiprintf_r+0x32>
 8009010:	690b      	ldr	r3, [r1, #16]
 8009012:	b963      	cbnz	r3, 800902e <_svfiprintf_r+0x32>
 8009014:	2140      	movs	r1, #64	; 0x40
 8009016:	f7ff ff3b 	bl	8008e90 <_malloc_r>
 800901a:	6028      	str	r0, [r5, #0]
 800901c:	6128      	str	r0, [r5, #16]
 800901e:	b920      	cbnz	r0, 800902a <_svfiprintf_r+0x2e>
 8009020:	230c      	movs	r3, #12
 8009022:	603b      	str	r3, [r7, #0]
 8009024:	f04f 30ff 	mov.w	r0, #4294967295
 8009028:	e0d1      	b.n	80091ce <_svfiprintf_r+0x1d2>
 800902a:	2340      	movs	r3, #64	; 0x40
 800902c:	616b      	str	r3, [r5, #20]
 800902e:	2300      	movs	r3, #0
 8009030:	9309      	str	r3, [sp, #36]	; 0x24
 8009032:	2320      	movs	r3, #32
 8009034:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009038:	f8cd 800c 	str.w	r8, [sp, #12]
 800903c:	2330      	movs	r3, #48	; 0x30
 800903e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80091e8 <_svfiprintf_r+0x1ec>
 8009042:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009046:	f04f 0901 	mov.w	r9, #1
 800904a:	4623      	mov	r3, r4
 800904c:	469a      	mov	sl, r3
 800904e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009052:	b10a      	cbz	r2, 8009058 <_svfiprintf_r+0x5c>
 8009054:	2a25      	cmp	r2, #37	; 0x25
 8009056:	d1f9      	bne.n	800904c <_svfiprintf_r+0x50>
 8009058:	ebba 0b04 	subs.w	fp, sl, r4
 800905c:	d00b      	beq.n	8009076 <_svfiprintf_r+0x7a>
 800905e:	465b      	mov	r3, fp
 8009060:	4622      	mov	r2, r4
 8009062:	4629      	mov	r1, r5
 8009064:	4638      	mov	r0, r7
 8009066:	f7ff ff6d 	bl	8008f44 <__ssputs_r>
 800906a:	3001      	adds	r0, #1
 800906c:	f000 80aa 	beq.w	80091c4 <_svfiprintf_r+0x1c8>
 8009070:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009072:	445a      	add	r2, fp
 8009074:	9209      	str	r2, [sp, #36]	; 0x24
 8009076:	f89a 3000 	ldrb.w	r3, [sl]
 800907a:	2b00      	cmp	r3, #0
 800907c:	f000 80a2 	beq.w	80091c4 <_svfiprintf_r+0x1c8>
 8009080:	2300      	movs	r3, #0
 8009082:	f04f 32ff 	mov.w	r2, #4294967295
 8009086:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800908a:	f10a 0a01 	add.w	sl, sl, #1
 800908e:	9304      	str	r3, [sp, #16]
 8009090:	9307      	str	r3, [sp, #28]
 8009092:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009096:	931a      	str	r3, [sp, #104]	; 0x68
 8009098:	4654      	mov	r4, sl
 800909a:	2205      	movs	r2, #5
 800909c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090a0:	4851      	ldr	r0, [pc, #324]	; (80091e8 <_svfiprintf_r+0x1ec>)
 80090a2:	f7f7 f8a5 	bl	80001f0 <memchr>
 80090a6:	9a04      	ldr	r2, [sp, #16]
 80090a8:	b9d8      	cbnz	r0, 80090e2 <_svfiprintf_r+0xe6>
 80090aa:	06d0      	lsls	r0, r2, #27
 80090ac:	bf44      	itt	mi
 80090ae:	2320      	movmi	r3, #32
 80090b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090b4:	0711      	lsls	r1, r2, #28
 80090b6:	bf44      	itt	mi
 80090b8:	232b      	movmi	r3, #43	; 0x2b
 80090ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090be:	f89a 3000 	ldrb.w	r3, [sl]
 80090c2:	2b2a      	cmp	r3, #42	; 0x2a
 80090c4:	d015      	beq.n	80090f2 <_svfiprintf_r+0xf6>
 80090c6:	9a07      	ldr	r2, [sp, #28]
 80090c8:	4654      	mov	r4, sl
 80090ca:	2000      	movs	r0, #0
 80090cc:	f04f 0c0a 	mov.w	ip, #10
 80090d0:	4621      	mov	r1, r4
 80090d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80090d6:	3b30      	subs	r3, #48	; 0x30
 80090d8:	2b09      	cmp	r3, #9
 80090da:	d94e      	bls.n	800917a <_svfiprintf_r+0x17e>
 80090dc:	b1b0      	cbz	r0, 800910c <_svfiprintf_r+0x110>
 80090de:	9207      	str	r2, [sp, #28]
 80090e0:	e014      	b.n	800910c <_svfiprintf_r+0x110>
 80090e2:	eba0 0308 	sub.w	r3, r0, r8
 80090e6:	fa09 f303 	lsl.w	r3, r9, r3
 80090ea:	4313      	orrs	r3, r2
 80090ec:	9304      	str	r3, [sp, #16]
 80090ee:	46a2      	mov	sl, r4
 80090f0:	e7d2      	b.n	8009098 <_svfiprintf_r+0x9c>
 80090f2:	9b03      	ldr	r3, [sp, #12]
 80090f4:	1d19      	adds	r1, r3, #4
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	9103      	str	r1, [sp, #12]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	bfbb      	ittet	lt
 80090fe:	425b      	neglt	r3, r3
 8009100:	f042 0202 	orrlt.w	r2, r2, #2
 8009104:	9307      	strge	r3, [sp, #28]
 8009106:	9307      	strlt	r3, [sp, #28]
 8009108:	bfb8      	it	lt
 800910a:	9204      	strlt	r2, [sp, #16]
 800910c:	7823      	ldrb	r3, [r4, #0]
 800910e:	2b2e      	cmp	r3, #46	; 0x2e
 8009110:	d10c      	bne.n	800912c <_svfiprintf_r+0x130>
 8009112:	7863      	ldrb	r3, [r4, #1]
 8009114:	2b2a      	cmp	r3, #42	; 0x2a
 8009116:	d135      	bne.n	8009184 <_svfiprintf_r+0x188>
 8009118:	9b03      	ldr	r3, [sp, #12]
 800911a:	1d1a      	adds	r2, r3, #4
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	9203      	str	r2, [sp, #12]
 8009120:	2b00      	cmp	r3, #0
 8009122:	bfb8      	it	lt
 8009124:	f04f 33ff 	movlt.w	r3, #4294967295
 8009128:	3402      	adds	r4, #2
 800912a:	9305      	str	r3, [sp, #20]
 800912c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80091f8 <_svfiprintf_r+0x1fc>
 8009130:	7821      	ldrb	r1, [r4, #0]
 8009132:	2203      	movs	r2, #3
 8009134:	4650      	mov	r0, sl
 8009136:	f7f7 f85b 	bl	80001f0 <memchr>
 800913a:	b140      	cbz	r0, 800914e <_svfiprintf_r+0x152>
 800913c:	2340      	movs	r3, #64	; 0x40
 800913e:	eba0 000a 	sub.w	r0, r0, sl
 8009142:	fa03 f000 	lsl.w	r0, r3, r0
 8009146:	9b04      	ldr	r3, [sp, #16]
 8009148:	4303      	orrs	r3, r0
 800914a:	3401      	adds	r4, #1
 800914c:	9304      	str	r3, [sp, #16]
 800914e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009152:	4826      	ldr	r0, [pc, #152]	; (80091ec <_svfiprintf_r+0x1f0>)
 8009154:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009158:	2206      	movs	r2, #6
 800915a:	f7f7 f849 	bl	80001f0 <memchr>
 800915e:	2800      	cmp	r0, #0
 8009160:	d038      	beq.n	80091d4 <_svfiprintf_r+0x1d8>
 8009162:	4b23      	ldr	r3, [pc, #140]	; (80091f0 <_svfiprintf_r+0x1f4>)
 8009164:	bb1b      	cbnz	r3, 80091ae <_svfiprintf_r+0x1b2>
 8009166:	9b03      	ldr	r3, [sp, #12]
 8009168:	3307      	adds	r3, #7
 800916a:	f023 0307 	bic.w	r3, r3, #7
 800916e:	3308      	adds	r3, #8
 8009170:	9303      	str	r3, [sp, #12]
 8009172:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009174:	4433      	add	r3, r6
 8009176:	9309      	str	r3, [sp, #36]	; 0x24
 8009178:	e767      	b.n	800904a <_svfiprintf_r+0x4e>
 800917a:	fb0c 3202 	mla	r2, ip, r2, r3
 800917e:	460c      	mov	r4, r1
 8009180:	2001      	movs	r0, #1
 8009182:	e7a5      	b.n	80090d0 <_svfiprintf_r+0xd4>
 8009184:	2300      	movs	r3, #0
 8009186:	3401      	adds	r4, #1
 8009188:	9305      	str	r3, [sp, #20]
 800918a:	4619      	mov	r1, r3
 800918c:	f04f 0c0a 	mov.w	ip, #10
 8009190:	4620      	mov	r0, r4
 8009192:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009196:	3a30      	subs	r2, #48	; 0x30
 8009198:	2a09      	cmp	r2, #9
 800919a:	d903      	bls.n	80091a4 <_svfiprintf_r+0x1a8>
 800919c:	2b00      	cmp	r3, #0
 800919e:	d0c5      	beq.n	800912c <_svfiprintf_r+0x130>
 80091a0:	9105      	str	r1, [sp, #20]
 80091a2:	e7c3      	b.n	800912c <_svfiprintf_r+0x130>
 80091a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80091a8:	4604      	mov	r4, r0
 80091aa:	2301      	movs	r3, #1
 80091ac:	e7f0      	b.n	8009190 <_svfiprintf_r+0x194>
 80091ae:	ab03      	add	r3, sp, #12
 80091b0:	9300      	str	r3, [sp, #0]
 80091b2:	462a      	mov	r2, r5
 80091b4:	4b0f      	ldr	r3, [pc, #60]	; (80091f4 <_svfiprintf_r+0x1f8>)
 80091b6:	a904      	add	r1, sp, #16
 80091b8:	4638      	mov	r0, r7
 80091ba:	f7fd fcb7 	bl	8006b2c <_printf_float>
 80091be:	1c42      	adds	r2, r0, #1
 80091c0:	4606      	mov	r6, r0
 80091c2:	d1d6      	bne.n	8009172 <_svfiprintf_r+0x176>
 80091c4:	89ab      	ldrh	r3, [r5, #12]
 80091c6:	065b      	lsls	r3, r3, #25
 80091c8:	f53f af2c 	bmi.w	8009024 <_svfiprintf_r+0x28>
 80091cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80091ce:	b01d      	add	sp, #116	; 0x74
 80091d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091d4:	ab03      	add	r3, sp, #12
 80091d6:	9300      	str	r3, [sp, #0]
 80091d8:	462a      	mov	r2, r5
 80091da:	4b06      	ldr	r3, [pc, #24]	; (80091f4 <_svfiprintf_r+0x1f8>)
 80091dc:	a904      	add	r1, sp, #16
 80091de:	4638      	mov	r0, r7
 80091e0:	f7fd ff48 	bl	8007074 <_printf_i>
 80091e4:	e7eb      	b.n	80091be <_svfiprintf_r+0x1c2>
 80091e6:	bf00      	nop
 80091e8:	0800a564 	.word	0x0800a564
 80091ec:	0800a56e 	.word	0x0800a56e
 80091f0:	08006b2d 	.word	0x08006b2d
 80091f4:	08008f45 	.word	0x08008f45
 80091f8:	0800a56a 	.word	0x0800a56a

080091fc <_sbrk_r>:
 80091fc:	b538      	push	{r3, r4, r5, lr}
 80091fe:	4d06      	ldr	r5, [pc, #24]	; (8009218 <_sbrk_r+0x1c>)
 8009200:	2300      	movs	r3, #0
 8009202:	4604      	mov	r4, r0
 8009204:	4608      	mov	r0, r1
 8009206:	602b      	str	r3, [r5, #0]
 8009208:	f7f8 ffea 	bl	80021e0 <_sbrk>
 800920c:	1c43      	adds	r3, r0, #1
 800920e:	d102      	bne.n	8009216 <_sbrk_r+0x1a>
 8009210:	682b      	ldr	r3, [r5, #0]
 8009212:	b103      	cbz	r3, 8009216 <_sbrk_r+0x1a>
 8009214:	6023      	str	r3, [r4, #0]
 8009216:	bd38      	pop	{r3, r4, r5, pc}
 8009218:	20017630 	.word	0x20017630

0800921c <__sread>:
 800921c:	b510      	push	{r4, lr}
 800921e:	460c      	mov	r4, r1
 8009220:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009224:	f000 fa7c 	bl	8009720 <_read_r>
 8009228:	2800      	cmp	r0, #0
 800922a:	bfab      	itete	ge
 800922c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800922e:	89a3      	ldrhlt	r3, [r4, #12]
 8009230:	181b      	addge	r3, r3, r0
 8009232:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009236:	bfac      	ite	ge
 8009238:	6563      	strge	r3, [r4, #84]	; 0x54
 800923a:	81a3      	strhlt	r3, [r4, #12]
 800923c:	bd10      	pop	{r4, pc}

0800923e <__swrite>:
 800923e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009242:	461f      	mov	r7, r3
 8009244:	898b      	ldrh	r3, [r1, #12]
 8009246:	05db      	lsls	r3, r3, #23
 8009248:	4605      	mov	r5, r0
 800924a:	460c      	mov	r4, r1
 800924c:	4616      	mov	r6, r2
 800924e:	d505      	bpl.n	800925c <__swrite+0x1e>
 8009250:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009254:	2302      	movs	r3, #2
 8009256:	2200      	movs	r2, #0
 8009258:	f000 f898 	bl	800938c <_lseek_r>
 800925c:	89a3      	ldrh	r3, [r4, #12]
 800925e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009262:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009266:	81a3      	strh	r3, [r4, #12]
 8009268:	4632      	mov	r2, r6
 800926a:	463b      	mov	r3, r7
 800926c:	4628      	mov	r0, r5
 800926e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009272:	f000 b817 	b.w	80092a4 <_write_r>

08009276 <__sseek>:
 8009276:	b510      	push	{r4, lr}
 8009278:	460c      	mov	r4, r1
 800927a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800927e:	f000 f885 	bl	800938c <_lseek_r>
 8009282:	1c43      	adds	r3, r0, #1
 8009284:	89a3      	ldrh	r3, [r4, #12]
 8009286:	bf15      	itete	ne
 8009288:	6560      	strne	r0, [r4, #84]	; 0x54
 800928a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800928e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009292:	81a3      	strheq	r3, [r4, #12]
 8009294:	bf18      	it	ne
 8009296:	81a3      	strhne	r3, [r4, #12]
 8009298:	bd10      	pop	{r4, pc}

0800929a <__sclose>:
 800929a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800929e:	f000 b831 	b.w	8009304 <_close_r>
	...

080092a4 <_write_r>:
 80092a4:	b538      	push	{r3, r4, r5, lr}
 80092a6:	4d07      	ldr	r5, [pc, #28]	; (80092c4 <_write_r+0x20>)
 80092a8:	4604      	mov	r4, r0
 80092aa:	4608      	mov	r0, r1
 80092ac:	4611      	mov	r1, r2
 80092ae:	2200      	movs	r2, #0
 80092b0:	602a      	str	r2, [r5, #0]
 80092b2:	461a      	mov	r2, r3
 80092b4:	f7f8 f9ce 	bl	8001654 <_write>
 80092b8:	1c43      	adds	r3, r0, #1
 80092ba:	d102      	bne.n	80092c2 <_write_r+0x1e>
 80092bc:	682b      	ldr	r3, [r5, #0]
 80092be:	b103      	cbz	r3, 80092c2 <_write_r+0x1e>
 80092c0:	6023      	str	r3, [r4, #0]
 80092c2:	bd38      	pop	{r3, r4, r5, pc}
 80092c4:	20017630 	.word	0x20017630

080092c8 <__assert_func>:
 80092c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80092ca:	4614      	mov	r4, r2
 80092cc:	461a      	mov	r2, r3
 80092ce:	4b09      	ldr	r3, [pc, #36]	; (80092f4 <__assert_func+0x2c>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	4605      	mov	r5, r0
 80092d4:	68d8      	ldr	r0, [r3, #12]
 80092d6:	b14c      	cbz	r4, 80092ec <__assert_func+0x24>
 80092d8:	4b07      	ldr	r3, [pc, #28]	; (80092f8 <__assert_func+0x30>)
 80092da:	9100      	str	r1, [sp, #0]
 80092dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80092e0:	4906      	ldr	r1, [pc, #24]	; (80092fc <__assert_func+0x34>)
 80092e2:	462b      	mov	r3, r5
 80092e4:	f000 f81e 	bl	8009324 <fiprintf>
 80092e8:	f000 fa39 	bl	800975e <abort>
 80092ec:	4b04      	ldr	r3, [pc, #16]	; (8009300 <__assert_func+0x38>)
 80092ee:	461c      	mov	r4, r3
 80092f0:	e7f3      	b.n	80092da <__assert_func+0x12>
 80092f2:	bf00      	nop
 80092f4:	20000038 	.word	0x20000038
 80092f8:	0800a575 	.word	0x0800a575
 80092fc:	0800a582 	.word	0x0800a582
 8009300:	0800a5b0 	.word	0x0800a5b0

08009304 <_close_r>:
 8009304:	b538      	push	{r3, r4, r5, lr}
 8009306:	4d06      	ldr	r5, [pc, #24]	; (8009320 <_close_r+0x1c>)
 8009308:	2300      	movs	r3, #0
 800930a:	4604      	mov	r4, r0
 800930c:	4608      	mov	r0, r1
 800930e:	602b      	str	r3, [r5, #0]
 8009310:	f7f8 ff31 	bl	8002176 <_close>
 8009314:	1c43      	adds	r3, r0, #1
 8009316:	d102      	bne.n	800931e <_close_r+0x1a>
 8009318:	682b      	ldr	r3, [r5, #0]
 800931a:	b103      	cbz	r3, 800931e <_close_r+0x1a>
 800931c:	6023      	str	r3, [r4, #0]
 800931e:	bd38      	pop	{r3, r4, r5, pc}
 8009320:	20017630 	.word	0x20017630

08009324 <fiprintf>:
 8009324:	b40e      	push	{r1, r2, r3}
 8009326:	b503      	push	{r0, r1, lr}
 8009328:	4601      	mov	r1, r0
 800932a:	ab03      	add	r3, sp, #12
 800932c:	4805      	ldr	r0, [pc, #20]	; (8009344 <fiprintf+0x20>)
 800932e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009332:	6800      	ldr	r0, [r0, #0]
 8009334:	9301      	str	r3, [sp, #4]
 8009336:	f000 f8c3 	bl	80094c0 <_vfiprintf_r>
 800933a:	b002      	add	sp, #8
 800933c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009340:	b003      	add	sp, #12
 8009342:	4770      	bx	lr
 8009344:	20000038 	.word	0x20000038

08009348 <_fstat_r>:
 8009348:	b538      	push	{r3, r4, r5, lr}
 800934a:	4d07      	ldr	r5, [pc, #28]	; (8009368 <_fstat_r+0x20>)
 800934c:	2300      	movs	r3, #0
 800934e:	4604      	mov	r4, r0
 8009350:	4608      	mov	r0, r1
 8009352:	4611      	mov	r1, r2
 8009354:	602b      	str	r3, [r5, #0]
 8009356:	f7f8 ff1a 	bl	800218e <_fstat>
 800935a:	1c43      	adds	r3, r0, #1
 800935c:	d102      	bne.n	8009364 <_fstat_r+0x1c>
 800935e:	682b      	ldr	r3, [r5, #0]
 8009360:	b103      	cbz	r3, 8009364 <_fstat_r+0x1c>
 8009362:	6023      	str	r3, [r4, #0]
 8009364:	bd38      	pop	{r3, r4, r5, pc}
 8009366:	bf00      	nop
 8009368:	20017630 	.word	0x20017630

0800936c <_isatty_r>:
 800936c:	b538      	push	{r3, r4, r5, lr}
 800936e:	4d06      	ldr	r5, [pc, #24]	; (8009388 <_isatty_r+0x1c>)
 8009370:	2300      	movs	r3, #0
 8009372:	4604      	mov	r4, r0
 8009374:	4608      	mov	r0, r1
 8009376:	602b      	str	r3, [r5, #0]
 8009378:	f7f8 ff19 	bl	80021ae <_isatty>
 800937c:	1c43      	adds	r3, r0, #1
 800937e:	d102      	bne.n	8009386 <_isatty_r+0x1a>
 8009380:	682b      	ldr	r3, [r5, #0]
 8009382:	b103      	cbz	r3, 8009386 <_isatty_r+0x1a>
 8009384:	6023      	str	r3, [r4, #0]
 8009386:	bd38      	pop	{r3, r4, r5, pc}
 8009388:	20017630 	.word	0x20017630

0800938c <_lseek_r>:
 800938c:	b538      	push	{r3, r4, r5, lr}
 800938e:	4d07      	ldr	r5, [pc, #28]	; (80093ac <_lseek_r+0x20>)
 8009390:	4604      	mov	r4, r0
 8009392:	4608      	mov	r0, r1
 8009394:	4611      	mov	r1, r2
 8009396:	2200      	movs	r2, #0
 8009398:	602a      	str	r2, [r5, #0]
 800939a:	461a      	mov	r2, r3
 800939c:	f7f8 ff12 	bl	80021c4 <_lseek>
 80093a0:	1c43      	adds	r3, r0, #1
 80093a2:	d102      	bne.n	80093aa <_lseek_r+0x1e>
 80093a4:	682b      	ldr	r3, [r5, #0]
 80093a6:	b103      	cbz	r3, 80093aa <_lseek_r+0x1e>
 80093a8:	6023      	str	r3, [r4, #0]
 80093aa:	bd38      	pop	{r3, r4, r5, pc}
 80093ac:	20017630 	.word	0x20017630

080093b0 <__ascii_mbtowc>:
 80093b0:	b082      	sub	sp, #8
 80093b2:	b901      	cbnz	r1, 80093b6 <__ascii_mbtowc+0x6>
 80093b4:	a901      	add	r1, sp, #4
 80093b6:	b142      	cbz	r2, 80093ca <__ascii_mbtowc+0x1a>
 80093b8:	b14b      	cbz	r3, 80093ce <__ascii_mbtowc+0x1e>
 80093ba:	7813      	ldrb	r3, [r2, #0]
 80093bc:	600b      	str	r3, [r1, #0]
 80093be:	7812      	ldrb	r2, [r2, #0]
 80093c0:	1e10      	subs	r0, r2, #0
 80093c2:	bf18      	it	ne
 80093c4:	2001      	movne	r0, #1
 80093c6:	b002      	add	sp, #8
 80093c8:	4770      	bx	lr
 80093ca:	4610      	mov	r0, r2
 80093cc:	e7fb      	b.n	80093c6 <__ascii_mbtowc+0x16>
 80093ce:	f06f 0001 	mvn.w	r0, #1
 80093d2:	e7f8      	b.n	80093c6 <__ascii_mbtowc+0x16>

080093d4 <memmove>:
 80093d4:	4288      	cmp	r0, r1
 80093d6:	b510      	push	{r4, lr}
 80093d8:	eb01 0402 	add.w	r4, r1, r2
 80093dc:	d902      	bls.n	80093e4 <memmove+0x10>
 80093de:	4284      	cmp	r4, r0
 80093e0:	4623      	mov	r3, r4
 80093e2:	d807      	bhi.n	80093f4 <memmove+0x20>
 80093e4:	1e43      	subs	r3, r0, #1
 80093e6:	42a1      	cmp	r1, r4
 80093e8:	d008      	beq.n	80093fc <memmove+0x28>
 80093ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80093ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80093f2:	e7f8      	b.n	80093e6 <memmove+0x12>
 80093f4:	4402      	add	r2, r0
 80093f6:	4601      	mov	r1, r0
 80093f8:	428a      	cmp	r2, r1
 80093fa:	d100      	bne.n	80093fe <memmove+0x2a>
 80093fc:	bd10      	pop	{r4, pc}
 80093fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009402:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009406:	e7f7      	b.n	80093f8 <memmove+0x24>

08009408 <__malloc_lock>:
 8009408:	4801      	ldr	r0, [pc, #4]	; (8009410 <__malloc_lock+0x8>)
 800940a:	f7ff b8e6 	b.w	80085da <__retarget_lock_acquire_recursive>
 800940e:	bf00      	nop
 8009410:	20017628 	.word	0x20017628

08009414 <__malloc_unlock>:
 8009414:	4801      	ldr	r0, [pc, #4]	; (800941c <__malloc_unlock+0x8>)
 8009416:	f7ff b8e1 	b.w	80085dc <__retarget_lock_release_recursive>
 800941a:	bf00      	nop
 800941c:	20017628 	.word	0x20017628

08009420 <_realloc_r>:
 8009420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009422:	4607      	mov	r7, r0
 8009424:	4614      	mov	r4, r2
 8009426:	460e      	mov	r6, r1
 8009428:	b921      	cbnz	r1, 8009434 <_realloc_r+0x14>
 800942a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800942e:	4611      	mov	r1, r2
 8009430:	f7ff bd2e 	b.w	8008e90 <_malloc_r>
 8009434:	b922      	cbnz	r2, 8009440 <_realloc_r+0x20>
 8009436:	f7ff fcdb 	bl	8008df0 <_free_r>
 800943a:	4625      	mov	r5, r4
 800943c:	4628      	mov	r0, r5
 800943e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009440:	f000 f994 	bl	800976c <_malloc_usable_size_r>
 8009444:	42a0      	cmp	r0, r4
 8009446:	d20f      	bcs.n	8009468 <_realloc_r+0x48>
 8009448:	4621      	mov	r1, r4
 800944a:	4638      	mov	r0, r7
 800944c:	f7ff fd20 	bl	8008e90 <_malloc_r>
 8009450:	4605      	mov	r5, r0
 8009452:	2800      	cmp	r0, #0
 8009454:	d0f2      	beq.n	800943c <_realloc_r+0x1c>
 8009456:	4631      	mov	r1, r6
 8009458:	4622      	mov	r2, r4
 800945a:	f7ff f92d 	bl	80086b8 <memcpy>
 800945e:	4631      	mov	r1, r6
 8009460:	4638      	mov	r0, r7
 8009462:	f7ff fcc5 	bl	8008df0 <_free_r>
 8009466:	e7e9      	b.n	800943c <_realloc_r+0x1c>
 8009468:	4635      	mov	r5, r6
 800946a:	e7e7      	b.n	800943c <_realloc_r+0x1c>

0800946c <__sfputc_r>:
 800946c:	6893      	ldr	r3, [r2, #8]
 800946e:	3b01      	subs	r3, #1
 8009470:	2b00      	cmp	r3, #0
 8009472:	b410      	push	{r4}
 8009474:	6093      	str	r3, [r2, #8]
 8009476:	da08      	bge.n	800948a <__sfputc_r+0x1e>
 8009478:	6994      	ldr	r4, [r2, #24]
 800947a:	42a3      	cmp	r3, r4
 800947c:	db01      	blt.n	8009482 <__sfputc_r+0x16>
 800947e:	290a      	cmp	r1, #10
 8009480:	d103      	bne.n	800948a <__sfputc_r+0x1e>
 8009482:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009486:	f7fd bfb1 	b.w	80073ec <__swbuf_r>
 800948a:	6813      	ldr	r3, [r2, #0]
 800948c:	1c58      	adds	r0, r3, #1
 800948e:	6010      	str	r0, [r2, #0]
 8009490:	7019      	strb	r1, [r3, #0]
 8009492:	4608      	mov	r0, r1
 8009494:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009498:	4770      	bx	lr

0800949a <__sfputs_r>:
 800949a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800949c:	4606      	mov	r6, r0
 800949e:	460f      	mov	r7, r1
 80094a0:	4614      	mov	r4, r2
 80094a2:	18d5      	adds	r5, r2, r3
 80094a4:	42ac      	cmp	r4, r5
 80094a6:	d101      	bne.n	80094ac <__sfputs_r+0x12>
 80094a8:	2000      	movs	r0, #0
 80094aa:	e007      	b.n	80094bc <__sfputs_r+0x22>
 80094ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094b0:	463a      	mov	r2, r7
 80094b2:	4630      	mov	r0, r6
 80094b4:	f7ff ffda 	bl	800946c <__sfputc_r>
 80094b8:	1c43      	adds	r3, r0, #1
 80094ba:	d1f3      	bne.n	80094a4 <__sfputs_r+0xa>
 80094bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080094c0 <_vfiprintf_r>:
 80094c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094c4:	460d      	mov	r5, r1
 80094c6:	b09d      	sub	sp, #116	; 0x74
 80094c8:	4614      	mov	r4, r2
 80094ca:	4698      	mov	r8, r3
 80094cc:	4606      	mov	r6, r0
 80094ce:	b118      	cbz	r0, 80094d8 <_vfiprintf_r+0x18>
 80094d0:	6983      	ldr	r3, [r0, #24]
 80094d2:	b90b      	cbnz	r3, 80094d8 <_vfiprintf_r+0x18>
 80094d4:	f7fe ffde 	bl	8008494 <__sinit>
 80094d8:	4b89      	ldr	r3, [pc, #548]	; (8009700 <_vfiprintf_r+0x240>)
 80094da:	429d      	cmp	r5, r3
 80094dc:	d11b      	bne.n	8009516 <_vfiprintf_r+0x56>
 80094de:	6875      	ldr	r5, [r6, #4]
 80094e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80094e2:	07d9      	lsls	r1, r3, #31
 80094e4:	d405      	bmi.n	80094f2 <_vfiprintf_r+0x32>
 80094e6:	89ab      	ldrh	r3, [r5, #12]
 80094e8:	059a      	lsls	r2, r3, #22
 80094ea:	d402      	bmi.n	80094f2 <_vfiprintf_r+0x32>
 80094ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80094ee:	f7ff f874 	bl	80085da <__retarget_lock_acquire_recursive>
 80094f2:	89ab      	ldrh	r3, [r5, #12]
 80094f4:	071b      	lsls	r3, r3, #28
 80094f6:	d501      	bpl.n	80094fc <_vfiprintf_r+0x3c>
 80094f8:	692b      	ldr	r3, [r5, #16]
 80094fa:	b9eb      	cbnz	r3, 8009538 <_vfiprintf_r+0x78>
 80094fc:	4629      	mov	r1, r5
 80094fe:	4630      	mov	r0, r6
 8009500:	f7fd ffc6 	bl	8007490 <__swsetup_r>
 8009504:	b1c0      	cbz	r0, 8009538 <_vfiprintf_r+0x78>
 8009506:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009508:	07dc      	lsls	r4, r3, #31
 800950a:	d50e      	bpl.n	800952a <_vfiprintf_r+0x6a>
 800950c:	f04f 30ff 	mov.w	r0, #4294967295
 8009510:	b01d      	add	sp, #116	; 0x74
 8009512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009516:	4b7b      	ldr	r3, [pc, #492]	; (8009704 <_vfiprintf_r+0x244>)
 8009518:	429d      	cmp	r5, r3
 800951a:	d101      	bne.n	8009520 <_vfiprintf_r+0x60>
 800951c:	68b5      	ldr	r5, [r6, #8]
 800951e:	e7df      	b.n	80094e0 <_vfiprintf_r+0x20>
 8009520:	4b79      	ldr	r3, [pc, #484]	; (8009708 <_vfiprintf_r+0x248>)
 8009522:	429d      	cmp	r5, r3
 8009524:	bf08      	it	eq
 8009526:	68f5      	ldreq	r5, [r6, #12]
 8009528:	e7da      	b.n	80094e0 <_vfiprintf_r+0x20>
 800952a:	89ab      	ldrh	r3, [r5, #12]
 800952c:	0598      	lsls	r0, r3, #22
 800952e:	d4ed      	bmi.n	800950c <_vfiprintf_r+0x4c>
 8009530:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009532:	f7ff f853 	bl	80085dc <__retarget_lock_release_recursive>
 8009536:	e7e9      	b.n	800950c <_vfiprintf_r+0x4c>
 8009538:	2300      	movs	r3, #0
 800953a:	9309      	str	r3, [sp, #36]	; 0x24
 800953c:	2320      	movs	r3, #32
 800953e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009542:	f8cd 800c 	str.w	r8, [sp, #12]
 8009546:	2330      	movs	r3, #48	; 0x30
 8009548:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800970c <_vfiprintf_r+0x24c>
 800954c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009550:	f04f 0901 	mov.w	r9, #1
 8009554:	4623      	mov	r3, r4
 8009556:	469a      	mov	sl, r3
 8009558:	f813 2b01 	ldrb.w	r2, [r3], #1
 800955c:	b10a      	cbz	r2, 8009562 <_vfiprintf_r+0xa2>
 800955e:	2a25      	cmp	r2, #37	; 0x25
 8009560:	d1f9      	bne.n	8009556 <_vfiprintf_r+0x96>
 8009562:	ebba 0b04 	subs.w	fp, sl, r4
 8009566:	d00b      	beq.n	8009580 <_vfiprintf_r+0xc0>
 8009568:	465b      	mov	r3, fp
 800956a:	4622      	mov	r2, r4
 800956c:	4629      	mov	r1, r5
 800956e:	4630      	mov	r0, r6
 8009570:	f7ff ff93 	bl	800949a <__sfputs_r>
 8009574:	3001      	adds	r0, #1
 8009576:	f000 80aa 	beq.w	80096ce <_vfiprintf_r+0x20e>
 800957a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800957c:	445a      	add	r2, fp
 800957e:	9209      	str	r2, [sp, #36]	; 0x24
 8009580:	f89a 3000 	ldrb.w	r3, [sl]
 8009584:	2b00      	cmp	r3, #0
 8009586:	f000 80a2 	beq.w	80096ce <_vfiprintf_r+0x20e>
 800958a:	2300      	movs	r3, #0
 800958c:	f04f 32ff 	mov.w	r2, #4294967295
 8009590:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009594:	f10a 0a01 	add.w	sl, sl, #1
 8009598:	9304      	str	r3, [sp, #16]
 800959a:	9307      	str	r3, [sp, #28]
 800959c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80095a0:	931a      	str	r3, [sp, #104]	; 0x68
 80095a2:	4654      	mov	r4, sl
 80095a4:	2205      	movs	r2, #5
 80095a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095aa:	4858      	ldr	r0, [pc, #352]	; (800970c <_vfiprintf_r+0x24c>)
 80095ac:	f7f6 fe20 	bl	80001f0 <memchr>
 80095b0:	9a04      	ldr	r2, [sp, #16]
 80095b2:	b9d8      	cbnz	r0, 80095ec <_vfiprintf_r+0x12c>
 80095b4:	06d1      	lsls	r1, r2, #27
 80095b6:	bf44      	itt	mi
 80095b8:	2320      	movmi	r3, #32
 80095ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80095be:	0713      	lsls	r3, r2, #28
 80095c0:	bf44      	itt	mi
 80095c2:	232b      	movmi	r3, #43	; 0x2b
 80095c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80095c8:	f89a 3000 	ldrb.w	r3, [sl]
 80095cc:	2b2a      	cmp	r3, #42	; 0x2a
 80095ce:	d015      	beq.n	80095fc <_vfiprintf_r+0x13c>
 80095d0:	9a07      	ldr	r2, [sp, #28]
 80095d2:	4654      	mov	r4, sl
 80095d4:	2000      	movs	r0, #0
 80095d6:	f04f 0c0a 	mov.w	ip, #10
 80095da:	4621      	mov	r1, r4
 80095dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80095e0:	3b30      	subs	r3, #48	; 0x30
 80095e2:	2b09      	cmp	r3, #9
 80095e4:	d94e      	bls.n	8009684 <_vfiprintf_r+0x1c4>
 80095e6:	b1b0      	cbz	r0, 8009616 <_vfiprintf_r+0x156>
 80095e8:	9207      	str	r2, [sp, #28]
 80095ea:	e014      	b.n	8009616 <_vfiprintf_r+0x156>
 80095ec:	eba0 0308 	sub.w	r3, r0, r8
 80095f0:	fa09 f303 	lsl.w	r3, r9, r3
 80095f4:	4313      	orrs	r3, r2
 80095f6:	9304      	str	r3, [sp, #16]
 80095f8:	46a2      	mov	sl, r4
 80095fa:	e7d2      	b.n	80095a2 <_vfiprintf_r+0xe2>
 80095fc:	9b03      	ldr	r3, [sp, #12]
 80095fe:	1d19      	adds	r1, r3, #4
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	9103      	str	r1, [sp, #12]
 8009604:	2b00      	cmp	r3, #0
 8009606:	bfbb      	ittet	lt
 8009608:	425b      	neglt	r3, r3
 800960a:	f042 0202 	orrlt.w	r2, r2, #2
 800960e:	9307      	strge	r3, [sp, #28]
 8009610:	9307      	strlt	r3, [sp, #28]
 8009612:	bfb8      	it	lt
 8009614:	9204      	strlt	r2, [sp, #16]
 8009616:	7823      	ldrb	r3, [r4, #0]
 8009618:	2b2e      	cmp	r3, #46	; 0x2e
 800961a:	d10c      	bne.n	8009636 <_vfiprintf_r+0x176>
 800961c:	7863      	ldrb	r3, [r4, #1]
 800961e:	2b2a      	cmp	r3, #42	; 0x2a
 8009620:	d135      	bne.n	800968e <_vfiprintf_r+0x1ce>
 8009622:	9b03      	ldr	r3, [sp, #12]
 8009624:	1d1a      	adds	r2, r3, #4
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	9203      	str	r2, [sp, #12]
 800962a:	2b00      	cmp	r3, #0
 800962c:	bfb8      	it	lt
 800962e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009632:	3402      	adds	r4, #2
 8009634:	9305      	str	r3, [sp, #20]
 8009636:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800971c <_vfiprintf_r+0x25c>
 800963a:	7821      	ldrb	r1, [r4, #0]
 800963c:	2203      	movs	r2, #3
 800963e:	4650      	mov	r0, sl
 8009640:	f7f6 fdd6 	bl	80001f0 <memchr>
 8009644:	b140      	cbz	r0, 8009658 <_vfiprintf_r+0x198>
 8009646:	2340      	movs	r3, #64	; 0x40
 8009648:	eba0 000a 	sub.w	r0, r0, sl
 800964c:	fa03 f000 	lsl.w	r0, r3, r0
 8009650:	9b04      	ldr	r3, [sp, #16]
 8009652:	4303      	orrs	r3, r0
 8009654:	3401      	adds	r4, #1
 8009656:	9304      	str	r3, [sp, #16]
 8009658:	f814 1b01 	ldrb.w	r1, [r4], #1
 800965c:	482c      	ldr	r0, [pc, #176]	; (8009710 <_vfiprintf_r+0x250>)
 800965e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009662:	2206      	movs	r2, #6
 8009664:	f7f6 fdc4 	bl	80001f0 <memchr>
 8009668:	2800      	cmp	r0, #0
 800966a:	d03f      	beq.n	80096ec <_vfiprintf_r+0x22c>
 800966c:	4b29      	ldr	r3, [pc, #164]	; (8009714 <_vfiprintf_r+0x254>)
 800966e:	bb1b      	cbnz	r3, 80096b8 <_vfiprintf_r+0x1f8>
 8009670:	9b03      	ldr	r3, [sp, #12]
 8009672:	3307      	adds	r3, #7
 8009674:	f023 0307 	bic.w	r3, r3, #7
 8009678:	3308      	adds	r3, #8
 800967a:	9303      	str	r3, [sp, #12]
 800967c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800967e:	443b      	add	r3, r7
 8009680:	9309      	str	r3, [sp, #36]	; 0x24
 8009682:	e767      	b.n	8009554 <_vfiprintf_r+0x94>
 8009684:	fb0c 3202 	mla	r2, ip, r2, r3
 8009688:	460c      	mov	r4, r1
 800968a:	2001      	movs	r0, #1
 800968c:	e7a5      	b.n	80095da <_vfiprintf_r+0x11a>
 800968e:	2300      	movs	r3, #0
 8009690:	3401      	adds	r4, #1
 8009692:	9305      	str	r3, [sp, #20]
 8009694:	4619      	mov	r1, r3
 8009696:	f04f 0c0a 	mov.w	ip, #10
 800969a:	4620      	mov	r0, r4
 800969c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096a0:	3a30      	subs	r2, #48	; 0x30
 80096a2:	2a09      	cmp	r2, #9
 80096a4:	d903      	bls.n	80096ae <_vfiprintf_r+0x1ee>
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d0c5      	beq.n	8009636 <_vfiprintf_r+0x176>
 80096aa:	9105      	str	r1, [sp, #20]
 80096ac:	e7c3      	b.n	8009636 <_vfiprintf_r+0x176>
 80096ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80096b2:	4604      	mov	r4, r0
 80096b4:	2301      	movs	r3, #1
 80096b6:	e7f0      	b.n	800969a <_vfiprintf_r+0x1da>
 80096b8:	ab03      	add	r3, sp, #12
 80096ba:	9300      	str	r3, [sp, #0]
 80096bc:	462a      	mov	r2, r5
 80096be:	4b16      	ldr	r3, [pc, #88]	; (8009718 <_vfiprintf_r+0x258>)
 80096c0:	a904      	add	r1, sp, #16
 80096c2:	4630      	mov	r0, r6
 80096c4:	f7fd fa32 	bl	8006b2c <_printf_float>
 80096c8:	4607      	mov	r7, r0
 80096ca:	1c78      	adds	r0, r7, #1
 80096cc:	d1d6      	bne.n	800967c <_vfiprintf_r+0x1bc>
 80096ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80096d0:	07d9      	lsls	r1, r3, #31
 80096d2:	d405      	bmi.n	80096e0 <_vfiprintf_r+0x220>
 80096d4:	89ab      	ldrh	r3, [r5, #12]
 80096d6:	059a      	lsls	r2, r3, #22
 80096d8:	d402      	bmi.n	80096e0 <_vfiprintf_r+0x220>
 80096da:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80096dc:	f7fe ff7e 	bl	80085dc <__retarget_lock_release_recursive>
 80096e0:	89ab      	ldrh	r3, [r5, #12]
 80096e2:	065b      	lsls	r3, r3, #25
 80096e4:	f53f af12 	bmi.w	800950c <_vfiprintf_r+0x4c>
 80096e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80096ea:	e711      	b.n	8009510 <_vfiprintf_r+0x50>
 80096ec:	ab03      	add	r3, sp, #12
 80096ee:	9300      	str	r3, [sp, #0]
 80096f0:	462a      	mov	r2, r5
 80096f2:	4b09      	ldr	r3, [pc, #36]	; (8009718 <_vfiprintf_r+0x258>)
 80096f4:	a904      	add	r1, sp, #16
 80096f6:	4630      	mov	r0, r6
 80096f8:	f7fd fcbc 	bl	8007074 <_printf_i>
 80096fc:	e7e4      	b.n	80096c8 <_vfiprintf_r+0x208>
 80096fe:	bf00      	nop
 8009700:	0800a3c8 	.word	0x0800a3c8
 8009704:	0800a3e8 	.word	0x0800a3e8
 8009708:	0800a3a8 	.word	0x0800a3a8
 800970c:	0800a564 	.word	0x0800a564
 8009710:	0800a56e 	.word	0x0800a56e
 8009714:	08006b2d 	.word	0x08006b2d
 8009718:	0800949b 	.word	0x0800949b
 800971c:	0800a56a 	.word	0x0800a56a

08009720 <_read_r>:
 8009720:	b538      	push	{r3, r4, r5, lr}
 8009722:	4d07      	ldr	r5, [pc, #28]	; (8009740 <_read_r+0x20>)
 8009724:	4604      	mov	r4, r0
 8009726:	4608      	mov	r0, r1
 8009728:	4611      	mov	r1, r2
 800972a:	2200      	movs	r2, #0
 800972c:	602a      	str	r2, [r5, #0]
 800972e:	461a      	mov	r2, r3
 8009730:	f7f8 fd04 	bl	800213c <_read>
 8009734:	1c43      	adds	r3, r0, #1
 8009736:	d102      	bne.n	800973e <_read_r+0x1e>
 8009738:	682b      	ldr	r3, [r5, #0]
 800973a:	b103      	cbz	r3, 800973e <_read_r+0x1e>
 800973c:	6023      	str	r3, [r4, #0]
 800973e:	bd38      	pop	{r3, r4, r5, pc}
 8009740:	20017630 	.word	0x20017630

08009744 <__ascii_wctomb>:
 8009744:	b149      	cbz	r1, 800975a <__ascii_wctomb+0x16>
 8009746:	2aff      	cmp	r2, #255	; 0xff
 8009748:	bf85      	ittet	hi
 800974a:	238a      	movhi	r3, #138	; 0x8a
 800974c:	6003      	strhi	r3, [r0, #0]
 800974e:	700a      	strbls	r2, [r1, #0]
 8009750:	f04f 30ff 	movhi.w	r0, #4294967295
 8009754:	bf98      	it	ls
 8009756:	2001      	movls	r0, #1
 8009758:	4770      	bx	lr
 800975a:	4608      	mov	r0, r1
 800975c:	4770      	bx	lr

0800975e <abort>:
 800975e:	b508      	push	{r3, lr}
 8009760:	2006      	movs	r0, #6
 8009762:	f000 f833 	bl	80097cc <raise>
 8009766:	2001      	movs	r0, #1
 8009768:	f7f8 fcde 	bl	8002128 <_exit>

0800976c <_malloc_usable_size_r>:
 800976c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009770:	1f18      	subs	r0, r3, #4
 8009772:	2b00      	cmp	r3, #0
 8009774:	bfbc      	itt	lt
 8009776:	580b      	ldrlt	r3, [r1, r0]
 8009778:	18c0      	addlt	r0, r0, r3
 800977a:	4770      	bx	lr

0800977c <_raise_r>:
 800977c:	291f      	cmp	r1, #31
 800977e:	b538      	push	{r3, r4, r5, lr}
 8009780:	4604      	mov	r4, r0
 8009782:	460d      	mov	r5, r1
 8009784:	d904      	bls.n	8009790 <_raise_r+0x14>
 8009786:	2316      	movs	r3, #22
 8009788:	6003      	str	r3, [r0, #0]
 800978a:	f04f 30ff 	mov.w	r0, #4294967295
 800978e:	bd38      	pop	{r3, r4, r5, pc}
 8009790:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009792:	b112      	cbz	r2, 800979a <_raise_r+0x1e>
 8009794:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009798:	b94b      	cbnz	r3, 80097ae <_raise_r+0x32>
 800979a:	4620      	mov	r0, r4
 800979c:	f000 f830 	bl	8009800 <_getpid_r>
 80097a0:	462a      	mov	r2, r5
 80097a2:	4601      	mov	r1, r0
 80097a4:	4620      	mov	r0, r4
 80097a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80097aa:	f000 b817 	b.w	80097dc <_kill_r>
 80097ae:	2b01      	cmp	r3, #1
 80097b0:	d00a      	beq.n	80097c8 <_raise_r+0x4c>
 80097b2:	1c59      	adds	r1, r3, #1
 80097b4:	d103      	bne.n	80097be <_raise_r+0x42>
 80097b6:	2316      	movs	r3, #22
 80097b8:	6003      	str	r3, [r0, #0]
 80097ba:	2001      	movs	r0, #1
 80097bc:	e7e7      	b.n	800978e <_raise_r+0x12>
 80097be:	2400      	movs	r4, #0
 80097c0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80097c4:	4628      	mov	r0, r5
 80097c6:	4798      	blx	r3
 80097c8:	2000      	movs	r0, #0
 80097ca:	e7e0      	b.n	800978e <_raise_r+0x12>

080097cc <raise>:
 80097cc:	4b02      	ldr	r3, [pc, #8]	; (80097d8 <raise+0xc>)
 80097ce:	4601      	mov	r1, r0
 80097d0:	6818      	ldr	r0, [r3, #0]
 80097d2:	f7ff bfd3 	b.w	800977c <_raise_r>
 80097d6:	bf00      	nop
 80097d8:	20000038 	.word	0x20000038

080097dc <_kill_r>:
 80097dc:	b538      	push	{r3, r4, r5, lr}
 80097de:	4d07      	ldr	r5, [pc, #28]	; (80097fc <_kill_r+0x20>)
 80097e0:	2300      	movs	r3, #0
 80097e2:	4604      	mov	r4, r0
 80097e4:	4608      	mov	r0, r1
 80097e6:	4611      	mov	r1, r2
 80097e8:	602b      	str	r3, [r5, #0]
 80097ea:	f7f8 fc8d 	bl	8002108 <_kill>
 80097ee:	1c43      	adds	r3, r0, #1
 80097f0:	d102      	bne.n	80097f8 <_kill_r+0x1c>
 80097f2:	682b      	ldr	r3, [r5, #0]
 80097f4:	b103      	cbz	r3, 80097f8 <_kill_r+0x1c>
 80097f6:	6023      	str	r3, [r4, #0]
 80097f8:	bd38      	pop	{r3, r4, r5, pc}
 80097fa:	bf00      	nop
 80097fc:	20017630 	.word	0x20017630

08009800 <_getpid_r>:
 8009800:	f7f8 bc7a 	b.w	80020f8 <_getpid>

08009804 <_init>:
 8009804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009806:	bf00      	nop
 8009808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800980a:	bc08      	pop	{r3}
 800980c:	469e      	mov	lr, r3
 800980e:	4770      	bx	lr

08009810 <_fini>:
 8009810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009812:	bf00      	nop
 8009814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009816:	bc08      	pop	{r3}
 8009818:	469e      	mov	lr, r3
 800981a:	4770      	bx	lr
