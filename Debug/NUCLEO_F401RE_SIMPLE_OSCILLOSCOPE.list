
NUCLEO_F401RE_SIMPLE_OSCILLOSCOPE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009684  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e9c  08009828  08009828  00019828  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a6c4  0800a6c4  00020208  2**0
                  CONTENTS
  4 .ARM          00000008  0800a6c4  0800a6c4  0001a6c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a6cc  0800a6cc  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a6cc  0800a6cc  0001a6cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a6d0  0800a6d0  0001a6d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  0800a6d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001742c  20000208  0800a8dc  00020208  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20017634  0800a8dc  00027634  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 12 .debug_info   000192ad  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ff3  00000000  00000000  000394e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001228  00000000  00000000  0003c4d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001110  00000000  00000000  0003d700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019f9c  00000000  00000000  0003e810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001536c  00000000  00000000  000587ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009dacc  00000000  00000000  0006db18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010b5e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e94  00000000  00000000  0010b638  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000208 	.word	0x20000208
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800980c 	.word	0x0800980c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000020c 	.word	0x2000020c
 80001dc:	0800980c 	.word	0x0800980c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96e 	b.w	8000f4c <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468c      	mov	ip, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8083 	bne.w	8000d9e <__udivmoddi4+0x116>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d947      	bls.n	8000d2e <__udivmoddi4+0xa6>
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	b142      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	f1c2 0020 	rsb	r0, r2, #32
 8000ca8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4097      	lsls	r7, r2
 8000cb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc0:	fa1f fe87 	uxth.w	lr, r7
 8000cc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cda:	f080 8119 	bcs.w	8000f10 <__udivmoddi4+0x288>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8116 	bls.w	8000f10 <__udivmoddi4+0x288>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8105 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8102 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d18:	eba4 040e 	sub.w	r4, r4, lr
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	b11d      	cbz	r5, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c5 4300 	strd	r4, r3, [r5]
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xaa>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d150      	bne.n	8000ddc <__udivmoddi4+0x154>
 8000d3a:	1bcb      	subs	r3, r1, r7
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	2601      	movs	r6, #1
 8000d46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb08 f30c 	mul.w	r3, r8, ip
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0xe2>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	f200 80e9 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1ac9      	subs	r1, r1, r3
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x10c>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x10a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80d9 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e7bf      	b.n	8000d1e <__udivmoddi4+0x96>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x12e>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <__udivmoddi4+0x282>
 8000da8:	2600      	movs	r6, #0
 8000daa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dae:	4630      	mov	r0, r6
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f683 	clz	r6, r3
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d14a      	bne.n	8000e54 <__udivmoddi4+0x1cc>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0x140>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80b8 	bhi.w	8000f38 <__udivmoddi4+0x2b0>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0103 	sbc.w	r1, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0a8      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000dd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f603 	lsr.w	r6, r0, r3
 8000de4:	4097      	lsls	r7, r2
 8000de6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df8:	fa1f f887 	uxth.w	r8, r7
 8000dfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb06 f108 	mul.w	r1, r6, r8
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x19c>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e16:	f080 808d 	bcs.w	8000f34 <__udivmoddi4+0x2ac>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 808a 	bls.w	8000f34 <__udivmoddi4+0x2ac>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b281      	uxth	r1, r0
 8000e28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb00 f308 	mul.w	r3, r0, r8
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x1c4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e42:	d273      	bcs.n	8000f2c <__udivmoddi4+0x2a4>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d971      	bls.n	8000f2c <__udivmoddi4+0x2a4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4439      	add	r1, r7
 8000e4c:	1acb      	subs	r3, r1, r3
 8000e4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e52:	e778      	b.n	8000d46 <__udivmoddi4+0xbe>
 8000e54:	f1c6 0c20 	rsb	ip, r6, #32
 8000e58:	fa03 f406 	lsl.w	r4, r3, r6
 8000e5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e60:	431c      	orrs	r4, r3
 8000e62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e66:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e72:	431f      	orrs	r7, r3
 8000e74:	0c3b      	lsrs	r3, r7, #16
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fa1f f884 	uxth.w	r8, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e86:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8a:	458a      	cmp	sl, r1
 8000e8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e90:	fa00 f306 	lsl.w	r3, r0, r6
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x220>
 8000e96:	1861      	adds	r1, r4, r1
 8000e98:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e9c:	d248      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	d946      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4421      	add	r1, r4
 8000ea8:	eba1 010a 	sub.w	r1, r1, sl
 8000eac:	b2bf      	uxth	r7, r7
 8000eae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eba:	fb00 f808 	mul.w	r8, r0, r8
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x24a>
 8000ec2:	19e7      	adds	r7, r4, r7
 8000ec4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec8:	d22e      	bcs.n	8000f28 <__udivmoddi4+0x2a0>
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d92c      	bls.n	8000f28 <__udivmoddi4+0x2a0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4427      	add	r7, r4
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	eba7 0708 	sub.w	r7, r7, r8
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	454f      	cmp	r7, r9
 8000ee0:	46c6      	mov	lr, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	d31a      	bcc.n	8000f1c <__udivmoddi4+0x294>
 8000ee6:	d017      	beq.n	8000f18 <__udivmoddi4+0x290>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x27a>
 8000eea:	ebb3 020e 	subs.w	r2, r3, lr
 8000eee:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef6:	40f2      	lsrs	r2, r6
 8000ef8:	ea4c 0202 	orr.w	r2, ip, r2
 8000efc:	40f7      	lsrs	r7, r6
 8000efe:	e9c5 2700 	strd	r2, r7, [r5]
 8000f02:	2600      	movs	r6, #0
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e70b      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6fd      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f18:	4543      	cmp	r3, r8
 8000f1a:	d2e5      	bcs.n	8000ee8 <__udivmoddi4+0x260>
 8000f1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f20:	eb69 0104 	sbc.w	r1, r9, r4
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7df      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e7d2      	b.n	8000ed2 <__udivmoddi4+0x24a>
 8000f2c:	4660      	mov	r0, ip
 8000f2e:	e78d      	b.n	8000e4c <__udivmoddi4+0x1c4>
 8000f30:	4681      	mov	r9, r0
 8000f32:	e7b9      	b.n	8000ea8 <__udivmoddi4+0x220>
 8000f34:	4666      	mov	r6, ip
 8000f36:	e775      	b.n	8000e24 <__udivmoddi4+0x19c>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e74a      	b.n	8000dd2 <__udivmoddi4+0x14a>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	4439      	add	r1, r7
 8000f42:	e713      	b.n	8000d6c <__udivmoddi4+0xe4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	443c      	add	r4, r7
 8000f48:	e724      	b.n	8000d94 <__udivmoddi4+0x10c>
 8000f4a:	bf00      	nop

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f58:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f5c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000f60:	f003 0301 	and.w	r3, r3, #1
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d013      	beq.n	8000f90 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000f68:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f6c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000f70:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d00b      	beq.n	8000f90 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000f78:	e000      	b.n	8000f7c <ITM_SendChar+0x2c>
    {
      __NOP();
 8000f7a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000f7c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d0f9      	beq.n	8000f7a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000f86:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	b2d2      	uxtb	r2, r2
 8000f8e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000f90:	687b      	ldr	r3, [r7, #4]
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
	...

08000fa0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fa4:	f001 f992 	bl	80022cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fa8:	f000 f836 	bl	8001018 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fac:	f000 fab2 	bl	8001514 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000fb0:	f000 fa5e 	bl	8001470 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8000fb4:	f000 fa86 	bl	80014c4 <MX_DMA_Init>
  MX_SPI1_Init();
 8000fb8:	f000 f90e 	bl	80011d8 <MX_SPI1_Init>

  MX_ADC1_Init();
 8000fbc:	f000 f898 	bl	80010f0 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000fc0:	f000 f940 	bl	8001244 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000fc4:	f000 f998 	bl	80012f8 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000fc8:	f000 f9f0 	bl	80013ac <MX_TIM5_Init>
  //hadc1.Instance->CR1 &=  ~(ADC_CR1_AWDIE);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  LCD_Init();
 8000fcc:	f005 f910 	bl	80061f0 <LCD_Init>

  HAL_ADC_Start_DMA(&hadc1, adc_dr_dma, ADC_BUF_SIZE);
 8000fd0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000fd4:	490b      	ldr	r1, [pc, #44]	; (8001004 <main+0x64>)
 8000fd6:	480c      	ldr	r0, [pc, #48]	; (8001008 <main+0x68>)
 8000fd8:	f001 fb92 	bl	8002700 <HAL_ADC_Start_DMA>

  // Output 10kHz PWM signal from PB10 (CN9/D6) pin as test signal  @PCLK2(84MHz)
  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_3);
 8000fdc:	2108      	movs	r1, #8
 8000fde:	480b      	ldr	r0, [pc, #44]	; (800100c <main+0x6c>)
 8000fe0:	f003 fe88 	bl	8004cf4 <HAL_TIM_OC_Start>

  // Start 200kHz timer for sampling  @PCLK2(84MHz)
  // ( Sampling rate (MAX) = PCLK2(84MHz) / 4div / 15cycle(12bit ADC conversion time) = 1.4MHz )
  HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_1);
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	480a      	ldr	r0, [pc, #40]	; (8001010 <main+0x70>)
 8000fe8:	f003 fe84 	bl	8004cf4 <HAL_TIM_OC_Start>

  while (1)
  {
    HAL_Delay(100);
 8000fec:	2064      	movs	r0, #100	; 0x64
 8000fee:	f001 f9df 	bl	80023b0 <HAL_Delay>
    showAdcData(hdma_adc1.Instance->NDTR, SHOW_SIZE);
 8000ff2:	4b08      	ldr	r3, [pc, #32]	; (8001014 <main+0x74>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f44f 718c 	mov.w	r1, #280	; 0x118
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f000 fd2b 	bl	8001a58 <showAdcData>
    HAL_Delay(100);
 8001002:	e7f3      	b.n	8000fec <main+0x4c>
 8001004:	20000224 	.word	0x20000224
 8001008:	20000c24 	.word	0x20000c24
 800100c:	20000d24 	.word	0x20000d24
 8001010:	20000bdc 	.word	0x20000bdc
 8001014:	20000c6c 	.word	0x20000c6c

08001018 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b094      	sub	sp, #80	; 0x50
 800101c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800101e:	f107 0320 	add.w	r3, r7, #32
 8001022:	2230      	movs	r2, #48	; 0x30
 8001024:	2100      	movs	r1, #0
 8001026:	4618      	mov	r0, r3
 8001028:	f005 fcdc 	bl	80069e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800102c:	f107 030c 	add.w	r3, r7, #12
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
 800103a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800103c:	2300      	movs	r3, #0
 800103e:	60bb      	str	r3, [r7, #8]
 8001040:	4b29      	ldr	r3, [pc, #164]	; (80010e8 <SystemClock_Config+0xd0>)
 8001042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001044:	4a28      	ldr	r2, [pc, #160]	; (80010e8 <SystemClock_Config+0xd0>)
 8001046:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800104a:	6413      	str	r3, [r2, #64]	; 0x40
 800104c:	4b26      	ldr	r3, [pc, #152]	; (80010e8 <SystemClock_Config+0xd0>)
 800104e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001050:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001054:	60bb      	str	r3, [r7, #8]
 8001056:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001058:	2300      	movs	r3, #0
 800105a:	607b      	str	r3, [r7, #4]
 800105c:	4b23      	ldr	r3, [pc, #140]	; (80010ec <SystemClock_Config+0xd4>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001064:	4a21      	ldr	r2, [pc, #132]	; (80010ec <SystemClock_Config+0xd4>)
 8001066:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800106a:	6013      	str	r3, [r2, #0]
 800106c:	4b1f      	ldr	r3, [pc, #124]	; (80010ec <SystemClock_Config+0xd4>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001074:	607b      	str	r3, [r7, #4]
 8001076:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001078:	2302      	movs	r3, #2
 800107a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800107c:	2301      	movs	r3, #1
 800107e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001080:	2310      	movs	r3, #16
 8001082:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001084:	2302      	movs	r3, #2
 8001086:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001088:	2300      	movs	r3, #0
 800108a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800108c:	2310      	movs	r3, #16
 800108e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001090:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001094:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001096:	2304      	movs	r3, #4
 8001098:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800109a:	2307      	movs	r3, #7
 800109c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800109e:	f107 0320 	add.w	r3, r7, #32
 80010a2:	4618      	mov	r0, r3
 80010a4:	f002 fd7c 	bl	8003ba0 <HAL_RCC_OscConfig>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80010ae:	f000 fd9f 	bl	8001bf0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010b2:	230f      	movs	r3, #15
 80010b4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010b6:	2302      	movs	r3, #2
 80010b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ba:	2300      	movs	r3, #0
 80010bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010c4:	2300      	movs	r3, #0
 80010c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010c8:	f107 030c 	add.w	r3, r7, #12
 80010cc:	2102      	movs	r1, #2
 80010ce:	4618      	mov	r0, r3
 80010d0:	f002 ffde 	bl	8004090 <HAL_RCC_ClockConfig>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80010da:	f000 fd89 	bl	8001bf0 <Error_Handler>
  }
}
 80010de:	bf00      	nop
 80010e0:	3750      	adds	r7, #80	; 0x50
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40023800 	.word	0x40023800
 80010ec:	40007000 	.word	0x40007000

080010f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08a      	sub	sp, #40	; 0x28
 80010f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 80010f6:	f107 0310 	add.w	r3, r7, #16
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	605a      	str	r2, [r3, #4]
 8001100:	609a      	str	r2, [r3, #8]
 8001102:	60da      	str	r2, [r3, #12]
 8001104:	611a      	str	r2, [r3, #16]
 8001106:	615a      	str	r2, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001108:	463b      	mov	r3, r7
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	605a      	str	r2, [r3, #4]
 8001110:	609a      	str	r2, [r3, #8]
 8001112:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001114:	4b2d      	ldr	r3, [pc, #180]	; (80011cc <MX_ADC1_Init+0xdc>)
 8001116:	4a2e      	ldr	r2, [pc, #184]	; (80011d0 <MX_ADC1_Init+0xe0>)
 8001118:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800111a:	4b2c      	ldr	r3, [pc, #176]	; (80011cc <MX_ADC1_Init+0xdc>)
 800111c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001120:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001122:	4b2a      	ldr	r3, [pc, #168]	; (80011cc <MX_ADC1_Init+0xdc>)
 8001124:	2200      	movs	r2, #0
 8001126:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001128:	4b28      	ldr	r3, [pc, #160]	; (80011cc <MX_ADC1_Init+0xdc>)
 800112a:	2200      	movs	r2, #0
 800112c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800112e:	4b27      	ldr	r3, [pc, #156]	; (80011cc <MX_ADC1_Init+0xdc>)
 8001130:	2200      	movs	r2, #0
 8001132:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001134:	4b25      	ldr	r3, [pc, #148]	; (80011cc <MX_ADC1_Init+0xdc>)
 8001136:	2200      	movs	r2, #0
 8001138:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800113c:	4b23      	ldr	r3, [pc, #140]	; (80011cc <MX_ADC1_Init+0xdc>)
 800113e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001142:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_CC1;
 8001144:	4b21      	ldr	r3, [pc, #132]	; (80011cc <MX_ADC1_Init+0xdc>)
 8001146:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 800114a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800114c:	4b1f      	ldr	r3, [pc, #124]	; (80011cc <MX_ADC1_Init+0xdc>)
 800114e:	2200      	movs	r2, #0
 8001150:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001152:	4b1e      	ldr	r3, [pc, #120]	; (80011cc <MX_ADC1_Init+0xdc>)
 8001154:	2201      	movs	r2, #1
 8001156:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001158:	4b1c      	ldr	r3, [pc, #112]	; (80011cc <MX_ADC1_Init+0xdc>)
 800115a:	2201      	movs	r2, #1
 800115c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001160:	4b1a      	ldr	r3, [pc, #104]	; (80011cc <MX_ADC1_Init+0xdc>)
 8001162:	2201      	movs	r2, #1
 8001164:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001166:	4819      	ldr	r0, [pc, #100]	; (80011cc <MX_ADC1_Init+0xdc>)
 8001168:	f001 f946 	bl	80023f8 <HAL_ADC_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001172:	f000 fd3d 	bl	8001bf0 <Error_Handler>
  }
  /** Configure the analog watchdog
  */
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8001176:	4b17      	ldr	r3, [pc, #92]	; (80011d4 <MX_ADC1_Init+0xe4>)
 8001178:	613b      	str	r3, [r7, #16]
  AnalogWDGConfig.HighThreshold = 2048;
 800117a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800117e:	617b      	str	r3, [r7, #20]
  AnalogWDGConfig.LowThreshold = 0;
 8001180:	2300      	movs	r3, #0
 8001182:	61bb      	str	r3, [r7, #24]
  AnalogWDGConfig.Channel = ADC_CHANNEL_0;
 8001184:	2300      	movs	r3, #0
 8001186:	61fb      	str	r3, [r7, #28]
  AnalogWDGConfig.ITMode = ENABLE;
 8001188:	2301      	movs	r3, #1
 800118a:	f887 3020 	strb.w	r3, [r7, #32]
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 800118e:	f107 0310 	add.w	r3, r7, #16
 8001192:	4619      	mov	r1, r3
 8001194:	480d      	ldr	r0, [pc, #52]	; (80011cc <MX_ADC1_Init+0xdc>)
 8001196:	f001 fce3 	bl	8002b60 <HAL_ADC_AnalogWDGConfig>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 80011a0:	f000 fd26 	bl	8001bf0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011a8:	2301      	movs	r3, #1
 80011aa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80011ac:	2300      	movs	r3, #0
 80011ae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011b0:	463b      	mov	r3, r7
 80011b2:	4619      	mov	r1, r3
 80011b4:	4805      	ldr	r0, [pc, #20]	; (80011cc <MX_ADC1_Init+0xdc>)
 80011b6:	f001 fbb1 	bl	800291c <HAL_ADC_ConfigChannel>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 80011c0:	f000 fd16 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011c4:	bf00      	nop
 80011c6:	3728      	adds	r7, #40	; 0x28
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20000c24 	.word	0x20000c24
 80011d0:	40012000 	.word	0x40012000
 80011d4:	00800200 	.word	0x00800200

080011d8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011dc:	4b17      	ldr	r3, [pc, #92]	; (800123c <MX_SPI1_Init+0x64>)
 80011de:	4a18      	ldr	r2, [pc, #96]	; (8001240 <MX_SPI1_Init+0x68>)
 80011e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011e2:	4b16      	ldr	r3, [pc, #88]	; (800123c <MX_SPI1_Init+0x64>)
 80011e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011ea:	4b14      	ldr	r3, [pc, #80]	; (800123c <MX_SPI1_Init+0x64>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011f0:	4b12      	ldr	r3, [pc, #72]	; (800123c <MX_SPI1_Init+0x64>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011f6:	4b11      	ldr	r3, [pc, #68]	; (800123c <MX_SPI1_Init+0x64>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011fc:	4b0f      	ldr	r3, [pc, #60]	; (800123c <MX_SPI1_Init+0x64>)
 80011fe:	2200      	movs	r2, #0
 8001200:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001202:	4b0e      	ldr	r3, [pc, #56]	; (800123c <MX_SPI1_Init+0x64>)
 8001204:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001208:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800120a:	4b0c      	ldr	r3, [pc, #48]	; (800123c <MX_SPI1_Init+0x64>)
 800120c:	2200      	movs	r2, #0
 800120e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001210:	4b0a      	ldr	r3, [pc, #40]	; (800123c <MX_SPI1_Init+0x64>)
 8001212:	2200      	movs	r2, #0
 8001214:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001216:	4b09      	ldr	r3, [pc, #36]	; (800123c <MX_SPI1_Init+0x64>)
 8001218:	2200      	movs	r2, #0
 800121a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800121c:	4b07      	ldr	r3, [pc, #28]	; (800123c <MX_SPI1_Init+0x64>)
 800121e:	2200      	movs	r2, #0
 8001220:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001222:	4b06      	ldr	r3, [pc, #24]	; (800123c <MX_SPI1_Init+0x64>)
 8001224:	220a      	movs	r2, #10
 8001226:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001228:	4804      	ldr	r0, [pc, #16]	; (800123c <MX_SPI1_Init+0x64>)
 800122a:	f003 f92d 	bl	8004488 <HAL_SPI_Init>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001234:	f000 fcdc 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}
 800123c:	20000ccc 	.word	0x20000ccc
 8001240:	40013000 	.word	0x40013000

08001244 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b08a      	sub	sp, #40	; 0x28
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800124a:	f107 0320 	add.w	r3, r7, #32
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001254:	1d3b      	adds	r3, r7, #4
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]
 800125c:	609a      	str	r2, [r3, #8]
 800125e:	60da      	str	r2, [r3, #12]
 8001260:	611a      	str	r2, [r3, #16]
 8001262:	615a      	str	r2, [r3, #20]
 8001264:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001266:	4b23      	ldr	r3, [pc, #140]	; (80012f4 <MX_TIM2_Init+0xb0>)
 8001268:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800126c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800126e:	4b21      	ldr	r3, [pc, #132]	; (80012f4 <MX_TIM2_Init+0xb0>)
 8001270:	2200      	movs	r2, #0
 8001272:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001274:	4b1f      	ldr	r3, [pc, #124]	; (80012f4 <MX_TIM2_Init+0xb0>)
 8001276:	2200      	movs	r2, #0
 8001278:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8400;
 800127a:	4b1e      	ldr	r3, [pc, #120]	; (80012f4 <MX_TIM2_Init+0xb0>)
 800127c:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8001280:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001282:	4b1c      	ldr	r3, [pc, #112]	; (80012f4 <MX_TIM2_Init+0xb0>)
 8001284:	2200      	movs	r2, #0
 8001286:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001288:	4b1a      	ldr	r3, [pc, #104]	; (80012f4 <MX_TIM2_Init+0xb0>)
 800128a:	2280      	movs	r2, #128	; 0x80
 800128c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800128e:	4819      	ldr	r0, [pc, #100]	; (80012f4 <MX_TIM2_Init+0xb0>)
 8001290:	f003 fede 	bl	8005050 <HAL_TIM_PWM_Init>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800129a:	f000 fca9 	bl	8001bf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800129e:	2300      	movs	r3, #0
 80012a0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a2:	2300      	movs	r3, #0
 80012a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012a6:	f107 0320 	add.w	r3, r7, #32
 80012aa:	4619      	mov	r1, r3
 80012ac:	4811      	ldr	r0, [pc, #68]	; (80012f4 <MX_TIM2_Init+0xb0>)
 80012ae:	f004 fbf9 	bl	8005aa4 <HAL_TIMEx_MasterConfigSynchronization>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80012b8:	f000 fc9a 	bl	8001bf0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012bc:	2360      	movs	r3, #96	; 0x60
 80012be:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 4200;
 80012c0:	f241 0368 	movw	r3, #4200	; 0x1068
 80012c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012c6:	2300      	movs	r3, #0
 80012c8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012ca:	2300      	movs	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012ce:	1d3b      	adds	r3, r7, #4
 80012d0:	2208      	movs	r2, #8
 80012d2:	4619      	mov	r1, r3
 80012d4:	4807      	ldr	r0, [pc, #28]	; (80012f4 <MX_TIM2_Init+0xb0>)
 80012d6:	f004 f8c9 	bl	800546c <HAL_TIM_PWM_ConfigChannel>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80012e0:	f000 fc86 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80012e4:	4803      	ldr	r0, [pc, #12]	; (80012f4 <MX_TIM2_Init+0xb0>)
 80012e6:	f000 fe09 	bl	8001efc <HAL_TIM_MspPostInit>

}
 80012ea:	bf00      	nop
 80012ec:	3728      	adds	r7, #40	; 0x28
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20000d24 	.word	0x20000d24

080012f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08a      	sub	sp, #40	; 0x28
 80012fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012fe:	f107 0320 	add.w	r3, r7, #32
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001308:	1d3b      	adds	r3, r7, #4
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]
 8001310:	609a      	str	r2, [r3, #8]
 8001312:	60da      	str	r2, [r3, #12]
 8001314:	611a      	str	r2, [r3, #16]
 8001316:	615a      	str	r2, [r3, #20]
 8001318:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800131a:	4b22      	ldr	r3, [pc, #136]	; (80013a4 <MX_TIM3_Init+0xac>)
 800131c:	4a22      	ldr	r2, [pc, #136]	; (80013a8 <MX_TIM3_Init+0xb0>)
 800131e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001320:	4b20      	ldr	r3, [pc, #128]	; (80013a4 <MX_TIM3_Init+0xac>)
 8001322:	2200      	movs	r2, #0
 8001324:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001326:	4b1f      	ldr	r3, [pc, #124]	; (80013a4 <MX_TIM3_Init+0xac>)
 8001328:	2200      	movs	r2, #0
 800132a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 420;
 800132c:	4b1d      	ldr	r3, [pc, #116]	; (80013a4 <MX_TIM3_Init+0xac>)
 800132e:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8001332:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001334:	4b1b      	ldr	r3, [pc, #108]	; (80013a4 <MX_TIM3_Init+0xac>)
 8001336:	2200      	movs	r2, #0
 8001338:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800133a:	4b1a      	ldr	r3, [pc, #104]	; (80013a4 <MX_TIM3_Init+0xac>)
 800133c:	2280      	movs	r2, #128	; 0x80
 800133e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001340:	4818      	ldr	r0, [pc, #96]	; (80013a4 <MX_TIM3_Init+0xac>)
 8001342:	f003 fe85 	bl	8005050 <HAL_TIM_PWM_Init>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800134c:	f000 fc50 	bl	8001bf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001350:	2300      	movs	r3, #0
 8001352:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001354:	2300      	movs	r3, #0
 8001356:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001358:	f107 0320 	add.w	r3, r7, #32
 800135c:	4619      	mov	r1, r3
 800135e:	4811      	ldr	r0, [pc, #68]	; (80013a4 <MX_TIM3_Init+0xac>)
 8001360:	f004 fba0 	bl	8005aa4 <HAL_TIMEx_MasterConfigSynchronization>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800136a:	f000 fc41 	bl	8001bf0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800136e:	2360      	movs	r3, #96	; 0x60
 8001370:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 210;
 8001372:	23d2      	movs	r3, #210	; 0xd2
 8001374:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001376:	2300      	movs	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800137a:	2300      	movs	r3, #0
 800137c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800137e:	1d3b      	adds	r3, r7, #4
 8001380:	2200      	movs	r2, #0
 8001382:	4619      	mov	r1, r3
 8001384:	4807      	ldr	r0, [pc, #28]	; (80013a4 <MX_TIM3_Init+0xac>)
 8001386:	f004 f871 	bl	800546c <HAL_TIM_PWM_ConfigChannel>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001390:	f000 fc2e 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001394:	4803      	ldr	r0, [pc, #12]	; (80013a4 <MX_TIM3_Init+0xac>)
 8001396:	f000 fdb1 	bl	8001efc <HAL_TIM_MspPostInit>

}
 800139a:	bf00      	nop
 800139c:	3728      	adds	r7, #40	; 0x28
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	20000bdc 	.word	0x20000bdc
 80013a8:	40000400 	.word	0x40000400

080013ac <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08a      	sub	sp, #40	; 0x28
 80013b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013b2:	f107 0320 	add.w	r3, r7, #32
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013bc:	1d3b      	adds	r3, r7, #4
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	60da      	str	r2, [r3, #12]
 80013c8:	611a      	str	r2, [r3, #16]
 80013ca:	615a      	str	r2, [r3, #20]
 80013cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80013ce:	4b24      	ldr	r3, [pc, #144]	; (8001460 <MX_TIM5_Init+0xb4>)
 80013d0:	4a24      	ldr	r2, [pc, #144]	; (8001464 <MX_TIM5_Init+0xb8>)
 80013d2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80013d4:	4b22      	ldr	r3, [pc, #136]	; (8001460 <MX_TIM5_Init+0xb4>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013da:	4b21      	ldr	r3, [pc, #132]	; (8001460 <MX_TIM5_Init+0xb4>)
 80013dc:	2200      	movs	r2, #0
 80013de:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 168000;
 80013e0:	4b1f      	ldr	r3, [pc, #124]	; (8001460 <MX_TIM5_Init+0xb4>)
 80013e2:	4a21      	ldr	r2, [pc, #132]	; (8001468 <MX_TIM5_Init+0xbc>)
 80013e4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e6:	4b1e      	ldr	r3, [pc, #120]	; (8001460 <MX_TIM5_Init+0xb4>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ec:	4b1c      	ldr	r3, [pc, #112]	; (8001460 <MX_TIM5_Init+0xb4>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 80013f2:	481b      	ldr	r0, [pc, #108]	; (8001460 <MX_TIM5_Init+0xb4>)
 80013f4:	f003 fc2e 	bl	8004c54 <HAL_TIM_OC_Init>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 80013fe:	f000 fbf7 	bl	8001bf0 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim5, TIM_OPMODE_SINGLE) != HAL_OK)
 8001402:	2108      	movs	r1, #8
 8001404:	4816      	ldr	r0, [pc, #88]	; (8001460 <MX_TIM5_Init+0xb4>)
 8001406:	f003 fe72 	bl	80050ee <HAL_TIM_OnePulse_Init>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001410:	f000 fbee 	bl	8001bf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001414:	2300      	movs	r3, #0
 8001416:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001418:	2300      	movs	r3, #0
 800141a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800141c:	f107 0320 	add.w	r3, r7, #32
 8001420:	4619      	mov	r1, r3
 8001422:	480f      	ldr	r0, [pc, #60]	; (8001460 <MX_TIM5_Init+0xb4>)
 8001424:	f004 fb3e 	bl	8005aa4 <HAL_TIMEx_MasterConfigSynchronization>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_TIM5_Init+0x86>
  {
    Error_Handler();
 800142e:	f000 fbdf 	bl	8001bf0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8001432:	2310      	movs	r3, #16
 8001434:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 84000;
 8001436:	4b0d      	ldr	r3, [pc, #52]	; (800146c <MX_TIM5_Init+0xc0>)
 8001438:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800143a:	2300      	movs	r3, #0
 800143c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800143e:	2300      	movs	r3, #0
 8001440:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001442:	1d3b      	adds	r3, r7, #4
 8001444:	2204      	movs	r2, #4
 8001446:	4619      	mov	r1, r3
 8001448:	4805      	ldr	r0, [pc, #20]	; (8001460 <MX_TIM5_Init+0xb4>)
 800144a:	f003 ffb3 	bl	80053b4 <HAL_TIM_OC_ConfigChannel>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_TIM5_Init+0xac>
  {
    Error_Handler();
 8001454:	f000 fbcc 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001458:	bf00      	nop
 800145a:	3728      	adds	r7, #40	; 0x28
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	20000b94 	.word	0x20000b94
 8001464:	40000c00 	.word	0x40000c00
 8001468:	00029040 	.word	0x00029040
 800146c:	00014820 	.word	0x00014820

08001470 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001474:	4b11      	ldr	r3, [pc, #68]	; (80014bc <MX_USART2_UART_Init+0x4c>)
 8001476:	4a12      	ldr	r2, [pc, #72]	; (80014c0 <MX_USART2_UART_Init+0x50>)
 8001478:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800147a:	4b10      	ldr	r3, [pc, #64]	; (80014bc <MX_USART2_UART_Init+0x4c>)
 800147c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001480:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001482:	4b0e      	ldr	r3, [pc, #56]	; (80014bc <MX_USART2_UART_Init+0x4c>)
 8001484:	2200      	movs	r2, #0
 8001486:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001488:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <MX_USART2_UART_Init+0x4c>)
 800148a:	2200      	movs	r2, #0
 800148c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800148e:	4b0b      	ldr	r3, [pc, #44]	; (80014bc <MX_USART2_UART_Init+0x4c>)
 8001490:	2200      	movs	r2, #0
 8001492:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001494:	4b09      	ldr	r3, [pc, #36]	; (80014bc <MX_USART2_UART_Init+0x4c>)
 8001496:	220c      	movs	r2, #12
 8001498:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800149a:	4b08      	ldr	r3, [pc, #32]	; (80014bc <MX_USART2_UART_Init+0x4c>)
 800149c:	2200      	movs	r2, #0
 800149e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014a0:	4b06      	ldr	r3, [pc, #24]	; (80014bc <MX_USART2_UART_Init+0x4c>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014a6:	4805      	ldr	r0, [pc, #20]	; (80014bc <MX_USART2_UART_Init+0x4c>)
 80014a8:	f004 fb7e 	bl	8005ba8 <HAL_UART_Init>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014b2:	f000 fb9d 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20000d6c 	.word	0x20000d6c
 80014c0:	40004400 	.word	0x40004400

080014c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	607b      	str	r3, [r7, #4]
 80014ce:	4b10      	ldr	r3, [pc, #64]	; (8001510 <MX_DMA_Init+0x4c>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	4a0f      	ldr	r2, [pc, #60]	; (8001510 <MX_DMA_Init+0x4c>)
 80014d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014d8:	6313      	str	r3, [r2, #48]	; 0x30
 80014da:	4b0d      	ldr	r3, [pc, #52]	; (8001510 <MX_DMA_Init+0x4c>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014e2:	607b      	str	r3, [r7, #4]
 80014e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80014e6:	2200      	movs	r2, #0
 80014e8:	2100      	movs	r1, #0
 80014ea:	2038      	movs	r0, #56	; 0x38
 80014ec:	f001 fdfb 	bl	80030e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80014f0:	2038      	movs	r0, #56	; 0x38
 80014f2:	f001 fe14 	bl	800311e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80014f6:	2200      	movs	r2, #0
 80014f8:	2100      	movs	r1, #0
 80014fa:	203b      	movs	r0, #59	; 0x3b
 80014fc:	f001 fdf3 	bl	80030e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001500:	203b      	movs	r0, #59	; 0x3b
 8001502:	f001 fe0c 	bl	800311e <HAL_NVIC_EnableIRQ>

}
 8001506:	bf00      	nop
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40023800 	.word	0x40023800

08001514 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b08a      	sub	sp, #40	; 0x28
 8001518:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151a:	f107 0314 	add.w	r3, r7, #20
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	605a      	str	r2, [r3, #4]
 8001524:	609a      	str	r2, [r3, #8]
 8001526:	60da      	str	r2, [r3, #12]
 8001528:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	613b      	str	r3, [r7, #16]
 800152e:	4b45      	ldr	r3, [pc, #276]	; (8001644 <MX_GPIO_Init+0x130>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	4a44      	ldr	r2, [pc, #272]	; (8001644 <MX_GPIO_Init+0x130>)
 8001534:	f043 0304 	orr.w	r3, r3, #4
 8001538:	6313      	str	r3, [r2, #48]	; 0x30
 800153a:	4b42      	ldr	r3, [pc, #264]	; (8001644 <MX_GPIO_Init+0x130>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	f003 0304 	and.w	r3, r3, #4
 8001542:	613b      	str	r3, [r7, #16]
 8001544:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	60fb      	str	r3, [r7, #12]
 800154a:	4b3e      	ldr	r3, [pc, #248]	; (8001644 <MX_GPIO_Init+0x130>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	4a3d      	ldr	r2, [pc, #244]	; (8001644 <MX_GPIO_Init+0x130>)
 8001550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001554:	6313      	str	r3, [r2, #48]	; 0x30
 8001556:	4b3b      	ldr	r3, [pc, #236]	; (8001644 <MX_GPIO_Init+0x130>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	60bb      	str	r3, [r7, #8]
 8001566:	4b37      	ldr	r3, [pc, #220]	; (8001644 <MX_GPIO_Init+0x130>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	4a36      	ldr	r2, [pc, #216]	; (8001644 <MX_GPIO_Init+0x130>)
 800156c:	f043 0301 	orr.w	r3, r3, #1
 8001570:	6313      	str	r3, [r2, #48]	; 0x30
 8001572:	4b34      	ldr	r3, [pc, #208]	; (8001644 <MX_GPIO_Init+0x130>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	60bb      	str	r3, [r7, #8]
 800157c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	607b      	str	r3, [r7, #4]
 8001582:	4b30      	ldr	r3, [pc, #192]	; (8001644 <MX_GPIO_Init+0x130>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	4a2f      	ldr	r2, [pc, #188]	; (8001644 <MX_GPIO_Init+0x130>)
 8001588:	f043 0302 	orr.w	r3, r3, #2
 800158c:	6313      	str	r3, [r2, #48]	; 0x30
 800158e:	4b2d      	ldr	r3, [pc, #180]	; (8001644 <MX_GPIO_Init+0x130>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	607b      	str	r3, [r7, #4]
 8001598:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 800159a:	2200      	movs	r2, #0
 800159c:	2180      	movs	r1, #128	; 0x80
 800159e:	482a      	ldr	r0, [pc, #168]	; (8001648 <MX_GPIO_Init+0x134>)
 80015a0:	f002 facc 	bl	8003b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 80015a4:	2201      	movs	r2, #1
 80015a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015aa:	4828      	ldr	r0, [pc, #160]	; (800164c <MX_GPIO_Init+0x138>)
 80015ac:	f002 fac6 	bl	8003b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80015b0:	2201      	movs	r2, #1
 80015b2:	2140      	movs	r1, #64	; 0x40
 80015b4:	4826      	ldr	r0, [pc, #152]	; (8001650 <MX_GPIO_Init+0x13c>)
 80015b6:	f002 fac1 	bl	8003b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015c0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80015c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015ca:	f107 0314 	add.w	r3, r7, #20
 80015ce:	4619      	mov	r1, r3
 80015d0:	481d      	ldr	r0, [pc, #116]	; (8001648 <MX_GPIO_Init+0x134>)
 80015d2:	f002 f92f 	bl	8003834 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RS_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin;
 80015d6:	2380      	movs	r3, #128	; 0x80
 80015d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015da:	2301      	movs	r3, #1
 80015dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015de:	2300      	movs	r3, #0
 80015e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e2:	2300      	movs	r3, #0
 80015e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_RS_GPIO_Port, &GPIO_InitStruct);
 80015e6:	f107 0314 	add.w	r3, r7, #20
 80015ea:	4619      	mov	r1, r3
 80015ec:	4816      	ldr	r0, [pc, #88]	; (8001648 <MX_GPIO_Init+0x134>)
 80015ee:	f002 f921 	bl	8003834 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RESET_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 80015f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f8:	2301      	movs	r3, #1
 80015fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001600:	2300      	movs	r3, #0
 8001602:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8001604:	f107 0314 	add.w	r3, r7, #20
 8001608:	4619      	mov	r1, r3
 800160a:	4810      	ldr	r0, [pc, #64]	; (800164c <MX_GPIO_Init+0x138>)
 800160c:	f002 f912 	bl	8003834 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001610:	2340      	movs	r3, #64	; 0x40
 8001612:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001614:	2301      	movs	r3, #1
 8001616:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161c:	2300      	movs	r3, #0
 800161e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001620:	f107 0314 	add.w	r3, r7, #20
 8001624:	4619      	mov	r1, r3
 8001626:	480a      	ldr	r0, [pc, #40]	; (8001650 <MX_GPIO_Init+0x13c>)
 8001628:	f002 f904 	bl	8003834 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800162c:	2200      	movs	r2, #0
 800162e:	2100      	movs	r1, #0
 8001630:	2028      	movs	r0, #40	; 0x28
 8001632:	f001 fd58 	bl	80030e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001636:	2028      	movs	r0, #40	; 0x28
 8001638:	f001 fd71 	bl	800311e <HAL_NVIC_EnableIRQ>

}
 800163c:	bf00      	nop
 800163e:	3728      	adds	r7, #40	; 0x28
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40023800 	.word	0x40023800
 8001648:	40020800 	.word	0x40020800
 800164c:	40020000 	.word	0x40020000
 8001650:	40020400 	.word	0x40020400

08001654 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8001660:	2300      	movs	r3, #0
 8001662:	617b      	str	r3, [r7, #20]
 8001664:	e009      	b.n	800167a <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	1c5a      	adds	r2, r3, #1
 800166a:	60ba      	str	r2, [r7, #8]
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	4618      	mov	r0, r3
 8001670:	f7ff fc6e 	bl	8000f50 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	3301      	adds	r3, #1
 8001678:	617b      	str	r3, [r7, #20]
 800167a:	697a      	ldr	r2, [r7, #20]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	429a      	cmp	r2, r3
 8001680:	dbf1      	blt.n	8001666 <_write+0x12>
  }
  return len;
 8001682:	687b      	ldr	r3, [r7, #4]
}
 8001684:	4618      	mov	r0, r3
 8001686:	3718      	adds	r7, #24
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	0000      	movs	r0, r0
	...

08001690 <drawGraph>:
	  LCD_CS_SET;
}
#endif

void drawGraph(float *data, int32_t len, float dt)
{
 8001690:	b5b0      	push	{r4, r5, r7, lr}
 8001692:	b0b0      	sub	sp, #192	; 0xc0
 8001694:	af02      	add	r7, sp, #8
 8001696:	60f8      	str	r0, [r7, #12]
 8001698:	60b9      	str	r1, [r7, #8]
 800169a:	ed87 0a01 	vstr	s0, [r7, #4]
	int32_t px, py, old_px, old_py;
	int8_t div_info[128];
	uint16_t color_idx;


	LCD_Clear2(1);
 800169e:	2001      	movs	r0, #1
 80016a0:	f004 ff70 	bl	8006584 <LCD_Clear2>

	// Draw graph area window
	//POINT_COLOR = WHITE;
	color_idx = 0;
 80016a4:	2300      	movs	r3, #0
 80016a6:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2

	LCD_DrawLine2(ORIGIN_PX, ORIGIN_PY - MAX_RANGE_PY , ORIGIN_PX, ORIGIN_PY, color_idx);
 80016aa:	4b85      	ldr	r3, [pc, #532]	; (80018c0 <drawGraph+0x230>)
 80016ac:	885b      	ldrh	r3, [r3, #2]
 80016ae:	3be6      	subs	r3, #230	; 0xe6
 80016b0:	b299      	uxth	r1, r3
 80016b2:	4b83      	ldr	r3, [pc, #524]	; (80018c0 <drawGraph+0x230>)
 80016b4:	885b      	ldrh	r3, [r3, #2]
 80016b6:	3b1e      	subs	r3, #30
 80016b8:	b29a      	uxth	r2, r3
 80016ba:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 80016be:	9300      	str	r3, [sp, #0]
 80016c0:	4613      	mov	r3, r2
 80016c2:	221e      	movs	r2, #30
 80016c4:	201e      	movs	r0, #30
 80016c6:	f004 ff6f 	bl	80065a8 <LCD_DrawLine2>
	LCD_DrawLine2(ORIGIN_PX + MAX_RANGE_PX, ORIGIN_PY - MAX_RANGE_PY , ORIGIN_PX + MAX_RANGE_PX, ORIGIN_PY, color_idx);
 80016ca:	4b7d      	ldr	r3, [pc, #500]	; (80018c0 <drawGraph+0x230>)
 80016cc:	885b      	ldrh	r3, [r3, #2]
 80016ce:	3be6      	subs	r3, #230	; 0xe6
 80016d0:	b299      	uxth	r1, r3
 80016d2:	4b7b      	ldr	r3, [pc, #492]	; (80018c0 <drawGraph+0x230>)
 80016d4:	885b      	ldrh	r3, [r3, #2]
 80016d6:	3b1e      	subs	r3, #30
 80016d8:	b29a      	uxth	r2, r3
 80016da:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 80016de:	9300      	str	r3, [sp, #0]
 80016e0:	4613      	mov	r3, r2
 80016e2:	f44f 729b 	mov.w	r2, #310	; 0x136
 80016e6:	f44f 709b 	mov.w	r0, #310	; 0x136
 80016ea:	f004 ff5d 	bl	80065a8 <LCD_DrawLine2>
	LCD_DrawLine2(ORIGIN_PX, ORIGIN_PY - MAX_RANGE_PY , ORIGIN_PX + MAX_RANGE_PX, ORIGIN_PY - MAX_RANGE_PY, color_idx);
 80016ee:	4b74      	ldr	r3, [pc, #464]	; (80018c0 <drawGraph+0x230>)
 80016f0:	885b      	ldrh	r3, [r3, #2]
 80016f2:	3be6      	subs	r3, #230	; 0xe6
 80016f4:	b299      	uxth	r1, r3
 80016f6:	4b72      	ldr	r3, [pc, #456]	; (80018c0 <drawGraph+0x230>)
 80016f8:	885b      	ldrh	r3, [r3, #2]
 80016fa:	3be6      	subs	r3, #230	; 0xe6
 80016fc:	b29a      	uxth	r2, r3
 80016fe:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8001702:	9300      	str	r3, [sp, #0]
 8001704:	4613      	mov	r3, r2
 8001706:	f44f 729b 	mov.w	r2, #310	; 0x136
 800170a:	201e      	movs	r0, #30
 800170c:	f004 ff4c 	bl	80065a8 <LCD_DrawLine2>
	LCD_DrawLine2(ORIGIN_PX, ORIGIN_PY , ORIGIN_PX + MAX_RANGE_PX, ORIGIN_PY, color_idx);
 8001710:	4b6b      	ldr	r3, [pc, #428]	; (80018c0 <drawGraph+0x230>)
 8001712:	885b      	ldrh	r3, [r3, #2]
 8001714:	3b1e      	subs	r3, #30
 8001716:	b299      	uxth	r1, r3
 8001718:	4b69      	ldr	r3, [pc, #420]	; (80018c0 <drawGraph+0x230>)
 800171a:	885b      	ldrh	r3, [r3, #2]
 800171c:	3b1e      	subs	r3, #30
 800171e:	b29a      	uxth	r2, r3
 8001720:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8001724:	9300      	str	r3, [sp, #0]
 8001726:	4613      	mov	r3, r2
 8001728:	f44f 729b 	mov.w	r2, #310	; 0x136
 800172c:	201e      	movs	r0, #30
 800172e:	f004 ff3b 	bl	80065a8 <LCD_DrawLine2>


	// Draw gridline
	//POINT_COLOR = GRAYBLUE;
	color_idx = 16;
 8001732:	2310      	movs	r3, #16
 8001734:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2

	for(int i=1; i<10; i++){
 8001738:	2301      	movs	r3, #1
 800173a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800173e:	e029      	b.n	8001794 <drawGraph+0x104>
		LCD_DrawLine2(ORIGIN_PX, ORIGIN_PY - MAX_RANGE_PY + DIV_PY * i, ORIGIN_PX + MAX_RANGE_PX, ORIGIN_PY - MAX_RANGE_PY + DIV_PY * i, color_idx);
 8001740:	4b5f      	ldr	r3, [pc, #380]	; (80018c0 <drawGraph+0x230>)
 8001742:	885a      	ldrh	r2, [r3, #2]
 8001744:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001748:	b29b      	uxth	r3, r3
 800174a:	4619      	mov	r1, r3
 800174c:	0089      	lsls	r1, r1, #2
 800174e:	440b      	add	r3, r1
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	b29b      	uxth	r3, r3
 8001754:	4413      	add	r3, r2
 8001756:	b29b      	uxth	r3, r3
 8001758:	3be6      	subs	r3, #230	; 0xe6
 800175a:	b299      	uxth	r1, r3
 800175c:	4b58      	ldr	r3, [pc, #352]	; (80018c0 <drawGraph+0x230>)
 800175e:	885a      	ldrh	r2, [r3, #2]
 8001760:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001764:	b29b      	uxth	r3, r3
 8001766:	4618      	mov	r0, r3
 8001768:	0080      	lsls	r0, r0, #2
 800176a:	4403      	add	r3, r0
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	b29b      	uxth	r3, r3
 8001770:	4413      	add	r3, r2
 8001772:	b29b      	uxth	r3, r3
 8001774:	3be6      	subs	r3, #230	; 0xe6
 8001776:	b29a      	uxth	r2, r3
 8001778:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 800177c:	9300      	str	r3, [sp, #0]
 800177e:	4613      	mov	r3, r2
 8001780:	f44f 729b 	mov.w	r2, #310	; 0x136
 8001784:	201e      	movs	r0, #30
 8001786:	f004 ff0f 	bl	80065a8 <LCD_DrawLine2>
	for(int i=1; i<10; i++){
 800178a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800178e:	3301      	adds	r3, #1
 8001790:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001794:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001798:	2b09      	cmp	r3, #9
 800179a:	ddd1      	ble.n	8001740 <drawGraph+0xb0>
	}

	for(int i=1; i<14; i++){
 800179c:	2301      	movs	r3, #1
 800179e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80017a2:	e026      	b.n	80017f2 <drawGraph+0x162>
		LCD_DrawLine2(ORIGIN_PX + DIV_PX * i, ORIGIN_PY - MAX_RANGE_PY , ORIGIN_PX + DIV_PX * i, ORIGIN_PY, color_idx);
 80017a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	461a      	mov	r2, r3
 80017ac:	0092      	lsls	r2, r2, #2
 80017ae:	4413      	add	r3, r2
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	331e      	adds	r3, #30
 80017b6:	b298      	uxth	r0, r3
 80017b8:	4b41      	ldr	r3, [pc, #260]	; (80018c0 <drawGraph+0x230>)
 80017ba:	885b      	ldrh	r3, [r3, #2]
 80017bc:	3be6      	subs	r3, #230	; 0xe6
 80017be:	b299      	uxth	r1, r3
 80017c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80017c4:	b29b      	uxth	r3, r3
 80017c6:	461a      	mov	r2, r3
 80017c8:	0092      	lsls	r2, r2, #2
 80017ca:	4413      	add	r3, r2
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	331e      	adds	r3, #30
 80017d2:	b29a      	uxth	r2, r3
 80017d4:	4b3a      	ldr	r3, [pc, #232]	; (80018c0 <drawGraph+0x230>)
 80017d6:	885b      	ldrh	r3, [r3, #2]
 80017d8:	3b1e      	subs	r3, #30
 80017da:	b29c      	uxth	r4, r3
 80017dc:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 80017e0:	9300      	str	r3, [sp, #0]
 80017e2:	4623      	mov	r3, r4
 80017e4:	f004 fee0 	bl	80065a8 <LCD_DrawLine2>
	for(int i=1; i<14; i++){
 80017e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80017ec:	3301      	adds	r3, #1
 80017ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80017f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80017f6:	2b0d      	cmp	r3, #13
 80017f8:	ddd4      	ble.n	80017a4 <drawGraph+0x114>
	}


	sprintf(div_info,"%0.2f V/div   %0.2f ms/div", DIV_VOLT, DIV_TIME);
 80017fa:	f107 0010 	add.w	r0, r7, #16
 80017fe:	a32e      	add	r3, pc, #184	; (adr r3, 80018b8 <drawGraph+0x228>)
 8001800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001804:	e9cd 2300 	strd	r2, r3, [sp]
 8001808:	f04f 0200 	mov.w	r2, #0
 800180c:	4b2d      	ldr	r3, [pc, #180]	; (80018c4 <drawGraph+0x234>)
 800180e:	492e      	ldr	r1, [pc, #184]	; (80018c8 <drawGraph+0x238>)
 8001810:	f005 fdd0 	bl	80073b4 <siprintf>
	color_idx = 0;	// WHITE
 8001814:	2300      	movs	r3, #0
 8001816:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
	Gui_StrCenter2(30, 220, div_info, 16, color_idx);
 800181a:	f107 0210 	add.w	r2, r7, #16
 800181e:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8001822:	9300      	str	r3, [sp, #0]
 8001824:	2310      	movs	r3, #16
 8001826:	21dc      	movs	r1, #220	; 0xdc
 8001828:	201e      	movs	r0, #30
 800182a:	f005 f81d 	bl	8006868 <Gui_StrCenter2>


	// Draw data point
	//POINT_COLOR = YELLOW;
	color_idx = 10;
 800182e:	230a      	movs	r3, #10
 8001830:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2

	axis_px = PX_PER_TIME * dt * 0;
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f7fe fe8f 	bl	8000558 <__aeabi_f2d>
 800183a:	f04f 0200 	mov.w	r2, #0
 800183e:	4b23      	ldr	r3, [pc, #140]	; (80018cc <drawGraph+0x23c>)
 8001840:	f7fe fee2 	bl	8000608 <__aeabi_dmul>
 8001844:	4602      	mov	r2, r0
 8001846:	460b      	mov	r3, r1
 8001848:	4610      	mov	r0, r2
 800184a:	4619      	mov	r1, r3
 800184c:	f04f 0200 	mov.w	r2, #0
 8001850:	f04f 0300 	mov.w	r3, #0
 8001854:	f7fe fed8 	bl	8000608 <__aeabi_dmul>
 8001858:	4602      	mov	r2, r0
 800185a:	460b      	mov	r3, r1
 800185c:	4610      	mov	r0, r2
 800185e:	4619      	mov	r1, r3
 8001860:	f7ff f982 	bl	8000b68 <__aeabi_d2iz>
 8001864:	4603      	mov	r3, r0
 8001866:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	axis_py = PY_PER_VOLT * data[0];
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4618      	mov	r0, r3
 8001870:	f7fe fe72 	bl	8000558 <__aeabi_f2d>
 8001874:	f04f 0200 	mov.w	r2, #0
 8001878:	4b15      	ldr	r3, [pc, #84]	; (80018d0 <drawGraph+0x240>)
 800187a:	f7fe fec5 	bl	8000608 <__aeabi_dmul>
 800187e:	4602      	mov	r2, r0
 8001880:	460b      	mov	r3, r1
 8001882:	4610      	mov	r0, r2
 8001884:	4619      	mov	r1, r3
 8001886:	f7ff f96f 	bl	8000b68 <__aeabi_d2iz>
 800188a:	4603      	mov	r3, r0
 800188c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	old_px = ORIGIN_PX + axis_px;
 8001890:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001894:	331e      	adds	r3, #30
 8001896:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	old_py = ZERO_V_PY - axis_py;
 800189a:	4b09      	ldr	r3, [pc, #36]	; (80018c0 <drawGraph+0x230>)
 800189c:	885b      	ldrh	r3, [r3, #2]
 800189e:	f1a3 025a 	sub.w	r2, r3, #90	; 0x5a
 80018a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

	for(int i=1; i<len; i++){
 80018ac:	2301      	movs	r3, #1
 80018ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80018b2:	e085      	b.n	80019c0 <drawGraph+0x330>
 80018b4:	f3af 8000 	nop.w
 80018b8:	9999999a 	.word	0x9999999a
 80018bc:	3fb99999 	.word	0x3fb99999
 80018c0:	20000e14 	.word	0x20000e14
 80018c4:	3fe00000 	.word	0x3fe00000
 80018c8:	08009828 	.word	0x08009828
 80018cc:	40690000 	.word	0x40690000
 80018d0:	40440000 	.word	0x40440000
		axis_px = PX_PER_TIME * dt * i;
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f7fe fe3f 	bl	8000558 <__aeabi_f2d>
 80018da:	f04f 0200 	mov.w	r2, #0
 80018de:	4b57      	ldr	r3, [pc, #348]	; (8001a3c <drawGraph+0x3ac>)
 80018e0:	f7fe fe92 	bl	8000608 <__aeabi_dmul>
 80018e4:	4602      	mov	r2, r0
 80018e6:	460b      	mov	r3, r1
 80018e8:	4614      	mov	r4, r2
 80018ea:	461d      	mov	r5, r3
 80018ec:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80018f0:	f7fe fe20 	bl	8000534 <__aeabi_i2d>
 80018f4:	4602      	mov	r2, r0
 80018f6:	460b      	mov	r3, r1
 80018f8:	4620      	mov	r0, r4
 80018fa:	4629      	mov	r1, r5
 80018fc:	f7fe fe84 	bl	8000608 <__aeabi_dmul>
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	4610      	mov	r0, r2
 8001906:	4619      	mov	r1, r3
 8001908:	f7ff f92e 	bl	8000b68 <__aeabi_d2iz>
 800190c:	4603      	mov	r3, r0
 800190e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		axis_py = PY_PER_VOLT * data[i];
 8001912:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	68fa      	ldr	r2, [r7, #12]
 800191a:	4413      	add	r3, r2
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	f7fe fe1a 	bl	8000558 <__aeabi_f2d>
 8001924:	f04f 0200 	mov.w	r2, #0
 8001928:	4b45      	ldr	r3, [pc, #276]	; (8001a40 <drawGraph+0x3b0>)
 800192a:	f7fe fe6d 	bl	8000608 <__aeabi_dmul>
 800192e:	4602      	mov	r2, r0
 8001930:	460b      	mov	r3, r1
 8001932:	4610      	mov	r0, r2
 8001934:	4619      	mov	r1, r3
 8001936:	f7ff f917 	bl	8000b68 <__aeabi_d2iz>
 800193a:	4603      	mov	r3, r0
 800193c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		px = ORIGIN_PX + axis_px;
 8001940:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001944:	331e      	adds	r3, #30
 8001946:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		py = ZERO_V_PY - axis_py;
 800194a:	4b3e      	ldr	r3, [pc, #248]	; (8001a44 <drawGraph+0x3b4>)
 800194c:	885b      	ldrh	r3, [r3, #2]
 800194e:	f1a3 025a 	sub.w	r2, r3, #90	; 0x5a
 8001952:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		if((px <= ORIGIN_PX + MAX_RANGE_PX) && (ORIGIN_PY - MAX_RANGE_PY <= py) && (py <= ORIGIN_PY)){
 800195c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001960:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8001964:	dc27      	bgt.n	80019b6 <drawGraph+0x326>
 8001966:	4b37      	ldr	r3, [pc, #220]	; (8001a44 <drawGraph+0x3b4>)
 8001968:	885b      	ldrh	r3, [r3, #2]
 800196a:	3be6      	subs	r3, #230	; 0xe6
 800196c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001970:	429a      	cmp	r2, r3
 8001972:	db20      	blt.n	80019b6 <drawGraph+0x326>
 8001974:	4b33      	ldr	r3, [pc, #204]	; (8001a44 <drawGraph+0x3b4>)
 8001976:	885b      	ldrh	r3, [r3, #2]
 8001978:	3b1d      	subs	r3, #29
 800197a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800197e:	429a      	cmp	r2, r3
 8001980:	da19      	bge.n	80019b6 <drawGraph+0x326>
			//LCD_DrawPoint(px_x, px_y);
			LCD_DrawLine2(old_px, old_py , px, py, color_idx);
 8001982:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001986:	b298      	uxth	r0, r3
 8001988:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800198c:	b299      	uxth	r1, r3
 800198e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001992:	b29a      	uxth	r2, r3
 8001994:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001998:	b29c      	uxth	r4, r3
 800199a:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 800199e:	9300      	str	r3, [sp, #0]
 80019a0:	4623      	mov	r3, r4
 80019a2:	f004 fe01 	bl	80065a8 <LCD_DrawLine2>
			old_px = px;
 80019a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80019aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			old_py = py;
 80019ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80019b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	for(int i=1; i<len; i++){
 80019b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80019ba:	3301      	adds	r3, #1
 80019bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80019c0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	db84      	blt.n	80018d4 <drawGraph+0x244>
		}
	}


	// Draw 0V marker
	LCD_DrawLine2(ORIGIN_PX, ZERO_V_PY, ORIGIN_PX - 8, ZERO_V_PY - 4, color_idx);
 80019ca:	4b1e      	ldr	r3, [pc, #120]	; (8001a44 <drawGraph+0x3b4>)
 80019cc:	885b      	ldrh	r3, [r3, #2]
 80019ce:	3b5a      	subs	r3, #90	; 0x5a
 80019d0:	b299      	uxth	r1, r3
 80019d2:	4b1c      	ldr	r3, [pc, #112]	; (8001a44 <drawGraph+0x3b4>)
 80019d4:	885b      	ldrh	r3, [r3, #2]
 80019d6:	3b5e      	subs	r3, #94	; 0x5e
 80019d8:	b29a      	uxth	r2, r3
 80019da:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 80019de:	9300      	str	r3, [sp, #0]
 80019e0:	4613      	mov	r3, r2
 80019e2:	2216      	movs	r2, #22
 80019e4:	201e      	movs	r0, #30
 80019e6:	f004 fddf 	bl	80065a8 <LCD_DrawLine2>
	LCD_DrawLine2(ORIGIN_PX - 8, ZERO_V_PY - 4, ORIGIN_PX - 8, ZERO_V_PY + 4, color_idx);
 80019ea:	4b16      	ldr	r3, [pc, #88]	; (8001a44 <drawGraph+0x3b4>)
 80019ec:	885b      	ldrh	r3, [r3, #2]
 80019ee:	3b5e      	subs	r3, #94	; 0x5e
 80019f0:	b299      	uxth	r1, r3
 80019f2:	4b14      	ldr	r3, [pc, #80]	; (8001a44 <drawGraph+0x3b4>)
 80019f4:	885b      	ldrh	r3, [r3, #2]
 80019f6:	3b56      	subs	r3, #86	; 0x56
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 80019fe:	9300      	str	r3, [sp, #0]
 8001a00:	4613      	mov	r3, r2
 8001a02:	2216      	movs	r2, #22
 8001a04:	2016      	movs	r0, #22
 8001a06:	f004 fdcf 	bl	80065a8 <LCD_DrawLine2>
	LCD_DrawLine2(ORIGIN_PX - 8, ZERO_V_PY + 4, ORIGIN_PX, ZERO_V_PY, color_idx);
 8001a0a:	4b0e      	ldr	r3, [pc, #56]	; (8001a44 <drawGraph+0x3b4>)
 8001a0c:	885b      	ldrh	r3, [r3, #2]
 8001a0e:	3b56      	subs	r3, #86	; 0x56
 8001a10:	b299      	uxth	r1, r3
 8001a12:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <drawGraph+0x3b4>)
 8001a14:	885b      	ldrh	r3, [r3, #2]
 8001a16:	3b5a      	subs	r3, #90	; 0x5a
 8001a18:	b29a      	uxth	r2, r3
 8001a1a:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8001a1e:	9300      	str	r3, [sp, #0]
 8001a20:	4613      	mov	r3, r2
 8001a22:	221e      	movs	r2, #30
 8001a24:	2016      	movs	r0, #22
 8001a26:	f004 fdbf 	bl	80065a8 <LCD_DrawLine2>

	LCD_SendBuffer(&hspi1, &hdma_spi1_tx, &htim3);
 8001a2a:	4a07      	ldr	r2, [pc, #28]	; (8001a48 <drawGraph+0x3b8>)
 8001a2c:	4907      	ldr	r1, [pc, #28]	; (8001a4c <drawGraph+0x3bc>)
 8001a2e:	4808      	ldr	r0, [pc, #32]	; (8001a50 <drawGraph+0x3c0>)
 8001a30:	f004 ff44 	bl	80068bc <LCD_SendBuffer>

}
 8001a34:	bf00      	nop
 8001a36:	37b8      	adds	r7, #184	; 0xb8
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bdb0      	pop	{r4, r5, r7, pc}
 8001a3c:	40690000 	.word	0x40690000
 8001a40:	40440000 	.word	0x40440000
 8001a44:	20000e14 	.word	0x20000e14
 8001a48:	20000bdc 	.word	0x20000bdc
 8001a4c:	20000db0 	.word	0x20000db0
 8001a50:	20000ccc 	.word	0x20000ccc
 8001a54:	00000000 	.word	0x00000000

08001a58 <showAdcData>:

void showAdcData(uint32_t ndtr, uint32_t offset)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
	int32_t start, end, idx;

	start = ADC_BUF_SIZE - ndtr - offset;
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	4413      	add	r3, r2
 8001a68:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
 8001a6c:	617b      	str	r3, [r7, #20]

	if(start < 0){
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	da03      	bge.n	8001a7c <showAdcData+0x24>
		start = ADC_BUF_SIZE + start;
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8001a7a:	617b      	str	r3, [r7, #20]
	}

	end = start + SHOW_SIZE;
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8001a82:	60bb      	str	r3, [r7, #8]

	if(end >= ADC_BUF_SIZE){
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001a8a:	db03      	blt.n	8001a94 <showAdcData+0x3c>
		end = end - ADC_BUF_SIZE;
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001a92:	60bb      	str	r3, [r7, #8]
	}


	for(int i=0; i<SHOW_SIZE; i++){
 8001a94:	2300      	movs	r3, #0
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	e02f      	b.n	8001afa <showAdcData+0xa2>
		idx = start + i;
 8001a9a:	697a      	ldr	r2, [r7, #20]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	613b      	str	r3, [r7, #16]
		if(idx >= ADC_BUF_SIZE){
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001aa8:	db03      	blt.n	8001ab2 <showAdcData+0x5a>
			idx = idx - ADC_BUF_SIZE;
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001ab0:	613b      	str	r3, [r7, #16]
		}

		adc_phy[i] = adc_dr_dma[idx] * 3.3 / 4096;
 8001ab2:	4a1b      	ldr	r2, [pc, #108]	; (8001b20 <showAdcData+0xc8>)
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7fe fd2a 	bl	8000514 <__aeabi_ui2d>
 8001ac0:	a315      	add	r3, pc, #84	; (adr r3, 8001b18 <showAdcData+0xc0>)
 8001ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac6:	f7fe fd9f 	bl	8000608 <__aeabi_dmul>
 8001aca:	4602      	mov	r2, r0
 8001acc:	460b      	mov	r3, r1
 8001ace:	4610      	mov	r0, r2
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	f04f 0200 	mov.w	r2, #0
 8001ad6:	4b13      	ldr	r3, [pc, #76]	; (8001b24 <showAdcData+0xcc>)
 8001ad8:	f7fe fec0 	bl	800085c <__aeabi_ddiv>
 8001adc:	4602      	mov	r2, r0
 8001ade:	460b      	mov	r3, r1
 8001ae0:	4610      	mov	r0, r2
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	f7ff f868 	bl	8000bb8 <__aeabi_d2f>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	490f      	ldr	r1, [pc, #60]	; (8001b28 <showAdcData+0xd0>)
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	440b      	add	r3, r1
 8001af2:	601a      	str	r2, [r3, #0]
	for(int i=0; i<SHOW_SIZE; i++){
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	3301      	adds	r3, #1
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8001b00:	dbcb      	blt.n	8001a9a <showAdcData+0x42>
	}
	drawGraph(adc_phy, SHOW_SIZE, 0.005);
 8001b02:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8001b2c <showAdcData+0xd4>
 8001b06:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001b0a:	4807      	ldr	r0, [pc, #28]	; (8001b28 <showAdcData+0xd0>)
 8001b0c:	f7ff fdc0 	bl	8001690 <drawGraph>
}
 8001b10:	bf00      	nop
 8001b12:	3718      	adds	r7, #24
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	66666666 	.word	0x66666666
 8001b1c:	400a6666 	.word	0x400a6666
 8001b20:	20000224 	.word	0x20000224
 8001b24:	40b00000 	.word	0x40b00000
 8001b28:	200006d4 	.word	0x200006d4
 8001b2c:	3ba3d70a 	.word	0x3ba3d70a

08001b30 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	80fb      	strh	r3, [r7, #6]
	printf("B1 pin is pushed (main.c)\n");
 8001b3a:	480d      	ldr	r0, [pc, #52]	; (8001b70 <HAL_GPIO_EXTI_Callback+0x40>)
 8001b3c:	f005 fc32 	bl	80073a4 <puts>

	/* Set AWDEN bits */
	hadc1.Instance->CR1 |=  ADC_CR1_AWDIE;
 8001b40:	4b0c      	ldr	r3, [pc, #48]	; (8001b74 <HAL_GPIO_EXTI_Callback+0x44>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	685a      	ldr	r2, [r3, #4]
 8001b46:	4b0b      	ldr	r3, [pc, #44]	; (8001b74 <HAL_GPIO_EXTI_Callback+0x44>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b4e:	605a      	str	r2, [r3, #4]

	/* Start a timer for ADC trigger */
	htim3.Instance->CR1 |= TIM_CR1_CEN;
 8001b50:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <HAL_GPIO_EXTI_Callback+0x48>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	4b08      	ldr	r3, [pc, #32]	; (8001b78 <HAL_GPIO_EXTI_Callback+0x48>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f042 0201 	orr.w	r2, r2, #1
 8001b5e:	601a      	str	r2, [r3, #0]

	g_is_trig_stop = FALSE;
 8001b60:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <HAL_GPIO_EXTI_Callback+0x4c>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	601a      	str	r2, [r3, #0]

}
 8001b66:	bf00      	nop
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	08009844 	.word	0x08009844
 8001b74:	20000c24 	.word	0x20000c24
 8001b78:	20000bdc 	.word	0x20000bdc
 8001b7c:	20000b84 	.word	0x20000b84

08001b80 <HAL_ADC_LevelOutOfWindowCallback>:

void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
	//trig_ndtr = hdma_adc1.Instance->NDTR;

	// Start a timer to stop sampling after 1 millisecond (200 point @200kHz sampling)
	HAL_TIM_OC_Start_IT(&htim5, TIM_CHANNEL_2);
 8001b88:	2104      	movs	r1, #4
 8001b8a:	480b      	ldr	r0, [pc, #44]	; (8001bb8 <HAL_ADC_LevelOutOfWindowCallback+0x38>)
 8001b8c:	f003 f962 	bl	8004e54 <HAL_TIM_OC_Start_IT>
	htim5.Instance->CR1 |= TIM_CR1_CEN;
 8001b90:	4b09      	ldr	r3, [pc, #36]	; (8001bb8 <HAL_ADC_LevelOutOfWindowCallback+0x38>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	4b08      	ldr	r3, [pc, #32]	; (8001bb8 <HAL_ADC_LevelOutOfWindowCallback+0x38>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f042 0201 	orr.w	r2, r2, #1
 8001b9e:	601a      	str	r2, [r3, #0]

	/* Clear AWDEN bits */
	hadc->Instance->CR1 &=  ~(ADC_CR1_AWDIE);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	685a      	ldr	r2, [r3, #4]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001bae:	605a      	str	r2, [r3, #4]

	//printf("Analog Watchdog (main.c)\n");
	//printf("DMA NDT: %d\n", hdma_adc1.Instance->NDTR);

}
 8001bb0:	bf00      	nop
 8001bb2:	3708      	adds	r7, #8
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	20000b94 	.word	0x20000b94

08001bbc <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
	htim3.Instance->CR1 &= ~(TIM_CR1_CEN);
 8001bc4:	4b08      	ldr	r3, [pc, #32]	; (8001be8 <HAL_TIM_OC_DelayElapsedCallback+0x2c>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	4b07      	ldr	r3, [pc, #28]	; (8001be8 <HAL_TIM_OC_DelayElapsedCallback+0x2c>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f022 0201 	bic.w	r2, r2, #1
 8001bd2:	601a      	str	r2, [r3, #0]
	g_is_trig_stop = TRUE;
 8001bd4:	4b05      	ldr	r3, [pc, #20]	; (8001bec <HAL_TIM_OC_DelayElapsedCallback+0x30>)
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	601a      	str	r2, [r3, #0]

}
 8001bda:	bf00      	nop
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	20000bdc 	.word	0x20000bdc
 8001bec:	20000b84 	.word	0x20000b84

08001bf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bf4:	b672      	cpsid	i
}
 8001bf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bf8:	e7fe      	b.n	8001bf8 <Error_Handler+0x8>
	...

08001bfc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	607b      	str	r3, [r7, #4]
 8001c06:	4b10      	ldr	r3, [pc, #64]	; (8001c48 <HAL_MspInit+0x4c>)
 8001c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0a:	4a0f      	ldr	r2, [pc, #60]	; (8001c48 <HAL_MspInit+0x4c>)
 8001c0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c10:	6453      	str	r3, [r2, #68]	; 0x44
 8001c12:	4b0d      	ldr	r3, [pc, #52]	; (8001c48 <HAL_MspInit+0x4c>)
 8001c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c1a:	607b      	str	r3, [r7, #4]
 8001c1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	603b      	str	r3, [r7, #0]
 8001c22:	4b09      	ldr	r3, [pc, #36]	; (8001c48 <HAL_MspInit+0x4c>)
 8001c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c26:	4a08      	ldr	r2, [pc, #32]	; (8001c48 <HAL_MspInit+0x4c>)
 8001c28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c2e:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <HAL_MspInit+0x4c>)
 8001c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c36:	603b      	str	r3, [r7, #0]
 8001c38:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001c3a:	2007      	movs	r0, #7
 8001c3c:	f001 fa48 	bl	80030d0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c40:	bf00      	nop
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	40023800 	.word	0x40023800

08001c4c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b08a      	sub	sp, #40	; 0x28
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c54:	f107 0314 	add.w	r3, r7, #20
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	605a      	str	r2, [r3, #4]
 8001c5e:	609a      	str	r2, [r3, #8]
 8001c60:	60da      	str	r2, [r3, #12]
 8001c62:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a33      	ldr	r2, [pc, #204]	; (8001d38 <HAL_ADC_MspInit+0xec>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d160      	bne.n	8001d30 <HAL_ADC_MspInit+0xe4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c6e:	2300      	movs	r3, #0
 8001c70:	613b      	str	r3, [r7, #16]
 8001c72:	4b32      	ldr	r3, [pc, #200]	; (8001d3c <HAL_ADC_MspInit+0xf0>)
 8001c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c76:	4a31      	ldr	r2, [pc, #196]	; (8001d3c <HAL_ADC_MspInit+0xf0>)
 8001c78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c7e:	4b2f      	ldr	r3, [pc, #188]	; (8001d3c <HAL_ADC_MspInit+0xf0>)
 8001c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c86:	613b      	str	r3, [r7, #16]
 8001c88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60fb      	str	r3, [r7, #12]
 8001c8e:	4b2b      	ldr	r3, [pc, #172]	; (8001d3c <HAL_ADC_MspInit+0xf0>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	4a2a      	ldr	r2, [pc, #168]	; (8001d3c <HAL_ADC_MspInit+0xf0>)
 8001c94:	f043 0301 	orr.w	r3, r3, #1
 8001c98:	6313      	str	r3, [r2, #48]	; 0x30
 8001c9a:	4b28      	ldr	r3, [pc, #160]	; (8001d3c <HAL_ADC_MspInit+0xf0>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	60fb      	str	r3, [r7, #12]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001caa:	2303      	movs	r3, #3
 8001cac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb2:	f107 0314 	add.w	r3, r7, #20
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4821      	ldr	r0, [pc, #132]	; (8001d40 <HAL_ADC_MspInit+0xf4>)
 8001cba:	f001 fdbb 	bl	8003834 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001cbe:	4b21      	ldr	r3, [pc, #132]	; (8001d44 <HAL_ADC_MspInit+0xf8>)
 8001cc0:	4a21      	ldr	r2, [pc, #132]	; (8001d48 <HAL_ADC_MspInit+0xfc>)
 8001cc2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001cc4:	4b1f      	ldr	r3, [pc, #124]	; (8001d44 <HAL_ADC_MspInit+0xf8>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cca:	4b1e      	ldr	r3, [pc, #120]	; (8001d44 <HAL_ADC_MspInit+0xf8>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cd0:	4b1c      	ldr	r3, [pc, #112]	; (8001d44 <HAL_ADC_MspInit+0xf8>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001cd6:	4b1b      	ldr	r3, [pc, #108]	; (8001d44 <HAL_ADC_MspInit+0xf8>)
 8001cd8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cdc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001cde:	4b19      	ldr	r3, [pc, #100]	; (8001d44 <HAL_ADC_MspInit+0xf8>)
 8001ce0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ce4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001ce6:	4b17      	ldr	r3, [pc, #92]	; (8001d44 <HAL_ADC_MspInit+0xf8>)
 8001ce8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001cec:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001cee:	4b15      	ldr	r3, [pc, #84]	; (8001d44 <HAL_ADC_MspInit+0xf8>)
 8001cf0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cf4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001cf6:	4b13      	ldr	r3, [pc, #76]	; (8001d44 <HAL_ADC_MspInit+0xf8>)
 8001cf8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001cfc:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cfe:	4b11      	ldr	r3, [pc, #68]	; (8001d44 <HAL_ADC_MspInit+0xf8>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001d04:	480f      	ldr	r0, [pc, #60]	; (8001d44 <HAL_ADC_MspInit+0xf8>)
 8001d06:	f001 fa25 	bl	8003154 <HAL_DMA_Init>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001d10:	f7ff ff6e 	bl	8001bf0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4a0b      	ldr	r2, [pc, #44]	; (8001d44 <HAL_ADC_MspInit+0xf8>)
 8001d18:	639a      	str	r2, [r3, #56]	; 0x38
 8001d1a:	4a0a      	ldr	r2, [pc, #40]	; (8001d44 <HAL_ADC_MspInit+0xf8>)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001d20:	2200      	movs	r2, #0
 8001d22:	2100      	movs	r1, #0
 8001d24:	2012      	movs	r0, #18
 8001d26:	f001 f9de 	bl	80030e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001d2a:	2012      	movs	r0, #18
 8001d2c:	f001 f9f7 	bl	800311e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d30:	bf00      	nop
 8001d32:	3728      	adds	r7, #40	; 0x28
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	40012000 	.word	0x40012000
 8001d3c:	40023800 	.word	0x40023800
 8001d40:	40020000 	.word	0x40020000
 8001d44:	20000c6c 	.word	0x20000c6c
 8001d48:	40026410 	.word	0x40026410

08001d4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b08a      	sub	sp, #40	; 0x28
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d54:	f107 0314 	add.w	r3, r7, #20
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	605a      	str	r2, [r3, #4]
 8001d5e:	609a      	str	r2, [r3, #8]
 8001d60:	60da      	str	r2, [r3, #12]
 8001d62:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a30      	ldr	r2, [pc, #192]	; (8001e2c <HAL_SPI_MspInit+0xe0>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d15a      	bne.n	8001e24 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	613b      	str	r3, [r7, #16]
 8001d72:	4b2f      	ldr	r3, [pc, #188]	; (8001e30 <HAL_SPI_MspInit+0xe4>)
 8001d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d76:	4a2e      	ldr	r2, [pc, #184]	; (8001e30 <HAL_SPI_MspInit+0xe4>)
 8001d78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d7e:	4b2c      	ldr	r3, [pc, #176]	; (8001e30 <HAL_SPI_MspInit+0xe4>)
 8001d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d86:	613b      	str	r3, [r7, #16]
 8001d88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	4b28      	ldr	r3, [pc, #160]	; (8001e30 <HAL_SPI_MspInit+0xe4>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d92:	4a27      	ldr	r2, [pc, #156]	; (8001e30 <HAL_SPI_MspInit+0xe4>)
 8001d94:	f043 0301 	orr.w	r3, r3, #1
 8001d98:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9a:	4b25      	ldr	r3, [pc, #148]	; (8001e30 <HAL_SPI_MspInit+0xe4>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001da6:	23e0      	movs	r3, #224	; 0xe0
 8001da8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001daa:	2302      	movs	r3, #2
 8001dac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dae:	2300      	movs	r3, #0
 8001db0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db2:	2303      	movs	r3, #3
 8001db4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001db6:	2305      	movs	r3, #5
 8001db8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dba:	f107 0314 	add.w	r3, r7, #20
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	481c      	ldr	r0, [pc, #112]	; (8001e34 <HAL_SPI_MspInit+0xe8>)
 8001dc2:	f001 fd37 	bl	8003834 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001dc6:	4b1c      	ldr	r3, [pc, #112]	; (8001e38 <HAL_SPI_MspInit+0xec>)
 8001dc8:	4a1c      	ldr	r2, [pc, #112]	; (8001e3c <HAL_SPI_MspInit+0xf0>)
 8001dca:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001dcc:	4b1a      	ldr	r3, [pc, #104]	; (8001e38 <HAL_SPI_MspInit+0xec>)
 8001dce:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001dd2:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001dd4:	4b18      	ldr	r3, [pc, #96]	; (8001e38 <HAL_SPI_MspInit+0xec>)
 8001dd6:	2240      	movs	r2, #64	; 0x40
 8001dd8:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dda:	4b17      	ldr	r3, [pc, #92]	; (8001e38 <HAL_SPI_MspInit+0xec>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001de0:	4b15      	ldr	r3, [pc, #84]	; (8001e38 <HAL_SPI_MspInit+0xec>)
 8001de2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001de6:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001de8:	4b13      	ldr	r3, [pc, #76]	; (8001e38 <HAL_SPI_MspInit+0xec>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001dee:	4b12      	ldr	r3, [pc, #72]	; (8001e38 <HAL_SPI_MspInit+0xec>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001df4:	4b10      	ldr	r3, [pc, #64]	; (8001e38 <HAL_SPI_MspInit+0xec>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001dfa:	4b0f      	ldr	r3, [pc, #60]	; (8001e38 <HAL_SPI_MspInit+0xec>)
 8001dfc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e00:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e02:	4b0d      	ldr	r3, [pc, #52]	; (8001e38 <HAL_SPI_MspInit+0xec>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001e08:	480b      	ldr	r0, [pc, #44]	; (8001e38 <HAL_SPI_MspInit+0xec>)
 8001e0a:	f001 f9a3 	bl	8003154 <HAL_DMA_Init>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8001e14:	f7ff feec 	bl	8001bf0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4a07      	ldr	r2, [pc, #28]	; (8001e38 <HAL_SPI_MspInit+0xec>)
 8001e1c:	649a      	str	r2, [r3, #72]	; 0x48
 8001e1e:	4a06      	ldr	r2, [pc, #24]	; (8001e38 <HAL_SPI_MspInit+0xec>)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001e24:	bf00      	nop
 8001e26:	3728      	adds	r7, #40	; 0x28
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40013000 	.word	0x40013000
 8001e30:	40023800 	.word	0x40023800
 8001e34:	40020000 	.word	0x40020000
 8001e38:	20000db0 	.word	0x20000db0
 8001e3c:	40026458 	.word	0x40026458

08001e40 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e50:	d10e      	bne.n	8001e70 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	60fb      	str	r3, [r7, #12]
 8001e56:	4b13      	ldr	r3, [pc, #76]	; (8001ea4 <HAL_TIM_PWM_MspInit+0x64>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	4a12      	ldr	r2, [pc, #72]	; (8001ea4 <HAL_TIM_PWM_MspInit+0x64>)
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	6413      	str	r3, [r2, #64]	; 0x40
 8001e62:	4b10      	ldr	r3, [pc, #64]	; (8001ea4 <HAL_TIM_PWM_MspInit+0x64>)
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001e6e:	e012      	b.n	8001e96 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM3)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a0c      	ldr	r2, [pc, #48]	; (8001ea8 <HAL_TIM_PWM_MspInit+0x68>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d10d      	bne.n	8001e96 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	60bb      	str	r3, [r7, #8]
 8001e7e:	4b09      	ldr	r3, [pc, #36]	; (8001ea4 <HAL_TIM_PWM_MspInit+0x64>)
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	4a08      	ldr	r2, [pc, #32]	; (8001ea4 <HAL_TIM_PWM_MspInit+0x64>)
 8001e84:	f043 0302 	orr.w	r3, r3, #2
 8001e88:	6413      	str	r3, [r2, #64]	; 0x40
 8001e8a:	4b06      	ldr	r3, [pc, #24]	; (8001ea4 <HAL_TIM_PWM_MspInit+0x64>)
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	60bb      	str	r3, [r7, #8]
 8001e94:	68bb      	ldr	r3, [r7, #8]
}
 8001e96:	bf00      	nop
 8001e98:	3714      	adds	r7, #20
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	40023800 	.word	0x40023800
 8001ea8:	40000400 	.word	0x40000400

08001eac <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM5)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a0e      	ldr	r2, [pc, #56]	; (8001ef4 <HAL_TIM_OC_MspInit+0x48>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d115      	bne.n	8001eea <HAL_TIM_OC_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60fb      	str	r3, [r7, #12]
 8001ec2:	4b0d      	ldr	r3, [pc, #52]	; (8001ef8 <HAL_TIM_OC_MspInit+0x4c>)
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec6:	4a0c      	ldr	r2, [pc, #48]	; (8001ef8 <HAL_TIM_OC_MspInit+0x4c>)
 8001ec8:	f043 0308 	orr.w	r3, r3, #8
 8001ecc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ece:	4b0a      	ldr	r3, [pc, #40]	; (8001ef8 <HAL_TIM_OC_MspInit+0x4c>)
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed2:	f003 0308 	and.w	r3, r3, #8
 8001ed6:	60fb      	str	r3, [r7, #12]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001eda:	2200      	movs	r2, #0
 8001edc:	2100      	movs	r1, #0
 8001ede:	2032      	movs	r0, #50	; 0x32
 8001ee0:	f001 f901 	bl	80030e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001ee4:	2032      	movs	r0, #50	; 0x32
 8001ee6:	f001 f91a 	bl	800311e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001eea:	bf00      	nop
 8001eec:	3710      	adds	r7, #16
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40000c00 	.word	0x40000c00
 8001ef8:	40023800 	.word	0x40023800

08001efc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b08a      	sub	sp, #40	; 0x28
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f04:	f107 0314 	add.w	r3, r7, #20
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	605a      	str	r2, [r3, #4]
 8001f0e:	609a      	str	r2, [r3, #8]
 8001f10:	60da      	str	r2, [r3, #12]
 8001f12:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f1c:	d11f      	bne.n	8001f5e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f1e:	2300      	movs	r3, #0
 8001f20:	613b      	str	r3, [r7, #16]
 8001f22:	4b22      	ldr	r3, [pc, #136]	; (8001fac <HAL_TIM_MspPostInit+0xb0>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	4a21      	ldr	r2, [pc, #132]	; (8001fac <HAL_TIM_MspPostInit+0xb0>)
 8001f28:	f043 0302 	orr.w	r3, r3, #2
 8001f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f2e:	4b1f      	ldr	r3, [pc, #124]	; (8001fac <HAL_TIM_MspPostInit+0xb0>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	613b      	str	r3, [r7, #16]
 8001f38:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f40:	2302      	movs	r3, #2
 8001f42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f44:	2300      	movs	r3, #0
 8001f46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f50:	f107 0314 	add.w	r3, r7, #20
 8001f54:	4619      	mov	r1, r3
 8001f56:	4816      	ldr	r0, [pc, #88]	; (8001fb0 <HAL_TIM_MspPostInit+0xb4>)
 8001f58:	f001 fc6c 	bl	8003834 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001f5c:	e022      	b.n	8001fa4 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a14      	ldr	r2, [pc, #80]	; (8001fb4 <HAL_TIM_MspPostInit+0xb8>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d11d      	bne.n	8001fa4 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f68:	2300      	movs	r3, #0
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	4b0f      	ldr	r3, [pc, #60]	; (8001fac <HAL_TIM_MspPostInit+0xb0>)
 8001f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f70:	4a0e      	ldr	r2, [pc, #56]	; (8001fac <HAL_TIM_MspPostInit+0xb0>)
 8001f72:	f043 0304 	orr.w	r3, r3, #4
 8001f76:	6313      	str	r3, [r2, #48]	; 0x30
 8001f78:	4b0c      	ldr	r3, [pc, #48]	; (8001fac <HAL_TIM_MspPostInit+0xb0>)
 8001f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7c:	f003 0304 	and.w	r3, r3, #4
 8001f80:	60fb      	str	r3, [r7, #12]
 8001f82:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f84:	2340      	movs	r3, #64	; 0x40
 8001f86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f88:	2302      	movs	r3, #2
 8001f8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f90:	2300      	movs	r3, #0
 8001f92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f94:	2302      	movs	r3, #2
 8001f96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f98:	f107 0314 	add.w	r3, r7, #20
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4806      	ldr	r0, [pc, #24]	; (8001fb8 <HAL_TIM_MspPostInit+0xbc>)
 8001fa0:	f001 fc48 	bl	8003834 <HAL_GPIO_Init>
}
 8001fa4:	bf00      	nop
 8001fa6:	3728      	adds	r7, #40	; 0x28
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	40023800 	.word	0x40023800
 8001fb0:	40020400 	.word	0x40020400
 8001fb4:	40000400 	.word	0x40000400
 8001fb8:	40020800 	.word	0x40020800

08001fbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b08a      	sub	sp, #40	; 0x28
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc4:	f107 0314 	add.w	r3, r7, #20
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	605a      	str	r2, [r3, #4]
 8001fce:	609a      	str	r2, [r3, #8]
 8001fd0:	60da      	str	r2, [r3, #12]
 8001fd2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a19      	ldr	r2, [pc, #100]	; (8002040 <HAL_UART_MspInit+0x84>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d12b      	bne.n	8002036 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fde:	2300      	movs	r3, #0
 8001fe0:	613b      	str	r3, [r7, #16]
 8001fe2:	4b18      	ldr	r3, [pc, #96]	; (8002044 <HAL_UART_MspInit+0x88>)
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe6:	4a17      	ldr	r2, [pc, #92]	; (8002044 <HAL_UART_MspInit+0x88>)
 8001fe8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fec:	6413      	str	r3, [r2, #64]	; 0x40
 8001fee:	4b15      	ldr	r3, [pc, #84]	; (8002044 <HAL_UART_MspInit+0x88>)
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff6:	613b      	str	r3, [r7, #16]
 8001ff8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60fb      	str	r3, [r7, #12]
 8001ffe:	4b11      	ldr	r3, [pc, #68]	; (8002044 <HAL_UART_MspInit+0x88>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002002:	4a10      	ldr	r2, [pc, #64]	; (8002044 <HAL_UART_MspInit+0x88>)
 8002004:	f043 0301 	orr.w	r3, r3, #1
 8002008:	6313      	str	r3, [r2, #48]	; 0x30
 800200a:	4b0e      	ldr	r3, [pc, #56]	; (8002044 <HAL_UART_MspInit+0x88>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002016:	230c      	movs	r3, #12
 8002018:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201a:	2302      	movs	r3, #2
 800201c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201e:	2300      	movs	r3, #0
 8002020:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002022:	2300      	movs	r3, #0
 8002024:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002026:	2307      	movs	r3, #7
 8002028:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800202a:	f107 0314 	add.w	r3, r7, #20
 800202e:	4619      	mov	r1, r3
 8002030:	4805      	ldr	r0, [pc, #20]	; (8002048 <HAL_UART_MspInit+0x8c>)
 8002032:	f001 fbff 	bl	8003834 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002036:	bf00      	nop
 8002038:	3728      	adds	r7, #40	; 0x28
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	40004400 	.word	0x40004400
 8002044:	40023800 	.word	0x40023800
 8002048:	40020000 	.word	0x40020000

0800204c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002050:	e7fe      	b.n	8002050 <NMI_Handler+0x4>

08002052 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002052:	b480      	push	{r7}
 8002054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002056:	e7fe      	b.n	8002056 <HardFault_Handler+0x4>

08002058 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800205c:	e7fe      	b.n	800205c <MemManage_Handler+0x4>

0800205e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800205e:	b480      	push	{r7}
 8002060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002062:	e7fe      	b.n	8002062 <BusFault_Handler+0x4>

08002064 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002068:	e7fe      	b.n	8002068 <UsageFault_Handler+0x4>

0800206a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800206a:	b480      	push	{r7}
 800206c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800206e:	bf00      	nop
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800207c:	bf00      	nop
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr

08002086 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002086:	b480      	push	{r7}
 8002088:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800208a:	bf00      	nop
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002098:	f000 f96a 	bl	8002370 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800209c:	bf00      	nop
 800209e:	bd80      	pop	{r7, pc}

080020a0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80020a4:	4802      	ldr	r0, [pc, #8]	; (80020b0 <ADC_IRQHandler+0x10>)
 80020a6:	f000 f9ea 	bl	800247e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80020aa:	bf00      	nop
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	20000c24 	.word	0x20000c24

080020b4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80020b8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80020bc:	f001 fd58 	bl	8003b70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80020c0:	bf00      	nop
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80020c8:	4802      	ldr	r0, [pc, #8]	; (80020d4 <TIM5_IRQHandler+0x10>)
 80020ca:	f003 f86a 	bl	80051a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80020ce:	bf00      	nop
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	20000b94 	.word	0x20000b94

080020d8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80020dc:	4802      	ldr	r0, [pc, #8]	; (80020e8 <DMA2_Stream0_IRQHandler+0x10>)
 80020de:	f001 f93f 	bl	8003360 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80020e2:	bf00      	nop
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	20000c6c 	.word	0x20000c6c

080020ec <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80020f0:	4802      	ldr	r0, [pc, #8]	; (80020fc <DMA2_Stream3_IRQHandler+0x10>)
 80020f2:	f001 f935 	bl	8003360 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80020f6:	bf00      	nop
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	20000db0 	.word	0x20000db0

08002100 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
	return 1;
 8002104:	2301      	movs	r3, #1
}
 8002106:	4618      	mov	r0, r3
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <_kill>:

int _kill(int pid, int sig)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800211a:	f004 fc39 	bl	8006990 <__errno>
 800211e:	4603      	mov	r3, r0
 8002120:	2216      	movs	r2, #22
 8002122:	601a      	str	r2, [r3, #0]
	return -1;
 8002124:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002128:	4618      	mov	r0, r3
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <_exit>:

void _exit (int status)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002138:	f04f 31ff 	mov.w	r1, #4294967295
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f7ff ffe7 	bl	8002110 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002142:	e7fe      	b.n	8002142 <_exit+0x12>

08002144 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002150:	2300      	movs	r3, #0
 8002152:	617b      	str	r3, [r7, #20]
 8002154:	e00a      	b.n	800216c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002156:	f3af 8000 	nop.w
 800215a:	4601      	mov	r1, r0
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	1c5a      	adds	r2, r3, #1
 8002160:	60ba      	str	r2, [r7, #8]
 8002162:	b2ca      	uxtb	r2, r1
 8002164:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	3301      	adds	r3, #1
 800216a:	617b      	str	r3, [r7, #20]
 800216c:	697a      	ldr	r2, [r7, #20]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	429a      	cmp	r2, r3
 8002172:	dbf0      	blt.n	8002156 <_read+0x12>
	}

return len;
 8002174:	687b      	ldr	r3, [r7, #4]
}
 8002176:	4618      	mov	r0, r3
 8002178:	3718      	adds	r7, #24
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <_close>:
	}
	return len;
}

int _close(int file)
{
 800217e:	b480      	push	{r7}
 8002180:	b083      	sub	sp, #12
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
	return -1;
 8002186:	f04f 33ff 	mov.w	r3, #4294967295
}
 800218a:	4618      	mov	r0, r3
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002196:	b480      	push	{r7}
 8002198:	b083      	sub	sp, #12
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
 800219e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021a6:	605a      	str	r2, [r3, #4]
	return 0;
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr

080021b6 <_isatty>:

int _isatty(int file)
{
 80021b6:	b480      	push	{r7}
 80021b8:	b083      	sub	sp, #12
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
	return 1;
 80021be:	2301      	movs	r3, #1
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
	return 0;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3714      	adds	r7, #20
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
	...

080021e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021f0:	4a14      	ldr	r2, [pc, #80]	; (8002244 <_sbrk+0x5c>)
 80021f2:	4b15      	ldr	r3, [pc, #84]	; (8002248 <_sbrk+0x60>)
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021fc:	4b13      	ldr	r3, [pc, #76]	; (800224c <_sbrk+0x64>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d102      	bne.n	800220a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002204:	4b11      	ldr	r3, [pc, #68]	; (800224c <_sbrk+0x64>)
 8002206:	4a12      	ldr	r2, [pc, #72]	; (8002250 <_sbrk+0x68>)
 8002208:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800220a:	4b10      	ldr	r3, [pc, #64]	; (800224c <_sbrk+0x64>)
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4413      	add	r3, r2
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	429a      	cmp	r2, r3
 8002216:	d207      	bcs.n	8002228 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002218:	f004 fbba 	bl	8006990 <__errno>
 800221c:	4603      	mov	r3, r0
 800221e:	220c      	movs	r2, #12
 8002220:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002222:	f04f 33ff 	mov.w	r3, #4294967295
 8002226:	e009      	b.n	800223c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002228:	4b08      	ldr	r3, [pc, #32]	; (800224c <_sbrk+0x64>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800222e:	4b07      	ldr	r3, [pc, #28]	; (800224c <_sbrk+0x64>)
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4413      	add	r3, r2
 8002236:	4a05      	ldr	r2, [pc, #20]	; (800224c <_sbrk+0x64>)
 8002238:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800223a:	68fb      	ldr	r3, [r7, #12]
}
 800223c:	4618      	mov	r0, r3
 800223e:	3718      	adds	r7, #24
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	20018000 	.word	0x20018000
 8002248:	00000400 	.word	0x00000400
 800224c:	20000b88 	.word	0x20000b88
 8002250:	20017638 	.word	0x20017638

08002254 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002258:	4b06      	ldr	r3, [pc, #24]	; (8002274 <SystemInit+0x20>)
 800225a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800225e:	4a05      	ldr	r2, [pc, #20]	; (8002274 <SystemInit+0x20>)
 8002260:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002264:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002268:	bf00      	nop
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	e000ed00 	.word	0xe000ed00

08002278 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002278:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800227c:	480d      	ldr	r0, [pc, #52]	; (80022b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800227e:	490e      	ldr	r1, [pc, #56]	; (80022b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002280:	4a0e      	ldr	r2, [pc, #56]	; (80022bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002282:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002284:	e002      	b.n	800228c <LoopCopyDataInit>

08002286 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002286:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002288:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800228a:	3304      	adds	r3, #4

0800228c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800228c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800228e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002290:	d3f9      	bcc.n	8002286 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002292:	4a0b      	ldr	r2, [pc, #44]	; (80022c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002294:	4c0b      	ldr	r4, [pc, #44]	; (80022c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002296:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002298:	e001      	b.n	800229e <LoopFillZerobss>

0800229a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800229a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800229c:	3204      	adds	r2, #4

0800229e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800229e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022a0:	d3fb      	bcc.n	800229a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80022a2:	f7ff ffd7 	bl	8002254 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022a6:	f004 fb79 	bl	800699c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022aa:	f7fe fe79 	bl	8000fa0 <main>
  bx  lr    
 80022ae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80022b0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80022b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022b8:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 80022bc:	0800a6d4 	.word	0x0800a6d4
  ldr r2, =_sbss
 80022c0:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 80022c4:	20017634 	.word	0x20017634

080022c8 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022c8:	e7fe      	b.n	80022c8 <DMA1_Stream0_IRQHandler>
	...

080022cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022d0:	4b0e      	ldr	r3, [pc, #56]	; (800230c <HAL_Init+0x40>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a0d      	ldr	r2, [pc, #52]	; (800230c <HAL_Init+0x40>)
 80022d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022dc:	4b0b      	ldr	r3, [pc, #44]	; (800230c <HAL_Init+0x40>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a0a      	ldr	r2, [pc, #40]	; (800230c <HAL_Init+0x40>)
 80022e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022e8:	4b08      	ldr	r3, [pc, #32]	; (800230c <HAL_Init+0x40>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a07      	ldr	r2, [pc, #28]	; (800230c <HAL_Init+0x40>)
 80022ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022f4:	2003      	movs	r0, #3
 80022f6:	f000 feeb 	bl	80030d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022fa:	2000      	movs	r0, #0
 80022fc:	f000 f808 	bl	8002310 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002300:	f7ff fc7c 	bl	8001bfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	40023c00 	.word	0x40023c00

08002310 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002318:	4b12      	ldr	r3, [pc, #72]	; (8002364 <HAL_InitTick+0x54>)
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	4b12      	ldr	r3, [pc, #72]	; (8002368 <HAL_InitTick+0x58>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	4619      	mov	r1, r3
 8002322:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002326:	fbb3 f3f1 	udiv	r3, r3, r1
 800232a:	fbb2 f3f3 	udiv	r3, r2, r3
 800232e:	4618      	mov	r0, r3
 8002330:	f000 ff03 	bl	800313a <HAL_SYSTICK_Config>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e00e      	b.n	800235c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2b0f      	cmp	r3, #15
 8002342:	d80a      	bhi.n	800235a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002344:	2200      	movs	r2, #0
 8002346:	6879      	ldr	r1, [r7, #4]
 8002348:	f04f 30ff 	mov.w	r0, #4294967295
 800234c:	f000 fecb 	bl	80030e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002350:	4a06      	ldr	r2, [pc, #24]	; (800236c <HAL_InitTick+0x5c>)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002356:	2300      	movs	r3, #0
 8002358:	e000      	b.n	800235c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
}
 800235c:	4618      	mov	r0, r3
 800235e:	3708      	adds	r7, #8
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	20000000 	.word	0x20000000
 8002368:	20000008 	.word	0x20000008
 800236c:	20000004 	.word	0x20000004

08002370 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002374:	4b06      	ldr	r3, [pc, #24]	; (8002390 <HAL_IncTick+0x20>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	461a      	mov	r2, r3
 800237a:	4b06      	ldr	r3, [pc, #24]	; (8002394 <HAL_IncTick+0x24>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4413      	add	r3, r2
 8002380:	4a04      	ldr	r2, [pc, #16]	; (8002394 <HAL_IncTick+0x24>)
 8002382:	6013      	str	r3, [r2, #0]
}
 8002384:	bf00      	nop
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	20000008 	.word	0x20000008
 8002394:	20000e10 	.word	0x20000e10

08002398 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  return uwTick;
 800239c:	4b03      	ldr	r3, [pc, #12]	; (80023ac <HAL_GetTick+0x14>)
 800239e:	681b      	ldr	r3, [r3, #0]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	20000e10 	.word	0x20000e10

080023b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023b8:	f7ff ffee 	bl	8002398 <HAL_GetTick>
 80023bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c8:	d005      	beq.n	80023d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023ca:	4b0a      	ldr	r3, [pc, #40]	; (80023f4 <HAL_Delay+0x44>)
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	461a      	mov	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	4413      	add	r3, r2
 80023d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023d6:	bf00      	nop
 80023d8:	f7ff ffde 	bl	8002398 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d8f7      	bhi.n	80023d8 <HAL_Delay+0x28>
  {
  }
}
 80023e8:	bf00      	nop
 80023ea:	bf00      	nop
 80023ec:	3710      	adds	r7, #16
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	20000008 	.word	0x20000008

080023f8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002400:	2300      	movs	r3, #0
 8002402:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d101      	bne.n	800240e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e033      	b.n	8002476 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002412:	2b00      	cmp	r3, #0
 8002414:	d109      	bne.n	800242a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f7ff fc18 	bl	8001c4c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242e:	f003 0310 	and.w	r3, r3, #16
 8002432:	2b00      	cmp	r3, #0
 8002434:	d118      	bne.n	8002468 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800243e:	f023 0302 	bic.w	r3, r3, #2
 8002442:	f043 0202 	orr.w	r2, r3, #2
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f000 fbe8 	bl	8002c20 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245a:	f023 0303 	bic.w	r3, r3, #3
 800245e:	f043 0201 	orr.w	r2, r3, #1
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	641a      	str	r2, [r3, #64]	; 0x40
 8002466:	e001      	b.n	800246c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002474:	7bfb      	ldrb	r3, [r7, #15]
}
 8002476:	4618      	mov	r0, r3
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b084      	sub	sp, #16
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002486:	2300      	movs	r3, #0
 8002488:	60fb      	str	r3, [r7, #12]
 800248a:	2300      	movs	r3, #0
 800248c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0302 	and.w	r3, r3, #2
 8002498:	2b02      	cmp	r3, #2
 800249a:	bf0c      	ite	eq
 800249c:	2301      	moveq	r3, #1
 800249e:	2300      	movne	r3, #0
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f003 0320 	and.w	r3, r3, #32
 80024ae:	2b20      	cmp	r3, #32
 80024b0:	bf0c      	ite	eq
 80024b2:	2301      	moveq	r3, #1
 80024b4:	2300      	movne	r3, #0
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d049      	beq.n	8002554 <HAL_ADC_IRQHandler+0xd6>
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d046      	beq.n	8002554 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ca:	f003 0310 	and.w	r3, r3, #16
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d105      	bne.n	80024de <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d12b      	bne.n	8002544 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d127      	bne.n	8002544 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d006      	beq.n	8002510 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800250c:	2b00      	cmp	r3, #0
 800250e:	d119      	bne.n	8002544 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	685a      	ldr	r2, [r3, #4]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f022 0220 	bic.w	r2, r2, #32
 800251e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002524:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002530:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d105      	bne.n	8002544 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253c:	f043 0201 	orr.w	r2, r3, #1
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f000 f9cb 	bl	80028e0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f06f 0212 	mvn.w	r2, #18
 8002552:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0304 	and.w	r3, r3, #4
 800255e:	2b04      	cmp	r3, #4
 8002560:	bf0c      	ite	eq
 8002562:	2301      	moveq	r3, #1
 8002564:	2300      	movne	r3, #0
 8002566:	b2db      	uxtb	r3, r3
 8002568:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002574:	2b80      	cmp	r3, #128	; 0x80
 8002576:	bf0c      	ite	eq
 8002578:	2301      	moveq	r3, #1
 800257a:	2300      	movne	r3, #0
 800257c:	b2db      	uxtb	r3, r3
 800257e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d057      	beq.n	8002636 <HAL_ADC_IRQHandler+0x1b8>
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d054      	beq.n	8002636 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002590:	f003 0310 	and.w	r3, r3, #16
 8002594:	2b00      	cmp	r3, #0
 8002596:	d105      	bne.n	80025a4 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d139      	bne.n	8002626 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d006      	beq.n	80025ce <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d12b      	bne.n	8002626 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d124      	bne.n	8002626 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d11d      	bne.n	8002626 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d119      	bne.n	8002626 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	685a      	ldr	r2, [r3, #4]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002600:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002616:	2b00      	cmp	r3, #0
 8002618:	d105      	bne.n	8002626 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261e:	f043 0201 	orr.w	r2, r3, #1
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 fc78 	bl	8002f1c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f06f 020c 	mvn.w	r2, #12
 8002634:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0301 	and.w	r3, r3, #1
 8002640:	2b01      	cmp	r3, #1
 8002642:	bf0c      	ite	eq
 8002644:	2301      	moveq	r3, #1
 8002646:	2300      	movne	r3, #0
 8002648:	b2db      	uxtb	r3, r3
 800264a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002656:	2b40      	cmp	r3, #64	; 0x40
 8002658:	bf0c      	ite	eq
 800265a:	2301      	moveq	r3, #1
 800265c:	2300      	movne	r3, #0
 800265e:	b2db      	uxtb	r3, r3
 8002660:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d017      	beq.n	8002698 <HAL_ADC_IRQHandler+0x21a>
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d014      	beq.n	8002698 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0301 	and.w	r3, r3, #1
 8002678:	2b01      	cmp	r3, #1
 800267a:	d10d      	bne.n	8002698 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002680:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f7ff fa79 	bl	8001b80 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f06f 0201 	mvn.w	r2, #1
 8002696:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0320 	and.w	r3, r3, #32
 80026a2:	2b20      	cmp	r3, #32
 80026a4:	bf0c      	ite	eq
 80026a6:	2301      	moveq	r3, #1
 80026a8:	2300      	movne	r3, #0
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026bc:	bf0c      	ite	eq
 80026be:	2301      	moveq	r3, #1
 80026c0:	2300      	movne	r3, #0
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d015      	beq.n	80026f8 <HAL_ADC_IRQHandler+0x27a>
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d012      	beq.n	80026f8 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d6:	f043 0202 	orr.w	r2, r3, #2
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f06f 0220 	mvn.w	r2, #32
 80026e6:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f000 f90d 	bl	8002908 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f06f 0220 	mvn.w	r2, #32
 80026f6:	601a      	str	r2, [r3, #0]
  }
}
 80026f8:	bf00      	nop
 80026fa:	3710      	adds	r7, #16
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}

08002700 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b086      	sub	sp, #24
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800270c:	2300      	movs	r3, #0
 800270e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002716:	2b01      	cmp	r3, #1
 8002718:	d101      	bne.n	800271e <HAL_ADC_Start_DMA+0x1e>
 800271a:	2302      	movs	r3, #2
 800271c:	e0ce      	b.n	80028bc <HAL_ADC_Start_DMA+0x1bc>
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2201      	movs	r2, #1
 8002722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f003 0301 	and.w	r3, r3, #1
 8002730:	2b01      	cmp	r3, #1
 8002732:	d018      	beq.n	8002766 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	689a      	ldr	r2, [r3, #8]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f042 0201 	orr.w	r2, r2, #1
 8002742:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002744:	4b5f      	ldr	r3, [pc, #380]	; (80028c4 <HAL_ADC_Start_DMA+0x1c4>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a5f      	ldr	r2, [pc, #380]	; (80028c8 <HAL_ADC_Start_DMA+0x1c8>)
 800274a:	fba2 2303 	umull	r2, r3, r2, r3
 800274e:	0c9a      	lsrs	r2, r3, #18
 8002750:	4613      	mov	r3, r2
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	4413      	add	r3, r2
 8002756:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002758:	e002      	b.n	8002760 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	3b01      	subs	r3, #1
 800275e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d1f9      	bne.n	800275a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002770:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002774:	d107      	bne.n	8002786 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	689a      	ldr	r2, [r3, #8]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002784:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f003 0301 	and.w	r3, r3, #1
 8002790:	2b01      	cmp	r3, #1
 8002792:	f040 8086 	bne.w	80028a2 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800279e:	f023 0301 	bic.w	r3, r3, #1
 80027a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d007      	beq.n	80027c8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027bc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027c0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027d4:	d106      	bne.n	80027e4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027da:	f023 0206 	bic.w	r2, r3, #6
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	645a      	str	r2, [r3, #68]	; 0x44
 80027e2:	e002      	b.n	80027ea <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2200      	movs	r2, #0
 80027e8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027f2:	4b36      	ldr	r3, [pc, #216]	; (80028cc <HAL_ADC_Start_DMA+0x1cc>)
 80027f4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027fa:	4a35      	ldr	r2, [pc, #212]	; (80028d0 <HAL_ADC_Start_DMA+0x1d0>)
 80027fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002802:	4a34      	ldr	r2, [pc, #208]	; (80028d4 <HAL_ADC_Start_DMA+0x1d4>)
 8002804:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800280a:	4a33      	ldr	r2, [pc, #204]	; (80028d8 <HAL_ADC_Start_DMA+0x1d8>)
 800280c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002816:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	685a      	ldr	r2, [r3, #4]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002826:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	689a      	ldr	r2, [r3, #8]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002836:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	334c      	adds	r3, #76	; 0x4c
 8002842:	4619      	mov	r1, r3
 8002844:	68ba      	ldr	r2, [r7, #8]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f000 fd32 	bl	80032b0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f003 031f 	and.w	r3, r3, #31
 8002854:	2b00      	cmp	r3, #0
 8002856:	d10f      	bne.n	8002878 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d129      	bne.n	80028ba <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	689a      	ldr	r2, [r3, #8]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002874:	609a      	str	r2, [r3, #8]
 8002876:	e020      	b.n	80028ba <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a17      	ldr	r2, [pc, #92]	; (80028dc <HAL_ADC_Start_DMA+0x1dc>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d11b      	bne.n	80028ba <HAL_ADC_Start_DMA+0x1ba>
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d114      	bne.n	80028ba <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	689a      	ldr	r2, [r3, #8]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800289e:	609a      	str	r2, [r3, #8]
 80028a0:	e00b      	b.n	80028ba <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	f043 0210 	orr.w	r2, r3, #16
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b2:	f043 0201 	orr.w	r2, r3, #1
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3718      	adds	r7, #24
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	20000000 	.word	0x20000000
 80028c8:	431bde83 	.word	0x431bde83
 80028cc:	40012300 	.word	0x40012300
 80028d0:	08002e19 	.word	0x08002e19
 80028d4:	08002ed3 	.word	0x08002ed3
 80028d8:	08002eef 	.word	0x08002eef
 80028dc:	40012000 	.word	0x40012000

080028e0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002910:	bf00      	nop
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002926:	2300      	movs	r3, #0
 8002928:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002930:	2b01      	cmp	r3, #1
 8002932:	d101      	bne.n	8002938 <HAL_ADC_ConfigChannel+0x1c>
 8002934:	2302      	movs	r3, #2
 8002936:	e105      	b.n	8002b44 <HAL_ADC_ConfigChannel+0x228>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2b09      	cmp	r3, #9
 8002946:	d925      	bls.n	8002994 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	68d9      	ldr	r1, [r3, #12]
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	b29b      	uxth	r3, r3
 8002954:	461a      	mov	r2, r3
 8002956:	4613      	mov	r3, r2
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	4413      	add	r3, r2
 800295c:	3b1e      	subs	r3, #30
 800295e:	2207      	movs	r2, #7
 8002960:	fa02 f303 	lsl.w	r3, r2, r3
 8002964:	43da      	mvns	r2, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	400a      	ands	r2, r1
 800296c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68d9      	ldr	r1, [r3, #12]
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	689a      	ldr	r2, [r3, #8]
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	b29b      	uxth	r3, r3
 800297e:	4618      	mov	r0, r3
 8002980:	4603      	mov	r3, r0
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	4403      	add	r3, r0
 8002986:	3b1e      	subs	r3, #30
 8002988:	409a      	lsls	r2, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	430a      	orrs	r2, r1
 8002990:	60da      	str	r2, [r3, #12]
 8002992:	e022      	b.n	80029da <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	6919      	ldr	r1, [r3, #16]
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	b29b      	uxth	r3, r3
 80029a0:	461a      	mov	r2, r3
 80029a2:	4613      	mov	r3, r2
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	4413      	add	r3, r2
 80029a8:	2207      	movs	r2, #7
 80029aa:	fa02 f303 	lsl.w	r3, r2, r3
 80029ae:	43da      	mvns	r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	400a      	ands	r2, r1
 80029b6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	6919      	ldr	r1, [r3, #16]
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	689a      	ldr	r2, [r3, #8]
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	4618      	mov	r0, r3
 80029ca:	4603      	mov	r3, r0
 80029cc:	005b      	lsls	r3, r3, #1
 80029ce:	4403      	add	r3, r0
 80029d0:	409a      	lsls	r2, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	430a      	orrs	r2, r1
 80029d8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	2b06      	cmp	r3, #6
 80029e0:	d824      	bhi.n	8002a2c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685a      	ldr	r2, [r3, #4]
 80029ec:	4613      	mov	r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	4413      	add	r3, r2
 80029f2:	3b05      	subs	r3, #5
 80029f4:	221f      	movs	r2, #31
 80029f6:	fa02 f303 	lsl.w	r3, r2, r3
 80029fa:	43da      	mvns	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	400a      	ands	r2, r1
 8002a02:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	4618      	mov	r0, r3
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685a      	ldr	r2, [r3, #4]
 8002a16:	4613      	mov	r3, r2
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	4413      	add	r3, r2
 8002a1c:	3b05      	subs	r3, #5
 8002a1e:	fa00 f203 	lsl.w	r2, r0, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	430a      	orrs	r2, r1
 8002a28:	635a      	str	r2, [r3, #52]	; 0x34
 8002a2a:	e04c      	b.n	8002ac6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	2b0c      	cmp	r3, #12
 8002a32:	d824      	bhi.n	8002a7e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685a      	ldr	r2, [r3, #4]
 8002a3e:	4613      	mov	r3, r2
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	4413      	add	r3, r2
 8002a44:	3b23      	subs	r3, #35	; 0x23
 8002a46:	221f      	movs	r2, #31
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	43da      	mvns	r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	400a      	ands	r2, r1
 8002a54:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	4618      	mov	r0, r3
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685a      	ldr	r2, [r3, #4]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	4413      	add	r3, r2
 8002a6e:	3b23      	subs	r3, #35	; 0x23
 8002a70:	fa00 f203 	lsl.w	r2, r0, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	631a      	str	r2, [r3, #48]	; 0x30
 8002a7c:	e023      	b.n	8002ac6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685a      	ldr	r2, [r3, #4]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	4413      	add	r3, r2
 8002a8e:	3b41      	subs	r3, #65	; 0x41
 8002a90:	221f      	movs	r2, #31
 8002a92:	fa02 f303 	lsl.w	r3, r2, r3
 8002a96:	43da      	mvns	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	400a      	ands	r2, r1
 8002a9e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	4618      	mov	r0, r3
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685a      	ldr	r2, [r3, #4]
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	4413      	add	r3, r2
 8002ab8:	3b41      	subs	r3, #65	; 0x41
 8002aba:	fa00 f203 	lsl.w	r2, r0, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	430a      	orrs	r2, r1
 8002ac4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ac6:	4b22      	ldr	r3, [pc, #136]	; (8002b50 <HAL_ADC_ConfigChannel+0x234>)
 8002ac8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a21      	ldr	r2, [pc, #132]	; (8002b54 <HAL_ADC_ConfigChannel+0x238>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d109      	bne.n	8002ae8 <HAL_ADC_ConfigChannel+0x1cc>
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2b12      	cmp	r3, #18
 8002ada:	d105      	bne.n	8002ae8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a19      	ldr	r2, [pc, #100]	; (8002b54 <HAL_ADC_ConfigChannel+0x238>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d123      	bne.n	8002b3a <HAL_ADC_ConfigChannel+0x21e>
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2b10      	cmp	r3, #16
 8002af8:	d003      	beq.n	8002b02 <HAL_ADC_ConfigChannel+0x1e6>
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2b11      	cmp	r3, #17
 8002b00:	d11b      	bne.n	8002b3a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2b10      	cmp	r3, #16
 8002b14:	d111      	bne.n	8002b3a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b16:	4b10      	ldr	r3, [pc, #64]	; (8002b58 <HAL_ADC_ConfigChannel+0x23c>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a10      	ldr	r2, [pc, #64]	; (8002b5c <HAL_ADC_ConfigChannel+0x240>)
 8002b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b20:	0c9a      	lsrs	r2, r3, #18
 8002b22:	4613      	mov	r3, r2
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	4413      	add	r3, r2
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002b2c:	e002      	b.n	8002b34 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	3b01      	subs	r3, #1
 8002b32:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d1f9      	bne.n	8002b2e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3714      	adds	r7, #20
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr
 8002b50:	40012300 	.word	0x40012300
 8002b54:	40012000 	.word	0x40012000
 8002b58:	20000000 	.word	0x20000000
 8002b5c:	431bde83 	.word	0x431bde83

08002b60 <HAL_ADC_AnalogWDGConfig>:
  * @param  AnalogWDGConfig  pointer to an ADC_AnalogWDGConfTypeDef structure 
  *         that contains the configuration information of ADC analog watchdog.
  * @retval HAL status	  
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->HighThreshold));
  assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->LowThreshold));
#endif /* USE_FULL_ASSERT  */
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d101      	bne.n	8002b78 <HAL_ADC_AnalogWDGConfig+0x18>
 8002b74:	2302      	movs	r3, #2
 8002b76:	e04d      	b.n	8002c14 <HAL_ADC_AnalogWDGConfig+0xb4>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  if(AnalogWDGConfig->ITMode == ENABLE)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	7c1b      	ldrb	r3, [r3, #16]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d108      	bne.n	8002b9a <HAL_ADC_AnalogWDGConfig+0x3a>
  {
    /* Enable the ADC Analog watchdog interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	685a      	ldr	r2, [r3, #4]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b96:	605a      	str	r2, [r3, #4]
 8002b98:	e007      	b.n	8002baa <HAL_ADC_AnalogWDGConfig+0x4a>
  }
  else
  {
    /* Disable the ADC Analog watchdog interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	685a      	ldr	r2, [r3, #4]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ba8:	605a      	str	r2, [r3, #4]
  }
  
  /* Clear AWDEN, JAWDEN and AWDSGL bits */
  hadc->Instance->CR1 &=  ~(ADC_CR1_AWDSGL | ADC_CR1_JAWDEN | ADC_CR1_AWDEN);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	6812      	ldr	r2, [r2, #0]
 8002bb4:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002bb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002bbc:	6053      	str	r3, [r2, #4]
  
  /* Set the analog watchdog enable mode */
  hadc->Instance->CR1 |= AnalogWDGConfig->WatchdogMode;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	6859      	ldr	r1, [r3, #4]
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	605a      	str	r2, [r3, #4]
  
  /* Set the high threshold */
  hadc->Instance->HTR = AnalogWDGConfig->HighThreshold;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	683a      	ldr	r2, [r7, #0]
 8002bd6:	6852      	ldr	r2, [r2, #4]
 8002bd8:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set the low threshold */
  hadc->Instance->LTR = AnalogWDGConfig->LowThreshold;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	683a      	ldr	r2, [r7, #0]
 8002be0:	6892      	ldr	r2, [r2, #8]
 8002be2:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Clear the Analog watchdog channel select bits */
  hadc->Instance->CR1 &= ~ADC_CR1_AWDCH;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	685a      	ldr	r2, [r3, #4]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f022 021f 	bic.w	r2, r2, #31
 8002bf2:	605a      	str	r2, [r3, #4]
  
  /* Set the Analog watchdog channel */
  hadc->Instance->CR1 |= (uint32_t)((uint16_t)(AnalogWDGConfig->Channel));
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	685a      	ldr	r2, [r3, #4]
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	4619      	mov	r1, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	430a      	orrs	r2, r1
 8002c08:	605a      	str	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002c12:	2300      	movs	r3, #0
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b085      	sub	sp, #20
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c28:	4b79      	ldr	r3, [pc, #484]	; (8002e10 <ADC_Init+0x1f0>)
 8002c2a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	685a      	ldr	r2, [r3, #4]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	431a      	orrs	r2, r3
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	685a      	ldr	r2, [r3, #4]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c54:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	6859      	ldr	r1, [r3, #4]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	021a      	lsls	r2, r3, #8
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	430a      	orrs	r2, r1
 8002c68:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	685a      	ldr	r2, [r3, #4]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002c78:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	6859      	ldr	r1, [r3, #4]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	689a      	ldr	r2, [r3, #8]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	689a      	ldr	r2, [r3, #8]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c9a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	6899      	ldr	r1, [r3, #8]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	68da      	ldr	r2, [r3, #12]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	430a      	orrs	r2, r1
 8002cac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb2:	4a58      	ldr	r2, [pc, #352]	; (8002e14 <ADC_Init+0x1f4>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d022      	beq.n	8002cfe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	689a      	ldr	r2, [r3, #8]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002cc6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	6899      	ldr	r1, [r3, #8]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	689a      	ldr	r2, [r3, #8]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ce8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	6899      	ldr	r1, [r3, #8]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	609a      	str	r2, [r3, #8]
 8002cfc:	e00f      	b.n	8002d1e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	689a      	ldr	r2, [r3, #8]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d0c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d1c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	689a      	ldr	r2, [r3, #8]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f022 0202 	bic.w	r2, r2, #2
 8002d2c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	6899      	ldr	r1, [r3, #8]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	7e1b      	ldrb	r3, [r3, #24]
 8002d38:	005a      	lsls	r2, r3, #1
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d01b      	beq.n	8002d84 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	685a      	ldr	r2, [r3, #4]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d5a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	685a      	ldr	r2, [r3, #4]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002d6a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	6859      	ldr	r1, [r3, #4]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d76:	3b01      	subs	r3, #1
 8002d78:	035a      	lsls	r2, r3, #13
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	605a      	str	r2, [r3, #4]
 8002d82:	e007      	b.n	8002d94 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	685a      	ldr	r2, [r3, #4]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d92:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002da2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	69db      	ldr	r3, [r3, #28]
 8002dae:	3b01      	subs	r3, #1
 8002db0:	051a      	lsls	r2, r3, #20
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	430a      	orrs	r2, r1
 8002db8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	689a      	ldr	r2, [r3, #8]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002dc8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	6899      	ldr	r1, [r3, #8]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002dd6:	025a      	lsls	r2, r3, #9
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	430a      	orrs	r2, r1
 8002dde:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	689a      	ldr	r2, [r3, #8]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	6899      	ldr	r1, [r3, #8]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	695b      	ldr	r3, [r3, #20]
 8002dfa:	029a      	lsls	r2, r3, #10
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	430a      	orrs	r2, r1
 8002e02:	609a      	str	r2, [r3, #8]
}
 8002e04:	bf00      	nop
 8002e06:	3714      	adds	r7, #20
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr
 8002e10:	40012300 	.word	0x40012300
 8002e14:	0f000001 	.word	0x0f000001

08002e18 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e24:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d13c      	bne.n	8002eac <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e36:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d12b      	bne.n	8002ea4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d127      	bne.n	8002ea4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e5a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d006      	beq.n	8002e70 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d119      	bne.n	8002ea4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	685a      	ldr	r2, [r3, #4]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f022 0220 	bic.w	r2, r2, #32
 8002e7e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e84:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d105      	bne.n	8002ea4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9c:	f043 0201 	orr.w	r2, r3, #1
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ea4:	68f8      	ldr	r0, [r7, #12]
 8002ea6:	f7ff fd1b 	bl	80028e0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002eaa:	e00e      	b.n	8002eca <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb0:	f003 0310 	and.w	r3, r3, #16
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d003      	beq.n	8002ec0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002eb8:	68f8      	ldr	r0, [r7, #12]
 8002eba:	f7ff fd25 	bl	8002908 <HAL_ADC_ErrorCallback>
}
 8002ebe:	e004      	b.n	8002eca <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	4798      	blx	r3
}
 8002eca:	bf00      	nop
 8002ecc:	3710      	adds	r7, #16
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b084      	sub	sp, #16
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ede:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002ee0:	68f8      	ldr	r0, [r7, #12]
 8002ee2:	f7ff fd07 	bl	80028f4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ee6:	bf00      	nop
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b084      	sub	sp, #16
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002efa:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2240      	movs	r2, #64	; 0x40
 8002f00:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f06:	f043 0204 	orr.w	r2, r3, #4
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002f0e:	68f8      	ldr	r0, [r7, #12]
 8002f10:	f7ff fcfa 	bl	8002908 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f14:	bf00      	nop
 8002f16:	3710      	adds	r7, #16
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <__NVIC_SetPriorityGrouping>:
{
 8002f30:	b480      	push	{r7}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f003 0307 	and.w	r3, r3, #7
 8002f3e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f40:	4b0c      	ldr	r3, [pc, #48]	; (8002f74 <__NVIC_SetPriorityGrouping+0x44>)
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f46:	68ba      	ldr	r2, [r7, #8]
 8002f48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f62:	4a04      	ldr	r2, [pc, #16]	; (8002f74 <__NVIC_SetPriorityGrouping+0x44>)
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	60d3      	str	r3, [r2, #12]
}
 8002f68:	bf00      	nop
 8002f6a:	3714      	adds	r7, #20
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr
 8002f74:	e000ed00 	.word	0xe000ed00

08002f78 <__NVIC_GetPriorityGrouping>:
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f7c:	4b04      	ldr	r3, [pc, #16]	; (8002f90 <__NVIC_GetPriorityGrouping+0x18>)
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	0a1b      	lsrs	r3, r3, #8
 8002f82:	f003 0307 	and.w	r3, r3, #7
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr
 8002f90:	e000ed00 	.word	0xe000ed00

08002f94 <__NVIC_EnableIRQ>:
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	db0b      	blt.n	8002fbe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fa6:	79fb      	ldrb	r3, [r7, #7]
 8002fa8:	f003 021f 	and.w	r2, r3, #31
 8002fac:	4907      	ldr	r1, [pc, #28]	; (8002fcc <__NVIC_EnableIRQ+0x38>)
 8002fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fb2:	095b      	lsrs	r3, r3, #5
 8002fb4:	2001      	movs	r0, #1
 8002fb6:	fa00 f202 	lsl.w	r2, r0, r2
 8002fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002fbe:	bf00      	nop
 8002fc0:	370c      	adds	r7, #12
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	e000e100 	.word	0xe000e100

08002fd0 <__NVIC_SetPriority>:
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	6039      	str	r1, [r7, #0]
 8002fda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	db0a      	blt.n	8002ffa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	b2da      	uxtb	r2, r3
 8002fe8:	490c      	ldr	r1, [pc, #48]	; (800301c <__NVIC_SetPriority+0x4c>)
 8002fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fee:	0112      	lsls	r2, r2, #4
 8002ff0:	b2d2      	uxtb	r2, r2
 8002ff2:	440b      	add	r3, r1
 8002ff4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002ff8:	e00a      	b.n	8003010 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	b2da      	uxtb	r2, r3
 8002ffe:	4908      	ldr	r1, [pc, #32]	; (8003020 <__NVIC_SetPriority+0x50>)
 8003000:	79fb      	ldrb	r3, [r7, #7]
 8003002:	f003 030f 	and.w	r3, r3, #15
 8003006:	3b04      	subs	r3, #4
 8003008:	0112      	lsls	r2, r2, #4
 800300a:	b2d2      	uxtb	r2, r2
 800300c:	440b      	add	r3, r1
 800300e:	761a      	strb	r2, [r3, #24]
}
 8003010:	bf00      	nop
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr
 800301c:	e000e100 	.word	0xe000e100
 8003020:	e000ed00 	.word	0xe000ed00

08003024 <NVIC_EncodePriority>:
{
 8003024:	b480      	push	{r7}
 8003026:	b089      	sub	sp, #36	; 0x24
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f003 0307 	and.w	r3, r3, #7
 8003036:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	f1c3 0307 	rsb	r3, r3, #7
 800303e:	2b04      	cmp	r3, #4
 8003040:	bf28      	it	cs
 8003042:	2304      	movcs	r3, #4
 8003044:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	3304      	adds	r3, #4
 800304a:	2b06      	cmp	r3, #6
 800304c:	d902      	bls.n	8003054 <NVIC_EncodePriority+0x30>
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	3b03      	subs	r3, #3
 8003052:	e000      	b.n	8003056 <NVIC_EncodePriority+0x32>
 8003054:	2300      	movs	r3, #0
 8003056:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003058:	f04f 32ff 	mov.w	r2, #4294967295
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	fa02 f303 	lsl.w	r3, r2, r3
 8003062:	43da      	mvns	r2, r3
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	401a      	ands	r2, r3
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800306c:	f04f 31ff 	mov.w	r1, #4294967295
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	fa01 f303 	lsl.w	r3, r1, r3
 8003076:	43d9      	mvns	r1, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800307c:	4313      	orrs	r3, r2
}
 800307e:	4618      	mov	r0, r3
 8003080:	3724      	adds	r7, #36	; 0x24
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
	...

0800308c <SysTick_Config>:
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	3b01      	subs	r3, #1
 8003098:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800309c:	d301      	bcc.n	80030a2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800309e:	2301      	movs	r3, #1
 80030a0:	e00f      	b.n	80030c2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030a2:	4a0a      	ldr	r2, [pc, #40]	; (80030cc <SysTick_Config+0x40>)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	3b01      	subs	r3, #1
 80030a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030aa:	210f      	movs	r1, #15
 80030ac:	f04f 30ff 	mov.w	r0, #4294967295
 80030b0:	f7ff ff8e 	bl	8002fd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030b4:	4b05      	ldr	r3, [pc, #20]	; (80030cc <SysTick_Config+0x40>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030ba:	4b04      	ldr	r3, [pc, #16]	; (80030cc <SysTick_Config+0x40>)
 80030bc:	2207      	movs	r2, #7
 80030be:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3708      	adds	r7, #8
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	e000e010 	.word	0xe000e010

080030d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f7ff ff29 	bl	8002f30 <__NVIC_SetPriorityGrouping>
}
 80030de:	bf00      	nop
 80030e0:	3708      	adds	r7, #8
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030e6:	b580      	push	{r7, lr}
 80030e8:	b086      	sub	sp, #24
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	4603      	mov	r3, r0
 80030ee:	60b9      	str	r1, [r7, #8]
 80030f0:	607a      	str	r2, [r7, #4]
 80030f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030f4:	2300      	movs	r3, #0
 80030f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030f8:	f7ff ff3e 	bl	8002f78 <__NVIC_GetPriorityGrouping>
 80030fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	68b9      	ldr	r1, [r7, #8]
 8003102:	6978      	ldr	r0, [r7, #20]
 8003104:	f7ff ff8e 	bl	8003024 <NVIC_EncodePriority>
 8003108:	4602      	mov	r2, r0
 800310a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800310e:	4611      	mov	r1, r2
 8003110:	4618      	mov	r0, r3
 8003112:	f7ff ff5d 	bl	8002fd0 <__NVIC_SetPriority>
}
 8003116:	bf00      	nop
 8003118:	3718      	adds	r7, #24
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}

0800311e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800311e:	b580      	push	{r7, lr}
 8003120:	b082      	sub	sp, #8
 8003122:	af00      	add	r7, sp, #0
 8003124:	4603      	mov	r3, r0
 8003126:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800312c:	4618      	mov	r0, r3
 800312e:	f7ff ff31 	bl	8002f94 <__NVIC_EnableIRQ>
}
 8003132:	bf00      	nop
 8003134:	3708      	adds	r7, #8
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}

0800313a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800313a:	b580      	push	{r7, lr}
 800313c:	b082      	sub	sp, #8
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f7ff ffa2 	bl	800308c <SysTick_Config>
 8003148:	4603      	mov	r3, r0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3708      	adds	r7, #8
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
	...

08003154 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b086      	sub	sp, #24
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800315c:	2300      	movs	r3, #0
 800315e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003160:	f7ff f91a 	bl	8002398 <HAL_GetTick>
 8003164:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d101      	bne.n	8003170 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e099      	b.n	80032a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2202      	movs	r2, #2
 8003174:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f022 0201 	bic.w	r2, r2, #1
 800318e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003190:	e00f      	b.n	80031b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003192:	f7ff f901 	bl	8002398 <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	2b05      	cmp	r3, #5
 800319e:	d908      	bls.n	80031b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2220      	movs	r2, #32
 80031a4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2203      	movs	r2, #3
 80031aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e078      	b.n	80032a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0301 	and.w	r3, r3, #1
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d1e8      	bne.n	8003192 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80031c8:	697a      	ldr	r2, [r7, #20]
 80031ca:	4b38      	ldr	r3, [pc, #224]	; (80032ac <HAL_DMA_Init+0x158>)
 80031cc:	4013      	ands	r3, r2
 80031ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685a      	ldr	r2, [r3, #4]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	691b      	ldr	r3, [r3, #16]
 80031e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a1b      	ldr	r3, [r3, #32]
 80031fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031fe:	697a      	ldr	r2, [r7, #20]
 8003200:	4313      	orrs	r3, r2
 8003202:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003208:	2b04      	cmp	r3, #4
 800320a:	d107      	bne.n	800321c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003214:	4313      	orrs	r3, r2
 8003216:	697a      	ldr	r2, [r7, #20]
 8003218:	4313      	orrs	r3, r2
 800321a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	697a      	ldr	r2, [r7, #20]
 8003222:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	695b      	ldr	r3, [r3, #20]
 800322a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	f023 0307 	bic.w	r3, r3, #7
 8003232:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003238:	697a      	ldr	r2, [r7, #20]
 800323a:	4313      	orrs	r3, r2
 800323c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003242:	2b04      	cmp	r3, #4
 8003244:	d117      	bne.n	8003276 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324a:	697a      	ldr	r2, [r7, #20]
 800324c:	4313      	orrs	r3, r2
 800324e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003254:	2b00      	cmp	r3, #0
 8003256:	d00e      	beq.n	8003276 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f000 fa6f 	bl	800373c <DMA_CheckFifoParam>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d008      	beq.n	8003276 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2240      	movs	r2, #64	; 0x40
 8003268:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2201      	movs	r2, #1
 800326e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003272:	2301      	movs	r3, #1
 8003274:	e016      	b.n	80032a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	697a      	ldr	r2, [r7, #20]
 800327c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f000 fa26 	bl	80036d0 <DMA_CalcBaseAndBitshift>
 8003284:	4603      	mov	r3, r0
 8003286:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800328c:	223f      	movs	r2, #63	; 0x3f
 800328e:	409a      	lsls	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2201      	movs	r2, #1
 800329e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80032a2:	2300      	movs	r3, #0
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3718      	adds	r7, #24
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	f010803f 	.word	0xf010803f

080032b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b086      	sub	sp, #24
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	607a      	str	r2, [r7, #4]
 80032bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032be:	2300      	movs	r3, #0
 80032c0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032c6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d101      	bne.n	80032d6 <HAL_DMA_Start_IT+0x26>
 80032d2:	2302      	movs	r3, #2
 80032d4:	e040      	b.n	8003358 <HAL_DMA_Start_IT+0xa8>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2201      	movs	r2, #1
 80032da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d12f      	bne.n	800334a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2202      	movs	r2, #2
 80032ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2200      	movs	r2, #0
 80032f6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	68b9      	ldr	r1, [r7, #8]
 80032fe:	68f8      	ldr	r0, [r7, #12]
 8003300:	f000 f9b8 	bl	8003674 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003308:	223f      	movs	r2, #63	; 0x3f
 800330a:	409a      	lsls	r2, r3
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f042 0216 	orr.w	r2, r2, #22
 800331e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003324:	2b00      	cmp	r3, #0
 8003326:	d007      	beq.n	8003338 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f042 0208 	orr.w	r2, r2, #8
 8003336:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f042 0201 	orr.w	r2, r2, #1
 8003346:	601a      	str	r2, [r3, #0]
 8003348:	e005      	b.n	8003356 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003352:	2302      	movs	r3, #2
 8003354:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003356:	7dfb      	ldrb	r3, [r7, #23]
}
 8003358:	4618      	mov	r0, r3
 800335a:	3718      	adds	r7, #24
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}

08003360 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b086      	sub	sp, #24
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003368:	2300      	movs	r3, #0
 800336a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800336c:	4b92      	ldr	r3, [pc, #584]	; (80035b8 <HAL_DMA_IRQHandler+0x258>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a92      	ldr	r2, [pc, #584]	; (80035bc <HAL_DMA_IRQHandler+0x25c>)
 8003372:	fba2 2303 	umull	r2, r3, r2, r3
 8003376:	0a9b      	lsrs	r3, r3, #10
 8003378:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800337e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800338a:	2208      	movs	r2, #8
 800338c:	409a      	lsls	r2, r3
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	4013      	ands	r3, r2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d01a      	beq.n	80033cc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0304 	and.w	r3, r3, #4
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d013      	beq.n	80033cc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f022 0204 	bic.w	r2, r2, #4
 80033b2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b8:	2208      	movs	r2, #8
 80033ba:	409a      	lsls	r2, r3
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033c4:	f043 0201 	orr.w	r2, r3, #1
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d0:	2201      	movs	r2, #1
 80033d2:	409a      	lsls	r2, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	4013      	ands	r3, r2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d012      	beq.n	8003402 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d00b      	beq.n	8003402 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ee:	2201      	movs	r2, #1
 80033f0:	409a      	lsls	r2, r3
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033fa:	f043 0202 	orr.w	r2, r3, #2
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003406:	2204      	movs	r2, #4
 8003408:	409a      	lsls	r2, r3
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	4013      	ands	r3, r2
 800340e:	2b00      	cmp	r3, #0
 8003410:	d012      	beq.n	8003438 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00b      	beq.n	8003438 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003424:	2204      	movs	r2, #4
 8003426:	409a      	lsls	r2, r3
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003430:	f043 0204 	orr.w	r2, r3, #4
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800343c:	2210      	movs	r2, #16
 800343e:	409a      	lsls	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	4013      	ands	r3, r2
 8003444:	2b00      	cmp	r3, #0
 8003446:	d043      	beq.n	80034d0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0308 	and.w	r3, r3, #8
 8003452:	2b00      	cmp	r3, #0
 8003454:	d03c      	beq.n	80034d0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800345a:	2210      	movs	r2, #16
 800345c:	409a      	lsls	r2, r3
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d018      	beq.n	80034a2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d108      	bne.n	8003490 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003482:	2b00      	cmp	r3, #0
 8003484:	d024      	beq.n	80034d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	4798      	blx	r3
 800348e:	e01f      	b.n	80034d0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003494:	2b00      	cmp	r3, #0
 8003496:	d01b      	beq.n	80034d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	4798      	blx	r3
 80034a0:	e016      	b.n	80034d0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d107      	bne.n	80034c0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f022 0208 	bic.w	r2, r2, #8
 80034be:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d003      	beq.n	80034d0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034d4:	2220      	movs	r2, #32
 80034d6:	409a      	lsls	r2, r3
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	4013      	ands	r3, r2
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f000 808e 	beq.w	80035fe <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0310 	and.w	r3, r3, #16
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	f000 8086 	beq.w	80035fe <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034f6:	2220      	movs	r2, #32
 80034f8:	409a      	lsls	r2, r3
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b05      	cmp	r3, #5
 8003508:	d136      	bne.n	8003578 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f022 0216 	bic.w	r2, r2, #22
 8003518:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	695a      	ldr	r2, [r3, #20]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003528:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352e:	2b00      	cmp	r3, #0
 8003530:	d103      	bne.n	800353a <HAL_DMA_IRQHandler+0x1da>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003536:	2b00      	cmp	r3, #0
 8003538:	d007      	beq.n	800354a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f022 0208 	bic.w	r2, r2, #8
 8003548:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800354e:	223f      	movs	r2, #63	; 0x3f
 8003550:	409a      	lsls	r2, r3
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2201      	movs	r2, #1
 800355a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800356a:	2b00      	cmp	r3, #0
 800356c:	d07d      	beq.n	800366a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	4798      	blx	r3
        }
        return;
 8003576:	e078      	b.n	800366a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d01c      	beq.n	80035c0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d108      	bne.n	80035a6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003598:	2b00      	cmp	r3, #0
 800359a:	d030      	beq.n	80035fe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	4798      	blx	r3
 80035a4:	e02b      	b.n	80035fe <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d027      	beq.n	80035fe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	4798      	blx	r3
 80035b6:	e022      	b.n	80035fe <HAL_DMA_IRQHandler+0x29e>
 80035b8:	20000000 	.word	0x20000000
 80035bc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d10f      	bne.n	80035ee <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f022 0210 	bic.w	r2, r2, #16
 80035dc:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2201      	movs	r2, #1
 80035e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d003      	beq.n	80035fe <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003602:	2b00      	cmp	r3, #0
 8003604:	d032      	beq.n	800366c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	2b00      	cmp	r3, #0
 8003610:	d022      	beq.n	8003658 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2205      	movs	r2, #5
 8003616:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f022 0201 	bic.w	r2, r2, #1
 8003628:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	3301      	adds	r3, #1
 800362e:	60bb      	str	r3, [r7, #8]
 8003630:	697a      	ldr	r2, [r7, #20]
 8003632:	429a      	cmp	r2, r3
 8003634:	d307      	bcc.n	8003646 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0301 	and.w	r3, r3, #1
 8003640:	2b00      	cmp	r3, #0
 8003642:	d1f2      	bne.n	800362a <HAL_DMA_IRQHandler+0x2ca>
 8003644:	e000      	b.n	8003648 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003646:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800365c:	2b00      	cmp	r3, #0
 800365e:	d005      	beq.n	800366c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	4798      	blx	r3
 8003668:	e000      	b.n	800366c <HAL_DMA_IRQHandler+0x30c>
        return;
 800366a:	bf00      	nop
    }
  }
}
 800366c:	3718      	adds	r7, #24
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop

08003674 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003674:	b480      	push	{r7}
 8003676:	b085      	sub	sp, #20
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]
 8003680:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003690:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	683a      	ldr	r2, [r7, #0]
 8003698:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	2b40      	cmp	r3, #64	; 0x40
 80036a0:	d108      	bne.n	80036b4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68ba      	ldr	r2, [r7, #8]
 80036b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80036b2:	e007      	b.n	80036c4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68ba      	ldr	r2, [r7, #8]
 80036ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	60da      	str	r2, [r3, #12]
}
 80036c4:	bf00      	nop
 80036c6:	3714      	adds	r7, #20
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b085      	sub	sp, #20
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	3b10      	subs	r3, #16
 80036e0:	4a14      	ldr	r2, [pc, #80]	; (8003734 <DMA_CalcBaseAndBitshift+0x64>)
 80036e2:	fba2 2303 	umull	r2, r3, r2, r3
 80036e6:	091b      	lsrs	r3, r3, #4
 80036e8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80036ea:	4a13      	ldr	r2, [pc, #76]	; (8003738 <DMA_CalcBaseAndBitshift+0x68>)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	4413      	add	r3, r2
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	461a      	mov	r2, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2b03      	cmp	r3, #3
 80036fc:	d909      	bls.n	8003712 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003706:	f023 0303 	bic.w	r3, r3, #3
 800370a:	1d1a      	adds	r2, r3, #4
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	659a      	str	r2, [r3, #88]	; 0x58
 8003710:	e007      	b.n	8003722 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800371a:	f023 0303 	bic.w	r3, r3, #3
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003726:	4618      	mov	r0, r3
 8003728:	3714      	adds	r7, #20
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	aaaaaaab 	.word	0xaaaaaaab
 8003738:	08009878 	.word	0x08009878

0800373c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800373c:	b480      	push	{r7}
 800373e:	b085      	sub	sp, #20
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003744:	2300      	movs	r3, #0
 8003746:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800374c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d11f      	bne.n	8003796 <DMA_CheckFifoParam+0x5a>
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	2b03      	cmp	r3, #3
 800375a:	d856      	bhi.n	800380a <DMA_CheckFifoParam+0xce>
 800375c:	a201      	add	r2, pc, #4	; (adr r2, 8003764 <DMA_CheckFifoParam+0x28>)
 800375e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003762:	bf00      	nop
 8003764:	08003775 	.word	0x08003775
 8003768:	08003787 	.word	0x08003787
 800376c:	08003775 	.word	0x08003775
 8003770:	0800380b 	.word	0x0800380b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003778:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d046      	beq.n	800380e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003784:	e043      	b.n	800380e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800378a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800378e:	d140      	bne.n	8003812 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003794:	e03d      	b.n	8003812 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800379e:	d121      	bne.n	80037e4 <DMA_CheckFifoParam+0xa8>
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	2b03      	cmp	r3, #3
 80037a4:	d837      	bhi.n	8003816 <DMA_CheckFifoParam+0xda>
 80037a6:	a201      	add	r2, pc, #4	; (adr r2, 80037ac <DMA_CheckFifoParam+0x70>)
 80037a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ac:	080037bd 	.word	0x080037bd
 80037b0:	080037c3 	.word	0x080037c3
 80037b4:	080037bd 	.word	0x080037bd
 80037b8:	080037d5 	.word	0x080037d5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	73fb      	strb	r3, [r7, #15]
      break;
 80037c0:	e030      	b.n	8003824 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d025      	beq.n	800381a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037d2:	e022      	b.n	800381a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80037dc:	d11f      	bne.n	800381e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80037e2:	e01c      	b.n	800381e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d903      	bls.n	80037f2 <DMA_CheckFifoParam+0xb6>
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	2b03      	cmp	r3, #3
 80037ee:	d003      	beq.n	80037f8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80037f0:	e018      	b.n	8003824 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	73fb      	strb	r3, [r7, #15]
      break;
 80037f6:	e015      	b.n	8003824 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00e      	beq.n	8003822 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	73fb      	strb	r3, [r7, #15]
      break;
 8003808:	e00b      	b.n	8003822 <DMA_CheckFifoParam+0xe6>
      break;
 800380a:	bf00      	nop
 800380c:	e00a      	b.n	8003824 <DMA_CheckFifoParam+0xe8>
      break;
 800380e:	bf00      	nop
 8003810:	e008      	b.n	8003824 <DMA_CheckFifoParam+0xe8>
      break;
 8003812:	bf00      	nop
 8003814:	e006      	b.n	8003824 <DMA_CheckFifoParam+0xe8>
      break;
 8003816:	bf00      	nop
 8003818:	e004      	b.n	8003824 <DMA_CheckFifoParam+0xe8>
      break;
 800381a:	bf00      	nop
 800381c:	e002      	b.n	8003824 <DMA_CheckFifoParam+0xe8>
      break;   
 800381e:	bf00      	nop
 8003820:	e000      	b.n	8003824 <DMA_CheckFifoParam+0xe8>
      break;
 8003822:	bf00      	nop
    }
  } 
  
  return status; 
 8003824:	7bfb      	ldrb	r3, [r7, #15]
}
 8003826:	4618      	mov	r0, r3
 8003828:	3714      	adds	r7, #20
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop

08003834 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003834:	b480      	push	{r7}
 8003836:	b089      	sub	sp, #36	; 0x24
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800383e:	2300      	movs	r3, #0
 8003840:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003842:	2300      	movs	r3, #0
 8003844:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003846:	2300      	movs	r3, #0
 8003848:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800384a:	2300      	movs	r3, #0
 800384c:	61fb      	str	r3, [r7, #28]
 800384e:	e159      	b.n	8003b04 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003850:	2201      	movs	r2, #1
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	fa02 f303 	lsl.w	r3, r2, r3
 8003858:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	697a      	ldr	r2, [r7, #20]
 8003860:	4013      	ands	r3, r2
 8003862:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003864:	693a      	ldr	r2, [r7, #16]
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	429a      	cmp	r2, r3
 800386a:	f040 8148 	bne.w	8003afe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f003 0303 	and.w	r3, r3, #3
 8003876:	2b01      	cmp	r3, #1
 8003878:	d005      	beq.n	8003886 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003882:	2b02      	cmp	r3, #2
 8003884:	d130      	bne.n	80038e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	005b      	lsls	r3, r3, #1
 8003890:	2203      	movs	r2, #3
 8003892:	fa02 f303 	lsl.w	r3, r2, r3
 8003896:	43db      	mvns	r3, r3
 8003898:	69ba      	ldr	r2, [r7, #24]
 800389a:	4013      	ands	r3, r2
 800389c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	68da      	ldr	r2, [r3, #12]
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	005b      	lsls	r3, r3, #1
 80038a6:	fa02 f303 	lsl.w	r3, r2, r3
 80038aa:	69ba      	ldr	r2, [r7, #24]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	69ba      	ldr	r2, [r7, #24]
 80038b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038bc:	2201      	movs	r2, #1
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	fa02 f303 	lsl.w	r3, r2, r3
 80038c4:	43db      	mvns	r3, r3
 80038c6:	69ba      	ldr	r2, [r7, #24]
 80038c8:	4013      	ands	r3, r2
 80038ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	091b      	lsrs	r3, r3, #4
 80038d2:	f003 0201 	and.w	r2, r3, #1
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	fa02 f303 	lsl.w	r3, r2, r3
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	4313      	orrs	r3, r2
 80038e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	69ba      	ldr	r2, [r7, #24]
 80038e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f003 0303 	and.w	r3, r3, #3
 80038f0:	2b03      	cmp	r3, #3
 80038f2:	d017      	beq.n	8003924 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	005b      	lsls	r3, r3, #1
 80038fe:	2203      	movs	r2, #3
 8003900:	fa02 f303 	lsl.w	r3, r2, r3
 8003904:	43db      	mvns	r3, r3
 8003906:	69ba      	ldr	r2, [r7, #24]
 8003908:	4013      	ands	r3, r2
 800390a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	689a      	ldr	r2, [r3, #8]
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	005b      	lsls	r3, r3, #1
 8003914:	fa02 f303 	lsl.w	r3, r2, r3
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	4313      	orrs	r3, r2
 800391c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	69ba      	ldr	r2, [r7, #24]
 8003922:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f003 0303 	and.w	r3, r3, #3
 800392c:	2b02      	cmp	r3, #2
 800392e:	d123      	bne.n	8003978 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	08da      	lsrs	r2, r3, #3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	3208      	adds	r2, #8
 8003938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800393c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	f003 0307 	and.w	r3, r3, #7
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	220f      	movs	r2, #15
 8003948:	fa02 f303 	lsl.w	r3, r2, r3
 800394c:	43db      	mvns	r3, r3
 800394e:	69ba      	ldr	r2, [r7, #24]
 8003950:	4013      	ands	r3, r2
 8003952:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	691a      	ldr	r2, [r3, #16]
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	f003 0307 	and.w	r3, r3, #7
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	fa02 f303 	lsl.w	r3, r2, r3
 8003964:	69ba      	ldr	r2, [r7, #24]
 8003966:	4313      	orrs	r3, r2
 8003968:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	08da      	lsrs	r2, r3, #3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	3208      	adds	r2, #8
 8003972:	69b9      	ldr	r1, [r7, #24]
 8003974:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	005b      	lsls	r3, r3, #1
 8003982:	2203      	movs	r2, #3
 8003984:	fa02 f303 	lsl.w	r3, r2, r3
 8003988:	43db      	mvns	r3, r3
 800398a:	69ba      	ldr	r2, [r7, #24]
 800398c:	4013      	ands	r3, r2
 800398e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f003 0203 	and.w	r2, r3, #3
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	005b      	lsls	r3, r3, #1
 800399c:	fa02 f303 	lsl.w	r3, r2, r3
 80039a0:	69ba      	ldr	r2, [r7, #24]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	69ba      	ldr	r2, [r7, #24]
 80039aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	f000 80a2 	beq.w	8003afe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039ba:	2300      	movs	r3, #0
 80039bc:	60fb      	str	r3, [r7, #12]
 80039be:	4b57      	ldr	r3, [pc, #348]	; (8003b1c <HAL_GPIO_Init+0x2e8>)
 80039c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c2:	4a56      	ldr	r2, [pc, #344]	; (8003b1c <HAL_GPIO_Init+0x2e8>)
 80039c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039c8:	6453      	str	r3, [r2, #68]	; 0x44
 80039ca:	4b54      	ldr	r3, [pc, #336]	; (8003b1c <HAL_GPIO_Init+0x2e8>)
 80039cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039d2:	60fb      	str	r3, [r7, #12]
 80039d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039d6:	4a52      	ldr	r2, [pc, #328]	; (8003b20 <HAL_GPIO_Init+0x2ec>)
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	089b      	lsrs	r3, r3, #2
 80039dc:	3302      	adds	r3, #2
 80039de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	f003 0303 	and.w	r3, r3, #3
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	220f      	movs	r2, #15
 80039ee:	fa02 f303 	lsl.w	r3, r2, r3
 80039f2:	43db      	mvns	r3, r3
 80039f4:	69ba      	ldr	r2, [r7, #24]
 80039f6:	4013      	ands	r3, r2
 80039f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a49      	ldr	r2, [pc, #292]	; (8003b24 <HAL_GPIO_Init+0x2f0>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d019      	beq.n	8003a36 <HAL_GPIO_Init+0x202>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a48      	ldr	r2, [pc, #288]	; (8003b28 <HAL_GPIO_Init+0x2f4>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d013      	beq.n	8003a32 <HAL_GPIO_Init+0x1fe>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a47      	ldr	r2, [pc, #284]	; (8003b2c <HAL_GPIO_Init+0x2f8>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d00d      	beq.n	8003a2e <HAL_GPIO_Init+0x1fa>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a46      	ldr	r2, [pc, #280]	; (8003b30 <HAL_GPIO_Init+0x2fc>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d007      	beq.n	8003a2a <HAL_GPIO_Init+0x1f6>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a45      	ldr	r2, [pc, #276]	; (8003b34 <HAL_GPIO_Init+0x300>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d101      	bne.n	8003a26 <HAL_GPIO_Init+0x1f2>
 8003a22:	2304      	movs	r3, #4
 8003a24:	e008      	b.n	8003a38 <HAL_GPIO_Init+0x204>
 8003a26:	2307      	movs	r3, #7
 8003a28:	e006      	b.n	8003a38 <HAL_GPIO_Init+0x204>
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e004      	b.n	8003a38 <HAL_GPIO_Init+0x204>
 8003a2e:	2302      	movs	r3, #2
 8003a30:	e002      	b.n	8003a38 <HAL_GPIO_Init+0x204>
 8003a32:	2301      	movs	r3, #1
 8003a34:	e000      	b.n	8003a38 <HAL_GPIO_Init+0x204>
 8003a36:	2300      	movs	r3, #0
 8003a38:	69fa      	ldr	r2, [r7, #28]
 8003a3a:	f002 0203 	and.w	r2, r2, #3
 8003a3e:	0092      	lsls	r2, r2, #2
 8003a40:	4093      	lsls	r3, r2
 8003a42:	69ba      	ldr	r2, [r7, #24]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a48:	4935      	ldr	r1, [pc, #212]	; (8003b20 <HAL_GPIO_Init+0x2ec>)
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	089b      	lsrs	r3, r3, #2
 8003a4e:	3302      	adds	r3, #2
 8003a50:	69ba      	ldr	r2, [r7, #24]
 8003a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a56:	4b38      	ldr	r3, [pc, #224]	; (8003b38 <HAL_GPIO_Init+0x304>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	43db      	mvns	r3, r3
 8003a60:	69ba      	ldr	r2, [r7, #24]
 8003a62:	4013      	ands	r3, r2
 8003a64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d003      	beq.n	8003a7a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003a72:	69ba      	ldr	r2, [r7, #24]
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a7a:	4a2f      	ldr	r2, [pc, #188]	; (8003b38 <HAL_GPIO_Init+0x304>)
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003a80:	4b2d      	ldr	r3, [pc, #180]	; (8003b38 <HAL_GPIO_Init+0x304>)
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	43db      	mvns	r3, r3
 8003a8a:	69ba      	ldr	r2, [r7, #24]
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d003      	beq.n	8003aa4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003a9c:	69ba      	ldr	r2, [r7, #24]
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003aa4:	4a24      	ldr	r2, [pc, #144]	; (8003b38 <HAL_GPIO_Init+0x304>)
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003aaa:	4b23      	ldr	r3, [pc, #140]	; (8003b38 <HAL_GPIO_Init+0x304>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	43db      	mvns	r3, r3
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d003      	beq.n	8003ace <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003ac6:	69ba      	ldr	r2, [r7, #24]
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ace:	4a1a      	ldr	r2, [pc, #104]	; (8003b38 <HAL_GPIO_Init+0x304>)
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ad4:	4b18      	ldr	r3, [pc, #96]	; (8003b38 <HAL_GPIO_Init+0x304>)
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	43db      	mvns	r3, r3
 8003ade:	69ba      	ldr	r2, [r7, #24]
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d003      	beq.n	8003af8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003af8:	4a0f      	ldr	r2, [pc, #60]	; (8003b38 <HAL_GPIO_Init+0x304>)
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	3301      	adds	r3, #1
 8003b02:	61fb      	str	r3, [r7, #28]
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	2b0f      	cmp	r3, #15
 8003b08:	f67f aea2 	bls.w	8003850 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b0c:	bf00      	nop
 8003b0e:	bf00      	nop
 8003b10:	3724      	adds	r7, #36	; 0x24
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	40023800 	.word	0x40023800
 8003b20:	40013800 	.word	0x40013800
 8003b24:	40020000 	.word	0x40020000
 8003b28:	40020400 	.word	0x40020400
 8003b2c:	40020800 	.word	0x40020800
 8003b30:	40020c00 	.word	0x40020c00
 8003b34:	40021000 	.word	0x40021000
 8003b38:	40013c00 	.word	0x40013c00

08003b3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	460b      	mov	r3, r1
 8003b46:	807b      	strh	r3, [r7, #2]
 8003b48:	4613      	mov	r3, r2
 8003b4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b4c:	787b      	ldrb	r3, [r7, #1]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d003      	beq.n	8003b5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b52:	887a      	ldrh	r2, [r7, #2]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b58:	e003      	b.n	8003b62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b5a:	887b      	ldrh	r3, [r7, #2]
 8003b5c:	041a      	lsls	r2, r3, #16
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	619a      	str	r2, [r3, #24]
}
 8003b62:	bf00      	nop
 8003b64:	370c      	adds	r7, #12
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr
	...

08003b70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	4603      	mov	r3, r0
 8003b78:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003b7a:	4b08      	ldr	r3, [pc, #32]	; (8003b9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b7c:	695a      	ldr	r2, [r3, #20]
 8003b7e:	88fb      	ldrh	r3, [r7, #6]
 8003b80:	4013      	ands	r3, r2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d006      	beq.n	8003b94 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b86:	4a05      	ldr	r2, [pc, #20]	; (8003b9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b88:	88fb      	ldrh	r3, [r7, #6]
 8003b8a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b8c:	88fb      	ldrh	r3, [r7, #6]
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7fd ffce 	bl	8001b30 <HAL_GPIO_EXTI_Callback>
  }
}
 8003b94:	bf00      	nop
 8003b96:	3708      	adds	r7, #8
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	40013c00 	.word	0x40013c00

08003ba0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b086      	sub	sp, #24
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d101      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e264      	b.n	800407c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d075      	beq.n	8003caa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bbe:	4ba3      	ldr	r3, [pc, #652]	; (8003e4c <HAL_RCC_OscConfig+0x2ac>)
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f003 030c 	and.w	r3, r3, #12
 8003bc6:	2b04      	cmp	r3, #4
 8003bc8:	d00c      	beq.n	8003be4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bca:	4ba0      	ldr	r3, [pc, #640]	; (8003e4c <HAL_RCC_OscConfig+0x2ac>)
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bd2:	2b08      	cmp	r3, #8
 8003bd4:	d112      	bne.n	8003bfc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bd6:	4b9d      	ldr	r3, [pc, #628]	; (8003e4c <HAL_RCC_OscConfig+0x2ac>)
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003be2:	d10b      	bne.n	8003bfc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003be4:	4b99      	ldr	r3, [pc, #612]	; (8003e4c <HAL_RCC_OscConfig+0x2ac>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d05b      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x108>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d157      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e23f      	b.n	800407c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c04:	d106      	bne.n	8003c14 <HAL_RCC_OscConfig+0x74>
 8003c06:	4b91      	ldr	r3, [pc, #580]	; (8003e4c <HAL_RCC_OscConfig+0x2ac>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a90      	ldr	r2, [pc, #576]	; (8003e4c <HAL_RCC_OscConfig+0x2ac>)
 8003c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c10:	6013      	str	r3, [r2, #0]
 8003c12:	e01d      	b.n	8003c50 <HAL_RCC_OscConfig+0xb0>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c1c:	d10c      	bne.n	8003c38 <HAL_RCC_OscConfig+0x98>
 8003c1e:	4b8b      	ldr	r3, [pc, #556]	; (8003e4c <HAL_RCC_OscConfig+0x2ac>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a8a      	ldr	r2, [pc, #552]	; (8003e4c <HAL_RCC_OscConfig+0x2ac>)
 8003c24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c28:	6013      	str	r3, [r2, #0]
 8003c2a:	4b88      	ldr	r3, [pc, #544]	; (8003e4c <HAL_RCC_OscConfig+0x2ac>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a87      	ldr	r2, [pc, #540]	; (8003e4c <HAL_RCC_OscConfig+0x2ac>)
 8003c30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c34:	6013      	str	r3, [r2, #0]
 8003c36:	e00b      	b.n	8003c50 <HAL_RCC_OscConfig+0xb0>
 8003c38:	4b84      	ldr	r3, [pc, #528]	; (8003e4c <HAL_RCC_OscConfig+0x2ac>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a83      	ldr	r2, [pc, #524]	; (8003e4c <HAL_RCC_OscConfig+0x2ac>)
 8003c3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c42:	6013      	str	r3, [r2, #0]
 8003c44:	4b81      	ldr	r3, [pc, #516]	; (8003e4c <HAL_RCC_OscConfig+0x2ac>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a80      	ldr	r2, [pc, #512]	; (8003e4c <HAL_RCC_OscConfig+0x2ac>)
 8003c4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d013      	beq.n	8003c80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c58:	f7fe fb9e 	bl	8002398 <HAL_GetTick>
 8003c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c5e:	e008      	b.n	8003c72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c60:	f7fe fb9a 	bl	8002398 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	2b64      	cmp	r3, #100	; 0x64
 8003c6c:	d901      	bls.n	8003c72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e204      	b.n	800407c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c72:	4b76      	ldr	r3, [pc, #472]	; (8003e4c <HAL_RCC_OscConfig+0x2ac>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d0f0      	beq.n	8003c60 <HAL_RCC_OscConfig+0xc0>
 8003c7e:	e014      	b.n	8003caa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c80:	f7fe fb8a 	bl	8002398 <HAL_GetTick>
 8003c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c86:	e008      	b.n	8003c9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c88:	f7fe fb86 	bl	8002398 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b64      	cmp	r3, #100	; 0x64
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e1f0      	b.n	800407c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c9a:	4b6c      	ldr	r3, [pc, #432]	; (8003e4c <HAL_RCC_OscConfig+0x2ac>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d1f0      	bne.n	8003c88 <HAL_RCC_OscConfig+0xe8>
 8003ca6:	e000      	b.n	8003caa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ca8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d063      	beq.n	8003d7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cb6:	4b65      	ldr	r3, [pc, #404]	; (8003e4c <HAL_RCC_OscConfig+0x2ac>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f003 030c 	and.w	r3, r3, #12
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00b      	beq.n	8003cda <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cc2:	4b62      	ldr	r3, [pc, #392]	; (8003e4c <HAL_RCC_OscConfig+0x2ac>)
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cca:	2b08      	cmp	r3, #8
 8003ccc:	d11c      	bne.n	8003d08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cce:	4b5f      	ldr	r3, [pc, #380]	; (8003e4c <HAL_RCC_OscConfig+0x2ac>)
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d116      	bne.n	8003d08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cda:	4b5c      	ldr	r3, [pc, #368]	; (8003e4c <HAL_RCC_OscConfig+0x2ac>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0302 	and.w	r3, r3, #2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d005      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x152>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d001      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e1c4      	b.n	800407c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cf2:	4b56      	ldr	r3, [pc, #344]	; (8003e4c <HAL_RCC_OscConfig+0x2ac>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	00db      	lsls	r3, r3, #3
 8003d00:	4952      	ldr	r1, [pc, #328]	; (8003e4c <HAL_RCC_OscConfig+0x2ac>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d06:	e03a      	b.n	8003d7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d020      	beq.n	8003d52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d10:	4b4f      	ldr	r3, [pc, #316]	; (8003e50 <HAL_RCC_OscConfig+0x2b0>)
 8003d12:	2201      	movs	r2, #1
 8003d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d16:	f7fe fb3f 	bl	8002398 <HAL_GetTick>
 8003d1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d1c:	e008      	b.n	8003d30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d1e:	f7fe fb3b 	bl	8002398 <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d901      	bls.n	8003d30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e1a5      	b.n	800407c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d30:	4b46      	ldr	r3, [pc, #280]	; (8003e4c <HAL_RCC_OscConfig+0x2ac>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0302 	and.w	r3, r3, #2
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d0f0      	beq.n	8003d1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d3c:	4b43      	ldr	r3, [pc, #268]	; (8003e4c <HAL_RCC_OscConfig+0x2ac>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	691b      	ldr	r3, [r3, #16]
 8003d48:	00db      	lsls	r3, r3, #3
 8003d4a:	4940      	ldr	r1, [pc, #256]	; (8003e4c <HAL_RCC_OscConfig+0x2ac>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	600b      	str	r3, [r1, #0]
 8003d50:	e015      	b.n	8003d7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d52:	4b3f      	ldr	r3, [pc, #252]	; (8003e50 <HAL_RCC_OscConfig+0x2b0>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d58:	f7fe fb1e 	bl	8002398 <HAL_GetTick>
 8003d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d5e:	e008      	b.n	8003d72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d60:	f7fe fb1a 	bl	8002398 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d901      	bls.n	8003d72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e184      	b.n	800407c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d72:	4b36      	ldr	r3, [pc, #216]	; (8003e4c <HAL_RCC_OscConfig+0x2ac>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0302 	and.w	r3, r3, #2
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1f0      	bne.n	8003d60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0308 	and.w	r3, r3, #8
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d030      	beq.n	8003dec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d016      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d92:	4b30      	ldr	r3, [pc, #192]	; (8003e54 <HAL_RCC_OscConfig+0x2b4>)
 8003d94:	2201      	movs	r2, #1
 8003d96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d98:	f7fe fafe 	bl	8002398 <HAL_GetTick>
 8003d9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d9e:	e008      	b.n	8003db2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003da0:	f7fe fafa 	bl	8002398 <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d901      	bls.n	8003db2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e164      	b.n	800407c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003db2:	4b26      	ldr	r3, [pc, #152]	; (8003e4c <HAL_RCC_OscConfig+0x2ac>)
 8003db4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003db6:	f003 0302 	and.w	r3, r3, #2
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d0f0      	beq.n	8003da0 <HAL_RCC_OscConfig+0x200>
 8003dbe:	e015      	b.n	8003dec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dc0:	4b24      	ldr	r3, [pc, #144]	; (8003e54 <HAL_RCC_OscConfig+0x2b4>)
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dc6:	f7fe fae7 	bl	8002398 <HAL_GetTick>
 8003dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dcc:	e008      	b.n	8003de0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dce:	f7fe fae3 	bl	8002398 <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d901      	bls.n	8003de0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e14d      	b.n	800407c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003de0:	4b1a      	ldr	r3, [pc, #104]	; (8003e4c <HAL_RCC_OscConfig+0x2ac>)
 8003de2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003de4:	f003 0302 	and.w	r3, r3, #2
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d1f0      	bne.n	8003dce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0304 	and.w	r3, r3, #4
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f000 80a0 	beq.w	8003f3a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dfe:	4b13      	ldr	r3, [pc, #76]	; (8003e4c <HAL_RCC_OscConfig+0x2ac>)
 8003e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d10f      	bne.n	8003e2a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	60bb      	str	r3, [r7, #8]
 8003e0e:	4b0f      	ldr	r3, [pc, #60]	; (8003e4c <HAL_RCC_OscConfig+0x2ac>)
 8003e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e12:	4a0e      	ldr	r2, [pc, #56]	; (8003e4c <HAL_RCC_OscConfig+0x2ac>)
 8003e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e18:	6413      	str	r3, [r2, #64]	; 0x40
 8003e1a:	4b0c      	ldr	r3, [pc, #48]	; (8003e4c <HAL_RCC_OscConfig+0x2ac>)
 8003e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e22:	60bb      	str	r3, [r7, #8]
 8003e24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e26:	2301      	movs	r3, #1
 8003e28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e2a:	4b0b      	ldr	r3, [pc, #44]	; (8003e58 <HAL_RCC_OscConfig+0x2b8>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d121      	bne.n	8003e7a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e36:	4b08      	ldr	r3, [pc, #32]	; (8003e58 <HAL_RCC_OscConfig+0x2b8>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a07      	ldr	r2, [pc, #28]	; (8003e58 <HAL_RCC_OscConfig+0x2b8>)
 8003e3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e42:	f7fe faa9 	bl	8002398 <HAL_GetTick>
 8003e46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e48:	e011      	b.n	8003e6e <HAL_RCC_OscConfig+0x2ce>
 8003e4a:	bf00      	nop
 8003e4c:	40023800 	.word	0x40023800
 8003e50:	42470000 	.word	0x42470000
 8003e54:	42470e80 	.word	0x42470e80
 8003e58:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e5c:	f7fe fa9c 	bl	8002398 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d901      	bls.n	8003e6e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e106      	b.n	800407c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e6e:	4b85      	ldr	r3, [pc, #532]	; (8004084 <HAL_RCC_OscConfig+0x4e4>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d0f0      	beq.n	8003e5c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d106      	bne.n	8003e90 <HAL_RCC_OscConfig+0x2f0>
 8003e82:	4b81      	ldr	r3, [pc, #516]	; (8004088 <HAL_RCC_OscConfig+0x4e8>)
 8003e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e86:	4a80      	ldr	r2, [pc, #512]	; (8004088 <HAL_RCC_OscConfig+0x4e8>)
 8003e88:	f043 0301 	orr.w	r3, r3, #1
 8003e8c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e8e:	e01c      	b.n	8003eca <HAL_RCC_OscConfig+0x32a>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	2b05      	cmp	r3, #5
 8003e96:	d10c      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x312>
 8003e98:	4b7b      	ldr	r3, [pc, #492]	; (8004088 <HAL_RCC_OscConfig+0x4e8>)
 8003e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e9c:	4a7a      	ldr	r2, [pc, #488]	; (8004088 <HAL_RCC_OscConfig+0x4e8>)
 8003e9e:	f043 0304 	orr.w	r3, r3, #4
 8003ea2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ea4:	4b78      	ldr	r3, [pc, #480]	; (8004088 <HAL_RCC_OscConfig+0x4e8>)
 8003ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea8:	4a77      	ldr	r2, [pc, #476]	; (8004088 <HAL_RCC_OscConfig+0x4e8>)
 8003eaa:	f043 0301 	orr.w	r3, r3, #1
 8003eae:	6713      	str	r3, [r2, #112]	; 0x70
 8003eb0:	e00b      	b.n	8003eca <HAL_RCC_OscConfig+0x32a>
 8003eb2:	4b75      	ldr	r3, [pc, #468]	; (8004088 <HAL_RCC_OscConfig+0x4e8>)
 8003eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb6:	4a74      	ldr	r2, [pc, #464]	; (8004088 <HAL_RCC_OscConfig+0x4e8>)
 8003eb8:	f023 0301 	bic.w	r3, r3, #1
 8003ebc:	6713      	str	r3, [r2, #112]	; 0x70
 8003ebe:	4b72      	ldr	r3, [pc, #456]	; (8004088 <HAL_RCC_OscConfig+0x4e8>)
 8003ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec2:	4a71      	ldr	r2, [pc, #452]	; (8004088 <HAL_RCC_OscConfig+0x4e8>)
 8003ec4:	f023 0304 	bic.w	r3, r3, #4
 8003ec8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d015      	beq.n	8003efe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ed2:	f7fe fa61 	bl	8002398 <HAL_GetTick>
 8003ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ed8:	e00a      	b.n	8003ef0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003eda:	f7fe fa5d 	bl	8002398 <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d901      	bls.n	8003ef0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e0c5      	b.n	800407c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ef0:	4b65      	ldr	r3, [pc, #404]	; (8004088 <HAL_RCC_OscConfig+0x4e8>)
 8003ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef4:	f003 0302 	and.w	r3, r3, #2
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d0ee      	beq.n	8003eda <HAL_RCC_OscConfig+0x33a>
 8003efc:	e014      	b.n	8003f28 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003efe:	f7fe fa4b 	bl	8002398 <HAL_GetTick>
 8003f02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f04:	e00a      	b.n	8003f1c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f06:	f7fe fa47 	bl	8002398 <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d901      	bls.n	8003f1c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	e0af      	b.n	800407c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f1c:	4b5a      	ldr	r3, [pc, #360]	; (8004088 <HAL_RCC_OscConfig+0x4e8>)
 8003f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f20:	f003 0302 	and.w	r3, r3, #2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d1ee      	bne.n	8003f06 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f28:	7dfb      	ldrb	r3, [r7, #23]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d105      	bne.n	8003f3a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f2e:	4b56      	ldr	r3, [pc, #344]	; (8004088 <HAL_RCC_OscConfig+0x4e8>)
 8003f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f32:	4a55      	ldr	r2, [pc, #340]	; (8004088 <HAL_RCC_OscConfig+0x4e8>)
 8003f34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f38:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	699b      	ldr	r3, [r3, #24]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	f000 809b 	beq.w	800407a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f44:	4b50      	ldr	r3, [pc, #320]	; (8004088 <HAL_RCC_OscConfig+0x4e8>)
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f003 030c 	and.w	r3, r3, #12
 8003f4c:	2b08      	cmp	r3, #8
 8003f4e:	d05c      	beq.n	800400a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	699b      	ldr	r3, [r3, #24]
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d141      	bne.n	8003fdc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f58:	4b4c      	ldr	r3, [pc, #304]	; (800408c <HAL_RCC_OscConfig+0x4ec>)
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f5e:	f7fe fa1b 	bl	8002398 <HAL_GetTick>
 8003f62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f64:	e008      	b.n	8003f78 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f66:	f7fe fa17 	bl	8002398 <HAL_GetTick>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d901      	bls.n	8003f78 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003f74:	2303      	movs	r3, #3
 8003f76:	e081      	b.n	800407c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f78:	4b43      	ldr	r3, [pc, #268]	; (8004088 <HAL_RCC_OscConfig+0x4e8>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d1f0      	bne.n	8003f66 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	69da      	ldr	r2, [r3, #28]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a1b      	ldr	r3, [r3, #32]
 8003f8c:	431a      	orrs	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f92:	019b      	lsls	r3, r3, #6
 8003f94:	431a      	orrs	r2, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f9a:	085b      	lsrs	r3, r3, #1
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	041b      	lsls	r3, r3, #16
 8003fa0:	431a      	orrs	r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa6:	061b      	lsls	r3, r3, #24
 8003fa8:	4937      	ldr	r1, [pc, #220]	; (8004088 <HAL_RCC_OscConfig+0x4e8>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fae:	4b37      	ldr	r3, [pc, #220]	; (800408c <HAL_RCC_OscConfig+0x4ec>)
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb4:	f7fe f9f0 	bl	8002398 <HAL_GetTick>
 8003fb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fba:	e008      	b.n	8003fce <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fbc:	f7fe f9ec 	bl	8002398 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e056      	b.n	800407c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fce:	4b2e      	ldr	r3, [pc, #184]	; (8004088 <HAL_RCC_OscConfig+0x4e8>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d0f0      	beq.n	8003fbc <HAL_RCC_OscConfig+0x41c>
 8003fda:	e04e      	b.n	800407a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fdc:	4b2b      	ldr	r3, [pc, #172]	; (800408c <HAL_RCC_OscConfig+0x4ec>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe2:	f7fe f9d9 	bl	8002398 <HAL_GetTick>
 8003fe6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fe8:	e008      	b.n	8003ffc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fea:	f7fe f9d5 	bl	8002398 <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	2b02      	cmp	r3, #2
 8003ff6:	d901      	bls.n	8003ffc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	e03f      	b.n	800407c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ffc:	4b22      	ldr	r3, [pc, #136]	; (8004088 <HAL_RCC_OscConfig+0x4e8>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d1f0      	bne.n	8003fea <HAL_RCC_OscConfig+0x44a>
 8004008:	e037      	b.n	800407a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	2b01      	cmp	r3, #1
 8004010:	d101      	bne.n	8004016 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e032      	b.n	800407c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004016:	4b1c      	ldr	r3, [pc, #112]	; (8004088 <HAL_RCC_OscConfig+0x4e8>)
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	699b      	ldr	r3, [r3, #24]
 8004020:	2b01      	cmp	r3, #1
 8004022:	d028      	beq.n	8004076 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800402e:	429a      	cmp	r2, r3
 8004030:	d121      	bne.n	8004076 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800403c:	429a      	cmp	r2, r3
 800403e:	d11a      	bne.n	8004076 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004040:	68fa      	ldr	r2, [r7, #12]
 8004042:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004046:	4013      	ands	r3, r2
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800404c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800404e:	4293      	cmp	r3, r2
 8004050:	d111      	bne.n	8004076 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800405c:	085b      	lsrs	r3, r3, #1
 800405e:	3b01      	subs	r3, #1
 8004060:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004062:	429a      	cmp	r2, r3
 8004064:	d107      	bne.n	8004076 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004070:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004072:	429a      	cmp	r2, r3
 8004074:	d001      	beq.n	800407a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e000      	b.n	800407c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800407a:	2300      	movs	r3, #0
}
 800407c:	4618      	mov	r0, r3
 800407e:	3718      	adds	r7, #24
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	40007000 	.word	0x40007000
 8004088:	40023800 	.word	0x40023800
 800408c:	42470060 	.word	0x42470060

08004090 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d101      	bne.n	80040a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e0cc      	b.n	800423e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040a4:	4b68      	ldr	r3, [pc, #416]	; (8004248 <HAL_RCC_ClockConfig+0x1b8>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0307 	and.w	r3, r3, #7
 80040ac:	683a      	ldr	r2, [r7, #0]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d90c      	bls.n	80040cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040b2:	4b65      	ldr	r3, [pc, #404]	; (8004248 <HAL_RCC_ClockConfig+0x1b8>)
 80040b4:	683a      	ldr	r2, [r7, #0]
 80040b6:	b2d2      	uxtb	r2, r2
 80040b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ba:	4b63      	ldr	r3, [pc, #396]	; (8004248 <HAL_RCC_ClockConfig+0x1b8>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0307 	and.w	r3, r3, #7
 80040c2:	683a      	ldr	r2, [r7, #0]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d001      	beq.n	80040cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e0b8      	b.n	800423e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0302 	and.w	r3, r3, #2
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d020      	beq.n	800411a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0304 	and.w	r3, r3, #4
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d005      	beq.n	80040f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040e4:	4b59      	ldr	r3, [pc, #356]	; (800424c <HAL_RCC_ClockConfig+0x1bc>)
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	4a58      	ldr	r2, [pc, #352]	; (800424c <HAL_RCC_ClockConfig+0x1bc>)
 80040ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0308 	and.w	r3, r3, #8
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d005      	beq.n	8004108 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040fc:	4b53      	ldr	r3, [pc, #332]	; (800424c <HAL_RCC_ClockConfig+0x1bc>)
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	4a52      	ldr	r2, [pc, #328]	; (800424c <HAL_RCC_ClockConfig+0x1bc>)
 8004102:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004106:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004108:	4b50      	ldr	r3, [pc, #320]	; (800424c <HAL_RCC_ClockConfig+0x1bc>)
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	494d      	ldr	r1, [pc, #308]	; (800424c <HAL_RCC_ClockConfig+0x1bc>)
 8004116:	4313      	orrs	r3, r2
 8004118:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	2b00      	cmp	r3, #0
 8004124:	d044      	beq.n	80041b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	2b01      	cmp	r3, #1
 800412c:	d107      	bne.n	800413e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800412e:	4b47      	ldr	r3, [pc, #284]	; (800424c <HAL_RCC_ClockConfig+0x1bc>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d119      	bne.n	800416e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e07f      	b.n	800423e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	2b02      	cmp	r3, #2
 8004144:	d003      	beq.n	800414e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800414a:	2b03      	cmp	r3, #3
 800414c:	d107      	bne.n	800415e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800414e:	4b3f      	ldr	r3, [pc, #252]	; (800424c <HAL_RCC_ClockConfig+0x1bc>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d109      	bne.n	800416e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e06f      	b.n	800423e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800415e:	4b3b      	ldr	r3, [pc, #236]	; (800424c <HAL_RCC_ClockConfig+0x1bc>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	2b00      	cmp	r3, #0
 8004168:	d101      	bne.n	800416e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e067      	b.n	800423e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800416e:	4b37      	ldr	r3, [pc, #220]	; (800424c <HAL_RCC_ClockConfig+0x1bc>)
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f023 0203 	bic.w	r2, r3, #3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	4934      	ldr	r1, [pc, #208]	; (800424c <HAL_RCC_ClockConfig+0x1bc>)
 800417c:	4313      	orrs	r3, r2
 800417e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004180:	f7fe f90a 	bl	8002398 <HAL_GetTick>
 8004184:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004186:	e00a      	b.n	800419e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004188:	f7fe f906 	bl	8002398 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	f241 3288 	movw	r2, #5000	; 0x1388
 8004196:	4293      	cmp	r3, r2
 8004198:	d901      	bls.n	800419e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e04f      	b.n	800423e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800419e:	4b2b      	ldr	r3, [pc, #172]	; (800424c <HAL_RCC_ClockConfig+0x1bc>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f003 020c 	and.w	r2, r3, #12
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d1eb      	bne.n	8004188 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041b0:	4b25      	ldr	r3, [pc, #148]	; (8004248 <HAL_RCC_ClockConfig+0x1b8>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0307 	and.w	r3, r3, #7
 80041b8:	683a      	ldr	r2, [r7, #0]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d20c      	bcs.n	80041d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041be:	4b22      	ldr	r3, [pc, #136]	; (8004248 <HAL_RCC_ClockConfig+0x1b8>)
 80041c0:	683a      	ldr	r2, [r7, #0]
 80041c2:	b2d2      	uxtb	r2, r2
 80041c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041c6:	4b20      	ldr	r3, [pc, #128]	; (8004248 <HAL_RCC_ClockConfig+0x1b8>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0307 	and.w	r3, r3, #7
 80041ce:	683a      	ldr	r2, [r7, #0]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d001      	beq.n	80041d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e032      	b.n	800423e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0304 	and.w	r3, r3, #4
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d008      	beq.n	80041f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041e4:	4b19      	ldr	r3, [pc, #100]	; (800424c <HAL_RCC_ClockConfig+0x1bc>)
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	4916      	ldr	r1, [pc, #88]	; (800424c <HAL_RCC_ClockConfig+0x1bc>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0308 	and.w	r3, r3, #8
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d009      	beq.n	8004216 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004202:	4b12      	ldr	r3, [pc, #72]	; (800424c <HAL_RCC_ClockConfig+0x1bc>)
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	00db      	lsls	r3, r3, #3
 8004210:	490e      	ldr	r1, [pc, #56]	; (800424c <HAL_RCC_ClockConfig+0x1bc>)
 8004212:	4313      	orrs	r3, r2
 8004214:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004216:	f000 f821 	bl	800425c <HAL_RCC_GetSysClockFreq>
 800421a:	4602      	mov	r2, r0
 800421c:	4b0b      	ldr	r3, [pc, #44]	; (800424c <HAL_RCC_ClockConfig+0x1bc>)
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	091b      	lsrs	r3, r3, #4
 8004222:	f003 030f 	and.w	r3, r3, #15
 8004226:	490a      	ldr	r1, [pc, #40]	; (8004250 <HAL_RCC_ClockConfig+0x1c0>)
 8004228:	5ccb      	ldrb	r3, [r1, r3]
 800422a:	fa22 f303 	lsr.w	r3, r2, r3
 800422e:	4a09      	ldr	r2, [pc, #36]	; (8004254 <HAL_RCC_ClockConfig+0x1c4>)
 8004230:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004232:	4b09      	ldr	r3, [pc, #36]	; (8004258 <HAL_RCC_ClockConfig+0x1c8>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4618      	mov	r0, r3
 8004238:	f7fe f86a 	bl	8002310 <HAL_InitTick>

  return HAL_OK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3710      	adds	r7, #16
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	40023c00 	.word	0x40023c00
 800424c:	40023800 	.word	0x40023800
 8004250:	08009860 	.word	0x08009860
 8004254:	20000000 	.word	0x20000000
 8004258:	20000004 	.word	0x20000004

0800425c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800425c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004260:	b084      	sub	sp, #16
 8004262:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004264:	2300      	movs	r3, #0
 8004266:	607b      	str	r3, [r7, #4]
 8004268:	2300      	movs	r3, #0
 800426a:	60fb      	str	r3, [r7, #12]
 800426c:	2300      	movs	r3, #0
 800426e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004270:	2300      	movs	r3, #0
 8004272:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004274:	4b67      	ldr	r3, [pc, #412]	; (8004414 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f003 030c 	and.w	r3, r3, #12
 800427c:	2b08      	cmp	r3, #8
 800427e:	d00d      	beq.n	800429c <HAL_RCC_GetSysClockFreq+0x40>
 8004280:	2b08      	cmp	r3, #8
 8004282:	f200 80bd 	bhi.w	8004400 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004286:	2b00      	cmp	r3, #0
 8004288:	d002      	beq.n	8004290 <HAL_RCC_GetSysClockFreq+0x34>
 800428a:	2b04      	cmp	r3, #4
 800428c:	d003      	beq.n	8004296 <HAL_RCC_GetSysClockFreq+0x3a>
 800428e:	e0b7      	b.n	8004400 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004290:	4b61      	ldr	r3, [pc, #388]	; (8004418 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004292:	60bb      	str	r3, [r7, #8]
       break;
 8004294:	e0b7      	b.n	8004406 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004296:	4b61      	ldr	r3, [pc, #388]	; (800441c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004298:	60bb      	str	r3, [r7, #8]
      break;
 800429a:	e0b4      	b.n	8004406 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800429c:	4b5d      	ldr	r3, [pc, #372]	; (8004414 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042a4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042a6:	4b5b      	ldr	r3, [pc, #364]	; (8004414 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d04d      	beq.n	800434e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042b2:	4b58      	ldr	r3, [pc, #352]	; (8004414 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	099b      	lsrs	r3, r3, #6
 80042b8:	461a      	mov	r2, r3
 80042ba:	f04f 0300 	mov.w	r3, #0
 80042be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80042c2:	f04f 0100 	mov.w	r1, #0
 80042c6:	ea02 0800 	and.w	r8, r2, r0
 80042ca:	ea03 0901 	and.w	r9, r3, r1
 80042ce:	4640      	mov	r0, r8
 80042d0:	4649      	mov	r1, r9
 80042d2:	f04f 0200 	mov.w	r2, #0
 80042d6:	f04f 0300 	mov.w	r3, #0
 80042da:	014b      	lsls	r3, r1, #5
 80042dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80042e0:	0142      	lsls	r2, r0, #5
 80042e2:	4610      	mov	r0, r2
 80042e4:	4619      	mov	r1, r3
 80042e6:	ebb0 0008 	subs.w	r0, r0, r8
 80042ea:	eb61 0109 	sbc.w	r1, r1, r9
 80042ee:	f04f 0200 	mov.w	r2, #0
 80042f2:	f04f 0300 	mov.w	r3, #0
 80042f6:	018b      	lsls	r3, r1, #6
 80042f8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80042fc:	0182      	lsls	r2, r0, #6
 80042fe:	1a12      	subs	r2, r2, r0
 8004300:	eb63 0301 	sbc.w	r3, r3, r1
 8004304:	f04f 0000 	mov.w	r0, #0
 8004308:	f04f 0100 	mov.w	r1, #0
 800430c:	00d9      	lsls	r1, r3, #3
 800430e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004312:	00d0      	lsls	r0, r2, #3
 8004314:	4602      	mov	r2, r0
 8004316:	460b      	mov	r3, r1
 8004318:	eb12 0208 	adds.w	r2, r2, r8
 800431c:	eb43 0309 	adc.w	r3, r3, r9
 8004320:	f04f 0000 	mov.w	r0, #0
 8004324:	f04f 0100 	mov.w	r1, #0
 8004328:	0259      	lsls	r1, r3, #9
 800432a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800432e:	0250      	lsls	r0, r2, #9
 8004330:	4602      	mov	r2, r0
 8004332:	460b      	mov	r3, r1
 8004334:	4610      	mov	r0, r2
 8004336:	4619      	mov	r1, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	461a      	mov	r2, r3
 800433c:	f04f 0300 	mov.w	r3, #0
 8004340:	f7fc fc8a 	bl	8000c58 <__aeabi_uldivmod>
 8004344:	4602      	mov	r2, r0
 8004346:	460b      	mov	r3, r1
 8004348:	4613      	mov	r3, r2
 800434a:	60fb      	str	r3, [r7, #12]
 800434c:	e04a      	b.n	80043e4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800434e:	4b31      	ldr	r3, [pc, #196]	; (8004414 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	099b      	lsrs	r3, r3, #6
 8004354:	461a      	mov	r2, r3
 8004356:	f04f 0300 	mov.w	r3, #0
 800435a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800435e:	f04f 0100 	mov.w	r1, #0
 8004362:	ea02 0400 	and.w	r4, r2, r0
 8004366:	ea03 0501 	and.w	r5, r3, r1
 800436a:	4620      	mov	r0, r4
 800436c:	4629      	mov	r1, r5
 800436e:	f04f 0200 	mov.w	r2, #0
 8004372:	f04f 0300 	mov.w	r3, #0
 8004376:	014b      	lsls	r3, r1, #5
 8004378:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800437c:	0142      	lsls	r2, r0, #5
 800437e:	4610      	mov	r0, r2
 8004380:	4619      	mov	r1, r3
 8004382:	1b00      	subs	r0, r0, r4
 8004384:	eb61 0105 	sbc.w	r1, r1, r5
 8004388:	f04f 0200 	mov.w	r2, #0
 800438c:	f04f 0300 	mov.w	r3, #0
 8004390:	018b      	lsls	r3, r1, #6
 8004392:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004396:	0182      	lsls	r2, r0, #6
 8004398:	1a12      	subs	r2, r2, r0
 800439a:	eb63 0301 	sbc.w	r3, r3, r1
 800439e:	f04f 0000 	mov.w	r0, #0
 80043a2:	f04f 0100 	mov.w	r1, #0
 80043a6:	00d9      	lsls	r1, r3, #3
 80043a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80043ac:	00d0      	lsls	r0, r2, #3
 80043ae:	4602      	mov	r2, r0
 80043b0:	460b      	mov	r3, r1
 80043b2:	1912      	adds	r2, r2, r4
 80043b4:	eb45 0303 	adc.w	r3, r5, r3
 80043b8:	f04f 0000 	mov.w	r0, #0
 80043bc:	f04f 0100 	mov.w	r1, #0
 80043c0:	0299      	lsls	r1, r3, #10
 80043c2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80043c6:	0290      	lsls	r0, r2, #10
 80043c8:	4602      	mov	r2, r0
 80043ca:	460b      	mov	r3, r1
 80043cc:	4610      	mov	r0, r2
 80043ce:	4619      	mov	r1, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	461a      	mov	r2, r3
 80043d4:	f04f 0300 	mov.w	r3, #0
 80043d8:	f7fc fc3e 	bl	8000c58 <__aeabi_uldivmod>
 80043dc:	4602      	mov	r2, r0
 80043de:	460b      	mov	r3, r1
 80043e0:	4613      	mov	r3, r2
 80043e2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80043e4:	4b0b      	ldr	r3, [pc, #44]	; (8004414 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	0c1b      	lsrs	r3, r3, #16
 80043ea:	f003 0303 	and.w	r3, r3, #3
 80043ee:	3301      	adds	r3, #1
 80043f0:	005b      	lsls	r3, r3, #1
 80043f2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80043f4:	68fa      	ldr	r2, [r7, #12]
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043fc:	60bb      	str	r3, [r7, #8]
      break;
 80043fe:	e002      	b.n	8004406 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004400:	4b05      	ldr	r3, [pc, #20]	; (8004418 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004402:	60bb      	str	r3, [r7, #8]
      break;
 8004404:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004406:	68bb      	ldr	r3, [r7, #8]
}
 8004408:	4618      	mov	r0, r3
 800440a:	3710      	adds	r7, #16
 800440c:	46bd      	mov	sp, r7
 800440e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004412:	bf00      	nop
 8004414:	40023800 	.word	0x40023800
 8004418:	00f42400 	.word	0x00f42400
 800441c:	007a1200 	.word	0x007a1200

08004420 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004420:	b480      	push	{r7}
 8004422:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004424:	4b03      	ldr	r3, [pc, #12]	; (8004434 <HAL_RCC_GetHCLKFreq+0x14>)
 8004426:	681b      	ldr	r3, [r3, #0]
}
 8004428:	4618      	mov	r0, r3
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	20000000 	.word	0x20000000

08004438 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800443c:	f7ff fff0 	bl	8004420 <HAL_RCC_GetHCLKFreq>
 8004440:	4602      	mov	r2, r0
 8004442:	4b05      	ldr	r3, [pc, #20]	; (8004458 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	0a9b      	lsrs	r3, r3, #10
 8004448:	f003 0307 	and.w	r3, r3, #7
 800444c:	4903      	ldr	r1, [pc, #12]	; (800445c <HAL_RCC_GetPCLK1Freq+0x24>)
 800444e:	5ccb      	ldrb	r3, [r1, r3]
 8004450:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004454:	4618      	mov	r0, r3
 8004456:	bd80      	pop	{r7, pc}
 8004458:	40023800 	.word	0x40023800
 800445c:	08009870 	.word	0x08009870

08004460 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004464:	f7ff ffdc 	bl	8004420 <HAL_RCC_GetHCLKFreq>
 8004468:	4602      	mov	r2, r0
 800446a:	4b05      	ldr	r3, [pc, #20]	; (8004480 <HAL_RCC_GetPCLK2Freq+0x20>)
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	0b5b      	lsrs	r3, r3, #13
 8004470:	f003 0307 	and.w	r3, r3, #7
 8004474:	4903      	ldr	r1, [pc, #12]	; (8004484 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004476:	5ccb      	ldrb	r3, [r1, r3]
 8004478:	fa22 f303 	lsr.w	r3, r2, r3
}
 800447c:	4618      	mov	r0, r3
 800447e:	bd80      	pop	{r7, pc}
 8004480:	40023800 	.word	0x40023800
 8004484:	08009870 	.word	0x08009870

08004488 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d101      	bne.n	800449a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e07b      	b.n	8004592 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d108      	bne.n	80044b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044aa:	d009      	beq.n	80044c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	61da      	str	r2, [r3, #28]
 80044b2:	e005      	b.n	80044c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d106      	bne.n	80044e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f7fd fc36 	bl	8001d4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2202      	movs	r2, #2
 80044e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004508:	431a      	orrs	r2, r3
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004512:	431a      	orrs	r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	f003 0302 	and.w	r3, r3, #2
 800451c:	431a      	orrs	r2, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	695b      	ldr	r3, [r3, #20]
 8004522:	f003 0301 	and.w	r3, r3, #1
 8004526:	431a      	orrs	r2, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	699b      	ldr	r3, [r3, #24]
 800452c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004530:	431a      	orrs	r2, r3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	69db      	ldr	r3, [r3, #28]
 8004536:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800453a:	431a      	orrs	r2, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6a1b      	ldr	r3, [r3, #32]
 8004540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004544:	ea42 0103 	orr.w	r1, r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800454c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	430a      	orrs	r2, r1
 8004556:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	0c1b      	lsrs	r3, r3, #16
 800455e:	f003 0104 	and.w	r1, r3, #4
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004566:	f003 0210 	and.w	r2, r3, #16
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	430a      	orrs	r2, r1
 8004570:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	69da      	ldr	r2, [r3, #28]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004580:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3708      	adds	r7, #8
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}

0800459a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800459a:	b580      	push	{r7, lr}
 800459c:	b088      	sub	sp, #32
 800459e:	af00      	add	r7, sp, #0
 80045a0:	60f8      	str	r0, [r7, #12]
 80045a2:	60b9      	str	r1, [r7, #8]
 80045a4:	603b      	str	r3, [r7, #0]
 80045a6:	4613      	mov	r3, r2
 80045a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80045aa:	2300      	movs	r3, #0
 80045ac:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d101      	bne.n	80045bc <HAL_SPI_Transmit+0x22>
 80045b8:	2302      	movs	r3, #2
 80045ba:	e126      	b.n	800480a <HAL_SPI_Transmit+0x270>
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045c4:	f7fd fee8 	bl	8002398 <HAL_GetTick>
 80045c8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80045ca:	88fb      	ldrh	r3, [r7, #6]
 80045cc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d002      	beq.n	80045e0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80045da:	2302      	movs	r3, #2
 80045dc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80045de:	e10b      	b.n	80047f8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d002      	beq.n	80045ec <HAL_SPI_Transmit+0x52>
 80045e6:	88fb      	ldrh	r3, [r7, #6]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d102      	bne.n	80045f2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	77fb      	strb	r3, [r7, #31]
    goto error;
 80045f0:	e102      	b.n	80047f8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2203      	movs	r2, #3
 80045f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2200      	movs	r2, #0
 80045fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	68ba      	ldr	r2, [r7, #8]
 8004604:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	88fa      	ldrh	r2, [r7, #6]
 800460a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	88fa      	ldrh	r2, [r7, #6]
 8004610:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2200      	movs	r2, #0
 8004616:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2200      	movs	r2, #0
 800461c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2200      	movs	r2, #0
 8004628:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2200      	movs	r2, #0
 800462e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004638:	d10f      	bne.n	800465a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004648:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004658:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004664:	2b40      	cmp	r3, #64	; 0x40
 8004666:	d007      	beq.n	8004678 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004676:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004680:	d14b      	bne.n	800471a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d002      	beq.n	8004690 <HAL_SPI_Transmit+0xf6>
 800468a:	8afb      	ldrh	r3, [r7, #22]
 800468c:	2b01      	cmp	r3, #1
 800468e:	d13e      	bne.n	800470e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004694:	881a      	ldrh	r2, [r3, #0]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a0:	1c9a      	adds	r2, r3, #2
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	3b01      	subs	r3, #1
 80046ae:	b29a      	uxth	r2, r3
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80046b4:	e02b      	b.n	800470e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	f003 0302 	and.w	r3, r3, #2
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	d112      	bne.n	80046ea <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c8:	881a      	ldrh	r2, [r3, #0]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d4:	1c9a      	adds	r2, r3, #2
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046de:	b29b      	uxth	r3, r3
 80046e0:	3b01      	subs	r3, #1
 80046e2:	b29a      	uxth	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	86da      	strh	r2, [r3, #54]	; 0x36
 80046e8:	e011      	b.n	800470e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046ea:	f7fd fe55 	bl	8002398 <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	683a      	ldr	r2, [r7, #0]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d803      	bhi.n	8004702 <HAL_SPI_Transmit+0x168>
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004700:	d102      	bne.n	8004708 <HAL_SPI_Transmit+0x16e>
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d102      	bne.n	800470e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004708:	2303      	movs	r3, #3
 800470a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800470c:	e074      	b.n	80047f8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004712:	b29b      	uxth	r3, r3
 8004714:	2b00      	cmp	r3, #0
 8004716:	d1ce      	bne.n	80046b6 <HAL_SPI_Transmit+0x11c>
 8004718:	e04c      	b.n	80047b4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d002      	beq.n	8004728 <HAL_SPI_Transmit+0x18e>
 8004722:	8afb      	ldrh	r3, [r7, #22]
 8004724:	2b01      	cmp	r3, #1
 8004726:	d140      	bne.n	80047aa <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	330c      	adds	r3, #12
 8004732:	7812      	ldrb	r2, [r2, #0]
 8004734:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473a:	1c5a      	adds	r2, r3, #1
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004744:	b29b      	uxth	r3, r3
 8004746:	3b01      	subs	r3, #1
 8004748:	b29a      	uxth	r2, r3
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800474e:	e02c      	b.n	80047aa <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f003 0302 	and.w	r3, r3, #2
 800475a:	2b02      	cmp	r3, #2
 800475c:	d113      	bne.n	8004786 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	330c      	adds	r3, #12
 8004768:	7812      	ldrb	r2, [r2, #0]
 800476a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004770:	1c5a      	adds	r2, r3, #1
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800477a:	b29b      	uxth	r3, r3
 800477c:	3b01      	subs	r3, #1
 800477e:	b29a      	uxth	r2, r3
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	86da      	strh	r2, [r3, #54]	; 0x36
 8004784:	e011      	b.n	80047aa <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004786:	f7fd fe07 	bl	8002398 <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	69bb      	ldr	r3, [r7, #24]
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	683a      	ldr	r2, [r7, #0]
 8004792:	429a      	cmp	r2, r3
 8004794:	d803      	bhi.n	800479e <HAL_SPI_Transmit+0x204>
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800479c:	d102      	bne.n	80047a4 <HAL_SPI_Transmit+0x20a>
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d102      	bne.n	80047aa <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80047a4:	2303      	movs	r3, #3
 80047a6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80047a8:	e026      	b.n	80047f8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d1cd      	bne.n	8004750 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047b4:	69ba      	ldr	r2, [r7, #24]
 80047b6:	6839      	ldr	r1, [r7, #0]
 80047b8:	68f8      	ldr	r0, [r7, #12]
 80047ba:	f000 fa09 	bl	8004bd0 <SPI_EndRxTxTransaction>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d002      	beq.n	80047ca <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2220      	movs	r2, #32
 80047c8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d10a      	bne.n	80047e8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047d2:	2300      	movs	r3, #0
 80047d4:	613b      	str	r3, [r7, #16]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	613b      	str	r3, [r7, #16]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	613b      	str	r3, [r7, #16]
 80047e6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d002      	beq.n	80047f6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	77fb      	strb	r3, [r7, #31]
 80047f4:	e000      	b.n	80047f8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80047f6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2200      	movs	r2, #0
 8004804:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004808:	7ffb      	ldrb	r3, [r7, #31]
}
 800480a:	4618      	mov	r0, r3
 800480c:	3720      	adds	r7, #32
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
	...

08004814 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b086      	sub	sp, #24
 8004818:	af00      	add	r7, sp, #0
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	60b9      	str	r1, [r7, #8]
 800481e:	4613      	mov	r3, r2
 8004820:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004822:	2300      	movs	r3, #0
 8004824:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800482c:	2b01      	cmp	r3, #1
 800482e:	d101      	bne.n	8004834 <HAL_SPI_Transmit_DMA+0x20>
 8004830:	2302      	movs	r3, #2
 8004832:	e09b      	b.n	800496c <HAL_SPI_Transmit_DMA+0x158>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004842:	b2db      	uxtb	r3, r3
 8004844:	2b01      	cmp	r3, #1
 8004846:	d002      	beq.n	800484e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8004848:	2302      	movs	r3, #2
 800484a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800484c:	e089      	b.n	8004962 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d002      	beq.n	800485a <HAL_SPI_Transmit_DMA+0x46>
 8004854:	88fb      	ldrh	r3, [r7, #6]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d102      	bne.n	8004860 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800485e:	e080      	b.n	8004962 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2203      	movs	r2, #3
 8004864:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2200      	movs	r2, #0
 800486c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	68ba      	ldr	r2, [r7, #8]
 8004872:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	88fa      	ldrh	r2, [r7, #6]
 8004878:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	88fa      	ldrh	r2, [r7, #6]
 800487e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2200      	movs	r2, #0
 8004884:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2200      	movs	r2, #0
 800488a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2200      	movs	r2, #0
 8004890:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2200      	movs	r2, #0
 800489c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048a6:	d10f      	bne.n	80048c8 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048b6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048c6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048cc:	4a29      	ldr	r2, [pc, #164]	; (8004974 <HAL_SPI_Transmit_DMA+0x160>)
 80048ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048d4:	4a28      	ldr	r2, [pc, #160]	; (8004978 <HAL_SPI_Transmit_DMA+0x164>)
 80048d6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048dc:	4a27      	ldr	r2, [pc, #156]	; (800497c <HAL_SPI_Transmit_DMA+0x168>)
 80048de:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048e4:	2200      	movs	r2, #0
 80048e6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f0:	4619      	mov	r1, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	330c      	adds	r3, #12
 80048f8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048fe:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004900:	f7fe fcd6 	bl	80032b0 <HAL_DMA_Start_IT>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d00c      	beq.n	8004924 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800490e:	f043 0210 	orr.w	r2, r3, #16
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2201      	movs	r2, #1
 800491e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8004922:	e01e      	b.n	8004962 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800492e:	2b40      	cmp	r3, #64	; 0x40
 8004930:	d007      	beq.n	8004942 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004940:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	685a      	ldr	r2, [r3, #4]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f042 0220 	orr.w	r2, r2, #32
 8004950:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	685a      	ldr	r2, [r3, #4]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f042 0202 	orr.w	r2, r2, #2
 8004960:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2200      	movs	r2, #0
 8004966:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800496a:	7dfb      	ldrb	r3, [r7, #23]
}
 800496c:	4618      	mov	r0, r3
 800496e:	3718      	adds	r7, #24
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	08004a65 	.word	0x08004a65
 8004978:	080049bd 	.word	0x080049bd
 800497c:	08004a81 	.word	0x08004a81

08004980 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8004988:	bf00      	nop
 800498a:	370c      	adds	r7, #12
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr

08004994 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800499c:	bf00      	nop
 800499e:	370c      	adds	r7, #12
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80049b0:	bf00      	nop
 80049b2:	370c      	adds	r7, #12
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b086      	sub	sp, #24
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049ca:	f7fd fce5 	bl	8002398 <HAL_GetTick>
 80049ce:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049de:	d03b      	beq.n	8004a58 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	685a      	ldr	r2, [r3, #4]
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f022 0220 	bic.w	r2, r2, #32
 80049ee:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	685a      	ldr	r2, [r3, #4]
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f022 0202 	bic.w	r2, r2, #2
 80049fe:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004a00:	693a      	ldr	r2, [r7, #16]
 8004a02:	2164      	movs	r1, #100	; 0x64
 8004a04:	6978      	ldr	r0, [r7, #20]
 8004a06:	f000 f8e3 	bl	8004bd0 <SPI_EndRxTxTransaction>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d005      	beq.n	8004a1c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a14:	f043 0220 	orr.w	r2, r3, #32
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d10a      	bne.n	8004a3a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a24:	2300      	movs	r3, #0
 8004a26:	60fb      	str	r3, [r7, #12]
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	60fb      	str	r3, [r7, #12]
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	60fb      	str	r3, [r7, #12]
 8004a38:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d003      	beq.n	8004a58 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004a50:	6978      	ldr	r0, [r7, #20]
 8004a52:	f7ff ffa9 	bl	80049a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004a56:	e002      	b.n	8004a5e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004a58:	6978      	ldr	r0, [r7, #20]
 8004a5a:	f7ff ff91 	bl	8004980 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004a5e:	3718      	adds	r7, #24
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b084      	sub	sp, #16
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a70:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004a72:	68f8      	ldr	r0, [r7, #12]
 8004a74:	f7ff ff8e 	bl	8004994 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004a78:	bf00      	nop
 8004a7a:	3710      	adds	r7, #16
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a8c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	685a      	ldr	r2, [r3, #4]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f022 0203 	bic.w	r2, r2, #3
 8004a9c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aa2:	f043 0210 	orr.w	r2, r3, #16
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2201      	movs	r2, #1
 8004aae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004ab2:	68f8      	ldr	r0, [r7, #12]
 8004ab4:	f7ff ff78 	bl	80049a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004ab8:	bf00      	nop
 8004aba:	3710      	adds	r7, #16
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b088      	sub	sp, #32
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	60b9      	str	r1, [r7, #8]
 8004aca:	603b      	str	r3, [r7, #0]
 8004acc:	4613      	mov	r3, r2
 8004ace:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ad0:	f7fd fc62 	bl	8002398 <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad8:	1a9b      	subs	r3, r3, r2
 8004ada:	683a      	ldr	r2, [r7, #0]
 8004adc:	4413      	add	r3, r2
 8004ade:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ae0:	f7fd fc5a 	bl	8002398 <HAL_GetTick>
 8004ae4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004ae6:	4b39      	ldr	r3, [pc, #228]	; (8004bcc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	015b      	lsls	r3, r3, #5
 8004aec:	0d1b      	lsrs	r3, r3, #20
 8004aee:	69fa      	ldr	r2, [r7, #28]
 8004af0:	fb02 f303 	mul.w	r3, r2, r3
 8004af4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004af6:	e054      	b.n	8004ba2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004afe:	d050      	beq.n	8004ba2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b00:	f7fd fc4a 	bl	8002398 <HAL_GetTick>
 8004b04:	4602      	mov	r2, r0
 8004b06:	69bb      	ldr	r3, [r7, #24]
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	69fa      	ldr	r2, [r7, #28]
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d902      	bls.n	8004b16 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d13d      	bne.n	8004b92 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	685a      	ldr	r2, [r3, #4]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004b24:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b2e:	d111      	bne.n	8004b54 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b38:	d004      	beq.n	8004b44 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b42:	d107      	bne.n	8004b54 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b52:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b5c:	d10f      	bne.n	8004b7e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b6c:	601a      	str	r2, [r3, #0]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2201      	movs	r2, #1
 8004b82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e017      	b.n	8004bc2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d101      	bne.n	8004b9c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	689a      	ldr	r2, [r3, #8]
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	4013      	ands	r3, r2
 8004bac:	68ba      	ldr	r2, [r7, #8]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	bf0c      	ite	eq
 8004bb2:	2301      	moveq	r3, #1
 8004bb4:	2300      	movne	r3, #0
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	461a      	mov	r2, r3
 8004bba:	79fb      	ldrb	r3, [r7, #7]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d19b      	bne.n	8004af8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004bc0:	2300      	movs	r3, #0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3720      	adds	r7, #32
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	20000000 	.word	0x20000000

08004bd0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b088      	sub	sp, #32
 8004bd4:	af02      	add	r7, sp, #8
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004bdc:	4b1b      	ldr	r3, [pc, #108]	; (8004c4c <SPI_EndRxTxTransaction+0x7c>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a1b      	ldr	r2, [pc, #108]	; (8004c50 <SPI_EndRxTxTransaction+0x80>)
 8004be2:	fba2 2303 	umull	r2, r3, r2, r3
 8004be6:	0d5b      	lsrs	r3, r3, #21
 8004be8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004bec:	fb02 f303 	mul.w	r3, r2, r3
 8004bf0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bfa:	d112      	bne.n	8004c22 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	9300      	str	r3, [sp, #0]
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	2200      	movs	r2, #0
 8004c04:	2180      	movs	r1, #128	; 0x80
 8004c06:	68f8      	ldr	r0, [r7, #12]
 8004c08:	f7ff ff5a 	bl	8004ac0 <SPI_WaitFlagStateUntilTimeout>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d016      	beq.n	8004c40 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c16:	f043 0220 	orr.w	r2, r3, #32
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e00f      	b.n	8004c42 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00a      	beq.n	8004c3e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	3b01      	subs	r3, #1
 8004c2c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c38:	2b80      	cmp	r3, #128	; 0x80
 8004c3a:	d0f2      	beq.n	8004c22 <SPI_EndRxTxTransaction+0x52>
 8004c3c:	e000      	b.n	8004c40 <SPI_EndRxTxTransaction+0x70>
        break;
 8004c3e:	bf00      	nop
  }

  return HAL_OK;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3718      	adds	r7, #24
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	20000000 	.word	0x20000000
 8004c50:	165e9f81 	.word	0x165e9f81

08004c54 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b082      	sub	sp, #8
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d101      	bne.n	8004c66 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e041      	b.n	8004cea <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d106      	bne.n	8004c80 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f7fd f916 	bl	8001eac <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2202      	movs	r2, #2
 8004c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	3304      	adds	r3, #4
 8004c90:	4619      	mov	r1, r3
 8004c92:	4610      	mov	r0, r2
 8004c94:	f000 fcd4 	bl	8005640 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3708      	adds	r7, #8
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
	...

08004cf4 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d109      	bne.n	8004d18 <HAL_TIM_OC_Start+0x24>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	bf14      	ite	ne
 8004d10:	2301      	movne	r3, #1
 8004d12:	2300      	moveq	r3, #0
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	e022      	b.n	8004d5e <HAL_TIM_OC_Start+0x6a>
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	2b04      	cmp	r3, #4
 8004d1c:	d109      	bne.n	8004d32 <HAL_TIM_OC_Start+0x3e>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	bf14      	ite	ne
 8004d2a:	2301      	movne	r3, #1
 8004d2c:	2300      	moveq	r3, #0
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	e015      	b.n	8004d5e <HAL_TIM_OC_Start+0x6a>
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	2b08      	cmp	r3, #8
 8004d36:	d109      	bne.n	8004d4c <HAL_TIM_OC_Start+0x58>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	bf14      	ite	ne
 8004d44:	2301      	movne	r3, #1
 8004d46:	2300      	moveq	r3, #0
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	e008      	b.n	8004d5e <HAL_TIM_OC_Start+0x6a>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	bf14      	ite	ne
 8004d58:	2301      	movne	r3, #1
 8004d5a:	2300      	moveq	r3, #0
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d001      	beq.n	8004d66 <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e068      	b.n	8004e38 <HAL_TIM_OC_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d104      	bne.n	8004d76 <HAL_TIM_OC_Start+0x82>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2202      	movs	r2, #2
 8004d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d74:	e013      	b.n	8004d9e <HAL_TIM_OC_Start+0xaa>
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	2b04      	cmp	r3, #4
 8004d7a:	d104      	bne.n	8004d86 <HAL_TIM_OC_Start+0x92>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2202      	movs	r2, #2
 8004d80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d84:	e00b      	b.n	8004d9e <HAL_TIM_OC_Start+0xaa>
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	2b08      	cmp	r3, #8
 8004d8a:	d104      	bne.n	8004d96 <HAL_TIM_OC_Start+0xa2>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2202      	movs	r2, #2
 8004d90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d94:	e003      	b.n	8004d9e <HAL_TIM_OC_Start+0xaa>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2202      	movs	r2, #2
 8004d9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	2201      	movs	r2, #1
 8004da4:	6839      	ldr	r1, [r7, #0]
 8004da6:	4618      	mov	r0, r3
 8004da8:	f000 fe56 	bl	8005a58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a23      	ldr	r2, [pc, #140]	; (8004e40 <HAL_TIM_OC_Start+0x14c>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d107      	bne.n	8004dc6 <HAL_TIM_OC_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004dc4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a1d      	ldr	r2, [pc, #116]	; (8004e40 <HAL_TIM_OC_Start+0x14c>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d018      	beq.n	8004e02 <HAL_TIM_OC_Start+0x10e>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dd8:	d013      	beq.n	8004e02 <HAL_TIM_OC_Start+0x10e>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a19      	ldr	r2, [pc, #100]	; (8004e44 <HAL_TIM_OC_Start+0x150>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d00e      	beq.n	8004e02 <HAL_TIM_OC_Start+0x10e>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a17      	ldr	r2, [pc, #92]	; (8004e48 <HAL_TIM_OC_Start+0x154>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d009      	beq.n	8004e02 <HAL_TIM_OC_Start+0x10e>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a16      	ldr	r2, [pc, #88]	; (8004e4c <HAL_TIM_OC_Start+0x158>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d004      	beq.n	8004e02 <HAL_TIM_OC_Start+0x10e>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a14      	ldr	r2, [pc, #80]	; (8004e50 <HAL_TIM_OC_Start+0x15c>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d111      	bne.n	8004e26 <HAL_TIM_OC_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	f003 0307 	and.w	r3, r3, #7
 8004e0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2b06      	cmp	r3, #6
 8004e12:	d010      	beq.n	8004e36 <HAL_TIM_OC_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f042 0201 	orr.w	r2, r2, #1
 8004e22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e24:	e007      	b.n	8004e36 <HAL_TIM_OC_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f042 0201 	orr.w	r2, r2, #1
 8004e34:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e36:	2300      	movs	r3, #0
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3710      	adds	r7, #16
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	40010000 	.word	0x40010000
 8004e44:	40000400 	.word	0x40000400
 8004e48:	40000800 	.word	0x40000800
 8004e4c:	40000c00 	.word	0x40000c00
 8004e50:	40014000 	.word	0x40014000

08004e54 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d109      	bne.n	8004e7c <HAL_TIM_OC_Start_IT+0x28>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	bf14      	ite	ne
 8004e74:	2301      	movne	r3, #1
 8004e76:	2300      	moveq	r3, #0
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	e022      	b.n	8004ec2 <HAL_TIM_OC_Start_IT+0x6e>
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	2b04      	cmp	r3, #4
 8004e80:	d109      	bne.n	8004e96 <HAL_TIM_OC_Start_IT+0x42>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	bf14      	ite	ne
 8004e8e:	2301      	movne	r3, #1
 8004e90:	2300      	moveq	r3, #0
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	e015      	b.n	8004ec2 <HAL_TIM_OC_Start_IT+0x6e>
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	2b08      	cmp	r3, #8
 8004e9a:	d109      	bne.n	8004eb0 <HAL_TIM_OC_Start_IT+0x5c>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	bf14      	ite	ne
 8004ea8:	2301      	movne	r3, #1
 8004eaa:	2300      	moveq	r3, #0
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	e008      	b.n	8004ec2 <HAL_TIM_OC_Start_IT+0x6e>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	bf14      	ite	ne
 8004ebc:	2301      	movne	r3, #1
 8004ebe:	2300      	moveq	r3, #0
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d001      	beq.n	8004eca <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e0b3      	b.n	8005032 <HAL_TIM_OC_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d104      	bne.n	8004eda <HAL_TIM_OC_Start_IT+0x86>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2202      	movs	r2, #2
 8004ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ed8:	e013      	b.n	8004f02 <HAL_TIM_OC_Start_IT+0xae>
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	2b04      	cmp	r3, #4
 8004ede:	d104      	bne.n	8004eea <HAL_TIM_OC_Start_IT+0x96>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2202      	movs	r2, #2
 8004ee4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ee8:	e00b      	b.n	8004f02 <HAL_TIM_OC_Start_IT+0xae>
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	2b08      	cmp	r3, #8
 8004eee:	d104      	bne.n	8004efa <HAL_TIM_OC_Start_IT+0xa6>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2202      	movs	r2, #2
 8004ef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ef8:	e003      	b.n	8004f02 <HAL_TIM_OC_Start_IT+0xae>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2202      	movs	r2, #2
 8004efe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	2b0c      	cmp	r3, #12
 8004f06:	d841      	bhi.n	8004f8c <HAL_TIM_OC_Start_IT+0x138>
 8004f08:	a201      	add	r2, pc, #4	; (adr r2, 8004f10 <HAL_TIM_OC_Start_IT+0xbc>)
 8004f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f0e:	bf00      	nop
 8004f10:	08004f45 	.word	0x08004f45
 8004f14:	08004f8d 	.word	0x08004f8d
 8004f18:	08004f8d 	.word	0x08004f8d
 8004f1c:	08004f8d 	.word	0x08004f8d
 8004f20:	08004f57 	.word	0x08004f57
 8004f24:	08004f8d 	.word	0x08004f8d
 8004f28:	08004f8d 	.word	0x08004f8d
 8004f2c:	08004f8d 	.word	0x08004f8d
 8004f30:	08004f69 	.word	0x08004f69
 8004f34:	08004f8d 	.word	0x08004f8d
 8004f38:	08004f8d 	.word	0x08004f8d
 8004f3c:	08004f8d 	.word	0x08004f8d
 8004f40:	08004f7b 	.word	0x08004f7b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	68da      	ldr	r2, [r3, #12]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f042 0202 	orr.w	r2, r2, #2
 8004f52:	60da      	str	r2, [r3, #12]
      break;
 8004f54:	e01d      	b.n	8004f92 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68da      	ldr	r2, [r3, #12]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f042 0204 	orr.w	r2, r2, #4
 8004f64:	60da      	str	r2, [r3, #12]
      break;
 8004f66:	e014      	b.n	8004f92 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68da      	ldr	r2, [r3, #12]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f042 0208 	orr.w	r2, r2, #8
 8004f76:	60da      	str	r2, [r3, #12]
      break;
 8004f78:	e00b      	b.n	8004f92 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	68da      	ldr	r2, [r3, #12]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f042 0210 	orr.w	r2, r2, #16
 8004f88:	60da      	str	r2, [r3, #12]
      break;
 8004f8a:	e002      	b.n	8004f92 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	73fb      	strb	r3, [r7, #15]
      break;
 8004f90:	bf00      	nop
  }

  if (status == HAL_OK)
 8004f92:	7bfb      	ldrb	r3, [r7, #15]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d14b      	bne.n	8005030 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	6839      	ldr	r1, [r7, #0]
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f000 fd59 	bl	8005a58 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a24      	ldr	r2, [pc, #144]	; (800503c <HAL_TIM_OC_Start_IT+0x1e8>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d107      	bne.n	8004fc0 <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004fbe:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a1d      	ldr	r2, [pc, #116]	; (800503c <HAL_TIM_OC_Start_IT+0x1e8>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d018      	beq.n	8004ffc <HAL_TIM_OC_Start_IT+0x1a8>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fd2:	d013      	beq.n	8004ffc <HAL_TIM_OC_Start_IT+0x1a8>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a19      	ldr	r2, [pc, #100]	; (8005040 <HAL_TIM_OC_Start_IT+0x1ec>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d00e      	beq.n	8004ffc <HAL_TIM_OC_Start_IT+0x1a8>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a18      	ldr	r2, [pc, #96]	; (8005044 <HAL_TIM_OC_Start_IT+0x1f0>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d009      	beq.n	8004ffc <HAL_TIM_OC_Start_IT+0x1a8>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a16      	ldr	r2, [pc, #88]	; (8005048 <HAL_TIM_OC_Start_IT+0x1f4>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d004      	beq.n	8004ffc <HAL_TIM_OC_Start_IT+0x1a8>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a15      	ldr	r2, [pc, #84]	; (800504c <HAL_TIM_OC_Start_IT+0x1f8>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d111      	bne.n	8005020 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	f003 0307 	and.w	r3, r3, #7
 8005006:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	2b06      	cmp	r3, #6
 800500c:	d010      	beq.n	8005030 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f042 0201 	orr.w	r2, r2, #1
 800501c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800501e:	e007      	b.n	8005030 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f042 0201 	orr.w	r2, r2, #1
 800502e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005030:	7bfb      	ldrb	r3, [r7, #15]
}
 8005032:	4618      	mov	r0, r3
 8005034:	3710      	adds	r7, #16
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	40010000 	.word	0x40010000
 8005040:	40000400 	.word	0x40000400
 8005044:	40000800 	.word	0x40000800
 8005048:	40000c00 	.word	0x40000c00
 800504c:	40014000 	.word	0x40014000

08005050 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b082      	sub	sp, #8
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d101      	bne.n	8005062 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e041      	b.n	80050e6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005068:	b2db      	uxtb	r3, r3
 800506a:	2b00      	cmp	r3, #0
 800506c:	d106      	bne.n	800507c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f7fc fee2 	bl	8001e40 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2202      	movs	r2, #2
 8005080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	3304      	adds	r3, #4
 800508c:	4619      	mov	r1, r3
 800508e:	4610      	mov	r0, r2
 8005090:	f000 fad6 	bl	8005640 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3708      	adds	r7, #8
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}

080050ee <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80050ee:	b580      	push	{r7, lr}
 80050f0:	b082      	sub	sp, #8
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
 80050f6:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d101      	bne.n	8005102 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e041      	b.n	8005186 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005108:	b2db      	uxtb	r3, r3
 800510a:	2b00      	cmp	r3, #0
 800510c:	d106      	bne.n	800511c <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f000 f839 	bl	800518e <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2202      	movs	r2, #2
 8005120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	3304      	adds	r3, #4
 800512c:	4619      	mov	r1, r3
 800512e:	4610      	mov	r0, r2
 8005130:	f000 fa86 	bl	8005640 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f022 0208 	bic.w	r2, r2, #8
 8005142:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	6819      	ldr	r1, [r3, #0]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	683a      	ldr	r2, [r7, #0]
 8005150:	430a      	orrs	r2, r1
 8005152:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3708      	adds	r7, #8
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}

0800518e <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800518e:	b480      	push	{r7}
 8005190:	b083      	sub	sp, #12
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8005196:	bf00      	nop
 8005198:	370c      	adds	r7, #12
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr

080051a2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051a2:	b580      	push	{r7, lr}
 80051a4:	b082      	sub	sp, #8
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	691b      	ldr	r3, [r3, #16]
 80051b0:	f003 0302 	and.w	r3, r3, #2
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d122      	bne.n	80051fe <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	f003 0302 	and.w	r3, r3, #2
 80051c2:	2b02      	cmp	r3, #2
 80051c4:	d11b      	bne.n	80051fe <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f06f 0202 	mvn.w	r2, #2
 80051ce:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	699b      	ldr	r3, [r3, #24]
 80051dc:	f003 0303 	and.w	r3, r3, #3
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d003      	beq.n	80051ec <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f000 fa0d 	bl	8005604 <HAL_TIM_IC_CaptureCallback>
 80051ea:	e005      	b.n	80051f8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f7fc fce5 	bl	8001bbc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 fa10 	bl	8005618 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	f003 0304 	and.w	r3, r3, #4
 8005208:	2b04      	cmp	r3, #4
 800520a:	d122      	bne.n	8005252 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	f003 0304 	and.w	r3, r3, #4
 8005216:	2b04      	cmp	r3, #4
 8005218:	d11b      	bne.n	8005252 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f06f 0204 	mvn.w	r2, #4
 8005222:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2202      	movs	r2, #2
 8005228:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	699b      	ldr	r3, [r3, #24]
 8005230:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005234:	2b00      	cmp	r3, #0
 8005236:	d003      	beq.n	8005240 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f000 f9e3 	bl	8005604 <HAL_TIM_IC_CaptureCallback>
 800523e:	e005      	b.n	800524c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f7fc fcbb 	bl	8001bbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 f9e6 	bl	8005618 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	f003 0308 	and.w	r3, r3, #8
 800525c:	2b08      	cmp	r3, #8
 800525e:	d122      	bne.n	80052a6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	f003 0308 	and.w	r3, r3, #8
 800526a:	2b08      	cmp	r3, #8
 800526c:	d11b      	bne.n	80052a6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f06f 0208 	mvn.w	r2, #8
 8005276:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2204      	movs	r2, #4
 800527c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	69db      	ldr	r3, [r3, #28]
 8005284:	f003 0303 	and.w	r3, r3, #3
 8005288:	2b00      	cmp	r3, #0
 800528a:	d003      	beq.n	8005294 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 f9b9 	bl	8005604 <HAL_TIM_IC_CaptureCallback>
 8005292:	e005      	b.n	80052a0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f7fc fc91 	bl	8001bbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 f9bc 	bl	8005618 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	691b      	ldr	r3, [r3, #16]
 80052ac:	f003 0310 	and.w	r3, r3, #16
 80052b0:	2b10      	cmp	r3, #16
 80052b2:	d122      	bne.n	80052fa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	f003 0310 	and.w	r3, r3, #16
 80052be:	2b10      	cmp	r3, #16
 80052c0:	d11b      	bne.n	80052fa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f06f 0210 	mvn.w	r2, #16
 80052ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2208      	movs	r2, #8
 80052d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	69db      	ldr	r3, [r3, #28]
 80052d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d003      	beq.n	80052e8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f000 f98f 	bl	8005604 <HAL_TIM_IC_CaptureCallback>
 80052e6:	e005      	b.n	80052f4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f7fc fc67 	bl	8001bbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 f992 	bl	8005618 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	691b      	ldr	r3, [r3, #16]
 8005300:	f003 0301 	and.w	r3, r3, #1
 8005304:	2b01      	cmp	r3, #1
 8005306:	d10e      	bne.n	8005326 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	f003 0301 	and.w	r3, r3, #1
 8005312:	2b01      	cmp	r3, #1
 8005314:	d107      	bne.n	8005326 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f06f 0201 	mvn.w	r2, #1
 800531e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f000 f965 	bl	80055f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005330:	2b80      	cmp	r3, #128	; 0x80
 8005332:	d10e      	bne.n	8005352 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800533e:	2b80      	cmp	r3, #128	; 0x80
 8005340:	d107      	bne.n	8005352 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800534a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f000 fc21 	bl	8005b94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	691b      	ldr	r3, [r3, #16]
 8005358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800535c:	2b40      	cmp	r3, #64	; 0x40
 800535e:	d10e      	bne.n	800537e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800536a:	2b40      	cmp	r3, #64	; 0x40
 800536c:	d107      	bne.n	800537e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005376:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f000 f957 	bl	800562c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	691b      	ldr	r3, [r3, #16]
 8005384:	f003 0320 	and.w	r3, r3, #32
 8005388:	2b20      	cmp	r3, #32
 800538a:	d10e      	bne.n	80053aa <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	f003 0320 	and.w	r3, r3, #32
 8005396:	2b20      	cmp	r3, #32
 8005398:	d107      	bne.n	80053aa <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f06f 0220 	mvn.w	r2, #32
 80053a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f000 fbeb 	bl	8005b80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053aa:	bf00      	nop
 80053ac:	3708      	adds	r7, #8
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
	...

080053b4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b086      	sub	sp, #24
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053c0:	2300      	movs	r3, #0
 80053c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d101      	bne.n	80053d2 <HAL_TIM_OC_ConfigChannel+0x1e>
 80053ce:	2302      	movs	r3, #2
 80053d0:	e048      	b.n	8005464 <HAL_TIM_OC_ConfigChannel+0xb0>
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2201      	movs	r2, #1
 80053d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2b0c      	cmp	r3, #12
 80053de:	d839      	bhi.n	8005454 <HAL_TIM_OC_ConfigChannel+0xa0>
 80053e0:	a201      	add	r2, pc, #4	; (adr r2, 80053e8 <HAL_TIM_OC_ConfigChannel+0x34>)
 80053e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e6:	bf00      	nop
 80053e8:	0800541d 	.word	0x0800541d
 80053ec:	08005455 	.word	0x08005455
 80053f0:	08005455 	.word	0x08005455
 80053f4:	08005455 	.word	0x08005455
 80053f8:	0800542b 	.word	0x0800542b
 80053fc:	08005455 	.word	0x08005455
 8005400:	08005455 	.word	0x08005455
 8005404:	08005455 	.word	0x08005455
 8005408:	08005439 	.word	0x08005439
 800540c:	08005455 	.word	0x08005455
 8005410:	08005455 	.word	0x08005455
 8005414:	08005455 	.word	0x08005455
 8005418:	08005447 	.word	0x08005447
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	68b9      	ldr	r1, [r7, #8]
 8005422:	4618      	mov	r0, r3
 8005424:	f000 f98c 	bl	8005740 <TIM_OC1_SetConfig>
      break;
 8005428:	e017      	b.n	800545a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	68b9      	ldr	r1, [r7, #8]
 8005430:	4618      	mov	r0, r3
 8005432:	f000 f9eb 	bl	800580c <TIM_OC2_SetConfig>
      break;
 8005436:	e010      	b.n	800545a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68b9      	ldr	r1, [r7, #8]
 800543e:	4618      	mov	r0, r3
 8005440:	f000 fa50 	bl	80058e4 <TIM_OC3_SetConfig>
      break;
 8005444:	e009      	b.n	800545a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	68b9      	ldr	r1, [r7, #8]
 800544c:	4618      	mov	r0, r3
 800544e:	f000 fab3 	bl	80059b8 <TIM_OC4_SetConfig>
      break;
 8005452:	e002      	b.n	800545a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	75fb      	strb	r3, [r7, #23]
      break;
 8005458:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005462:	7dfb      	ldrb	r3, [r7, #23]
}
 8005464:	4618      	mov	r0, r3
 8005466:	3718      	adds	r7, #24
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b086      	sub	sp, #24
 8005470:	af00      	add	r7, sp, #0
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005478:	2300      	movs	r3, #0
 800547a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005482:	2b01      	cmp	r3, #1
 8005484:	d101      	bne.n	800548a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005486:	2302      	movs	r3, #2
 8005488:	e0ae      	b.n	80055e8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2201      	movs	r2, #1
 800548e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2b0c      	cmp	r3, #12
 8005496:	f200 809f 	bhi.w	80055d8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800549a:	a201      	add	r2, pc, #4	; (adr r2, 80054a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800549c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a0:	080054d5 	.word	0x080054d5
 80054a4:	080055d9 	.word	0x080055d9
 80054a8:	080055d9 	.word	0x080055d9
 80054ac:	080055d9 	.word	0x080055d9
 80054b0:	08005515 	.word	0x08005515
 80054b4:	080055d9 	.word	0x080055d9
 80054b8:	080055d9 	.word	0x080055d9
 80054bc:	080055d9 	.word	0x080055d9
 80054c0:	08005557 	.word	0x08005557
 80054c4:	080055d9 	.word	0x080055d9
 80054c8:	080055d9 	.word	0x080055d9
 80054cc:	080055d9 	.word	0x080055d9
 80054d0:	08005597 	.word	0x08005597
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	68b9      	ldr	r1, [r7, #8]
 80054da:	4618      	mov	r0, r3
 80054dc:	f000 f930 	bl	8005740 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	699a      	ldr	r2, [r3, #24]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f042 0208 	orr.w	r2, r2, #8
 80054ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	699a      	ldr	r2, [r3, #24]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f022 0204 	bic.w	r2, r2, #4
 80054fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	6999      	ldr	r1, [r3, #24]
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	691a      	ldr	r2, [r3, #16]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	430a      	orrs	r2, r1
 8005510:	619a      	str	r2, [r3, #24]
      break;
 8005512:	e064      	b.n	80055de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	68b9      	ldr	r1, [r7, #8]
 800551a:	4618      	mov	r0, r3
 800551c:	f000 f976 	bl	800580c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	699a      	ldr	r2, [r3, #24]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800552e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	699a      	ldr	r2, [r3, #24]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800553e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	6999      	ldr	r1, [r3, #24]
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	021a      	lsls	r2, r3, #8
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	430a      	orrs	r2, r1
 8005552:	619a      	str	r2, [r3, #24]
      break;
 8005554:	e043      	b.n	80055de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	68b9      	ldr	r1, [r7, #8]
 800555c:	4618      	mov	r0, r3
 800555e:	f000 f9c1 	bl	80058e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	69da      	ldr	r2, [r3, #28]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f042 0208 	orr.w	r2, r2, #8
 8005570:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	69da      	ldr	r2, [r3, #28]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f022 0204 	bic.w	r2, r2, #4
 8005580:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	69d9      	ldr	r1, [r3, #28]
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	691a      	ldr	r2, [r3, #16]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	430a      	orrs	r2, r1
 8005592:	61da      	str	r2, [r3, #28]
      break;
 8005594:	e023      	b.n	80055de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	68b9      	ldr	r1, [r7, #8]
 800559c:	4618      	mov	r0, r3
 800559e:	f000 fa0b 	bl	80059b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	69da      	ldr	r2, [r3, #28]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	69da      	ldr	r2, [r3, #28]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	69d9      	ldr	r1, [r3, #28]
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	021a      	lsls	r2, r3, #8
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	430a      	orrs	r2, r1
 80055d4:	61da      	str	r2, [r3, #28]
      break;
 80055d6:	e002      	b.n	80055de <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	75fb      	strb	r3, [r7, #23]
      break;
 80055dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80055e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3718      	adds	r7, #24
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80055f8:	bf00      	nop
 80055fa:	370c      	adds	r7, #12
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr

08005604 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800560c:	bf00      	nop
 800560e:	370c      	adds	r7, #12
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr

08005618 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005620:	bf00      	nop
 8005622:	370c      	adds	r7, #12
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800562c:	b480      	push	{r7}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005634:	bf00      	nop
 8005636:	370c      	adds	r7, #12
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr

08005640 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005640:	b480      	push	{r7}
 8005642:	b085      	sub	sp, #20
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a34      	ldr	r2, [pc, #208]	; (8005724 <TIM_Base_SetConfig+0xe4>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d00f      	beq.n	8005678 <TIM_Base_SetConfig+0x38>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800565e:	d00b      	beq.n	8005678 <TIM_Base_SetConfig+0x38>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4a31      	ldr	r2, [pc, #196]	; (8005728 <TIM_Base_SetConfig+0xe8>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d007      	beq.n	8005678 <TIM_Base_SetConfig+0x38>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4a30      	ldr	r2, [pc, #192]	; (800572c <TIM_Base_SetConfig+0xec>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d003      	beq.n	8005678 <TIM_Base_SetConfig+0x38>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	4a2f      	ldr	r2, [pc, #188]	; (8005730 <TIM_Base_SetConfig+0xf0>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d108      	bne.n	800568a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800567e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	4313      	orrs	r3, r2
 8005688:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a25      	ldr	r2, [pc, #148]	; (8005724 <TIM_Base_SetConfig+0xe4>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d01b      	beq.n	80056ca <TIM_Base_SetConfig+0x8a>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005698:	d017      	beq.n	80056ca <TIM_Base_SetConfig+0x8a>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a22      	ldr	r2, [pc, #136]	; (8005728 <TIM_Base_SetConfig+0xe8>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d013      	beq.n	80056ca <TIM_Base_SetConfig+0x8a>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a21      	ldr	r2, [pc, #132]	; (800572c <TIM_Base_SetConfig+0xec>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d00f      	beq.n	80056ca <TIM_Base_SetConfig+0x8a>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a20      	ldr	r2, [pc, #128]	; (8005730 <TIM_Base_SetConfig+0xf0>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d00b      	beq.n	80056ca <TIM_Base_SetConfig+0x8a>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a1f      	ldr	r2, [pc, #124]	; (8005734 <TIM_Base_SetConfig+0xf4>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d007      	beq.n	80056ca <TIM_Base_SetConfig+0x8a>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a1e      	ldr	r2, [pc, #120]	; (8005738 <TIM_Base_SetConfig+0xf8>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d003      	beq.n	80056ca <TIM_Base_SetConfig+0x8a>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a1d      	ldr	r2, [pc, #116]	; (800573c <TIM_Base_SetConfig+0xfc>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d108      	bne.n	80056dc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	68fa      	ldr	r2, [r7, #12]
 80056d8:	4313      	orrs	r3, r2
 80056da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	695b      	ldr	r3, [r3, #20]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	689a      	ldr	r2, [r3, #8]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4a08      	ldr	r2, [pc, #32]	; (8005724 <TIM_Base_SetConfig+0xe4>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d103      	bne.n	8005710 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	691a      	ldr	r2, [r3, #16]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	615a      	str	r2, [r3, #20]
}
 8005716:	bf00      	nop
 8005718:	3714      	adds	r7, #20
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr
 8005722:	bf00      	nop
 8005724:	40010000 	.word	0x40010000
 8005728:	40000400 	.word	0x40000400
 800572c:	40000800 	.word	0x40000800
 8005730:	40000c00 	.word	0x40000c00
 8005734:	40014000 	.word	0x40014000
 8005738:	40014400 	.word	0x40014400
 800573c:	40014800 	.word	0x40014800

08005740 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005740:	b480      	push	{r7}
 8005742:	b087      	sub	sp, #28
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a1b      	ldr	r3, [r3, #32]
 800574e:	f023 0201 	bic.w	r2, r3, #1
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a1b      	ldr	r3, [r3, #32]
 800575a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	699b      	ldr	r3, [r3, #24]
 8005766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800576e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f023 0303 	bic.w	r3, r3, #3
 8005776:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	4313      	orrs	r3, r2
 8005780:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	f023 0302 	bic.w	r3, r3, #2
 8005788:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	697a      	ldr	r2, [r7, #20]
 8005790:	4313      	orrs	r3, r2
 8005792:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4a1c      	ldr	r2, [pc, #112]	; (8005808 <TIM_OC1_SetConfig+0xc8>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d10c      	bne.n	80057b6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	f023 0308 	bic.w	r3, r3, #8
 80057a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	697a      	ldr	r2, [r7, #20]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	f023 0304 	bic.w	r3, r3, #4
 80057b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a13      	ldr	r2, [pc, #76]	; (8005808 <TIM_OC1_SetConfig+0xc8>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d111      	bne.n	80057e2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	695b      	ldr	r3, [r3, #20]
 80057d2:	693a      	ldr	r2, [r7, #16]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	699b      	ldr	r3, [r3, #24]
 80057dc:	693a      	ldr	r2, [r7, #16]
 80057de:	4313      	orrs	r3, r2
 80057e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	693a      	ldr	r2, [r7, #16]
 80057e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	68fa      	ldr	r2, [r7, #12]
 80057ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	685a      	ldr	r2, [r3, #4]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	697a      	ldr	r2, [r7, #20]
 80057fa:	621a      	str	r2, [r3, #32]
}
 80057fc:	bf00      	nop
 80057fe:	371c      	adds	r7, #28
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr
 8005808:	40010000 	.word	0x40010000

0800580c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800580c:	b480      	push	{r7}
 800580e:	b087      	sub	sp, #28
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a1b      	ldr	r3, [r3, #32]
 800581a:	f023 0210 	bic.w	r2, r3, #16
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6a1b      	ldr	r3, [r3, #32]
 8005826:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	699b      	ldr	r3, [r3, #24]
 8005832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800583a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005842:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	021b      	lsls	r3, r3, #8
 800584a:	68fa      	ldr	r2, [r7, #12]
 800584c:	4313      	orrs	r3, r2
 800584e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	f023 0320 	bic.w	r3, r3, #32
 8005856:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	011b      	lsls	r3, r3, #4
 800585e:	697a      	ldr	r2, [r7, #20]
 8005860:	4313      	orrs	r3, r2
 8005862:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	4a1e      	ldr	r2, [pc, #120]	; (80058e0 <TIM_OC2_SetConfig+0xd4>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d10d      	bne.n	8005888 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005872:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	011b      	lsls	r3, r3, #4
 800587a:	697a      	ldr	r2, [r7, #20]
 800587c:	4313      	orrs	r3, r2
 800587e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005886:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a15      	ldr	r2, [pc, #84]	; (80058e0 <TIM_OC2_SetConfig+0xd4>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d113      	bne.n	80058b8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005896:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800589e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	695b      	ldr	r3, [r3, #20]
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	693a      	ldr	r2, [r7, #16]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	699b      	ldr	r3, [r3, #24]
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	693a      	ldr	r2, [r7, #16]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	693a      	ldr	r2, [r7, #16]
 80058bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	685a      	ldr	r2, [r3, #4]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	697a      	ldr	r2, [r7, #20]
 80058d0:	621a      	str	r2, [r3, #32]
}
 80058d2:	bf00      	nop
 80058d4:	371c      	adds	r7, #28
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr
 80058de:	bf00      	nop
 80058e0:	40010000 	.word	0x40010000

080058e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b087      	sub	sp, #28
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a1b      	ldr	r3, [r3, #32]
 80058f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a1b      	ldr	r3, [r3, #32]
 80058fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	69db      	ldr	r3, [r3, #28]
 800590a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005912:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f023 0303 	bic.w	r3, r3, #3
 800591a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68fa      	ldr	r2, [r7, #12]
 8005922:	4313      	orrs	r3, r2
 8005924:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800592c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	021b      	lsls	r3, r3, #8
 8005934:	697a      	ldr	r2, [r7, #20]
 8005936:	4313      	orrs	r3, r2
 8005938:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a1d      	ldr	r2, [pc, #116]	; (80059b4 <TIM_OC3_SetConfig+0xd0>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d10d      	bne.n	800595e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005948:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	021b      	lsls	r3, r3, #8
 8005950:	697a      	ldr	r2, [r7, #20]
 8005952:	4313      	orrs	r3, r2
 8005954:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800595c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a14      	ldr	r2, [pc, #80]	; (80059b4 <TIM_OC3_SetConfig+0xd0>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d113      	bne.n	800598e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800596c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005974:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	695b      	ldr	r3, [r3, #20]
 800597a:	011b      	lsls	r3, r3, #4
 800597c:	693a      	ldr	r2, [r7, #16]
 800597e:	4313      	orrs	r3, r2
 8005980:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	699b      	ldr	r3, [r3, #24]
 8005986:	011b      	lsls	r3, r3, #4
 8005988:	693a      	ldr	r2, [r7, #16]
 800598a:	4313      	orrs	r3, r2
 800598c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	693a      	ldr	r2, [r7, #16]
 8005992:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	68fa      	ldr	r2, [r7, #12]
 8005998:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	685a      	ldr	r2, [r3, #4]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	697a      	ldr	r2, [r7, #20]
 80059a6:	621a      	str	r2, [r3, #32]
}
 80059a8:	bf00      	nop
 80059aa:	371c      	adds	r7, #28
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr
 80059b4:	40010000 	.word	0x40010000

080059b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b087      	sub	sp, #28
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a1b      	ldr	r3, [r3, #32]
 80059c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a1b      	ldr	r3, [r3, #32]
 80059d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	69db      	ldr	r3, [r3, #28]
 80059de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	021b      	lsls	r3, r3, #8
 80059f6:	68fa      	ldr	r2, [r7, #12]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	031b      	lsls	r3, r3, #12
 8005a0a:	693a      	ldr	r2, [r7, #16]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	4a10      	ldr	r2, [pc, #64]	; (8005a54 <TIM_OC4_SetConfig+0x9c>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d109      	bne.n	8005a2c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	695b      	ldr	r3, [r3, #20]
 8005a24:	019b      	lsls	r3, r3, #6
 8005a26:	697a      	ldr	r2, [r7, #20]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	697a      	ldr	r2, [r7, #20]
 8005a30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	685a      	ldr	r2, [r3, #4]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	693a      	ldr	r2, [r7, #16]
 8005a44:	621a      	str	r2, [r3, #32]
}
 8005a46:	bf00      	nop
 8005a48:	371c      	adds	r7, #28
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr
 8005a52:	bf00      	nop
 8005a54:	40010000 	.word	0x40010000

08005a58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b087      	sub	sp, #28
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	60f8      	str	r0, [r7, #12]
 8005a60:	60b9      	str	r1, [r7, #8]
 8005a62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	f003 031f 	and.w	r3, r3, #31
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	6a1a      	ldr	r2, [r3, #32]
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	43db      	mvns	r3, r3
 8005a7a:	401a      	ands	r2, r3
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6a1a      	ldr	r2, [r3, #32]
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	f003 031f 	and.w	r3, r3, #31
 8005a8a:	6879      	ldr	r1, [r7, #4]
 8005a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8005a90:	431a      	orrs	r2, r3
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	621a      	str	r2, [r3, #32]
}
 8005a96:	bf00      	nop
 8005a98:	371c      	adds	r7, #28
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr
	...

08005aa4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b085      	sub	sp, #20
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d101      	bne.n	8005abc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ab8:	2302      	movs	r3, #2
 8005aba:	e050      	b.n	8005b5e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2202      	movs	r2, #2
 8005ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ae2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68fa      	ldr	r2, [r7, #12]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	68fa      	ldr	r2, [r7, #12]
 8005af4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a1c      	ldr	r2, [pc, #112]	; (8005b6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d018      	beq.n	8005b32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b08:	d013      	beq.n	8005b32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a18      	ldr	r2, [pc, #96]	; (8005b70 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d00e      	beq.n	8005b32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a16      	ldr	r2, [pc, #88]	; (8005b74 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d009      	beq.n	8005b32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a15      	ldr	r2, [pc, #84]	; (8005b78 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d004      	beq.n	8005b32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a13      	ldr	r2, [pc, #76]	; (8005b7c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d10c      	bne.n	8005b4c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	68ba      	ldr	r2, [r7, #8]
 8005b40:	4313      	orrs	r3, r2
 8005b42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	68ba      	ldr	r2, [r7, #8]
 8005b4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b5c:	2300      	movs	r3, #0
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3714      	adds	r7, #20
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr
 8005b6a:	bf00      	nop
 8005b6c:	40010000 	.word	0x40010000
 8005b70:	40000400 	.word	0x40000400
 8005b74:	40000800 	.word	0x40000800
 8005b78:	40000c00 	.word	0x40000c00
 8005b7c:	40014000 	.word	0x40014000

08005b80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b88:	bf00      	nop
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b9c:	bf00      	nop
 8005b9e:	370c      	adds	r7, #12
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d101      	bne.n	8005bba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e03f      	b.n	8005c3a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d106      	bne.n	8005bd4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f7fc f9f4 	bl	8001fbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2224      	movs	r2, #36	; 0x24
 8005bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	68da      	ldr	r2, [r3, #12]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005bea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f000 f829 	bl	8005c44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	691a      	ldr	r2, [r3, #16]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	695a      	ldr	r2, [r3, #20]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	68da      	ldr	r2, [r3, #12]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2220      	movs	r2, #32
 8005c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2220      	movs	r2, #32
 8005c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3708      	adds	r7, #8
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
	...

08005c44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c48:	b09f      	sub	sp, #124	; 0x7c
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	691b      	ldr	r3, [r3, #16]
 8005c54:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005c58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c5a:	68d9      	ldr	r1, [r3, #12]
 8005c5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	ea40 0301 	orr.w	r3, r0, r1
 8005c64:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005c66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c68:	689a      	ldr	r2, [r3, #8]
 8005c6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c6c:	691b      	ldr	r3, [r3, #16]
 8005c6e:	431a      	orrs	r2, r3
 8005c70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c72:	695b      	ldr	r3, [r3, #20]
 8005c74:	431a      	orrs	r2, r3
 8005c76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c78:	69db      	ldr	r3, [r3, #28]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005c7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005c88:	f021 010c 	bic.w	r1, r1, #12
 8005c8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c92:	430b      	orrs	r3, r1
 8005c94:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	695b      	ldr	r3, [r3, #20]
 8005c9c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005ca0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ca2:	6999      	ldr	r1, [r3, #24]
 8005ca4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	ea40 0301 	orr.w	r3, r0, r1
 8005cac:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005cae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	4bc5      	ldr	r3, [pc, #788]	; (8005fc8 <UART_SetConfig+0x384>)
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d004      	beq.n	8005cc2 <UART_SetConfig+0x7e>
 8005cb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	4bc3      	ldr	r3, [pc, #780]	; (8005fcc <UART_SetConfig+0x388>)
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d103      	bne.n	8005cca <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005cc2:	f7fe fbcd 	bl	8004460 <HAL_RCC_GetPCLK2Freq>
 8005cc6:	6778      	str	r0, [r7, #116]	; 0x74
 8005cc8:	e002      	b.n	8005cd0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005cca:	f7fe fbb5 	bl	8004438 <HAL_RCC_GetPCLK1Freq>
 8005cce:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cd2:	69db      	ldr	r3, [r3, #28]
 8005cd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cd8:	f040 80b6 	bne.w	8005e48 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005cdc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cde:	461c      	mov	r4, r3
 8005ce0:	f04f 0500 	mov.w	r5, #0
 8005ce4:	4622      	mov	r2, r4
 8005ce6:	462b      	mov	r3, r5
 8005ce8:	1891      	adds	r1, r2, r2
 8005cea:	6439      	str	r1, [r7, #64]	; 0x40
 8005cec:	415b      	adcs	r3, r3
 8005cee:	647b      	str	r3, [r7, #68]	; 0x44
 8005cf0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005cf4:	1912      	adds	r2, r2, r4
 8005cf6:	eb45 0303 	adc.w	r3, r5, r3
 8005cfa:	f04f 0000 	mov.w	r0, #0
 8005cfe:	f04f 0100 	mov.w	r1, #0
 8005d02:	00d9      	lsls	r1, r3, #3
 8005d04:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005d08:	00d0      	lsls	r0, r2, #3
 8005d0a:	4602      	mov	r2, r0
 8005d0c:	460b      	mov	r3, r1
 8005d0e:	1911      	adds	r1, r2, r4
 8005d10:	6639      	str	r1, [r7, #96]	; 0x60
 8005d12:	416b      	adcs	r3, r5
 8005d14:	667b      	str	r3, [r7, #100]	; 0x64
 8005d16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	f04f 0300 	mov.w	r3, #0
 8005d20:	1891      	adds	r1, r2, r2
 8005d22:	63b9      	str	r1, [r7, #56]	; 0x38
 8005d24:	415b      	adcs	r3, r3
 8005d26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d28:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005d2c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005d30:	f7fa ff92 	bl	8000c58 <__aeabi_uldivmod>
 8005d34:	4602      	mov	r2, r0
 8005d36:	460b      	mov	r3, r1
 8005d38:	4ba5      	ldr	r3, [pc, #660]	; (8005fd0 <UART_SetConfig+0x38c>)
 8005d3a:	fba3 2302 	umull	r2, r3, r3, r2
 8005d3e:	095b      	lsrs	r3, r3, #5
 8005d40:	011e      	lsls	r6, r3, #4
 8005d42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d44:	461c      	mov	r4, r3
 8005d46:	f04f 0500 	mov.w	r5, #0
 8005d4a:	4622      	mov	r2, r4
 8005d4c:	462b      	mov	r3, r5
 8005d4e:	1891      	adds	r1, r2, r2
 8005d50:	6339      	str	r1, [r7, #48]	; 0x30
 8005d52:	415b      	adcs	r3, r3
 8005d54:	637b      	str	r3, [r7, #52]	; 0x34
 8005d56:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005d5a:	1912      	adds	r2, r2, r4
 8005d5c:	eb45 0303 	adc.w	r3, r5, r3
 8005d60:	f04f 0000 	mov.w	r0, #0
 8005d64:	f04f 0100 	mov.w	r1, #0
 8005d68:	00d9      	lsls	r1, r3, #3
 8005d6a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005d6e:	00d0      	lsls	r0, r2, #3
 8005d70:	4602      	mov	r2, r0
 8005d72:	460b      	mov	r3, r1
 8005d74:	1911      	adds	r1, r2, r4
 8005d76:	65b9      	str	r1, [r7, #88]	; 0x58
 8005d78:	416b      	adcs	r3, r5
 8005d7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	461a      	mov	r2, r3
 8005d82:	f04f 0300 	mov.w	r3, #0
 8005d86:	1891      	adds	r1, r2, r2
 8005d88:	62b9      	str	r1, [r7, #40]	; 0x28
 8005d8a:	415b      	adcs	r3, r3
 8005d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d8e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005d92:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005d96:	f7fa ff5f 	bl	8000c58 <__aeabi_uldivmod>
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	460b      	mov	r3, r1
 8005d9e:	4b8c      	ldr	r3, [pc, #560]	; (8005fd0 <UART_SetConfig+0x38c>)
 8005da0:	fba3 1302 	umull	r1, r3, r3, r2
 8005da4:	095b      	lsrs	r3, r3, #5
 8005da6:	2164      	movs	r1, #100	; 0x64
 8005da8:	fb01 f303 	mul.w	r3, r1, r3
 8005dac:	1ad3      	subs	r3, r2, r3
 8005dae:	00db      	lsls	r3, r3, #3
 8005db0:	3332      	adds	r3, #50	; 0x32
 8005db2:	4a87      	ldr	r2, [pc, #540]	; (8005fd0 <UART_SetConfig+0x38c>)
 8005db4:	fba2 2303 	umull	r2, r3, r2, r3
 8005db8:	095b      	lsrs	r3, r3, #5
 8005dba:	005b      	lsls	r3, r3, #1
 8005dbc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005dc0:	441e      	add	r6, r3
 8005dc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f04f 0100 	mov.w	r1, #0
 8005dca:	4602      	mov	r2, r0
 8005dcc:	460b      	mov	r3, r1
 8005dce:	1894      	adds	r4, r2, r2
 8005dd0:	623c      	str	r4, [r7, #32]
 8005dd2:	415b      	adcs	r3, r3
 8005dd4:	627b      	str	r3, [r7, #36]	; 0x24
 8005dd6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005dda:	1812      	adds	r2, r2, r0
 8005ddc:	eb41 0303 	adc.w	r3, r1, r3
 8005de0:	f04f 0400 	mov.w	r4, #0
 8005de4:	f04f 0500 	mov.w	r5, #0
 8005de8:	00dd      	lsls	r5, r3, #3
 8005dea:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005dee:	00d4      	lsls	r4, r2, #3
 8005df0:	4622      	mov	r2, r4
 8005df2:	462b      	mov	r3, r5
 8005df4:	1814      	adds	r4, r2, r0
 8005df6:	653c      	str	r4, [r7, #80]	; 0x50
 8005df8:	414b      	adcs	r3, r1
 8005dfa:	657b      	str	r3, [r7, #84]	; 0x54
 8005dfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	461a      	mov	r2, r3
 8005e02:	f04f 0300 	mov.w	r3, #0
 8005e06:	1891      	adds	r1, r2, r2
 8005e08:	61b9      	str	r1, [r7, #24]
 8005e0a:	415b      	adcs	r3, r3
 8005e0c:	61fb      	str	r3, [r7, #28]
 8005e0e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e12:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005e16:	f7fa ff1f 	bl	8000c58 <__aeabi_uldivmod>
 8005e1a:	4602      	mov	r2, r0
 8005e1c:	460b      	mov	r3, r1
 8005e1e:	4b6c      	ldr	r3, [pc, #432]	; (8005fd0 <UART_SetConfig+0x38c>)
 8005e20:	fba3 1302 	umull	r1, r3, r3, r2
 8005e24:	095b      	lsrs	r3, r3, #5
 8005e26:	2164      	movs	r1, #100	; 0x64
 8005e28:	fb01 f303 	mul.w	r3, r1, r3
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	00db      	lsls	r3, r3, #3
 8005e30:	3332      	adds	r3, #50	; 0x32
 8005e32:	4a67      	ldr	r2, [pc, #412]	; (8005fd0 <UART_SetConfig+0x38c>)
 8005e34:	fba2 2303 	umull	r2, r3, r2, r3
 8005e38:	095b      	lsrs	r3, r3, #5
 8005e3a:	f003 0207 	and.w	r2, r3, #7
 8005e3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4432      	add	r2, r6
 8005e44:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005e46:	e0b9      	b.n	8005fbc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e4a:	461c      	mov	r4, r3
 8005e4c:	f04f 0500 	mov.w	r5, #0
 8005e50:	4622      	mov	r2, r4
 8005e52:	462b      	mov	r3, r5
 8005e54:	1891      	adds	r1, r2, r2
 8005e56:	6139      	str	r1, [r7, #16]
 8005e58:	415b      	adcs	r3, r3
 8005e5a:	617b      	str	r3, [r7, #20]
 8005e5c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005e60:	1912      	adds	r2, r2, r4
 8005e62:	eb45 0303 	adc.w	r3, r5, r3
 8005e66:	f04f 0000 	mov.w	r0, #0
 8005e6a:	f04f 0100 	mov.w	r1, #0
 8005e6e:	00d9      	lsls	r1, r3, #3
 8005e70:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005e74:	00d0      	lsls	r0, r2, #3
 8005e76:	4602      	mov	r2, r0
 8005e78:	460b      	mov	r3, r1
 8005e7a:	eb12 0804 	adds.w	r8, r2, r4
 8005e7e:	eb43 0905 	adc.w	r9, r3, r5
 8005e82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	4618      	mov	r0, r3
 8005e88:	f04f 0100 	mov.w	r1, #0
 8005e8c:	f04f 0200 	mov.w	r2, #0
 8005e90:	f04f 0300 	mov.w	r3, #0
 8005e94:	008b      	lsls	r3, r1, #2
 8005e96:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005e9a:	0082      	lsls	r2, r0, #2
 8005e9c:	4640      	mov	r0, r8
 8005e9e:	4649      	mov	r1, r9
 8005ea0:	f7fa feda 	bl	8000c58 <__aeabi_uldivmod>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	460b      	mov	r3, r1
 8005ea8:	4b49      	ldr	r3, [pc, #292]	; (8005fd0 <UART_SetConfig+0x38c>)
 8005eaa:	fba3 2302 	umull	r2, r3, r3, r2
 8005eae:	095b      	lsrs	r3, r3, #5
 8005eb0:	011e      	lsls	r6, r3, #4
 8005eb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f04f 0100 	mov.w	r1, #0
 8005eba:	4602      	mov	r2, r0
 8005ebc:	460b      	mov	r3, r1
 8005ebe:	1894      	adds	r4, r2, r2
 8005ec0:	60bc      	str	r4, [r7, #8]
 8005ec2:	415b      	adcs	r3, r3
 8005ec4:	60fb      	str	r3, [r7, #12]
 8005ec6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005eca:	1812      	adds	r2, r2, r0
 8005ecc:	eb41 0303 	adc.w	r3, r1, r3
 8005ed0:	f04f 0400 	mov.w	r4, #0
 8005ed4:	f04f 0500 	mov.w	r5, #0
 8005ed8:	00dd      	lsls	r5, r3, #3
 8005eda:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005ede:	00d4      	lsls	r4, r2, #3
 8005ee0:	4622      	mov	r2, r4
 8005ee2:	462b      	mov	r3, r5
 8005ee4:	1814      	adds	r4, r2, r0
 8005ee6:	64bc      	str	r4, [r7, #72]	; 0x48
 8005ee8:	414b      	adcs	r3, r1
 8005eea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005eec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f04f 0100 	mov.w	r1, #0
 8005ef6:	f04f 0200 	mov.w	r2, #0
 8005efa:	f04f 0300 	mov.w	r3, #0
 8005efe:	008b      	lsls	r3, r1, #2
 8005f00:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005f04:	0082      	lsls	r2, r0, #2
 8005f06:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005f0a:	f7fa fea5 	bl	8000c58 <__aeabi_uldivmod>
 8005f0e:	4602      	mov	r2, r0
 8005f10:	460b      	mov	r3, r1
 8005f12:	4b2f      	ldr	r3, [pc, #188]	; (8005fd0 <UART_SetConfig+0x38c>)
 8005f14:	fba3 1302 	umull	r1, r3, r3, r2
 8005f18:	095b      	lsrs	r3, r3, #5
 8005f1a:	2164      	movs	r1, #100	; 0x64
 8005f1c:	fb01 f303 	mul.w	r3, r1, r3
 8005f20:	1ad3      	subs	r3, r2, r3
 8005f22:	011b      	lsls	r3, r3, #4
 8005f24:	3332      	adds	r3, #50	; 0x32
 8005f26:	4a2a      	ldr	r2, [pc, #168]	; (8005fd0 <UART_SetConfig+0x38c>)
 8005f28:	fba2 2303 	umull	r2, r3, r2, r3
 8005f2c:	095b      	lsrs	r3, r3, #5
 8005f2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f32:	441e      	add	r6, r3
 8005f34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f36:	4618      	mov	r0, r3
 8005f38:	f04f 0100 	mov.w	r1, #0
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	460b      	mov	r3, r1
 8005f40:	1894      	adds	r4, r2, r2
 8005f42:	603c      	str	r4, [r7, #0]
 8005f44:	415b      	adcs	r3, r3
 8005f46:	607b      	str	r3, [r7, #4]
 8005f48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f4c:	1812      	adds	r2, r2, r0
 8005f4e:	eb41 0303 	adc.w	r3, r1, r3
 8005f52:	f04f 0400 	mov.w	r4, #0
 8005f56:	f04f 0500 	mov.w	r5, #0
 8005f5a:	00dd      	lsls	r5, r3, #3
 8005f5c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005f60:	00d4      	lsls	r4, r2, #3
 8005f62:	4622      	mov	r2, r4
 8005f64:	462b      	mov	r3, r5
 8005f66:	eb12 0a00 	adds.w	sl, r2, r0
 8005f6a:	eb43 0b01 	adc.w	fp, r3, r1
 8005f6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	4618      	mov	r0, r3
 8005f74:	f04f 0100 	mov.w	r1, #0
 8005f78:	f04f 0200 	mov.w	r2, #0
 8005f7c:	f04f 0300 	mov.w	r3, #0
 8005f80:	008b      	lsls	r3, r1, #2
 8005f82:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005f86:	0082      	lsls	r2, r0, #2
 8005f88:	4650      	mov	r0, sl
 8005f8a:	4659      	mov	r1, fp
 8005f8c:	f7fa fe64 	bl	8000c58 <__aeabi_uldivmod>
 8005f90:	4602      	mov	r2, r0
 8005f92:	460b      	mov	r3, r1
 8005f94:	4b0e      	ldr	r3, [pc, #56]	; (8005fd0 <UART_SetConfig+0x38c>)
 8005f96:	fba3 1302 	umull	r1, r3, r3, r2
 8005f9a:	095b      	lsrs	r3, r3, #5
 8005f9c:	2164      	movs	r1, #100	; 0x64
 8005f9e:	fb01 f303 	mul.w	r3, r1, r3
 8005fa2:	1ad3      	subs	r3, r2, r3
 8005fa4:	011b      	lsls	r3, r3, #4
 8005fa6:	3332      	adds	r3, #50	; 0x32
 8005fa8:	4a09      	ldr	r2, [pc, #36]	; (8005fd0 <UART_SetConfig+0x38c>)
 8005faa:	fba2 2303 	umull	r2, r3, r2, r3
 8005fae:	095b      	lsrs	r3, r3, #5
 8005fb0:	f003 020f 	and.w	r2, r3, #15
 8005fb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4432      	add	r2, r6
 8005fba:	609a      	str	r2, [r3, #8]
}
 8005fbc:	bf00      	nop
 8005fbe:	377c      	adds	r7, #124	; 0x7c
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fc6:	bf00      	nop
 8005fc8:	40011000 	.word	0x40011000
 8005fcc:	40011400 	.word	0x40011400
 8005fd0:	51eb851f 	.word	0x51eb851f

08005fd4 <delay_ms>:
u16 POINT_COLOR = 0x0000,BACK_COLOR = 0xFFFF;  
u16 DeviceCode;	 


static void delay_ms(uint32_t ms)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b082      	sub	sp, #8
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f7fc f9e7 	bl	80023b0 <HAL_Delay>
}
 8005fe2:	bf00      	nop
 8005fe4:	3708      	adds	r7, #8
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}
	...

08005fec <LCD_WR_REG>:
 * @function   :Write an 8-bit command to the LCD screen
 * @parameters :data:Command value to be written
 * @retvalue   :None
******************************************************************************/
void LCD_WR_REG(u8 data)
{ 
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b082      	sub	sp, #8
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	71fb      	strb	r3, [r7, #7]
   LCD_CS_CLR;     
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	2140      	movs	r1, #64	; 0x40
 8005ffa:	480c      	ldr	r0, [pc, #48]	; (800602c <LCD_WR_REG+0x40>)
 8005ffc:	f7fd fd9e 	bl	8003b3c <HAL_GPIO_WritePin>
	 LCD_RS_CLR;	  
 8006000:	2200      	movs	r2, #0
 8006002:	2180      	movs	r1, #128	; 0x80
 8006004:	480a      	ldr	r0, [pc, #40]	; (8006030 <LCD_WR_REG+0x44>)
 8006006:	f7fd fd99 	bl	8003b3c <HAL_GPIO_WritePin>
   //SPI_WriteByte(SPI1,data);
   HAL_SPI_Transmit(&hspi1, &data, 1, 10000);
 800600a:	1df9      	adds	r1, r7, #7
 800600c:	f242 7310 	movw	r3, #10000	; 0x2710
 8006010:	2201      	movs	r2, #1
 8006012:	4808      	ldr	r0, [pc, #32]	; (8006034 <LCD_WR_REG+0x48>)
 8006014:	f7fe fac1 	bl	800459a <HAL_SPI_Transmit>
   LCD_CS_SET;	
 8006018:	2201      	movs	r2, #1
 800601a:	2140      	movs	r1, #64	; 0x40
 800601c:	4803      	ldr	r0, [pc, #12]	; (800602c <LCD_WR_REG+0x40>)
 800601e:	f7fd fd8d 	bl	8003b3c <HAL_GPIO_WritePin>
}
 8006022:	bf00      	nop
 8006024:	3708      	adds	r7, #8
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
 800602a:	bf00      	nop
 800602c:	40020400 	.word	0x40020400
 8006030:	40020800 	.word	0x40020800
 8006034:	20000ccc 	.word	0x20000ccc

08006038 <LCD_WR_DATA>:
 * @function   :Write an 8-bit data to the LCD screen
 * @parameters :data:data value to be written
 * @retvalue   :None
******************************************************************************/
void LCD_WR_DATA(u8 data)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b082      	sub	sp, #8
 800603c:	af00      	add	r7, sp, #0
 800603e:	4603      	mov	r3, r0
 8006040:	71fb      	strb	r3, [r7, #7]
   LCD_CS_CLR;
 8006042:	2200      	movs	r2, #0
 8006044:	2140      	movs	r1, #64	; 0x40
 8006046:	480c      	ldr	r0, [pc, #48]	; (8006078 <LCD_WR_DATA+0x40>)
 8006048:	f7fd fd78 	bl	8003b3c <HAL_GPIO_WritePin>
	 LCD_RS_SET;
 800604c:	2201      	movs	r2, #1
 800604e:	2180      	movs	r1, #128	; 0x80
 8006050:	480a      	ldr	r0, [pc, #40]	; (800607c <LCD_WR_DATA+0x44>)
 8006052:	f7fd fd73 	bl	8003b3c <HAL_GPIO_WritePin>
   //SPI_WriteByte(SPI1,data);
   HAL_SPI_Transmit(&hspi1, &data, 1, 10000);
 8006056:	1df9      	adds	r1, r7, #7
 8006058:	f242 7310 	movw	r3, #10000	; 0x2710
 800605c:	2201      	movs	r2, #1
 800605e:	4808      	ldr	r0, [pc, #32]	; (8006080 <LCD_WR_DATA+0x48>)
 8006060:	f7fe fa9b 	bl	800459a <HAL_SPI_Transmit>
   LCD_CS_SET;
 8006064:	2201      	movs	r2, #1
 8006066:	2140      	movs	r1, #64	; 0x40
 8006068:	4803      	ldr	r0, [pc, #12]	; (8006078 <LCD_WR_DATA+0x40>)
 800606a:	f7fd fd67 	bl	8003b3c <HAL_GPIO_WritePin>
}
 800606e:	bf00      	nop
 8006070:	3708      	adds	r7, #8
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop
 8006078:	40020400 	.word	0x40020400
 800607c:	40020800 	.word	0x40020800
 8006080:	20000ccc 	.word	0x20000ccc

08006084 <LCD_WriteReg>:
 * @parameters :LCD_Reg:Register address
                LCD_RegValue:Data to be written
 * @retvalue   :None
******************************************************************************/
void LCD_WriteReg(u8 LCD_Reg, u16 LCD_RegValue)
{	
 8006084:	b580      	push	{r7, lr}
 8006086:	b082      	sub	sp, #8
 8006088:	af00      	add	r7, sp, #0
 800608a:	4603      	mov	r3, r0
 800608c:	460a      	mov	r2, r1
 800608e:	71fb      	strb	r3, [r7, #7]
 8006090:	4613      	mov	r3, r2
 8006092:	80bb      	strh	r3, [r7, #4]
	LCD_WR_REG(LCD_Reg);  
 8006094:	79fb      	ldrb	r3, [r7, #7]
 8006096:	4618      	mov	r0, r3
 8006098:	f7ff ffa8 	bl	8005fec <LCD_WR_REG>
	LCD_WR_DATA(LCD_RegValue);	    		 
 800609c:	88bb      	ldrh	r3, [r7, #4]
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	4618      	mov	r0, r3
 80060a2:	f7ff ffc9 	bl	8006038 <LCD_WR_DATA>
}	   
 80060a6:	bf00      	nop
 80060a8:	3708      	adds	r7, #8
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
	...

080060b0 <LCD_WriteRAM_Prepare>:
 * @function   :Write GRAM
 * @parameters :None
 * @retvalue   :None
******************************************************************************/	 
void LCD_WriteRAM_Prepare(void)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	af00      	add	r7, sp, #0
	LCD_WR_REG(lcddev.wramcmd);
 80060b4:	4b03      	ldr	r3, [pc, #12]	; (80060c4 <LCD_WriteRAM_Prepare+0x14>)
 80060b6:	891b      	ldrh	r3, [r3, #8]
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	4618      	mov	r0, r3
 80060bc:	f7ff ff96 	bl	8005fec <LCD_WR_REG>
}	 
 80060c0:	bf00      	nop
 80060c2:	bd80      	pop	{r7, pc}
 80060c4:	20000e14 	.word	0x20000e14

080060c8 <Lcd_WriteData_16Bit>:
 * @function   :Write an 16-bit command to the LCD screen
 * @parameters :Data:Data to be written
 * @retvalue   :None
******************************************************************************/	 
void Lcd_WriteData_16Bit(u16 Data)
{	
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b084      	sub	sp, #16
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	4603      	mov	r3, r0
 80060d0:	80fb      	strh	r3, [r7, #6]
   u8 data;

   LCD_CS_CLR;
 80060d2:	2200      	movs	r2, #0
 80060d4:	2140      	movs	r1, #64	; 0x40
 80060d6:	4814      	ldr	r0, [pc, #80]	; (8006128 <Lcd_WriteData_16Bit+0x60>)
 80060d8:	f7fd fd30 	bl	8003b3c <HAL_GPIO_WritePin>
   LCD_RS_SET;  
 80060dc:	2201      	movs	r2, #1
 80060de:	2180      	movs	r1, #128	; 0x80
 80060e0:	4812      	ldr	r0, [pc, #72]	; (800612c <Lcd_WriteData_16Bit+0x64>)
 80060e2:	f7fd fd2b 	bl	8003b3c <HAL_GPIO_WritePin>
//   SPI_WriteByte(SPI1,Data>>8);
//	 SPI_WriteByte(SPI1,Data);
   data = Data>>8;
 80060e6:	88fb      	ldrh	r3, [r7, #6]
 80060e8:	0a1b      	lsrs	r3, r3, #8
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	73fb      	strb	r3, [r7, #15]
   HAL_SPI_Transmit(&hspi1, &data, 1, 10000);
 80060f0:	f107 010f 	add.w	r1, r7, #15
 80060f4:	f242 7310 	movw	r3, #10000	; 0x2710
 80060f8:	2201      	movs	r2, #1
 80060fa:	480d      	ldr	r0, [pc, #52]	; (8006130 <Lcd_WriteData_16Bit+0x68>)
 80060fc:	f7fe fa4d 	bl	800459a <HAL_SPI_Transmit>
   data = (u8)Data;
 8006100:	88fb      	ldrh	r3, [r7, #6]
 8006102:	b2db      	uxtb	r3, r3
 8006104:	73fb      	strb	r3, [r7, #15]
   HAL_SPI_Transmit(&hspi1, &data, 1, 10000);
 8006106:	f107 010f 	add.w	r1, r7, #15
 800610a:	f242 7310 	movw	r3, #10000	; 0x2710
 800610e:	2201      	movs	r2, #1
 8006110:	4807      	ldr	r0, [pc, #28]	; (8006130 <Lcd_WriteData_16Bit+0x68>)
 8006112:	f7fe fa42 	bl	800459a <HAL_SPI_Transmit>
   LCD_CS_SET;
 8006116:	2201      	movs	r2, #1
 8006118:	2140      	movs	r1, #64	; 0x40
 800611a:	4803      	ldr	r0, [pc, #12]	; (8006128 <Lcd_WriteData_16Bit+0x60>)
 800611c:	f7fd fd0e 	bl	8003b3c <HAL_GPIO_WritePin>
}
 8006120:	bf00      	nop
 8006122:	3710      	adds	r7, #16
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}
 8006128:	40020400 	.word	0x40020400
 800612c:	40020800 	.word	0x40020800
 8006130:	20000ccc 	.word	0x20000ccc

08006134 <LCD_Clear>:
 * @function   :Full screen filled LCD screen
 * @parameters :color:Filled color
 * @retvalue   :None
******************************************************************************/	
void LCD_Clear(u16 Color)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b084      	sub	sp, #16
 8006138:	af00      	add	r7, sp, #0
 800613a:	4603      	mov	r3, r0
 800613c:	80fb      	strh	r3, [r7, #6]
  unsigned int i,m;  
	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);   
 800613e:	4b1d      	ldr	r3, [pc, #116]	; (80061b4 <LCD_Clear+0x80>)
 8006140:	881b      	ldrh	r3, [r3, #0]
 8006142:	3b01      	subs	r3, #1
 8006144:	b29a      	uxth	r2, r3
 8006146:	4b1b      	ldr	r3, [pc, #108]	; (80061b4 <LCD_Clear+0x80>)
 8006148:	885b      	ldrh	r3, [r3, #2]
 800614a:	3b01      	subs	r3, #1
 800614c:	b29b      	uxth	r3, r3
 800614e:	2100      	movs	r1, #0
 8006150:	2000      	movs	r0, #0
 8006152:	f000 f96f 	bl	8006434 <LCD_SetWindows>
	LCD_CS_CLR;
 8006156:	2200      	movs	r2, #0
 8006158:	2140      	movs	r1, #64	; 0x40
 800615a:	4817      	ldr	r0, [pc, #92]	; (80061b8 <LCD_Clear+0x84>)
 800615c:	f7fd fcee 	bl	8003b3c <HAL_GPIO_WritePin>
	LCD_RS_SET;
 8006160:	2201      	movs	r2, #1
 8006162:	2180      	movs	r1, #128	; 0x80
 8006164:	4815      	ldr	r0, [pc, #84]	; (80061bc <LCD_Clear+0x88>)
 8006166:	f7fd fce9 	bl	8003b3c <HAL_GPIO_WritePin>
	for(i=0;i<lcddev.height;i++)
 800616a:	2300      	movs	r3, #0
 800616c:	60fb      	str	r3, [r7, #12]
 800616e:	e012      	b.n	8006196 <LCD_Clear+0x62>
	{
        for(m=0;m<lcddev.width;m++)
 8006170:	2300      	movs	r3, #0
 8006172:	60bb      	str	r3, [r7, #8]
 8006174:	e006      	b.n	8006184 <LCD_Clear+0x50>
        {
			Lcd_WriteData_16Bit(Color);
 8006176:	88fb      	ldrh	r3, [r7, #6]
 8006178:	4618      	mov	r0, r3
 800617a:	f7ff ffa5 	bl	80060c8 <Lcd_WriteData_16Bit>
        for(m=0;m<lcddev.width;m++)
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	3301      	adds	r3, #1
 8006182:	60bb      	str	r3, [r7, #8]
 8006184:	4b0b      	ldr	r3, [pc, #44]	; (80061b4 <LCD_Clear+0x80>)
 8006186:	881b      	ldrh	r3, [r3, #0]
 8006188:	461a      	mov	r2, r3
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	4293      	cmp	r3, r2
 800618e:	d3f2      	bcc.n	8006176 <LCD_Clear+0x42>
	for(i=0;i<lcddev.height;i++)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	3301      	adds	r3, #1
 8006194:	60fb      	str	r3, [r7, #12]
 8006196:	4b07      	ldr	r3, [pc, #28]	; (80061b4 <LCD_Clear+0x80>)
 8006198:	885b      	ldrh	r3, [r3, #2]
 800619a:	461a      	mov	r2, r3
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	4293      	cmp	r3, r2
 80061a0:	d3e6      	bcc.n	8006170 <LCD_Clear+0x3c>
		}
	}
	 LCD_CS_SET;
 80061a2:	2201      	movs	r2, #1
 80061a4:	2140      	movs	r1, #64	; 0x40
 80061a6:	4804      	ldr	r0, [pc, #16]	; (80061b8 <LCD_Clear+0x84>)
 80061a8:	f7fd fcc8 	bl	8003b3c <HAL_GPIO_WritePin>
} 
 80061ac:	bf00      	nop
 80061ae:	3710      	adds	r7, #16
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}
 80061b4:	20000e14 	.word	0x20000e14
 80061b8:	40020400 	.word	0x40020400
 80061bc:	40020800 	.word	0x40020800

080061c0 <LCD_RESET>:
 * @function   :Reset LCD screen
 * @parameters :None
 * @retvalue   :None
******************************************************************************/	
void LCD_RESET(void)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	af00      	add	r7, sp, #0
	LCD_RST_CLR;
 80061c4:	2200      	movs	r2, #0
 80061c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80061ca:	4808      	ldr	r0, [pc, #32]	; (80061ec <LCD_RESET+0x2c>)
 80061cc:	f7fd fcb6 	bl	8003b3c <HAL_GPIO_WritePin>
	delay_ms(100);
 80061d0:	2064      	movs	r0, #100	; 0x64
 80061d2:	f7ff feff 	bl	8005fd4 <delay_ms>
	LCD_RST_SET;
 80061d6:	2201      	movs	r2, #1
 80061d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80061dc:	4803      	ldr	r0, [pc, #12]	; (80061ec <LCD_RESET+0x2c>)
 80061de:	f7fd fcad 	bl	8003b3c <HAL_GPIO_WritePin>
	delay_ms(50);
 80061e2:	2032      	movs	r0, #50	; 0x32
 80061e4:	f7ff fef6 	bl	8005fd4 <delay_ms>
}
 80061e8:	bf00      	nop
 80061ea:	bd80      	pop	{r7, pc}
 80061ec:	40020000 	.word	0x40020000

080061f0 <LCD_Init>:
 * @function   :Initialization LCD screen
 * @parameters :None
 * @retvalue   :None
******************************************************************************/	 	 
void LCD_Init(void)
{  
 80061f0:	b580      	push	{r7, lr}
 80061f2:	af00      	add	r7, sp, #0
//	SPI1_Init(); //Ӳ��SPI��ʼ��
//	SPI_SetSpeed(SPI1,SPI_BaudRatePrescaler_2);
//	LCD_GPIOInit();//LCD GPIO��ʼ��
 	LCD_RESET(); //LCD ��λ
 80061f4:	f7ff ffe4 	bl	80061c0 <LCD_RESET>
//*************2.8inch ILI9341��ʼ��**********//	
	LCD_WR_REG(0xCF);  
 80061f8:	20cf      	movs	r0, #207	; 0xcf
 80061fa:	f7ff fef7 	bl	8005fec <LCD_WR_REG>
	LCD_WR_DATA(0x00); 
 80061fe:	2000      	movs	r0, #0
 8006200:	f7ff ff1a 	bl	8006038 <LCD_WR_DATA>
	LCD_WR_DATA(0xC9); //C1 
 8006204:	20c9      	movs	r0, #201	; 0xc9
 8006206:	f7ff ff17 	bl	8006038 <LCD_WR_DATA>
	LCD_WR_DATA(0X30); 
 800620a:	2030      	movs	r0, #48	; 0x30
 800620c:	f7ff ff14 	bl	8006038 <LCD_WR_DATA>
	LCD_WR_REG(0xED);  
 8006210:	20ed      	movs	r0, #237	; 0xed
 8006212:	f7ff feeb 	bl	8005fec <LCD_WR_REG>
	LCD_WR_DATA(0x64); 
 8006216:	2064      	movs	r0, #100	; 0x64
 8006218:	f7ff ff0e 	bl	8006038 <LCD_WR_DATA>
	LCD_WR_DATA(0x03); 
 800621c:	2003      	movs	r0, #3
 800621e:	f7ff ff0b 	bl	8006038 <LCD_WR_DATA>
	LCD_WR_DATA(0X12); 
 8006222:	2012      	movs	r0, #18
 8006224:	f7ff ff08 	bl	8006038 <LCD_WR_DATA>
	LCD_WR_DATA(0X81); 
 8006228:	2081      	movs	r0, #129	; 0x81
 800622a:	f7ff ff05 	bl	8006038 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);  
 800622e:	20e8      	movs	r0, #232	; 0xe8
 8006230:	f7ff fedc 	bl	8005fec <LCD_WR_REG>
	LCD_WR_DATA(0x85); 
 8006234:	2085      	movs	r0, #133	; 0x85
 8006236:	f7ff feff 	bl	8006038 <LCD_WR_DATA>
	LCD_WR_DATA(0x10); 
 800623a:	2010      	movs	r0, #16
 800623c:	f7ff fefc 	bl	8006038 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A); 
 8006240:	207a      	movs	r0, #122	; 0x7a
 8006242:	f7ff fef9 	bl	8006038 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);  
 8006246:	20cb      	movs	r0, #203	; 0xcb
 8006248:	f7ff fed0 	bl	8005fec <LCD_WR_REG>
	LCD_WR_DATA(0x39); 
 800624c:	2039      	movs	r0, #57	; 0x39
 800624e:	f7ff fef3 	bl	8006038 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C); 
 8006252:	202c      	movs	r0, #44	; 0x2c
 8006254:	f7ff fef0 	bl	8006038 <LCD_WR_DATA>
	LCD_WR_DATA(0x00); 
 8006258:	2000      	movs	r0, #0
 800625a:	f7ff feed 	bl	8006038 <LCD_WR_DATA>
	LCD_WR_DATA(0x34); 
 800625e:	2034      	movs	r0, #52	; 0x34
 8006260:	f7ff feea 	bl	8006038 <LCD_WR_DATA>
	LCD_WR_DATA(0x02); 
 8006264:	2002      	movs	r0, #2
 8006266:	f7ff fee7 	bl	8006038 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);  
 800626a:	20f7      	movs	r0, #247	; 0xf7
 800626c:	f7ff febe 	bl	8005fec <LCD_WR_REG>
	LCD_WR_DATA(0x20); 
 8006270:	2020      	movs	r0, #32
 8006272:	f7ff fee1 	bl	8006038 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);  
 8006276:	20ea      	movs	r0, #234	; 0xea
 8006278:	f7ff feb8 	bl	8005fec <LCD_WR_REG>
	LCD_WR_DATA(0x00); 
 800627c:	2000      	movs	r0, #0
 800627e:	f7ff fedb 	bl	8006038 <LCD_WR_DATA>
	LCD_WR_DATA(0x00); 
 8006282:	2000      	movs	r0, #0
 8006284:	f7ff fed8 	bl	8006038 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control 
 8006288:	20c0      	movs	r0, #192	; 0xc0
 800628a:	f7ff feaf 	bl	8005fec <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0] 
 800628e:	201b      	movs	r0, #27
 8006290:	f7ff fed2 	bl	8006038 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control 
 8006294:	20c1      	movs	r0, #193	; 0xc1
 8006296:	f7ff fea9 	bl	8005fec <LCD_WR_REG>
	LCD_WR_DATA(0x00);   //SAP[2:0];BT[3:0] 01 
 800629a:	2000      	movs	r0, #0
 800629c:	f7ff fecc 	bl	8006038 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control 
 80062a0:	20c5      	movs	r0, #197	; 0xc5
 80062a2:	f7ff fea3 	bl	8005fec <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 80062a6:	2030      	movs	r0, #48	; 0x30
 80062a8:	f7ff fec6 	bl	8006038 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 80062ac:	2030      	movs	r0, #48	; 0x30
 80062ae:	f7ff fec3 	bl	8006038 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2 
 80062b2:	20c7      	movs	r0, #199	; 0xc7
 80062b4:	f7ff fe9a 	bl	8005fec <LCD_WR_REG>
	LCD_WR_DATA(0XB7); 
 80062b8:	20b7      	movs	r0, #183	; 0xb7
 80062ba:	f7ff febd 	bl	8006038 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control 
 80062be:	2036      	movs	r0, #54	; 0x36
 80062c0:	f7ff fe94 	bl	8005fec <LCD_WR_REG>
	LCD_WR_DATA(0x08); 
 80062c4:	2008      	movs	r0, #8
 80062c6:	f7ff feb7 	bl	8006038 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);   
 80062ca:	203a      	movs	r0, #58	; 0x3a
 80062cc:	f7ff fe8e 	bl	8005fec <LCD_WR_REG>
	LCD_WR_DATA(0x55); 
 80062d0:	2055      	movs	r0, #85	; 0x55
 80062d2:	f7ff feb1 	bl	8006038 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);   
 80062d6:	20b1      	movs	r0, #177	; 0xb1
 80062d8:	f7ff fe88 	bl	8005fec <LCD_WR_REG>
	LCD_WR_DATA(0x00);   
 80062dc:	2000      	movs	r0, #0
 80062de:	f7ff feab 	bl	8006038 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A); 
 80062e2:	201a      	movs	r0, #26
 80062e4:	f7ff fea8 	bl	8006038 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control 
 80062e8:	20b6      	movs	r0, #182	; 0xb6
 80062ea:	f7ff fe7f 	bl	8005fec <LCD_WR_REG>
	LCD_WR_DATA(0x0A); 
 80062ee:	200a      	movs	r0, #10
 80062f0:	f7ff fea2 	bl	8006038 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2); 
 80062f4:	20a2      	movs	r0, #162	; 0xa2
 80062f6:	f7ff fe9f 	bl	8006038 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable 
 80062fa:	20f2      	movs	r0, #242	; 0xf2
 80062fc:	f7ff fe76 	bl	8005fec <LCD_WR_REG>
	LCD_WR_DATA(0x00); 
 8006300:	2000      	movs	r0, #0
 8006302:	f7ff fe99 	bl	8006038 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected 
 8006306:	2026      	movs	r0, #38	; 0x26
 8006308:	f7ff fe70 	bl	8005fec <LCD_WR_REG>
	LCD_WR_DATA(0x01); 
 800630c:	2001      	movs	r0, #1
 800630e:	f7ff fe93 	bl	8006038 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma 
 8006312:	20e0      	movs	r0, #224	; 0xe0
 8006314:	f7ff fe6a 	bl	8005fec <LCD_WR_REG>
	LCD_WR_DATA(0x0F); 
 8006318:	200f      	movs	r0, #15
 800631a:	f7ff fe8d 	bl	8006038 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A); 
 800631e:	202a      	movs	r0, #42	; 0x2a
 8006320:	f7ff fe8a 	bl	8006038 <LCD_WR_DATA>
	LCD_WR_DATA(0x28); 
 8006324:	2028      	movs	r0, #40	; 0x28
 8006326:	f7ff fe87 	bl	8006038 <LCD_WR_DATA>
	LCD_WR_DATA(0x08); 
 800632a:	2008      	movs	r0, #8
 800632c:	f7ff fe84 	bl	8006038 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E); 
 8006330:	200e      	movs	r0, #14
 8006332:	f7ff fe81 	bl	8006038 <LCD_WR_DATA>
	LCD_WR_DATA(0x08); 
 8006336:	2008      	movs	r0, #8
 8006338:	f7ff fe7e 	bl	8006038 <LCD_WR_DATA>
	LCD_WR_DATA(0x54); 
 800633c:	2054      	movs	r0, #84	; 0x54
 800633e:	f7ff fe7b 	bl	8006038 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9); 
 8006342:	20a9      	movs	r0, #169	; 0xa9
 8006344:	f7ff fe78 	bl	8006038 <LCD_WR_DATA>
	LCD_WR_DATA(0x43); 
 8006348:	2043      	movs	r0, #67	; 0x43
 800634a:	f7ff fe75 	bl	8006038 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A); 
 800634e:	200a      	movs	r0, #10
 8006350:	f7ff fe72 	bl	8006038 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F); 
 8006354:	200f      	movs	r0, #15
 8006356:	f7ff fe6f 	bl	8006038 <LCD_WR_DATA>
	LCD_WR_DATA(0x00); 
 800635a:	2000      	movs	r0, #0
 800635c:	f7ff fe6c 	bl	8006038 <LCD_WR_DATA>
	LCD_WR_DATA(0x00); 
 8006360:	2000      	movs	r0, #0
 8006362:	f7ff fe69 	bl	8006038 <LCD_WR_DATA>
	LCD_WR_DATA(0x00); 
 8006366:	2000      	movs	r0, #0
 8006368:	f7ff fe66 	bl	8006038 <LCD_WR_DATA>
	LCD_WR_DATA(0x00); 		 
 800636c:	2000      	movs	r0, #0
 800636e:	f7ff fe63 	bl	8006038 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma 
 8006372:	20e1      	movs	r0, #225	; 0xe1
 8006374:	f7ff fe3a 	bl	8005fec <LCD_WR_REG>
	LCD_WR_DATA(0x00); 
 8006378:	2000      	movs	r0, #0
 800637a:	f7ff fe5d 	bl	8006038 <LCD_WR_DATA>
	LCD_WR_DATA(0x15); 
 800637e:	2015      	movs	r0, #21
 8006380:	f7ff fe5a 	bl	8006038 <LCD_WR_DATA>
	LCD_WR_DATA(0x17); 
 8006384:	2017      	movs	r0, #23
 8006386:	f7ff fe57 	bl	8006038 <LCD_WR_DATA>
	LCD_WR_DATA(0x07); 
 800638a:	2007      	movs	r0, #7
 800638c:	f7ff fe54 	bl	8006038 <LCD_WR_DATA>
	LCD_WR_DATA(0x11); 
 8006390:	2011      	movs	r0, #17
 8006392:	f7ff fe51 	bl	8006038 <LCD_WR_DATA>
	LCD_WR_DATA(0x06); 
 8006396:	2006      	movs	r0, #6
 8006398:	f7ff fe4e 	bl	8006038 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B); 
 800639c:	202b      	movs	r0, #43	; 0x2b
 800639e:	f7ff fe4b 	bl	8006038 <LCD_WR_DATA>
	LCD_WR_DATA(0x56); 
 80063a2:	2056      	movs	r0, #86	; 0x56
 80063a4:	f7ff fe48 	bl	8006038 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C); 
 80063a8:	203c      	movs	r0, #60	; 0x3c
 80063aa:	f7ff fe45 	bl	8006038 <LCD_WR_DATA>
	LCD_WR_DATA(0x05); 
 80063ae:	2005      	movs	r0, #5
 80063b0:	f7ff fe42 	bl	8006038 <LCD_WR_DATA>
	LCD_WR_DATA(0x10); 
 80063b4:	2010      	movs	r0, #16
 80063b6:	f7ff fe3f 	bl	8006038 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F); 
 80063ba:	200f      	movs	r0, #15
 80063bc:	f7ff fe3c 	bl	8006038 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F); 
 80063c0:	203f      	movs	r0, #63	; 0x3f
 80063c2:	f7ff fe39 	bl	8006038 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F); 
 80063c6:	203f      	movs	r0, #63	; 0x3f
 80063c8:	f7ff fe36 	bl	8006038 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F); 
 80063cc:	200f      	movs	r0, #15
 80063ce:	f7ff fe33 	bl	8006038 <LCD_WR_DATA>
	LCD_WR_REG(0x2B); 
 80063d2:	202b      	movs	r0, #43	; 0x2b
 80063d4:	f7ff fe0a 	bl	8005fec <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80063d8:	2000      	movs	r0, #0
 80063da:	f7ff fe2d 	bl	8006038 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80063de:	2000      	movs	r0, #0
 80063e0:	f7ff fe2a 	bl	8006038 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 80063e4:	2001      	movs	r0, #1
 80063e6:	f7ff fe27 	bl	8006038 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 80063ea:	203f      	movs	r0, #63	; 0x3f
 80063ec:	f7ff fe24 	bl	8006038 <LCD_WR_DATA>
	LCD_WR_REG(0x2A); 
 80063f0:	202a      	movs	r0, #42	; 0x2a
 80063f2:	f7ff fdfb 	bl	8005fec <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80063f6:	2000      	movs	r0, #0
 80063f8:	f7ff fe1e 	bl	8006038 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80063fc:	2000      	movs	r0, #0
 80063fe:	f7ff fe1b 	bl	8006038 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8006402:	2000      	movs	r0, #0
 8006404:	f7ff fe18 	bl	8006038 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);	 
 8006408:	20ef      	movs	r0, #239	; 0xef
 800640a:	f7ff fe15 	bl	8006038 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 800640e:	2011      	movs	r0, #17
 8006410:	f7ff fdec 	bl	8005fec <LCD_WR_REG>
	delay_ms(120);
 8006414:	2078      	movs	r0, #120	; 0x78
 8006416:	f7ff fddd 	bl	8005fd4 <delay_ms>
	LCD_WR_REG(0x29); //display on		
 800641a:	2029      	movs	r0, #41	; 0x29
 800641c:	f7ff fde6 	bl	8005fec <LCD_WR_REG>

  //LCD_direction(USE_HORIZONTAL);//����LCD��ʾ����
  LCD_direction(3);//����LCD��ʾ����
 8006420:	2003      	movs	r0, #3
 8006422:	f000 f85b 	bl	80064dc <LCD_direction>
//	LCD_LED=1;//��������
	LCD_Clear(WHITE);//��ȫ����ɫ
 8006426:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800642a:	f7ff fe83 	bl	8006134 <LCD_Clear>
}
 800642e:	bf00      	nop
 8006430:	bd80      	pop	{r7, pc}
	...

08006434 <LCD_SetWindows>:
								xEnd:the endning x coordinate of the LCD display window
								yEnd:the endning y coordinate of the LCD display window
 * @retvalue   :None
******************************************************************************/ 
void LCD_SetWindows(u16 xStar, u16 yStar,u16 xEnd,u16 yEnd)
{	
 8006434:	b590      	push	{r4, r7, lr}
 8006436:	b083      	sub	sp, #12
 8006438:	af00      	add	r7, sp, #0
 800643a:	4604      	mov	r4, r0
 800643c:	4608      	mov	r0, r1
 800643e:	4611      	mov	r1, r2
 8006440:	461a      	mov	r2, r3
 8006442:	4623      	mov	r3, r4
 8006444:	80fb      	strh	r3, [r7, #6]
 8006446:	4603      	mov	r3, r0
 8006448:	80bb      	strh	r3, [r7, #4]
 800644a:	460b      	mov	r3, r1
 800644c:	807b      	strh	r3, [r7, #2]
 800644e:	4613      	mov	r3, r2
 8006450:	803b      	strh	r3, [r7, #0]
	LCD_WR_REG(lcddev.setxcmd);	
 8006452:	4b21      	ldr	r3, [pc, #132]	; (80064d8 <LCD_SetWindows+0xa4>)
 8006454:	895b      	ldrh	r3, [r3, #10]
 8006456:	b2db      	uxtb	r3, r3
 8006458:	4618      	mov	r0, r3
 800645a:	f7ff fdc7 	bl	8005fec <LCD_WR_REG>
	LCD_WR_DATA(xStar>>8);
 800645e:	88fb      	ldrh	r3, [r7, #6]
 8006460:	0a1b      	lsrs	r3, r3, #8
 8006462:	b29b      	uxth	r3, r3
 8006464:	b2db      	uxtb	r3, r3
 8006466:	4618      	mov	r0, r3
 8006468:	f7ff fde6 	bl	8006038 <LCD_WR_DATA>
	LCD_WR_DATA(0x00FF&xStar);		
 800646c:	88fb      	ldrh	r3, [r7, #6]
 800646e:	b2db      	uxtb	r3, r3
 8006470:	4618      	mov	r0, r3
 8006472:	f7ff fde1 	bl	8006038 <LCD_WR_DATA>
	LCD_WR_DATA(xEnd>>8);
 8006476:	887b      	ldrh	r3, [r7, #2]
 8006478:	0a1b      	lsrs	r3, r3, #8
 800647a:	b29b      	uxth	r3, r3
 800647c:	b2db      	uxtb	r3, r3
 800647e:	4618      	mov	r0, r3
 8006480:	f7ff fdda 	bl	8006038 <LCD_WR_DATA>
	LCD_WR_DATA(0x00FF&xEnd);
 8006484:	887b      	ldrh	r3, [r7, #2]
 8006486:	b2db      	uxtb	r3, r3
 8006488:	4618      	mov	r0, r3
 800648a:	f7ff fdd5 	bl	8006038 <LCD_WR_DATA>

	LCD_WR_REG(lcddev.setycmd);	
 800648e:	4b12      	ldr	r3, [pc, #72]	; (80064d8 <LCD_SetWindows+0xa4>)
 8006490:	899b      	ldrh	r3, [r3, #12]
 8006492:	b2db      	uxtb	r3, r3
 8006494:	4618      	mov	r0, r3
 8006496:	f7ff fda9 	bl	8005fec <LCD_WR_REG>
	LCD_WR_DATA(yStar>>8);
 800649a:	88bb      	ldrh	r3, [r7, #4]
 800649c:	0a1b      	lsrs	r3, r3, #8
 800649e:	b29b      	uxth	r3, r3
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	4618      	mov	r0, r3
 80064a4:	f7ff fdc8 	bl	8006038 <LCD_WR_DATA>
	LCD_WR_DATA(0x00FF&yStar);		
 80064a8:	88bb      	ldrh	r3, [r7, #4]
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	4618      	mov	r0, r3
 80064ae:	f7ff fdc3 	bl	8006038 <LCD_WR_DATA>
	LCD_WR_DATA(yEnd>>8);
 80064b2:	883b      	ldrh	r3, [r7, #0]
 80064b4:	0a1b      	lsrs	r3, r3, #8
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	4618      	mov	r0, r3
 80064bc:	f7ff fdbc 	bl	8006038 <LCD_WR_DATA>
	LCD_WR_DATA(0x00FF&yEnd);
 80064c0:	883b      	ldrh	r3, [r7, #0]
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	4618      	mov	r0, r3
 80064c6:	f7ff fdb7 	bl	8006038 <LCD_WR_DATA>

	LCD_WriteRAM_Prepare();	//��ʼд��GRAM			
 80064ca:	f7ff fdf1 	bl	80060b0 <LCD_WriteRAM_Prepare>
}   
 80064ce:	bf00      	nop
 80064d0:	370c      	adds	r7, #12
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd90      	pop	{r4, r7, pc}
 80064d6:	bf00      	nop
 80064d8:	20000e14 	.word	0x20000e14

080064dc <LCD_direction>:
													2-180 degree
													3-270 degree
 * @retvalue   :None
******************************************************************************/ 
void LCD_direction(u8 direction)
{ 
 80064dc:	b580      	push	{r7, lr}
 80064de:	b082      	sub	sp, #8
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	4603      	mov	r3, r0
 80064e4:	71fb      	strb	r3, [r7, #7]
			lcddev.setxcmd=0x2A;
 80064e6:	4b26      	ldr	r3, [pc, #152]	; (8006580 <LCD_direction+0xa4>)
 80064e8:	222a      	movs	r2, #42	; 0x2a
 80064ea:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0x2B;
 80064ec:	4b24      	ldr	r3, [pc, #144]	; (8006580 <LCD_direction+0xa4>)
 80064ee:	222b      	movs	r2, #43	; 0x2b
 80064f0:	819a      	strh	r2, [r3, #12]
			lcddev.wramcmd=0x2C;
 80064f2:	4b23      	ldr	r3, [pc, #140]	; (8006580 <LCD_direction+0xa4>)
 80064f4:	222c      	movs	r2, #44	; 0x2c
 80064f6:	811a      	strh	r2, [r3, #8]
	switch(direction){		  
 80064f8:	79fb      	ldrb	r3, [r7, #7]
 80064fa:	2b03      	cmp	r3, #3
 80064fc:	d83a      	bhi.n	8006574 <LCD_direction+0x98>
 80064fe:	a201      	add	r2, pc, #4	; (adr r2, 8006504 <LCD_direction+0x28>)
 8006500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006504:	08006515 	.word	0x08006515
 8006508:	0800652d 	.word	0x0800652d
 800650c:	08006545 	.word	0x08006545
 8006510:	0800655d 	.word	0x0800655d
		case 0:						 	 		
			lcddev.width=LCD_W;
 8006514:	4b1a      	ldr	r3, [pc, #104]	; (8006580 <LCD_direction+0xa4>)
 8006516:	22f0      	movs	r2, #240	; 0xf0
 8006518:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_H;		
 800651a:	4b19      	ldr	r3, [pc, #100]	; (8006580 <LCD_direction+0xa4>)
 800651c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8006520:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3)|(0<<6)|(0<<7));//BGR==1,MY==0,MX==0,MV==0
 8006522:	2108      	movs	r1, #8
 8006524:	2036      	movs	r0, #54	; 0x36
 8006526:	f7ff fdad 	bl	8006084 <LCD_WriteReg>
		break;
 800652a:	e024      	b.n	8006576 <LCD_direction+0x9a>
		case 1:
			lcddev.width=LCD_H;
 800652c:	4b14      	ldr	r3, [pc, #80]	; (8006580 <LCD_direction+0xa4>)
 800652e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8006532:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_W;
 8006534:	4b12      	ldr	r3, [pc, #72]	; (8006580 <LCD_direction+0xa4>)
 8006536:	22f0      	movs	r2, #240	; 0xf0
 8006538:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3)|(0<<7)|(1<<6)|(1<<5));//BGR==1,MY==1,MX==0,MV==1
 800653a:	2168      	movs	r1, #104	; 0x68
 800653c:	2036      	movs	r0, #54	; 0x36
 800653e:	f7ff fda1 	bl	8006084 <LCD_WriteReg>
		break;
 8006542:	e018      	b.n	8006576 <LCD_direction+0x9a>
		case 2:						 	 		
			lcddev.width=LCD_W;
 8006544:	4b0e      	ldr	r3, [pc, #56]	; (8006580 <LCD_direction+0xa4>)
 8006546:	22f0      	movs	r2, #240	; 0xf0
 8006548:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_H;	
 800654a:	4b0d      	ldr	r3, [pc, #52]	; (8006580 <LCD_direction+0xa4>)
 800654c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8006550:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3)|(1<<6)|(1<<7));//BGR==1,MY==0,MX==0,MV==0
 8006552:	21c8      	movs	r1, #200	; 0xc8
 8006554:	2036      	movs	r0, #54	; 0x36
 8006556:	f7ff fd95 	bl	8006084 <LCD_WriteReg>
		break;
 800655a:	e00c      	b.n	8006576 <LCD_direction+0x9a>
		case 3:
			lcddev.width=LCD_H;
 800655c:	4b08      	ldr	r3, [pc, #32]	; (8006580 <LCD_direction+0xa4>)
 800655e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8006562:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_W;
 8006564:	4b06      	ldr	r3, [pc, #24]	; (8006580 <LCD_direction+0xa4>)
 8006566:	22f0      	movs	r2, #240	; 0xf0
 8006568:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3)|(1<<7)|(1<<5));//BGR==1,MY==1,MX==0,MV==1
 800656a:	21a8      	movs	r1, #168	; 0xa8
 800656c:	2036      	movs	r0, #54	; 0x36
 800656e:	f7ff fd89 	bl	8006084 <LCD_WriteReg>
		break;	
 8006572:	e000      	b.n	8006576 <LCD_direction+0x9a>
		default:break;
 8006574:	bf00      	nop
	}		
}	 
 8006576:	bf00      	nop
 8006578:	3708      	adds	r7, #8
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
 800657e:	bf00      	nop
 8006580:	20000e14 	.word	0x20000e14

08006584 <LCD_Clear2>:
 * @function   :Full screen filled LCD screen
 * @parameters :color:Filled color
 * @retvalue   :None
******************************************************************************/
void LCD_Clear2(u16 color_idx)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b082      	sub	sp, #8
 8006588:	af00      	add	r7, sp, #0
 800658a:	4603      	mov	r3, r0
 800658c:	80fb      	strh	r3, [r7, #6]
	memset(g_lcd_buf, color_idx, LCD_BUF_SIZE);
 800658e:	88fb      	ldrh	r3, [r7, #6]
 8006590:	f44f 3296 	mov.w	r2, #76800	; 0x12c00
 8006594:	4619      	mov	r1, r3
 8006596:	4803      	ldr	r0, [pc, #12]	; (80065a4 <LCD_Clear2+0x20>)
 8006598:	f000 fa24 	bl	80069e4 <memset>
}
 800659c:	bf00      	nop
 800659e:	3708      	adds	r7, #8
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}
 80065a4:	20004a24 	.word	0x20004a24

080065a8 <LCD_DrawLine2>:
				x2:the ending x coordinate of the line
				y2:the ending y coordinate of the line
 * @retvalue   :None
********************************************************************/
void LCD_DrawLine2(u16 x1, u16 y1, u16 x2, u16 y2, u16 color_idx)
{
 80065a8:	b590      	push	{r4, r7, lr}
 80065aa:	b08d      	sub	sp, #52	; 0x34
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	4604      	mov	r4, r0
 80065b0:	4608      	mov	r0, r1
 80065b2:	4611      	mov	r1, r2
 80065b4:	461a      	mov	r2, r3
 80065b6:	4623      	mov	r3, r4
 80065b8:	80fb      	strh	r3, [r7, #6]
 80065ba:	4603      	mov	r3, r0
 80065bc:	80bb      	strh	r3, [r7, #4]
 80065be:	460b      	mov	r3, r1
 80065c0:	807b      	strh	r3, [r7, #2]
 80065c2:	4613      	mov	r3, r2
 80065c4:	803b      	strh	r3, [r7, #0]
	u16 t;
	s32 xerr=0,yerr=0,delta_x,delta_y,distance;
 80065c6:	2300      	movs	r3, #0
 80065c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80065ca:	2300      	movs	r3, #0
 80065cc:	627b      	str	r3, [r7, #36]	; 0x24
	s32 incx,incy,uRow,uCol;

	delta_x=x2-x1;
 80065ce:	887a      	ldrh	r2, [r7, #2]
 80065d0:	88fb      	ldrh	r3, [r7, #6]
 80065d2:	1ad3      	subs	r3, r2, r3
 80065d4:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1;
 80065d6:	883a      	ldrh	r2, [r7, #0]
 80065d8:	88bb      	ldrh	r3, [r7, #4]
 80065da:	1ad3      	subs	r3, r2, r3
 80065dc:	61fb      	str	r3, [r7, #28]
	uRow=x1;
 80065de:	88fb      	ldrh	r3, [r7, #6]
 80065e0:	60fb      	str	r3, [r7, #12]
	uCol=y1;
 80065e2:	88bb      	ldrh	r3, [r7, #4]
 80065e4:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1;
 80065e6:	6a3b      	ldr	r3, [r7, #32]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	dd02      	ble.n	80065f2 <LCD_DrawLine2+0x4a>
 80065ec:	2301      	movs	r3, #1
 80065ee:	617b      	str	r3, [r7, #20]
 80065f0:	e00b      	b.n	800660a <LCD_DrawLine2+0x62>
	else if(delta_x==0)incx=0;
 80065f2:	6a3b      	ldr	r3, [r7, #32]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d102      	bne.n	80065fe <LCD_DrawLine2+0x56>
 80065f8:	2300      	movs	r3, #0
 80065fa:	617b      	str	r3, [r7, #20]
 80065fc:	e005      	b.n	800660a <LCD_DrawLine2+0x62>
	else {incx=-1;delta_x=-delta_x;}
 80065fe:	f04f 33ff 	mov.w	r3, #4294967295
 8006602:	617b      	str	r3, [r7, #20]
 8006604:	6a3b      	ldr	r3, [r7, #32]
 8006606:	425b      	negs	r3, r3
 8006608:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1;
 800660a:	69fb      	ldr	r3, [r7, #28]
 800660c:	2b00      	cmp	r3, #0
 800660e:	dd02      	ble.n	8006616 <LCD_DrawLine2+0x6e>
 8006610:	2301      	movs	r3, #1
 8006612:	613b      	str	r3, [r7, #16]
 8006614:	e00b      	b.n	800662e <LCD_DrawLine2+0x86>
	else if(delta_y==0)incy=0;
 8006616:	69fb      	ldr	r3, [r7, #28]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d102      	bne.n	8006622 <LCD_DrawLine2+0x7a>
 800661c:	2300      	movs	r3, #0
 800661e:	613b      	str	r3, [r7, #16]
 8006620:	e005      	b.n	800662e <LCD_DrawLine2+0x86>
	else{incy=-1;delta_y=-delta_y;}
 8006622:	f04f 33ff 	mov.w	r3, #4294967295
 8006626:	613b      	str	r3, [r7, #16]
 8006628:	69fb      	ldr	r3, [r7, #28]
 800662a:	425b      	negs	r3, r3
 800662c:	61fb      	str	r3, [r7, #28]
	if( delta_x>delta_y)distance=delta_x;
 800662e:	6a3a      	ldr	r2, [r7, #32]
 8006630:	69fb      	ldr	r3, [r7, #28]
 8006632:	429a      	cmp	r2, r3
 8006634:	dd02      	ble.n	800663c <LCD_DrawLine2+0x94>
 8006636:	6a3b      	ldr	r3, [r7, #32]
 8006638:	61bb      	str	r3, [r7, #24]
 800663a:	e001      	b.n	8006640 <LCD_DrawLine2+0x98>
	else distance=delta_y;
 800663c:	69fb      	ldr	r3, [r7, #28]
 800663e:	61bb      	str	r3, [r7, #24]
	for(t=0;t<=distance+1;t++ )
 8006640:	2300      	movs	r3, #0
 8006642:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006644:	e02b      	b.n	800669e <LCD_DrawLine2+0xf6>
	{
		LCD_DrawPoint2(uRow,uCol,color_idx);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	b29b      	uxth	r3, r3
 800664a:	68ba      	ldr	r2, [r7, #8]
 800664c:	b291      	uxth	r1, r2
 800664e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8006652:	4618      	mov	r0, r3
 8006654:	f000 f82e 	bl	80066b4 <LCD_DrawPoint2>
		xerr+=delta_x ;
 8006658:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800665a:	6a3b      	ldr	r3, [r7, #32]
 800665c:	4413      	add	r3, r2
 800665e:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr+=delta_y ;
 8006660:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006662:	69fb      	ldr	r3, [r7, #28]
 8006664:	4413      	add	r3, r2
 8006666:	627b      	str	r3, [r7, #36]	; 0x24
		if(xerr>distance)
 8006668:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800666a:	69bb      	ldr	r3, [r7, #24]
 800666c:	429a      	cmp	r2, r3
 800666e:	dd07      	ble.n	8006680 <LCD_DrawLine2+0xd8>
		{
			xerr-=distance;
 8006670:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006672:	69bb      	ldr	r3, [r7, #24]
 8006674:	1ad3      	subs	r3, r2, r3
 8006676:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow+=incx;
 8006678:	68fa      	ldr	r2, [r7, #12]
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	4413      	add	r3, r2
 800667e:	60fb      	str	r3, [r7, #12]
		}
		if(yerr>distance)
 8006680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006682:	69bb      	ldr	r3, [r7, #24]
 8006684:	429a      	cmp	r2, r3
 8006686:	dd07      	ble.n	8006698 <LCD_DrawLine2+0xf0>
		{
			yerr-=distance;
 8006688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800668a:	69bb      	ldr	r3, [r7, #24]
 800668c:	1ad3      	subs	r3, r2, r3
 800668e:	627b      	str	r3, [r7, #36]	; 0x24
			uCol+=incy;
 8006690:	68ba      	ldr	r2, [r7, #8]
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	4413      	add	r3, r2
 8006696:	60bb      	str	r3, [r7, #8]
	for(t=0;t<=distance+1;t++ )
 8006698:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800669a:	3301      	adds	r3, #1
 800669c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800669e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80066a0:	69bb      	ldr	r3, [r7, #24]
 80066a2:	3301      	adds	r3, #1
 80066a4:	429a      	cmp	r2, r3
 80066a6:	ddce      	ble.n	8006646 <LCD_DrawLine2+0x9e>
		}
	}
}
 80066a8:	bf00      	nop
 80066aa:	bf00      	nop
 80066ac:	3734      	adds	r7, #52	; 0x34
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd90      	pop	{r4, r7, pc}
	...

080066b4 <LCD_DrawPoint2>:
 * @parameters :x:the x coordinate of the pixel
                y:the y coordinate of the pixel
 * @retvalue   :None
******************************************************************************/
void LCD_DrawPoint2(u16 x, u16 y, u16 color_idx)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	4603      	mov	r3, r0
 80066bc:	80fb      	strh	r3, [r7, #6]
 80066be:	460b      	mov	r3, r1
 80066c0:	80bb      	strh	r3, [r7, #4]
 80066c2:	4613      	mov	r3, r2
 80066c4:	807b      	strh	r3, [r7, #2]
	//LCD_SetCursor(x,y);
	//Lcd_WriteData_16Bit(POINT_COLOR);
	g_lcd_buf[y*320 + x] = color_idx;
 80066c6:	88ba      	ldrh	r2, [r7, #4]
 80066c8:	4613      	mov	r3, r2
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	4413      	add	r3, r2
 80066ce:	019b      	lsls	r3, r3, #6
 80066d0:	461a      	mov	r2, r3
 80066d2:	88fb      	ldrh	r3, [r7, #6]
 80066d4:	4413      	add	r3, r2
 80066d6:	887a      	ldrh	r2, [r7, #2]
 80066d8:	b251      	sxtb	r1, r2
 80066da:	4a04      	ldr	r2, [pc, #16]	; (80066ec <LCD_DrawPoint2+0x38>)
 80066dc:	54d1      	strb	r1, [r2, r3]
}
 80066de:	bf00      	nop
 80066e0:	370c      	adds	r7, #12
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr
 80066ea:	bf00      	nop
 80066ec:	20004a24 	.word	0x20004a24

080066f0 <LCD_ShowChar2>:
								size:the size of display character
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/
void LCD_ShowChar2(u16 x, u16 y, u8 num, u8 size, u16 color_idx)
{
 80066f0:	b590      	push	{r4, r7, lr}
 80066f2:	b085      	sub	sp, #20
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	4604      	mov	r4, r0
 80066f8:	4608      	mov	r0, r1
 80066fa:	4611      	mov	r1, r2
 80066fc:	461a      	mov	r2, r3
 80066fe:	4623      	mov	r3, r4
 8006700:	80fb      	strh	r3, [r7, #6]
 8006702:	4603      	mov	r3, r0
 8006704:	80bb      	strh	r3, [r7, #4]
 8006706:	460b      	mov	r3, r1
 8006708:	70fb      	strb	r3, [r7, #3]
 800670a:	4613      	mov	r3, r2
 800670c:	70bb      	strb	r3, [r7, #2]
    u8 temp;
    u8 pos,t;
	//u16 colortemp=POINT_COLOR;

	num=num-' ';//�õ�ƫ�ƺ��ֵ
 800670e:	78fb      	ldrb	r3, [r7, #3]
 8006710:	3b20      	subs	r3, #32
 8006712:	70fb      	strb	r3, [r7, #3]
	//LCD_SetWindows(x,y,x+size/2-1,y+size-1);//���õ���������ʾ����


	for(pos=0;pos<size;pos++)
 8006714:	2300      	movs	r3, #0
 8006716:	73bb      	strb	r3, [r7, #14]
 8006718:	e03b      	b.n	8006792 <LCD_ShowChar2+0xa2>
	{
		if(size==12)temp=asc2_1206[num][pos];//����1206����
 800671a:	78bb      	ldrb	r3, [r7, #2]
 800671c:	2b0c      	cmp	r3, #12
 800671e:	d10b      	bne.n	8006738 <LCD_ShowChar2+0x48>
 8006720:	78fa      	ldrb	r2, [r7, #3]
 8006722:	7bb9      	ldrb	r1, [r7, #14]
 8006724:	481f      	ldr	r0, [pc, #124]	; (80067a4 <LCD_ShowChar2+0xb4>)
 8006726:	4613      	mov	r3, r2
 8006728:	005b      	lsls	r3, r3, #1
 800672a:	4413      	add	r3, r2
 800672c:	009b      	lsls	r3, r3, #2
 800672e:	4403      	add	r3, r0
 8006730:	440b      	add	r3, r1
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	73fb      	strb	r3, [r7, #15]
 8006736:	e007      	b.n	8006748 <LCD_ShowChar2+0x58>
		else temp=asc2_1608[num][pos];		 //����1608����
 8006738:	78fa      	ldrb	r2, [r7, #3]
 800673a:	7bbb      	ldrb	r3, [r7, #14]
 800673c:	491a      	ldr	r1, [pc, #104]	; (80067a8 <LCD_ShowChar2+0xb8>)
 800673e:	0112      	lsls	r2, r2, #4
 8006740:	440a      	add	r2, r1
 8006742:	4413      	add	r3, r2
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	73fb      	strb	r3, [r7, #15]
		for(t=0;t<size/2;t++)
 8006748:	2300      	movs	r3, #0
 800674a:	737b      	strb	r3, [r7, #13]
 800674c:	e018      	b.n	8006780 <LCD_ShowChar2+0x90>
		{
			//POINT_COLOR=fc;
			if(temp&0x01)LCD_DrawPoint2(x+t,y+pos,color_idx);//��һ����
 800674e:	7bfb      	ldrb	r3, [r7, #15]
 8006750:	f003 0301 	and.w	r3, r3, #1
 8006754:	2b00      	cmp	r3, #0
 8006756:	d00d      	beq.n	8006774 <LCD_ShowChar2+0x84>
 8006758:	7b7b      	ldrb	r3, [r7, #13]
 800675a:	b29a      	uxth	r2, r3
 800675c:	88fb      	ldrh	r3, [r7, #6]
 800675e:	4413      	add	r3, r2
 8006760:	b298      	uxth	r0, r3
 8006762:	7bbb      	ldrb	r3, [r7, #14]
 8006764:	b29a      	uxth	r2, r3
 8006766:	88bb      	ldrh	r3, [r7, #4]
 8006768:	4413      	add	r3, r2
 800676a:	b29b      	uxth	r3, r3
 800676c:	8c3a      	ldrh	r2, [r7, #32]
 800676e:	4619      	mov	r1, r3
 8006770:	f7ff ffa0 	bl	80066b4 <LCD_DrawPoint2>
			temp>>=1;
 8006774:	7bfb      	ldrb	r3, [r7, #15]
 8006776:	085b      	lsrs	r3, r3, #1
 8006778:	73fb      	strb	r3, [r7, #15]
		for(t=0;t<size/2;t++)
 800677a:	7b7b      	ldrb	r3, [r7, #13]
 800677c:	3301      	adds	r3, #1
 800677e:	737b      	strb	r3, [r7, #13]
 8006780:	78bb      	ldrb	r3, [r7, #2]
 8006782:	085b      	lsrs	r3, r3, #1
 8006784:	b2db      	uxtb	r3, r3
 8006786:	7b7a      	ldrb	r2, [r7, #13]
 8006788:	429a      	cmp	r2, r3
 800678a:	d3e0      	bcc.n	800674e <LCD_ShowChar2+0x5e>
	for(pos=0;pos<size;pos++)
 800678c:	7bbb      	ldrb	r3, [r7, #14]
 800678e:	3301      	adds	r3, #1
 8006790:	73bb      	strb	r3, [r7, #14]
 8006792:	7bba      	ldrb	r2, [r7, #14]
 8006794:	78bb      	ldrb	r3, [r7, #2]
 8006796:	429a      	cmp	r2, r3
 8006798:	d3bf      	bcc.n	800671a <LCD_ShowChar2+0x2a>
		}
	}

	//POINT_COLOR=colortemp;
	//LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);//�ָ�����Ϊȫ��
}
 800679a:	bf00      	nop
 800679c:	bf00      	nop
 800679e:	3714      	adds	r7, #20
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd90      	pop	{r4, r7, pc}
 80067a4:	08009880 	.word	0x08009880
 80067a8:	08009cf4 	.word	0x08009cf4

080067ac <Show_Str2>:
								size:the size of Chinese and English strings
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/
void Show_Str2(u16 x, u16 y, u8 *str, u8 size, u16 color_idx)
{
 80067ac:	b590      	push	{r4, r7, lr}
 80067ae:	b089      	sub	sp, #36	; 0x24
 80067b0:	af02      	add	r7, sp, #8
 80067b2:	60ba      	str	r2, [r7, #8]
 80067b4:	461a      	mov	r2, r3
 80067b6:	4603      	mov	r3, r0
 80067b8:	81fb      	strh	r3, [r7, #14]
 80067ba:	460b      	mov	r3, r1
 80067bc:	81bb      	strh	r3, [r7, #12]
 80067be:	4613      	mov	r3, r2
 80067c0:	71fb      	strb	r3, [r7, #7]
	u16 x0=x;
 80067c2:	89fb      	ldrh	r3, [r7, #14]
 80067c4:	82fb      	strh	r3, [r7, #22]

    while(*str!=0)//����δ����
 80067c6:	e044      	b.n	8006852 <Show_Str2+0xa6>
    {

		if(x>(lcddev.width-size/2)||y>(lcddev.height-size))
 80067c8:	89fa      	ldrh	r2, [r7, #14]
 80067ca:	4b26      	ldr	r3, [pc, #152]	; (8006864 <Show_Str2+0xb8>)
 80067cc:	881b      	ldrh	r3, [r3, #0]
 80067ce:	4619      	mov	r1, r3
 80067d0:	79fb      	ldrb	r3, [r7, #7]
 80067d2:	085b      	lsrs	r3, r3, #1
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	1acb      	subs	r3, r1, r3
 80067d8:	429a      	cmp	r2, r3
 80067da:	dc3f      	bgt.n	800685c <Show_Str2+0xb0>
 80067dc:	89ba      	ldrh	r2, [r7, #12]
 80067de:	4b21      	ldr	r3, [pc, #132]	; (8006864 <Show_Str2+0xb8>)
 80067e0:	885b      	ldrh	r3, [r3, #2]
 80067e2:	4619      	mov	r1, r3
 80067e4:	79fb      	ldrb	r3, [r7, #7]
 80067e6:	1acb      	subs	r3, r1, r3
 80067e8:	429a      	cmp	r2, r3
 80067ea:	dc37      	bgt.n	800685c <Show_Str2+0xb0>
		return;

		if(*str==0x0D)//���з���
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	2b0d      	cmp	r3, #13
 80067f2:	d10a      	bne.n	800680a <Show_Str2+0x5e>
		{
			y+=size;
 80067f4:	79fb      	ldrb	r3, [r7, #7]
 80067f6:	b29a      	uxth	r2, r3
 80067f8:	89bb      	ldrh	r3, [r7, #12]
 80067fa:	4413      	add	r3, r2
 80067fc:	81bb      	strh	r3, [r7, #12]
			x=x0;
 80067fe:	8afb      	ldrh	r3, [r7, #22]
 8006800:	81fb      	strh	r3, [r7, #14]
			str++;
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	3301      	adds	r3, #1
 8006806:	60bb      	str	r3, [r7, #8]
 8006808:	e020      	b.n	800684c <Show_Str2+0xa0>
		}
		else
		{
			if(size>16)//�ֿ���û�м���12X24 16X32��Ӣ������,��8X16����
 800680a:	79fb      	ldrb	r3, [r7, #7]
 800680c:	2b10      	cmp	r3, #16
 800680e:	d90c      	bls.n	800682a <Show_Str2+0x7e>
			{
			LCD_ShowChar2(x,y,*str,16,color_idx);
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	781a      	ldrb	r2, [r3, #0]
 8006814:	89b9      	ldrh	r1, [r7, #12]
 8006816:	89f8      	ldrh	r0, [r7, #14]
 8006818:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800681a:	9300      	str	r3, [sp, #0]
 800681c:	2310      	movs	r3, #16
 800681e:	f7ff ff67 	bl	80066f0 <LCD_ShowChar2>
			x+=8; //�ַ�,Ϊȫ�ֵ�һ��
 8006822:	89fb      	ldrh	r3, [r7, #14]
 8006824:	3308      	adds	r3, #8
 8006826:	81fb      	strh	r3, [r7, #14]
 8006828:	e010      	b.n	800684c <Show_Str2+0xa0>
			}
			else
			{
			LCD_ShowChar2(x,y,*str,size,color_idx);
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	781a      	ldrb	r2, [r3, #0]
 800682e:	79fc      	ldrb	r4, [r7, #7]
 8006830:	89b9      	ldrh	r1, [r7, #12]
 8006832:	89f8      	ldrh	r0, [r7, #14]
 8006834:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006836:	9300      	str	r3, [sp, #0]
 8006838:	4623      	mov	r3, r4
 800683a:	f7ff ff59 	bl	80066f0 <LCD_ShowChar2>
			x+=size/2; //�ַ�,Ϊȫ�ֵ�һ��
 800683e:	79fb      	ldrb	r3, [r7, #7]
 8006840:	085b      	lsrs	r3, r3, #1
 8006842:	b2db      	uxtb	r3, r3
 8006844:	b29a      	uxth	r2, r3
 8006846:	89fb      	ldrh	r3, [r7, #14]
 8006848:	4413      	add	r3, r2
 800684a:	81fb      	strh	r3, [r7, #14]
			}
		}
		str++;
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	3301      	adds	r3, #1
 8006850:	60bb      	str	r3, [r7, #8]
    while(*str!=0)//����δ����
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	781b      	ldrb	r3, [r3, #0]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d1b6      	bne.n	80067c8 <Show_Str2+0x1c>
 800685a:	e000      	b.n	800685e <Show_Str2+0xb2>
		return;
 800685c:	bf00      	nop

    }
}
 800685e:	371c      	adds	r7, #28
 8006860:	46bd      	mov	sp, r7
 8006862:	bd90      	pop	{r4, r7, pc}
 8006864:	20000e14 	.word	0x20000e14

08006868 <Gui_StrCenter2>:
								size:the size of Chinese and English strings
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/
void Gui_StrCenter2(u16 x, u16 y, u8 *str, u8 size, u16 color_idx)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b088      	sub	sp, #32
 800686c:	af02      	add	r7, sp, #8
 800686e:	60ba      	str	r2, [r7, #8]
 8006870:	461a      	mov	r2, r3
 8006872:	4603      	mov	r3, r0
 8006874:	81fb      	strh	r3, [r7, #14]
 8006876:	460b      	mov	r3, r1
 8006878:	81bb      	strh	r3, [r7, #12]
 800687a:	4613      	mov	r3, r2
 800687c:	71fb      	strb	r3, [r7, #7]
	u16 len=strlen((const char *)str);
 800687e:	68b8      	ldr	r0, [r7, #8]
 8006880:	f7f9 fcae 	bl	80001e0 <strlen>
 8006884:	4603      	mov	r3, r0
 8006886:	82fb      	strh	r3, [r7, #22]
	u16 x1=(lcddev.width-len*8)/2;
 8006888:	4b0b      	ldr	r3, [pc, #44]	; (80068b8 <Gui_StrCenter2+0x50>)
 800688a:	881b      	ldrh	r3, [r3, #0]
 800688c:	461a      	mov	r2, r3
 800688e:	8afb      	ldrh	r3, [r7, #22]
 8006890:	00db      	lsls	r3, r3, #3
 8006892:	1ad3      	subs	r3, r2, r3
 8006894:	0fda      	lsrs	r2, r3, #31
 8006896:	4413      	add	r3, r2
 8006898:	105b      	asrs	r3, r3, #1
 800689a:	82bb      	strh	r3, [r7, #20]
	Show_Str2(x1,y,str,size,color_idx);
 800689c:	79fa      	ldrb	r2, [r7, #7]
 800689e:	89b9      	ldrh	r1, [r7, #12]
 80068a0:	8ab8      	ldrh	r0, [r7, #20]
 80068a2:	8c3b      	ldrh	r3, [r7, #32]
 80068a4:	9300      	str	r3, [sp, #0]
 80068a6:	4613      	mov	r3, r2
 80068a8:	68ba      	ldr	r2, [r7, #8]
 80068aa:	f7ff ff7f 	bl	80067ac <Show_Str2>
}
 80068ae:	bf00      	nop
 80068b0:	3718      	adds	r7, #24
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}
 80068b6:	bf00      	nop
 80068b8:	20000e14 	.word	0x20000e14

080068bc <LCD_SendBuffer>:


void LCD_SendBuffer(SPI_HandleTypeDef *hspi, DMA_HandleTypeDef *hdma, TIM_HandleTypeDef *htim)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b088      	sub	sp, #32
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	60f8      	str	r0, [r7, #12]
 80068c4:	60b9      	str	r1, [r7, #8]
 80068c6:	607a      	str	r2, [r7, #4]
	s32 i, p, ps;

	//htim->Instance->CR1 &= ~(TIM_CR1_CEN);	//サンプリングを一時停止


	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);
 80068c8:	4b2a      	ldr	r3, [pc, #168]	; (8006974 <LCD_SendBuffer+0xb8>)
 80068ca:	881b      	ldrh	r3, [r3, #0]
 80068cc:	3b01      	subs	r3, #1
 80068ce:	b29a      	uxth	r2, r3
 80068d0:	4b28      	ldr	r3, [pc, #160]	; (8006974 <LCD_SendBuffer+0xb8>)
 80068d2:	885b      	ldrh	r3, [r3, #2]
 80068d4:	3b01      	subs	r3, #1
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	2100      	movs	r1, #0
 80068da:	2000      	movs	r0, #0
 80068dc:	f7ff fdaa 	bl	8006434 <LCD_SetWindows>

	LCD_CS_CLR;
 80068e0:	2200      	movs	r2, #0
 80068e2:	2140      	movs	r1, #64	; 0x40
 80068e4:	4824      	ldr	r0, [pc, #144]	; (8006978 <LCD_SendBuffer+0xbc>)
 80068e6:	f7fd f929 	bl	8003b3c <HAL_GPIO_WritePin>
	LCD_RS_SET;
 80068ea:	2201      	movs	r2, #1
 80068ec:	2180      	movs	r1, #128	; 0x80
 80068ee:	4823      	ldr	r0, [pc, #140]	; (800697c <LCD_SendBuffer+0xc0>)
 80068f0:	f7fd f924 	bl	8003b3c <HAL_GPIO_WritePin>

	for(i=0; i<LCD_SPLIT_SEND_NUM; i++){
 80068f4:	2300      	movs	r3, #0
 80068f6:	61fb      	str	r3, [r7, #28]
 80068f8:	e030      	b.n	800695c <LCD_SendBuffer+0xa0>

		ps = i * LCD_SEND_SIZE;
 80068fa:	69fa      	ldr	r2, [r7, #28]
 80068fc:	4613      	mov	r3, r2
 80068fe:	011b      	lsls	r3, r3, #4
 8006900:	1a9b      	subs	r3, r3, r2
 8006902:	025b      	lsls	r3, r3, #9
 8006904:	617b      	str	r3, [r7, #20]

		for(p=0; p<LCD_SEND_SIZE; p++){
 8006906:	2300      	movs	r3, #0
 8006908:	61bb      	str	r3, [r7, #24]
 800690a:	e00f      	b.n	800692c <LCD_SendBuffer+0x70>
			g_lcd_send_buf[p] = g_color_table[ g_lcd_buf[ps+p] ];
 800690c:	697a      	ldr	r2, [r7, #20]
 800690e:	69bb      	ldr	r3, [r7, #24]
 8006910:	4413      	add	r3, r2
 8006912:	4a1b      	ldr	r2, [pc, #108]	; (8006980 <LCD_SendBuffer+0xc4>)
 8006914:	56d3      	ldrsb	r3, [r2, r3]
 8006916:	461a      	mov	r2, r3
 8006918:	4b1a      	ldr	r3, [pc, #104]	; (8006984 <LCD_SendBuffer+0xc8>)
 800691a:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 800691e:	4a1a      	ldr	r2, [pc, #104]	; (8006988 <LCD_SendBuffer+0xcc>)
 8006920:	69bb      	ldr	r3, [r7, #24]
 8006922:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(p=0; p<LCD_SEND_SIZE; p++){
 8006926:	69bb      	ldr	r3, [r7, #24]
 8006928:	3301      	adds	r3, #1
 800692a:	61bb      	str	r3, [r7, #24]
 800692c:	69bb      	ldr	r3, [r7, #24]
 800692e:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 8006932:	dbeb      	blt.n	800690c <LCD_SendBuffer+0x50>
		}

		HAL_SPI_Transmit_DMA(hspi, (uint8_t*)g_lcd_send_buf, LCD_SEND_SIZE * 2);
 8006934:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8006938:	4913      	ldr	r1, [pc, #76]	; (8006988 <LCD_SendBuffer+0xcc>)
 800693a:	68f8      	ldr	r0, [r7, #12]
 800693c:	f7fd ff6a 	bl	8004814 <HAL_SPI_Transmit_DMA>
				hspi1.State = HAL_SPI_STATE_READY;
				break;
			}
#endif

			if(hdma->State == HAL_DMA_STATE_READY){
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006946:	b2db      	uxtb	r3, r3
 8006948:	2b01      	cmp	r3, #1
 800694a:	d1f9      	bne.n	8006940 <LCD_SendBuffer+0x84>
				hspi1.State = HAL_SPI_STATE_READY;
 800694c:	4b0f      	ldr	r3, [pc, #60]	; (800698c <LCD_SendBuffer+0xd0>)
 800694e:	2201      	movs	r2, #1
 8006950:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
				break;
 8006954:	bf00      	nop
	for(i=0; i<LCD_SPLIT_SEND_NUM; i++){
 8006956:	69fb      	ldr	r3, [r7, #28]
 8006958:	3301      	adds	r3, #1
 800695a:	61fb      	str	r3, [r7, #28]
 800695c:	69fb      	ldr	r3, [r7, #28]
 800695e:	2b09      	cmp	r3, #9
 8006960:	ddcb      	ble.n	80068fa <LCD_SendBuffer+0x3e>
			}
		}
	}

	LCD_CS_SET;
 8006962:	2201      	movs	r2, #1
 8006964:	2140      	movs	r1, #64	; 0x40
 8006966:	4804      	ldr	r0, [pc, #16]	; (8006978 <LCD_SendBuffer+0xbc>)
 8006968:	f7fd f8e8 	bl	8003b3c <HAL_GPIO_WritePin>

	//if(g_is_trig_stop == FALSE){
	//	htim->Instance->CR1 |= TIM_CR1_CEN;		//サンプリングを再開
	//}
}
 800696c:	bf00      	nop
 800696e:	3720      	adds	r7, #32
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}
 8006974:	20000e14 	.word	0x20000e14
 8006978:	40020400 	.word	0x40020400
 800697c:	40020800 	.word	0x40020800
 8006980:	20004a24 	.word	0x20004a24
 8006984:	2000000c 	.word	0x2000000c
 8006988:	20000e24 	.word	0x20000e24
 800698c:	20000ccc 	.word	0x20000ccc

08006990 <__errno>:
 8006990:	4b01      	ldr	r3, [pc, #4]	; (8006998 <__errno+0x8>)
 8006992:	6818      	ldr	r0, [r3, #0]
 8006994:	4770      	bx	lr
 8006996:	bf00      	nop
 8006998:	20000038 	.word	0x20000038

0800699c <__libc_init_array>:
 800699c:	b570      	push	{r4, r5, r6, lr}
 800699e:	4d0d      	ldr	r5, [pc, #52]	; (80069d4 <__libc_init_array+0x38>)
 80069a0:	4c0d      	ldr	r4, [pc, #52]	; (80069d8 <__libc_init_array+0x3c>)
 80069a2:	1b64      	subs	r4, r4, r5
 80069a4:	10a4      	asrs	r4, r4, #2
 80069a6:	2600      	movs	r6, #0
 80069a8:	42a6      	cmp	r6, r4
 80069aa:	d109      	bne.n	80069c0 <__libc_init_array+0x24>
 80069ac:	4d0b      	ldr	r5, [pc, #44]	; (80069dc <__libc_init_array+0x40>)
 80069ae:	4c0c      	ldr	r4, [pc, #48]	; (80069e0 <__libc_init_array+0x44>)
 80069b0:	f002 ff2c 	bl	800980c <_init>
 80069b4:	1b64      	subs	r4, r4, r5
 80069b6:	10a4      	asrs	r4, r4, #2
 80069b8:	2600      	movs	r6, #0
 80069ba:	42a6      	cmp	r6, r4
 80069bc:	d105      	bne.n	80069ca <__libc_init_array+0x2e>
 80069be:	bd70      	pop	{r4, r5, r6, pc}
 80069c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80069c4:	4798      	blx	r3
 80069c6:	3601      	adds	r6, #1
 80069c8:	e7ee      	b.n	80069a8 <__libc_init_array+0xc>
 80069ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80069ce:	4798      	blx	r3
 80069d0:	3601      	adds	r6, #1
 80069d2:	e7f2      	b.n	80069ba <__libc_init_array+0x1e>
 80069d4:	0800a6cc 	.word	0x0800a6cc
 80069d8:	0800a6cc 	.word	0x0800a6cc
 80069dc:	0800a6cc 	.word	0x0800a6cc
 80069e0:	0800a6d0 	.word	0x0800a6d0

080069e4 <memset>:
 80069e4:	4402      	add	r2, r0
 80069e6:	4603      	mov	r3, r0
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d100      	bne.n	80069ee <memset+0xa>
 80069ec:	4770      	bx	lr
 80069ee:	f803 1b01 	strb.w	r1, [r3], #1
 80069f2:	e7f9      	b.n	80069e8 <memset+0x4>

080069f4 <__cvt>:
 80069f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069f8:	ec55 4b10 	vmov	r4, r5, d0
 80069fc:	2d00      	cmp	r5, #0
 80069fe:	460e      	mov	r6, r1
 8006a00:	4619      	mov	r1, r3
 8006a02:	462b      	mov	r3, r5
 8006a04:	bfbb      	ittet	lt
 8006a06:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006a0a:	461d      	movlt	r5, r3
 8006a0c:	2300      	movge	r3, #0
 8006a0e:	232d      	movlt	r3, #45	; 0x2d
 8006a10:	700b      	strb	r3, [r1, #0]
 8006a12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a14:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006a18:	4691      	mov	r9, r2
 8006a1a:	f023 0820 	bic.w	r8, r3, #32
 8006a1e:	bfbc      	itt	lt
 8006a20:	4622      	movlt	r2, r4
 8006a22:	4614      	movlt	r4, r2
 8006a24:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006a28:	d005      	beq.n	8006a36 <__cvt+0x42>
 8006a2a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006a2e:	d100      	bne.n	8006a32 <__cvt+0x3e>
 8006a30:	3601      	adds	r6, #1
 8006a32:	2102      	movs	r1, #2
 8006a34:	e000      	b.n	8006a38 <__cvt+0x44>
 8006a36:	2103      	movs	r1, #3
 8006a38:	ab03      	add	r3, sp, #12
 8006a3a:	9301      	str	r3, [sp, #4]
 8006a3c:	ab02      	add	r3, sp, #8
 8006a3e:	9300      	str	r3, [sp, #0]
 8006a40:	ec45 4b10 	vmov	d0, r4, r5
 8006a44:	4653      	mov	r3, sl
 8006a46:	4632      	mov	r2, r6
 8006a48:	f000 fe22 	bl	8007690 <_dtoa_r>
 8006a4c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006a50:	4607      	mov	r7, r0
 8006a52:	d102      	bne.n	8006a5a <__cvt+0x66>
 8006a54:	f019 0f01 	tst.w	r9, #1
 8006a58:	d022      	beq.n	8006aa0 <__cvt+0xac>
 8006a5a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006a5e:	eb07 0906 	add.w	r9, r7, r6
 8006a62:	d110      	bne.n	8006a86 <__cvt+0x92>
 8006a64:	783b      	ldrb	r3, [r7, #0]
 8006a66:	2b30      	cmp	r3, #48	; 0x30
 8006a68:	d10a      	bne.n	8006a80 <__cvt+0x8c>
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	4620      	mov	r0, r4
 8006a70:	4629      	mov	r1, r5
 8006a72:	f7fa f831 	bl	8000ad8 <__aeabi_dcmpeq>
 8006a76:	b918      	cbnz	r0, 8006a80 <__cvt+0x8c>
 8006a78:	f1c6 0601 	rsb	r6, r6, #1
 8006a7c:	f8ca 6000 	str.w	r6, [sl]
 8006a80:	f8da 3000 	ldr.w	r3, [sl]
 8006a84:	4499      	add	r9, r3
 8006a86:	2200      	movs	r2, #0
 8006a88:	2300      	movs	r3, #0
 8006a8a:	4620      	mov	r0, r4
 8006a8c:	4629      	mov	r1, r5
 8006a8e:	f7fa f823 	bl	8000ad8 <__aeabi_dcmpeq>
 8006a92:	b108      	cbz	r0, 8006a98 <__cvt+0xa4>
 8006a94:	f8cd 900c 	str.w	r9, [sp, #12]
 8006a98:	2230      	movs	r2, #48	; 0x30
 8006a9a:	9b03      	ldr	r3, [sp, #12]
 8006a9c:	454b      	cmp	r3, r9
 8006a9e:	d307      	bcc.n	8006ab0 <__cvt+0xbc>
 8006aa0:	9b03      	ldr	r3, [sp, #12]
 8006aa2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006aa4:	1bdb      	subs	r3, r3, r7
 8006aa6:	4638      	mov	r0, r7
 8006aa8:	6013      	str	r3, [r2, #0]
 8006aaa:	b004      	add	sp, #16
 8006aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ab0:	1c59      	adds	r1, r3, #1
 8006ab2:	9103      	str	r1, [sp, #12]
 8006ab4:	701a      	strb	r2, [r3, #0]
 8006ab6:	e7f0      	b.n	8006a9a <__cvt+0xa6>

08006ab8 <__exponent>:
 8006ab8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006aba:	4603      	mov	r3, r0
 8006abc:	2900      	cmp	r1, #0
 8006abe:	bfb8      	it	lt
 8006ac0:	4249      	neglt	r1, r1
 8006ac2:	f803 2b02 	strb.w	r2, [r3], #2
 8006ac6:	bfb4      	ite	lt
 8006ac8:	222d      	movlt	r2, #45	; 0x2d
 8006aca:	222b      	movge	r2, #43	; 0x2b
 8006acc:	2909      	cmp	r1, #9
 8006ace:	7042      	strb	r2, [r0, #1]
 8006ad0:	dd2a      	ble.n	8006b28 <__exponent+0x70>
 8006ad2:	f10d 0407 	add.w	r4, sp, #7
 8006ad6:	46a4      	mov	ip, r4
 8006ad8:	270a      	movs	r7, #10
 8006ada:	46a6      	mov	lr, r4
 8006adc:	460a      	mov	r2, r1
 8006ade:	fb91 f6f7 	sdiv	r6, r1, r7
 8006ae2:	fb07 1516 	mls	r5, r7, r6, r1
 8006ae6:	3530      	adds	r5, #48	; 0x30
 8006ae8:	2a63      	cmp	r2, #99	; 0x63
 8006aea:	f104 34ff 	add.w	r4, r4, #4294967295
 8006aee:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006af2:	4631      	mov	r1, r6
 8006af4:	dcf1      	bgt.n	8006ada <__exponent+0x22>
 8006af6:	3130      	adds	r1, #48	; 0x30
 8006af8:	f1ae 0502 	sub.w	r5, lr, #2
 8006afc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006b00:	1c44      	adds	r4, r0, #1
 8006b02:	4629      	mov	r1, r5
 8006b04:	4561      	cmp	r1, ip
 8006b06:	d30a      	bcc.n	8006b1e <__exponent+0x66>
 8006b08:	f10d 0209 	add.w	r2, sp, #9
 8006b0c:	eba2 020e 	sub.w	r2, r2, lr
 8006b10:	4565      	cmp	r5, ip
 8006b12:	bf88      	it	hi
 8006b14:	2200      	movhi	r2, #0
 8006b16:	4413      	add	r3, r2
 8006b18:	1a18      	subs	r0, r3, r0
 8006b1a:	b003      	add	sp, #12
 8006b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b22:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006b26:	e7ed      	b.n	8006b04 <__exponent+0x4c>
 8006b28:	2330      	movs	r3, #48	; 0x30
 8006b2a:	3130      	adds	r1, #48	; 0x30
 8006b2c:	7083      	strb	r3, [r0, #2]
 8006b2e:	70c1      	strb	r1, [r0, #3]
 8006b30:	1d03      	adds	r3, r0, #4
 8006b32:	e7f1      	b.n	8006b18 <__exponent+0x60>

08006b34 <_printf_float>:
 8006b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b38:	ed2d 8b02 	vpush	{d8}
 8006b3c:	b08d      	sub	sp, #52	; 0x34
 8006b3e:	460c      	mov	r4, r1
 8006b40:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006b44:	4616      	mov	r6, r2
 8006b46:	461f      	mov	r7, r3
 8006b48:	4605      	mov	r5, r0
 8006b4a:	f001 fd45 	bl	80085d8 <_localeconv_r>
 8006b4e:	f8d0 a000 	ldr.w	sl, [r0]
 8006b52:	4650      	mov	r0, sl
 8006b54:	f7f9 fb44 	bl	80001e0 <strlen>
 8006b58:	2300      	movs	r3, #0
 8006b5a:	930a      	str	r3, [sp, #40]	; 0x28
 8006b5c:	6823      	ldr	r3, [r4, #0]
 8006b5e:	9305      	str	r3, [sp, #20]
 8006b60:	f8d8 3000 	ldr.w	r3, [r8]
 8006b64:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006b68:	3307      	adds	r3, #7
 8006b6a:	f023 0307 	bic.w	r3, r3, #7
 8006b6e:	f103 0208 	add.w	r2, r3, #8
 8006b72:	f8c8 2000 	str.w	r2, [r8]
 8006b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b7a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006b7e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006b82:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006b86:	9307      	str	r3, [sp, #28]
 8006b88:	f8cd 8018 	str.w	r8, [sp, #24]
 8006b8c:	ee08 0a10 	vmov	s16, r0
 8006b90:	4b9f      	ldr	r3, [pc, #636]	; (8006e10 <_printf_float+0x2dc>)
 8006b92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b96:	f04f 32ff 	mov.w	r2, #4294967295
 8006b9a:	f7f9 ffcf 	bl	8000b3c <__aeabi_dcmpun>
 8006b9e:	bb88      	cbnz	r0, 8006c04 <_printf_float+0xd0>
 8006ba0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ba4:	4b9a      	ldr	r3, [pc, #616]	; (8006e10 <_printf_float+0x2dc>)
 8006ba6:	f04f 32ff 	mov.w	r2, #4294967295
 8006baa:	f7f9 ffa9 	bl	8000b00 <__aeabi_dcmple>
 8006bae:	bb48      	cbnz	r0, 8006c04 <_printf_float+0xd0>
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	4640      	mov	r0, r8
 8006bb6:	4649      	mov	r1, r9
 8006bb8:	f7f9 ff98 	bl	8000aec <__aeabi_dcmplt>
 8006bbc:	b110      	cbz	r0, 8006bc4 <_printf_float+0x90>
 8006bbe:	232d      	movs	r3, #45	; 0x2d
 8006bc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bc4:	4b93      	ldr	r3, [pc, #588]	; (8006e14 <_printf_float+0x2e0>)
 8006bc6:	4894      	ldr	r0, [pc, #592]	; (8006e18 <_printf_float+0x2e4>)
 8006bc8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006bcc:	bf94      	ite	ls
 8006bce:	4698      	movls	r8, r3
 8006bd0:	4680      	movhi	r8, r0
 8006bd2:	2303      	movs	r3, #3
 8006bd4:	6123      	str	r3, [r4, #16]
 8006bd6:	9b05      	ldr	r3, [sp, #20]
 8006bd8:	f023 0204 	bic.w	r2, r3, #4
 8006bdc:	6022      	str	r2, [r4, #0]
 8006bde:	f04f 0900 	mov.w	r9, #0
 8006be2:	9700      	str	r7, [sp, #0]
 8006be4:	4633      	mov	r3, r6
 8006be6:	aa0b      	add	r2, sp, #44	; 0x2c
 8006be8:	4621      	mov	r1, r4
 8006bea:	4628      	mov	r0, r5
 8006bec:	f000 f9d8 	bl	8006fa0 <_printf_common>
 8006bf0:	3001      	adds	r0, #1
 8006bf2:	f040 8090 	bne.w	8006d16 <_printf_float+0x1e2>
 8006bf6:	f04f 30ff 	mov.w	r0, #4294967295
 8006bfa:	b00d      	add	sp, #52	; 0x34
 8006bfc:	ecbd 8b02 	vpop	{d8}
 8006c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c04:	4642      	mov	r2, r8
 8006c06:	464b      	mov	r3, r9
 8006c08:	4640      	mov	r0, r8
 8006c0a:	4649      	mov	r1, r9
 8006c0c:	f7f9 ff96 	bl	8000b3c <__aeabi_dcmpun>
 8006c10:	b140      	cbz	r0, 8006c24 <_printf_float+0xf0>
 8006c12:	464b      	mov	r3, r9
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	bfbc      	itt	lt
 8006c18:	232d      	movlt	r3, #45	; 0x2d
 8006c1a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006c1e:	487f      	ldr	r0, [pc, #508]	; (8006e1c <_printf_float+0x2e8>)
 8006c20:	4b7f      	ldr	r3, [pc, #508]	; (8006e20 <_printf_float+0x2ec>)
 8006c22:	e7d1      	b.n	8006bc8 <_printf_float+0x94>
 8006c24:	6863      	ldr	r3, [r4, #4]
 8006c26:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006c2a:	9206      	str	r2, [sp, #24]
 8006c2c:	1c5a      	adds	r2, r3, #1
 8006c2e:	d13f      	bne.n	8006cb0 <_printf_float+0x17c>
 8006c30:	2306      	movs	r3, #6
 8006c32:	6063      	str	r3, [r4, #4]
 8006c34:	9b05      	ldr	r3, [sp, #20]
 8006c36:	6861      	ldr	r1, [r4, #4]
 8006c38:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	9303      	str	r3, [sp, #12]
 8006c40:	ab0a      	add	r3, sp, #40	; 0x28
 8006c42:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006c46:	ab09      	add	r3, sp, #36	; 0x24
 8006c48:	ec49 8b10 	vmov	d0, r8, r9
 8006c4c:	9300      	str	r3, [sp, #0]
 8006c4e:	6022      	str	r2, [r4, #0]
 8006c50:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006c54:	4628      	mov	r0, r5
 8006c56:	f7ff fecd 	bl	80069f4 <__cvt>
 8006c5a:	9b06      	ldr	r3, [sp, #24]
 8006c5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c5e:	2b47      	cmp	r3, #71	; 0x47
 8006c60:	4680      	mov	r8, r0
 8006c62:	d108      	bne.n	8006c76 <_printf_float+0x142>
 8006c64:	1cc8      	adds	r0, r1, #3
 8006c66:	db02      	blt.n	8006c6e <_printf_float+0x13a>
 8006c68:	6863      	ldr	r3, [r4, #4]
 8006c6a:	4299      	cmp	r1, r3
 8006c6c:	dd41      	ble.n	8006cf2 <_printf_float+0x1be>
 8006c6e:	f1ab 0b02 	sub.w	fp, fp, #2
 8006c72:	fa5f fb8b 	uxtb.w	fp, fp
 8006c76:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006c7a:	d820      	bhi.n	8006cbe <_printf_float+0x18a>
 8006c7c:	3901      	subs	r1, #1
 8006c7e:	465a      	mov	r2, fp
 8006c80:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006c84:	9109      	str	r1, [sp, #36]	; 0x24
 8006c86:	f7ff ff17 	bl	8006ab8 <__exponent>
 8006c8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c8c:	1813      	adds	r3, r2, r0
 8006c8e:	2a01      	cmp	r2, #1
 8006c90:	4681      	mov	r9, r0
 8006c92:	6123      	str	r3, [r4, #16]
 8006c94:	dc02      	bgt.n	8006c9c <_printf_float+0x168>
 8006c96:	6822      	ldr	r2, [r4, #0]
 8006c98:	07d2      	lsls	r2, r2, #31
 8006c9a:	d501      	bpl.n	8006ca0 <_printf_float+0x16c>
 8006c9c:	3301      	adds	r3, #1
 8006c9e:	6123      	str	r3, [r4, #16]
 8006ca0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d09c      	beq.n	8006be2 <_printf_float+0xae>
 8006ca8:	232d      	movs	r3, #45	; 0x2d
 8006caa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cae:	e798      	b.n	8006be2 <_printf_float+0xae>
 8006cb0:	9a06      	ldr	r2, [sp, #24]
 8006cb2:	2a47      	cmp	r2, #71	; 0x47
 8006cb4:	d1be      	bne.n	8006c34 <_printf_float+0x100>
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d1bc      	bne.n	8006c34 <_printf_float+0x100>
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e7b9      	b.n	8006c32 <_printf_float+0xfe>
 8006cbe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006cc2:	d118      	bne.n	8006cf6 <_printf_float+0x1c2>
 8006cc4:	2900      	cmp	r1, #0
 8006cc6:	6863      	ldr	r3, [r4, #4]
 8006cc8:	dd0b      	ble.n	8006ce2 <_printf_float+0x1ae>
 8006cca:	6121      	str	r1, [r4, #16]
 8006ccc:	b913      	cbnz	r3, 8006cd4 <_printf_float+0x1a0>
 8006cce:	6822      	ldr	r2, [r4, #0]
 8006cd0:	07d0      	lsls	r0, r2, #31
 8006cd2:	d502      	bpl.n	8006cda <_printf_float+0x1a6>
 8006cd4:	3301      	adds	r3, #1
 8006cd6:	440b      	add	r3, r1
 8006cd8:	6123      	str	r3, [r4, #16]
 8006cda:	65a1      	str	r1, [r4, #88]	; 0x58
 8006cdc:	f04f 0900 	mov.w	r9, #0
 8006ce0:	e7de      	b.n	8006ca0 <_printf_float+0x16c>
 8006ce2:	b913      	cbnz	r3, 8006cea <_printf_float+0x1b6>
 8006ce4:	6822      	ldr	r2, [r4, #0]
 8006ce6:	07d2      	lsls	r2, r2, #31
 8006ce8:	d501      	bpl.n	8006cee <_printf_float+0x1ba>
 8006cea:	3302      	adds	r3, #2
 8006cec:	e7f4      	b.n	8006cd8 <_printf_float+0x1a4>
 8006cee:	2301      	movs	r3, #1
 8006cf0:	e7f2      	b.n	8006cd8 <_printf_float+0x1a4>
 8006cf2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006cf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cf8:	4299      	cmp	r1, r3
 8006cfa:	db05      	blt.n	8006d08 <_printf_float+0x1d4>
 8006cfc:	6823      	ldr	r3, [r4, #0]
 8006cfe:	6121      	str	r1, [r4, #16]
 8006d00:	07d8      	lsls	r0, r3, #31
 8006d02:	d5ea      	bpl.n	8006cda <_printf_float+0x1a6>
 8006d04:	1c4b      	adds	r3, r1, #1
 8006d06:	e7e7      	b.n	8006cd8 <_printf_float+0x1a4>
 8006d08:	2900      	cmp	r1, #0
 8006d0a:	bfd4      	ite	le
 8006d0c:	f1c1 0202 	rsble	r2, r1, #2
 8006d10:	2201      	movgt	r2, #1
 8006d12:	4413      	add	r3, r2
 8006d14:	e7e0      	b.n	8006cd8 <_printf_float+0x1a4>
 8006d16:	6823      	ldr	r3, [r4, #0]
 8006d18:	055a      	lsls	r2, r3, #21
 8006d1a:	d407      	bmi.n	8006d2c <_printf_float+0x1f8>
 8006d1c:	6923      	ldr	r3, [r4, #16]
 8006d1e:	4642      	mov	r2, r8
 8006d20:	4631      	mov	r1, r6
 8006d22:	4628      	mov	r0, r5
 8006d24:	47b8      	blx	r7
 8006d26:	3001      	adds	r0, #1
 8006d28:	d12c      	bne.n	8006d84 <_printf_float+0x250>
 8006d2a:	e764      	b.n	8006bf6 <_printf_float+0xc2>
 8006d2c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006d30:	f240 80e0 	bls.w	8006ef4 <_printf_float+0x3c0>
 8006d34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006d38:	2200      	movs	r2, #0
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	f7f9 fecc 	bl	8000ad8 <__aeabi_dcmpeq>
 8006d40:	2800      	cmp	r0, #0
 8006d42:	d034      	beq.n	8006dae <_printf_float+0x27a>
 8006d44:	4a37      	ldr	r2, [pc, #220]	; (8006e24 <_printf_float+0x2f0>)
 8006d46:	2301      	movs	r3, #1
 8006d48:	4631      	mov	r1, r6
 8006d4a:	4628      	mov	r0, r5
 8006d4c:	47b8      	blx	r7
 8006d4e:	3001      	adds	r0, #1
 8006d50:	f43f af51 	beq.w	8006bf6 <_printf_float+0xc2>
 8006d54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	db02      	blt.n	8006d62 <_printf_float+0x22e>
 8006d5c:	6823      	ldr	r3, [r4, #0]
 8006d5e:	07d8      	lsls	r0, r3, #31
 8006d60:	d510      	bpl.n	8006d84 <_printf_float+0x250>
 8006d62:	ee18 3a10 	vmov	r3, s16
 8006d66:	4652      	mov	r2, sl
 8006d68:	4631      	mov	r1, r6
 8006d6a:	4628      	mov	r0, r5
 8006d6c:	47b8      	blx	r7
 8006d6e:	3001      	adds	r0, #1
 8006d70:	f43f af41 	beq.w	8006bf6 <_printf_float+0xc2>
 8006d74:	f04f 0800 	mov.w	r8, #0
 8006d78:	f104 091a 	add.w	r9, r4, #26
 8006d7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d7e:	3b01      	subs	r3, #1
 8006d80:	4543      	cmp	r3, r8
 8006d82:	dc09      	bgt.n	8006d98 <_printf_float+0x264>
 8006d84:	6823      	ldr	r3, [r4, #0]
 8006d86:	079b      	lsls	r3, r3, #30
 8006d88:	f100 8105 	bmi.w	8006f96 <_printf_float+0x462>
 8006d8c:	68e0      	ldr	r0, [r4, #12]
 8006d8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d90:	4298      	cmp	r0, r3
 8006d92:	bfb8      	it	lt
 8006d94:	4618      	movlt	r0, r3
 8006d96:	e730      	b.n	8006bfa <_printf_float+0xc6>
 8006d98:	2301      	movs	r3, #1
 8006d9a:	464a      	mov	r2, r9
 8006d9c:	4631      	mov	r1, r6
 8006d9e:	4628      	mov	r0, r5
 8006da0:	47b8      	blx	r7
 8006da2:	3001      	adds	r0, #1
 8006da4:	f43f af27 	beq.w	8006bf6 <_printf_float+0xc2>
 8006da8:	f108 0801 	add.w	r8, r8, #1
 8006dac:	e7e6      	b.n	8006d7c <_printf_float+0x248>
 8006dae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	dc39      	bgt.n	8006e28 <_printf_float+0x2f4>
 8006db4:	4a1b      	ldr	r2, [pc, #108]	; (8006e24 <_printf_float+0x2f0>)
 8006db6:	2301      	movs	r3, #1
 8006db8:	4631      	mov	r1, r6
 8006dba:	4628      	mov	r0, r5
 8006dbc:	47b8      	blx	r7
 8006dbe:	3001      	adds	r0, #1
 8006dc0:	f43f af19 	beq.w	8006bf6 <_printf_float+0xc2>
 8006dc4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	d102      	bne.n	8006dd2 <_printf_float+0x29e>
 8006dcc:	6823      	ldr	r3, [r4, #0]
 8006dce:	07d9      	lsls	r1, r3, #31
 8006dd0:	d5d8      	bpl.n	8006d84 <_printf_float+0x250>
 8006dd2:	ee18 3a10 	vmov	r3, s16
 8006dd6:	4652      	mov	r2, sl
 8006dd8:	4631      	mov	r1, r6
 8006dda:	4628      	mov	r0, r5
 8006ddc:	47b8      	blx	r7
 8006dde:	3001      	adds	r0, #1
 8006de0:	f43f af09 	beq.w	8006bf6 <_printf_float+0xc2>
 8006de4:	f04f 0900 	mov.w	r9, #0
 8006de8:	f104 0a1a 	add.w	sl, r4, #26
 8006dec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dee:	425b      	negs	r3, r3
 8006df0:	454b      	cmp	r3, r9
 8006df2:	dc01      	bgt.n	8006df8 <_printf_float+0x2c4>
 8006df4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006df6:	e792      	b.n	8006d1e <_printf_float+0x1ea>
 8006df8:	2301      	movs	r3, #1
 8006dfa:	4652      	mov	r2, sl
 8006dfc:	4631      	mov	r1, r6
 8006dfe:	4628      	mov	r0, r5
 8006e00:	47b8      	blx	r7
 8006e02:	3001      	adds	r0, #1
 8006e04:	f43f aef7 	beq.w	8006bf6 <_printf_float+0xc2>
 8006e08:	f109 0901 	add.w	r9, r9, #1
 8006e0c:	e7ee      	b.n	8006dec <_printf_float+0x2b8>
 8006e0e:	bf00      	nop
 8006e10:	7fefffff 	.word	0x7fefffff
 8006e14:	0800a2e8 	.word	0x0800a2e8
 8006e18:	0800a2ec 	.word	0x0800a2ec
 8006e1c:	0800a2f4 	.word	0x0800a2f4
 8006e20:	0800a2f0 	.word	0x0800a2f0
 8006e24:	0800a2f8 	.word	0x0800a2f8
 8006e28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e2a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	bfa8      	it	ge
 8006e30:	461a      	movge	r2, r3
 8006e32:	2a00      	cmp	r2, #0
 8006e34:	4691      	mov	r9, r2
 8006e36:	dc37      	bgt.n	8006ea8 <_printf_float+0x374>
 8006e38:	f04f 0b00 	mov.w	fp, #0
 8006e3c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e40:	f104 021a 	add.w	r2, r4, #26
 8006e44:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e46:	9305      	str	r3, [sp, #20]
 8006e48:	eba3 0309 	sub.w	r3, r3, r9
 8006e4c:	455b      	cmp	r3, fp
 8006e4e:	dc33      	bgt.n	8006eb8 <_printf_float+0x384>
 8006e50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e54:	429a      	cmp	r2, r3
 8006e56:	db3b      	blt.n	8006ed0 <_printf_float+0x39c>
 8006e58:	6823      	ldr	r3, [r4, #0]
 8006e5a:	07da      	lsls	r2, r3, #31
 8006e5c:	d438      	bmi.n	8006ed0 <_printf_float+0x39c>
 8006e5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e60:	9b05      	ldr	r3, [sp, #20]
 8006e62:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e64:	1ad3      	subs	r3, r2, r3
 8006e66:	eba2 0901 	sub.w	r9, r2, r1
 8006e6a:	4599      	cmp	r9, r3
 8006e6c:	bfa8      	it	ge
 8006e6e:	4699      	movge	r9, r3
 8006e70:	f1b9 0f00 	cmp.w	r9, #0
 8006e74:	dc35      	bgt.n	8006ee2 <_printf_float+0x3ae>
 8006e76:	f04f 0800 	mov.w	r8, #0
 8006e7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e7e:	f104 0a1a 	add.w	sl, r4, #26
 8006e82:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e86:	1a9b      	subs	r3, r3, r2
 8006e88:	eba3 0309 	sub.w	r3, r3, r9
 8006e8c:	4543      	cmp	r3, r8
 8006e8e:	f77f af79 	ble.w	8006d84 <_printf_float+0x250>
 8006e92:	2301      	movs	r3, #1
 8006e94:	4652      	mov	r2, sl
 8006e96:	4631      	mov	r1, r6
 8006e98:	4628      	mov	r0, r5
 8006e9a:	47b8      	blx	r7
 8006e9c:	3001      	adds	r0, #1
 8006e9e:	f43f aeaa 	beq.w	8006bf6 <_printf_float+0xc2>
 8006ea2:	f108 0801 	add.w	r8, r8, #1
 8006ea6:	e7ec      	b.n	8006e82 <_printf_float+0x34e>
 8006ea8:	4613      	mov	r3, r2
 8006eaa:	4631      	mov	r1, r6
 8006eac:	4642      	mov	r2, r8
 8006eae:	4628      	mov	r0, r5
 8006eb0:	47b8      	blx	r7
 8006eb2:	3001      	adds	r0, #1
 8006eb4:	d1c0      	bne.n	8006e38 <_printf_float+0x304>
 8006eb6:	e69e      	b.n	8006bf6 <_printf_float+0xc2>
 8006eb8:	2301      	movs	r3, #1
 8006eba:	4631      	mov	r1, r6
 8006ebc:	4628      	mov	r0, r5
 8006ebe:	9205      	str	r2, [sp, #20]
 8006ec0:	47b8      	blx	r7
 8006ec2:	3001      	adds	r0, #1
 8006ec4:	f43f ae97 	beq.w	8006bf6 <_printf_float+0xc2>
 8006ec8:	9a05      	ldr	r2, [sp, #20]
 8006eca:	f10b 0b01 	add.w	fp, fp, #1
 8006ece:	e7b9      	b.n	8006e44 <_printf_float+0x310>
 8006ed0:	ee18 3a10 	vmov	r3, s16
 8006ed4:	4652      	mov	r2, sl
 8006ed6:	4631      	mov	r1, r6
 8006ed8:	4628      	mov	r0, r5
 8006eda:	47b8      	blx	r7
 8006edc:	3001      	adds	r0, #1
 8006ede:	d1be      	bne.n	8006e5e <_printf_float+0x32a>
 8006ee0:	e689      	b.n	8006bf6 <_printf_float+0xc2>
 8006ee2:	9a05      	ldr	r2, [sp, #20]
 8006ee4:	464b      	mov	r3, r9
 8006ee6:	4442      	add	r2, r8
 8006ee8:	4631      	mov	r1, r6
 8006eea:	4628      	mov	r0, r5
 8006eec:	47b8      	blx	r7
 8006eee:	3001      	adds	r0, #1
 8006ef0:	d1c1      	bne.n	8006e76 <_printf_float+0x342>
 8006ef2:	e680      	b.n	8006bf6 <_printf_float+0xc2>
 8006ef4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ef6:	2a01      	cmp	r2, #1
 8006ef8:	dc01      	bgt.n	8006efe <_printf_float+0x3ca>
 8006efa:	07db      	lsls	r3, r3, #31
 8006efc:	d538      	bpl.n	8006f70 <_printf_float+0x43c>
 8006efe:	2301      	movs	r3, #1
 8006f00:	4642      	mov	r2, r8
 8006f02:	4631      	mov	r1, r6
 8006f04:	4628      	mov	r0, r5
 8006f06:	47b8      	blx	r7
 8006f08:	3001      	adds	r0, #1
 8006f0a:	f43f ae74 	beq.w	8006bf6 <_printf_float+0xc2>
 8006f0e:	ee18 3a10 	vmov	r3, s16
 8006f12:	4652      	mov	r2, sl
 8006f14:	4631      	mov	r1, r6
 8006f16:	4628      	mov	r0, r5
 8006f18:	47b8      	blx	r7
 8006f1a:	3001      	adds	r0, #1
 8006f1c:	f43f ae6b 	beq.w	8006bf6 <_printf_float+0xc2>
 8006f20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006f24:	2200      	movs	r2, #0
 8006f26:	2300      	movs	r3, #0
 8006f28:	f7f9 fdd6 	bl	8000ad8 <__aeabi_dcmpeq>
 8006f2c:	b9d8      	cbnz	r0, 8006f66 <_printf_float+0x432>
 8006f2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f30:	f108 0201 	add.w	r2, r8, #1
 8006f34:	3b01      	subs	r3, #1
 8006f36:	4631      	mov	r1, r6
 8006f38:	4628      	mov	r0, r5
 8006f3a:	47b8      	blx	r7
 8006f3c:	3001      	adds	r0, #1
 8006f3e:	d10e      	bne.n	8006f5e <_printf_float+0x42a>
 8006f40:	e659      	b.n	8006bf6 <_printf_float+0xc2>
 8006f42:	2301      	movs	r3, #1
 8006f44:	4652      	mov	r2, sl
 8006f46:	4631      	mov	r1, r6
 8006f48:	4628      	mov	r0, r5
 8006f4a:	47b8      	blx	r7
 8006f4c:	3001      	adds	r0, #1
 8006f4e:	f43f ae52 	beq.w	8006bf6 <_printf_float+0xc2>
 8006f52:	f108 0801 	add.w	r8, r8, #1
 8006f56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f58:	3b01      	subs	r3, #1
 8006f5a:	4543      	cmp	r3, r8
 8006f5c:	dcf1      	bgt.n	8006f42 <_printf_float+0x40e>
 8006f5e:	464b      	mov	r3, r9
 8006f60:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006f64:	e6dc      	b.n	8006d20 <_printf_float+0x1ec>
 8006f66:	f04f 0800 	mov.w	r8, #0
 8006f6a:	f104 0a1a 	add.w	sl, r4, #26
 8006f6e:	e7f2      	b.n	8006f56 <_printf_float+0x422>
 8006f70:	2301      	movs	r3, #1
 8006f72:	4642      	mov	r2, r8
 8006f74:	e7df      	b.n	8006f36 <_printf_float+0x402>
 8006f76:	2301      	movs	r3, #1
 8006f78:	464a      	mov	r2, r9
 8006f7a:	4631      	mov	r1, r6
 8006f7c:	4628      	mov	r0, r5
 8006f7e:	47b8      	blx	r7
 8006f80:	3001      	adds	r0, #1
 8006f82:	f43f ae38 	beq.w	8006bf6 <_printf_float+0xc2>
 8006f86:	f108 0801 	add.w	r8, r8, #1
 8006f8a:	68e3      	ldr	r3, [r4, #12]
 8006f8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006f8e:	1a5b      	subs	r3, r3, r1
 8006f90:	4543      	cmp	r3, r8
 8006f92:	dcf0      	bgt.n	8006f76 <_printf_float+0x442>
 8006f94:	e6fa      	b.n	8006d8c <_printf_float+0x258>
 8006f96:	f04f 0800 	mov.w	r8, #0
 8006f9a:	f104 0919 	add.w	r9, r4, #25
 8006f9e:	e7f4      	b.n	8006f8a <_printf_float+0x456>

08006fa0 <_printf_common>:
 8006fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fa4:	4616      	mov	r6, r2
 8006fa6:	4699      	mov	r9, r3
 8006fa8:	688a      	ldr	r2, [r1, #8]
 8006faa:	690b      	ldr	r3, [r1, #16]
 8006fac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	bfb8      	it	lt
 8006fb4:	4613      	movlt	r3, r2
 8006fb6:	6033      	str	r3, [r6, #0]
 8006fb8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006fbc:	4607      	mov	r7, r0
 8006fbe:	460c      	mov	r4, r1
 8006fc0:	b10a      	cbz	r2, 8006fc6 <_printf_common+0x26>
 8006fc2:	3301      	adds	r3, #1
 8006fc4:	6033      	str	r3, [r6, #0]
 8006fc6:	6823      	ldr	r3, [r4, #0]
 8006fc8:	0699      	lsls	r1, r3, #26
 8006fca:	bf42      	ittt	mi
 8006fcc:	6833      	ldrmi	r3, [r6, #0]
 8006fce:	3302      	addmi	r3, #2
 8006fd0:	6033      	strmi	r3, [r6, #0]
 8006fd2:	6825      	ldr	r5, [r4, #0]
 8006fd4:	f015 0506 	ands.w	r5, r5, #6
 8006fd8:	d106      	bne.n	8006fe8 <_printf_common+0x48>
 8006fda:	f104 0a19 	add.w	sl, r4, #25
 8006fde:	68e3      	ldr	r3, [r4, #12]
 8006fe0:	6832      	ldr	r2, [r6, #0]
 8006fe2:	1a9b      	subs	r3, r3, r2
 8006fe4:	42ab      	cmp	r3, r5
 8006fe6:	dc26      	bgt.n	8007036 <_printf_common+0x96>
 8006fe8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006fec:	1e13      	subs	r3, r2, #0
 8006fee:	6822      	ldr	r2, [r4, #0]
 8006ff0:	bf18      	it	ne
 8006ff2:	2301      	movne	r3, #1
 8006ff4:	0692      	lsls	r2, r2, #26
 8006ff6:	d42b      	bmi.n	8007050 <_printf_common+0xb0>
 8006ff8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ffc:	4649      	mov	r1, r9
 8006ffe:	4638      	mov	r0, r7
 8007000:	47c0      	blx	r8
 8007002:	3001      	adds	r0, #1
 8007004:	d01e      	beq.n	8007044 <_printf_common+0xa4>
 8007006:	6823      	ldr	r3, [r4, #0]
 8007008:	68e5      	ldr	r5, [r4, #12]
 800700a:	6832      	ldr	r2, [r6, #0]
 800700c:	f003 0306 	and.w	r3, r3, #6
 8007010:	2b04      	cmp	r3, #4
 8007012:	bf08      	it	eq
 8007014:	1aad      	subeq	r5, r5, r2
 8007016:	68a3      	ldr	r3, [r4, #8]
 8007018:	6922      	ldr	r2, [r4, #16]
 800701a:	bf0c      	ite	eq
 800701c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007020:	2500      	movne	r5, #0
 8007022:	4293      	cmp	r3, r2
 8007024:	bfc4      	itt	gt
 8007026:	1a9b      	subgt	r3, r3, r2
 8007028:	18ed      	addgt	r5, r5, r3
 800702a:	2600      	movs	r6, #0
 800702c:	341a      	adds	r4, #26
 800702e:	42b5      	cmp	r5, r6
 8007030:	d11a      	bne.n	8007068 <_printf_common+0xc8>
 8007032:	2000      	movs	r0, #0
 8007034:	e008      	b.n	8007048 <_printf_common+0xa8>
 8007036:	2301      	movs	r3, #1
 8007038:	4652      	mov	r2, sl
 800703a:	4649      	mov	r1, r9
 800703c:	4638      	mov	r0, r7
 800703e:	47c0      	blx	r8
 8007040:	3001      	adds	r0, #1
 8007042:	d103      	bne.n	800704c <_printf_common+0xac>
 8007044:	f04f 30ff 	mov.w	r0, #4294967295
 8007048:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800704c:	3501      	adds	r5, #1
 800704e:	e7c6      	b.n	8006fde <_printf_common+0x3e>
 8007050:	18e1      	adds	r1, r4, r3
 8007052:	1c5a      	adds	r2, r3, #1
 8007054:	2030      	movs	r0, #48	; 0x30
 8007056:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800705a:	4422      	add	r2, r4
 800705c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007060:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007064:	3302      	adds	r3, #2
 8007066:	e7c7      	b.n	8006ff8 <_printf_common+0x58>
 8007068:	2301      	movs	r3, #1
 800706a:	4622      	mov	r2, r4
 800706c:	4649      	mov	r1, r9
 800706e:	4638      	mov	r0, r7
 8007070:	47c0      	blx	r8
 8007072:	3001      	adds	r0, #1
 8007074:	d0e6      	beq.n	8007044 <_printf_common+0xa4>
 8007076:	3601      	adds	r6, #1
 8007078:	e7d9      	b.n	800702e <_printf_common+0x8e>
	...

0800707c <_printf_i>:
 800707c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007080:	460c      	mov	r4, r1
 8007082:	4691      	mov	r9, r2
 8007084:	7e27      	ldrb	r7, [r4, #24]
 8007086:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007088:	2f78      	cmp	r7, #120	; 0x78
 800708a:	4680      	mov	r8, r0
 800708c:	469a      	mov	sl, r3
 800708e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007092:	d807      	bhi.n	80070a4 <_printf_i+0x28>
 8007094:	2f62      	cmp	r7, #98	; 0x62
 8007096:	d80a      	bhi.n	80070ae <_printf_i+0x32>
 8007098:	2f00      	cmp	r7, #0
 800709a:	f000 80d8 	beq.w	800724e <_printf_i+0x1d2>
 800709e:	2f58      	cmp	r7, #88	; 0x58
 80070a0:	f000 80a3 	beq.w	80071ea <_printf_i+0x16e>
 80070a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80070a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80070ac:	e03a      	b.n	8007124 <_printf_i+0xa8>
 80070ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80070b2:	2b15      	cmp	r3, #21
 80070b4:	d8f6      	bhi.n	80070a4 <_printf_i+0x28>
 80070b6:	a001      	add	r0, pc, #4	; (adr r0, 80070bc <_printf_i+0x40>)
 80070b8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80070bc:	08007115 	.word	0x08007115
 80070c0:	08007129 	.word	0x08007129
 80070c4:	080070a5 	.word	0x080070a5
 80070c8:	080070a5 	.word	0x080070a5
 80070cc:	080070a5 	.word	0x080070a5
 80070d0:	080070a5 	.word	0x080070a5
 80070d4:	08007129 	.word	0x08007129
 80070d8:	080070a5 	.word	0x080070a5
 80070dc:	080070a5 	.word	0x080070a5
 80070e0:	080070a5 	.word	0x080070a5
 80070e4:	080070a5 	.word	0x080070a5
 80070e8:	08007235 	.word	0x08007235
 80070ec:	08007159 	.word	0x08007159
 80070f0:	08007217 	.word	0x08007217
 80070f4:	080070a5 	.word	0x080070a5
 80070f8:	080070a5 	.word	0x080070a5
 80070fc:	08007257 	.word	0x08007257
 8007100:	080070a5 	.word	0x080070a5
 8007104:	08007159 	.word	0x08007159
 8007108:	080070a5 	.word	0x080070a5
 800710c:	080070a5 	.word	0x080070a5
 8007110:	0800721f 	.word	0x0800721f
 8007114:	680b      	ldr	r3, [r1, #0]
 8007116:	1d1a      	adds	r2, r3, #4
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	600a      	str	r2, [r1, #0]
 800711c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007120:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007124:	2301      	movs	r3, #1
 8007126:	e0a3      	b.n	8007270 <_printf_i+0x1f4>
 8007128:	6825      	ldr	r5, [r4, #0]
 800712a:	6808      	ldr	r0, [r1, #0]
 800712c:	062e      	lsls	r6, r5, #24
 800712e:	f100 0304 	add.w	r3, r0, #4
 8007132:	d50a      	bpl.n	800714a <_printf_i+0xce>
 8007134:	6805      	ldr	r5, [r0, #0]
 8007136:	600b      	str	r3, [r1, #0]
 8007138:	2d00      	cmp	r5, #0
 800713a:	da03      	bge.n	8007144 <_printf_i+0xc8>
 800713c:	232d      	movs	r3, #45	; 0x2d
 800713e:	426d      	negs	r5, r5
 8007140:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007144:	485e      	ldr	r0, [pc, #376]	; (80072c0 <_printf_i+0x244>)
 8007146:	230a      	movs	r3, #10
 8007148:	e019      	b.n	800717e <_printf_i+0x102>
 800714a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800714e:	6805      	ldr	r5, [r0, #0]
 8007150:	600b      	str	r3, [r1, #0]
 8007152:	bf18      	it	ne
 8007154:	b22d      	sxthne	r5, r5
 8007156:	e7ef      	b.n	8007138 <_printf_i+0xbc>
 8007158:	680b      	ldr	r3, [r1, #0]
 800715a:	6825      	ldr	r5, [r4, #0]
 800715c:	1d18      	adds	r0, r3, #4
 800715e:	6008      	str	r0, [r1, #0]
 8007160:	0628      	lsls	r0, r5, #24
 8007162:	d501      	bpl.n	8007168 <_printf_i+0xec>
 8007164:	681d      	ldr	r5, [r3, #0]
 8007166:	e002      	b.n	800716e <_printf_i+0xf2>
 8007168:	0669      	lsls	r1, r5, #25
 800716a:	d5fb      	bpl.n	8007164 <_printf_i+0xe8>
 800716c:	881d      	ldrh	r5, [r3, #0]
 800716e:	4854      	ldr	r0, [pc, #336]	; (80072c0 <_printf_i+0x244>)
 8007170:	2f6f      	cmp	r7, #111	; 0x6f
 8007172:	bf0c      	ite	eq
 8007174:	2308      	moveq	r3, #8
 8007176:	230a      	movne	r3, #10
 8007178:	2100      	movs	r1, #0
 800717a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800717e:	6866      	ldr	r6, [r4, #4]
 8007180:	60a6      	str	r6, [r4, #8]
 8007182:	2e00      	cmp	r6, #0
 8007184:	bfa2      	ittt	ge
 8007186:	6821      	ldrge	r1, [r4, #0]
 8007188:	f021 0104 	bicge.w	r1, r1, #4
 800718c:	6021      	strge	r1, [r4, #0]
 800718e:	b90d      	cbnz	r5, 8007194 <_printf_i+0x118>
 8007190:	2e00      	cmp	r6, #0
 8007192:	d04d      	beq.n	8007230 <_printf_i+0x1b4>
 8007194:	4616      	mov	r6, r2
 8007196:	fbb5 f1f3 	udiv	r1, r5, r3
 800719a:	fb03 5711 	mls	r7, r3, r1, r5
 800719e:	5dc7      	ldrb	r7, [r0, r7]
 80071a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80071a4:	462f      	mov	r7, r5
 80071a6:	42bb      	cmp	r3, r7
 80071a8:	460d      	mov	r5, r1
 80071aa:	d9f4      	bls.n	8007196 <_printf_i+0x11a>
 80071ac:	2b08      	cmp	r3, #8
 80071ae:	d10b      	bne.n	80071c8 <_printf_i+0x14c>
 80071b0:	6823      	ldr	r3, [r4, #0]
 80071b2:	07df      	lsls	r7, r3, #31
 80071b4:	d508      	bpl.n	80071c8 <_printf_i+0x14c>
 80071b6:	6923      	ldr	r3, [r4, #16]
 80071b8:	6861      	ldr	r1, [r4, #4]
 80071ba:	4299      	cmp	r1, r3
 80071bc:	bfde      	ittt	le
 80071be:	2330      	movle	r3, #48	; 0x30
 80071c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80071c4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80071c8:	1b92      	subs	r2, r2, r6
 80071ca:	6122      	str	r2, [r4, #16]
 80071cc:	f8cd a000 	str.w	sl, [sp]
 80071d0:	464b      	mov	r3, r9
 80071d2:	aa03      	add	r2, sp, #12
 80071d4:	4621      	mov	r1, r4
 80071d6:	4640      	mov	r0, r8
 80071d8:	f7ff fee2 	bl	8006fa0 <_printf_common>
 80071dc:	3001      	adds	r0, #1
 80071de:	d14c      	bne.n	800727a <_printf_i+0x1fe>
 80071e0:	f04f 30ff 	mov.w	r0, #4294967295
 80071e4:	b004      	add	sp, #16
 80071e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071ea:	4835      	ldr	r0, [pc, #212]	; (80072c0 <_printf_i+0x244>)
 80071ec:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80071f0:	6823      	ldr	r3, [r4, #0]
 80071f2:	680e      	ldr	r6, [r1, #0]
 80071f4:	061f      	lsls	r7, r3, #24
 80071f6:	f856 5b04 	ldr.w	r5, [r6], #4
 80071fa:	600e      	str	r6, [r1, #0]
 80071fc:	d514      	bpl.n	8007228 <_printf_i+0x1ac>
 80071fe:	07d9      	lsls	r1, r3, #31
 8007200:	bf44      	itt	mi
 8007202:	f043 0320 	orrmi.w	r3, r3, #32
 8007206:	6023      	strmi	r3, [r4, #0]
 8007208:	b91d      	cbnz	r5, 8007212 <_printf_i+0x196>
 800720a:	6823      	ldr	r3, [r4, #0]
 800720c:	f023 0320 	bic.w	r3, r3, #32
 8007210:	6023      	str	r3, [r4, #0]
 8007212:	2310      	movs	r3, #16
 8007214:	e7b0      	b.n	8007178 <_printf_i+0xfc>
 8007216:	6823      	ldr	r3, [r4, #0]
 8007218:	f043 0320 	orr.w	r3, r3, #32
 800721c:	6023      	str	r3, [r4, #0]
 800721e:	2378      	movs	r3, #120	; 0x78
 8007220:	4828      	ldr	r0, [pc, #160]	; (80072c4 <_printf_i+0x248>)
 8007222:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007226:	e7e3      	b.n	80071f0 <_printf_i+0x174>
 8007228:	065e      	lsls	r6, r3, #25
 800722a:	bf48      	it	mi
 800722c:	b2ad      	uxthmi	r5, r5
 800722e:	e7e6      	b.n	80071fe <_printf_i+0x182>
 8007230:	4616      	mov	r6, r2
 8007232:	e7bb      	b.n	80071ac <_printf_i+0x130>
 8007234:	680b      	ldr	r3, [r1, #0]
 8007236:	6826      	ldr	r6, [r4, #0]
 8007238:	6960      	ldr	r0, [r4, #20]
 800723a:	1d1d      	adds	r5, r3, #4
 800723c:	600d      	str	r5, [r1, #0]
 800723e:	0635      	lsls	r5, r6, #24
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	d501      	bpl.n	8007248 <_printf_i+0x1cc>
 8007244:	6018      	str	r0, [r3, #0]
 8007246:	e002      	b.n	800724e <_printf_i+0x1d2>
 8007248:	0671      	lsls	r1, r6, #25
 800724a:	d5fb      	bpl.n	8007244 <_printf_i+0x1c8>
 800724c:	8018      	strh	r0, [r3, #0]
 800724e:	2300      	movs	r3, #0
 8007250:	6123      	str	r3, [r4, #16]
 8007252:	4616      	mov	r6, r2
 8007254:	e7ba      	b.n	80071cc <_printf_i+0x150>
 8007256:	680b      	ldr	r3, [r1, #0]
 8007258:	1d1a      	adds	r2, r3, #4
 800725a:	600a      	str	r2, [r1, #0]
 800725c:	681e      	ldr	r6, [r3, #0]
 800725e:	6862      	ldr	r2, [r4, #4]
 8007260:	2100      	movs	r1, #0
 8007262:	4630      	mov	r0, r6
 8007264:	f7f8 ffc4 	bl	80001f0 <memchr>
 8007268:	b108      	cbz	r0, 800726e <_printf_i+0x1f2>
 800726a:	1b80      	subs	r0, r0, r6
 800726c:	6060      	str	r0, [r4, #4]
 800726e:	6863      	ldr	r3, [r4, #4]
 8007270:	6123      	str	r3, [r4, #16]
 8007272:	2300      	movs	r3, #0
 8007274:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007278:	e7a8      	b.n	80071cc <_printf_i+0x150>
 800727a:	6923      	ldr	r3, [r4, #16]
 800727c:	4632      	mov	r2, r6
 800727e:	4649      	mov	r1, r9
 8007280:	4640      	mov	r0, r8
 8007282:	47d0      	blx	sl
 8007284:	3001      	adds	r0, #1
 8007286:	d0ab      	beq.n	80071e0 <_printf_i+0x164>
 8007288:	6823      	ldr	r3, [r4, #0]
 800728a:	079b      	lsls	r3, r3, #30
 800728c:	d413      	bmi.n	80072b6 <_printf_i+0x23a>
 800728e:	68e0      	ldr	r0, [r4, #12]
 8007290:	9b03      	ldr	r3, [sp, #12]
 8007292:	4298      	cmp	r0, r3
 8007294:	bfb8      	it	lt
 8007296:	4618      	movlt	r0, r3
 8007298:	e7a4      	b.n	80071e4 <_printf_i+0x168>
 800729a:	2301      	movs	r3, #1
 800729c:	4632      	mov	r2, r6
 800729e:	4649      	mov	r1, r9
 80072a0:	4640      	mov	r0, r8
 80072a2:	47d0      	blx	sl
 80072a4:	3001      	adds	r0, #1
 80072a6:	d09b      	beq.n	80071e0 <_printf_i+0x164>
 80072a8:	3501      	adds	r5, #1
 80072aa:	68e3      	ldr	r3, [r4, #12]
 80072ac:	9903      	ldr	r1, [sp, #12]
 80072ae:	1a5b      	subs	r3, r3, r1
 80072b0:	42ab      	cmp	r3, r5
 80072b2:	dcf2      	bgt.n	800729a <_printf_i+0x21e>
 80072b4:	e7eb      	b.n	800728e <_printf_i+0x212>
 80072b6:	2500      	movs	r5, #0
 80072b8:	f104 0619 	add.w	r6, r4, #25
 80072bc:	e7f5      	b.n	80072aa <_printf_i+0x22e>
 80072be:	bf00      	nop
 80072c0:	0800a2fa 	.word	0x0800a2fa
 80072c4:	0800a30b 	.word	0x0800a30b

080072c8 <_puts_r>:
 80072c8:	b570      	push	{r4, r5, r6, lr}
 80072ca:	460e      	mov	r6, r1
 80072cc:	4605      	mov	r5, r0
 80072ce:	b118      	cbz	r0, 80072d8 <_puts_r+0x10>
 80072d0:	6983      	ldr	r3, [r0, #24]
 80072d2:	b90b      	cbnz	r3, 80072d8 <_puts_r+0x10>
 80072d4:	f001 f8e2 	bl	800849c <__sinit>
 80072d8:	69ab      	ldr	r3, [r5, #24]
 80072da:	68ac      	ldr	r4, [r5, #8]
 80072dc:	b913      	cbnz	r3, 80072e4 <_puts_r+0x1c>
 80072de:	4628      	mov	r0, r5
 80072e0:	f001 f8dc 	bl	800849c <__sinit>
 80072e4:	4b2c      	ldr	r3, [pc, #176]	; (8007398 <_puts_r+0xd0>)
 80072e6:	429c      	cmp	r4, r3
 80072e8:	d120      	bne.n	800732c <_puts_r+0x64>
 80072ea:	686c      	ldr	r4, [r5, #4]
 80072ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80072ee:	07db      	lsls	r3, r3, #31
 80072f0:	d405      	bmi.n	80072fe <_puts_r+0x36>
 80072f2:	89a3      	ldrh	r3, [r4, #12]
 80072f4:	0598      	lsls	r0, r3, #22
 80072f6:	d402      	bmi.n	80072fe <_puts_r+0x36>
 80072f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80072fa:	f001 f972 	bl	80085e2 <__retarget_lock_acquire_recursive>
 80072fe:	89a3      	ldrh	r3, [r4, #12]
 8007300:	0719      	lsls	r1, r3, #28
 8007302:	d51d      	bpl.n	8007340 <_puts_r+0x78>
 8007304:	6923      	ldr	r3, [r4, #16]
 8007306:	b1db      	cbz	r3, 8007340 <_puts_r+0x78>
 8007308:	3e01      	subs	r6, #1
 800730a:	68a3      	ldr	r3, [r4, #8]
 800730c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007310:	3b01      	subs	r3, #1
 8007312:	60a3      	str	r3, [r4, #8]
 8007314:	bb39      	cbnz	r1, 8007366 <_puts_r+0x9e>
 8007316:	2b00      	cmp	r3, #0
 8007318:	da38      	bge.n	800738c <_puts_r+0xc4>
 800731a:	4622      	mov	r2, r4
 800731c:	210a      	movs	r1, #10
 800731e:	4628      	mov	r0, r5
 8007320:	f000 f868 	bl	80073f4 <__swbuf_r>
 8007324:	3001      	adds	r0, #1
 8007326:	d011      	beq.n	800734c <_puts_r+0x84>
 8007328:	250a      	movs	r5, #10
 800732a:	e011      	b.n	8007350 <_puts_r+0x88>
 800732c:	4b1b      	ldr	r3, [pc, #108]	; (800739c <_puts_r+0xd4>)
 800732e:	429c      	cmp	r4, r3
 8007330:	d101      	bne.n	8007336 <_puts_r+0x6e>
 8007332:	68ac      	ldr	r4, [r5, #8]
 8007334:	e7da      	b.n	80072ec <_puts_r+0x24>
 8007336:	4b1a      	ldr	r3, [pc, #104]	; (80073a0 <_puts_r+0xd8>)
 8007338:	429c      	cmp	r4, r3
 800733a:	bf08      	it	eq
 800733c:	68ec      	ldreq	r4, [r5, #12]
 800733e:	e7d5      	b.n	80072ec <_puts_r+0x24>
 8007340:	4621      	mov	r1, r4
 8007342:	4628      	mov	r0, r5
 8007344:	f000 f8a8 	bl	8007498 <__swsetup_r>
 8007348:	2800      	cmp	r0, #0
 800734a:	d0dd      	beq.n	8007308 <_puts_r+0x40>
 800734c:	f04f 35ff 	mov.w	r5, #4294967295
 8007350:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007352:	07da      	lsls	r2, r3, #31
 8007354:	d405      	bmi.n	8007362 <_puts_r+0x9a>
 8007356:	89a3      	ldrh	r3, [r4, #12]
 8007358:	059b      	lsls	r3, r3, #22
 800735a:	d402      	bmi.n	8007362 <_puts_r+0x9a>
 800735c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800735e:	f001 f941 	bl	80085e4 <__retarget_lock_release_recursive>
 8007362:	4628      	mov	r0, r5
 8007364:	bd70      	pop	{r4, r5, r6, pc}
 8007366:	2b00      	cmp	r3, #0
 8007368:	da04      	bge.n	8007374 <_puts_r+0xac>
 800736a:	69a2      	ldr	r2, [r4, #24]
 800736c:	429a      	cmp	r2, r3
 800736e:	dc06      	bgt.n	800737e <_puts_r+0xb6>
 8007370:	290a      	cmp	r1, #10
 8007372:	d004      	beq.n	800737e <_puts_r+0xb6>
 8007374:	6823      	ldr	r3, [r4, #0]
 8007376:	1c5a      	adds	r2, r3, #1
 8007378:	6022      	str	r2, [r4, #0]
 800737a:	7019      	strb	r1, [r3, #0]
 800737c:	e7c5      	b.n	800730a <_puts_r+0x42>
 800737e:	4622      	mov	r2, r4
 8007380:	4628      	mov	r0, r5
 8007382:	f000 f837 	bl	80073f4 <__swbuf_r>
 8007386:	3001      	adds	r0, #1
 8007388:	d1bf      	bne.n	800730a <_puts_r+0x42>
 800738a:	e7df      	b.n	800734c <_puts_r+0x84>
 800738c:	6823      	ldr	r3, [r4, #0]
 800738e:	250a      	movs	r5, #10
 8007390:	1c5a      	adds	r2, r3, #1
 8007392:	6022      	str	r2, [r4, #0]
 8007394:	701d      	strb	r5, [r3, #0]
 8007396:	e7db      	b.n	8007350 <_puts_r+0x88>
 8007398:	0800a3d0 	.word	0x0800a3d0
 800739c:	0800a3f0 	.word	0x0800a3f0
 80073a0:	0800a3b0 	.word	0x0800a3b0

080073a4 <puts>:
 80073a4:	4b02      	ldr	r3, [pc, #8]	; (80073b0 <puts+0xc>)
 80073a6:	4601      	mov	r1, r0
 80073a8:	6818      	ldr	r0, [r3, #0]
 80073aa:	f7ff bf8d 	b.w	80072c8 <_puts_r>
 80073ae:	bf00      	nop
 80073b0:	20000038 	.word	0x20000038

080073b4 <siprintf>:
 80073b4:	b40e      	push	{r1, r2, r3}
 80073b6:	b500      	push	{lr}
 80073b8:	b09c      	sub	sp, #112	; 0x70
 80073ba:	ab1d      	add	r3, sp, #116	; 0x74
 80073bc:	9002      	str	r0, [sp, #8]
 80073be:	9006      	str	r0, [sp, #24]
 80073c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80073c4:	4809      	ldr	r0, [pc, #36]	; (80073ec <siprintf+0x38>)
 80073c6:	9107      	str	r1, [sp, #28]
 80073c8:	9104      	str	r1, [sp, #16]
 80073ca:	4909      	ldr	r1, [pc, #36]	; (80073f0 <siprintf+0x3c>)
 80073cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80073d0:	9105      	str	r1, [sp, #20]
 80073d2:	6800      	ldr	r0, [r0, #0]
 80073d4:	9301      	str	r3, [sp, #4]
 80073d6:	a902      	add	r1, sp, #8
 80073d8:	f001 fe14 	bl	8009004 <_svfiprintf_r>
 80073dc:	9b02      	ldr	r3, [sp, #8]
 80073de:	2200      	movs	r2, #0
 80073e0:	701a      	strb	r2, [r3, #0]
 80073e2:	b01c      	add	sp, #112	; 0x70
 80073e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80073e8:	b003      	add	sp, #12
 80073ea:	4770      	bx	lr
 80073ec:	20000038 	.word	0x20000038
 80073f0:	ffff0208 	.word	0xffff0208

080073f4 <__swbuf_r>:
 80073f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073f6:	460e      	mov	r6, r1
 80073f8:	4614      	mov	r4, r2
 80073fa:	4605      	mov	r5, r0
 80073fc:	b118      	cbz	r0, 8007406 <__swbuf_r+0x12>
 80073fe:	6983      	ldr	r3, [r0, #24]
 8007400:	b90b      	cbnz	r3, 8007406 <__swbuf_r+0x12>
 8007402:	f001 f84b 	bl	800849c <__sinit>
 8007406:	4b21      	ldr	r3, [pc, #132]	; (800748c <__swbuf_r+0x98>)
 8007408:	429c      	cmp	r4, r3
 800740a:	d12b      	bne.n	8007464 <__swbuf_r+0x70>
 800740c:	686c      	ldr	r4, [r5, #4]
 800740e:	69a3      	ldr	r3, [r4, #24]
 8007410:	60a3      	str	r3, [r4, #8]
 8007412:	89a3      	ldrh	r3, [r4, #12]
 8007414:	071a      	lsls	r2, r3, #28
 8007416:	d52f      	bpl.n	8007478 <__swbuf_r+0x84>
 8007418:	6923      	ldr	r3, [r4, #16]
 800741a:	b36b      	cbz	r3, 8007478 <__swbuf_r+0x84>
 800741c:	6923      	ldr	r3, [r4, #16]
 800741e:	6820      	ldr	r0, [r4, #0]
 8007420:	1ac0      	subs	r0, r0, r3
 8007422:	6963      	ldr	r3, [r4, #20]
 8007424:	b2f6      	uxtb	r6, r6
 8007426:	4283      	cmp	r3, r0
 8007428:	4637      	mov	r7, r6
 800742a:	dc04      	bgt.n	8007436 <__swbuf_r+0x42>
 800742c:	4621      	mov	r1, r4
 800742e:	4628      	mov	r0, r5
 8007430:	f000 ffa0 	bl	8008374 <_fflush_r>
 8007434:	bb30      	cbnz	r0, 8007484 <__swbuf_r+0x90>
 8007436:	68a3      	ldr	r3, [r4, #8]
 8007438:	3b01      	subs	r3, #1
 800743a:	60a3      	str	r3, [r4, #8]
 800743c:	6823      	ldr	r3, [r4, #0]
 800743e:	1c5a      	adds	r2, r3, #1
 8007440:	6022      	str	r2, [r4, #0]
 8007442:	701e      	strb	r6, [r3, #0]
 8007444:	6963      	ldr	r3, [r4, #20]
 8007446:	3001      	adds	r0, #1
 8007448:	4283      	cmp	r3, r0
 800744a:	d004      	beq.n	8007456 <__swbuf_r+0x62>
 800744c:	89a3      	ldrh	r3, [r4, #12]
 800744e:	07db      	lsls	r3, r3, #31
 8007450:	d506      	bpl.n	8007460 <__swbuf_r+0x6c>
 8007452:	2e0a      	cmp	r6, #10
 8007454:	d104      	bne.n	8007460 <__swbuf_r+0x6c>
 8007456:	4621      	mov	r1, r4
 8007458:	4628      	mov	r0, r5
 800745a:	f000 ff8b 	bl	8008374 <_fflush_r>
 800745e:	b988      	cbnz	r0, 8007484 <__swbuf_r+0x90>
 8007460:	4638      	mov	r0, r7
 8007462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007464:	4b0a      	ldr	r3, [pc, #40]	; (8007490 <__swbuf_r+0x9c>)
 8007466:	429c      	cmp	r4, r3
 8007468:	d101      	bne.n	800746e <__swbuf_r+0x7a>
 800746a:	68ac      	ldr	r4, [r5, #8]
 800746c:	e7cf      	b.n	800740e <__swbuf_r+0x1a>
 800746e:	4b09      	ldr	r3, [pc, #36]	; (8007494 <__swbuf_r+0xa0>)
 8007470:	429c      	cmp	r4, r3
 8007472:	bf08      	it	eq
 8007474:	68ec      	ldreq	r4, [r5, #12]
 8007476:	e7ca      	b.n	800740e <__swbuf_r+0x1a>
 8007478:	4621      	mov	r1, r4
 800747a:	4628      	mov	r0, r5
 800747c:	f000 f80c 	bl	8007498 <__swsetup_r>
 8007480:	2800      	cmp	r0, #0
 8007482:	d0cb      	beq.n	800741c <__swbuf_r+0x28>
 8007484:	f04f 37ff 	mov.w	r7, #4294967295
 8007488:	e7ea      	b.n	8007460 <__swbuf_r+0x6c>
 800748a:	bf00      	nop
 800748c:	0800a3d0 	.word	0x0800a3d0
 8007490:	0800a3f0 	.word	0x0800a3f0
 8007494:	0800a3b0 	.word	0x0800a3b0

08007498 <__swsetup_r>:
 8007498:	4b32      	ldr	r3, [pc, #200]	; (8007564 <__swsetup_r+0xcc>)
 800749a:	b570      	push	{r4, r5, r6, lr}
 800749c:	681d      	ldr	r5, [r3, #0]
 800749e:	4606      	mov	r6, r0
 80074a0:	460c      	mov	r4, r1
 80074a2:	b125      	cbz	r5, 80074ae <__swsetup_r+0x16>
 80074a4:	69ab      	ldr	r3, [r5, #24]
 80074a6:	b913      	cbnz	r3, 80074ae <__swsetup_r+0x16>
 80074a8:	4628      	mov	r0, r5
 80074aa:	f000 fff7 	bl	800849c <__sinit>
 80074ae:	4b2e      	ldr	r3, [pc, #184]	; (8007568 <__swsetup_r+0xd0>)
 80074b0:	429c      	cmp	r4, r3
 80074b2:	d10f      	bne.n	80074d4 <__swsetup_r+0x3c>
 80074b4:	686c      	ldr	r4, [r5, #4]
 80074b6:	89a3      	ldrh	r3, [r4, #12]
 80074b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80074bc:	0719      	lsls	r1, r3, #28
 80074be:	d42c      	bmi.n	800751a <__swsetup_r+0x82>
 80074c0:	06dd      	lsls	r5, r3, #27
 80074c2:	d411      	bmi.n	80074e8 <__swsetup_r+0x50>
 80074c4:	2309      	movs	r3, #9
 80074c6:	6033      	str	r3, [r6, #0]
 80074c8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80074cc:	81a3      	strh	r3, [r4, #12]
 80074ce:	f04f 30ff 	mov.w	r0, #4294967295
 80074d2:	e03e      	b.n	8007552 <__swsetup_r+0xba>
 80074d4:	4b25      	ldr	r3, [pc, #148]	; (800756c <__swsetup_r+0xd4>)
 80074d6:	429c      	cmp	r4, r3
 80074d8:	d101      	bne.n	80074de <__swsetup_r+0x46>
 80074da:	68ac      	ldr	r4, [r5, #8]
 80074dc:	e7eb      	b.n	80074b6 <__swsetup_r+0x1e>
 80074de:	4b24      	ldr	r3, [pc, #144]	; (8007570 <__swsetup_r+0xd8>)
 80074e0:	429c      	cmp	r4, r3
 80074e2:	bf08      	it	eq
 80074e4:	68ec      	ldreq	r4, [r5, #12]
 80074e6:	e7e6      	b.n	80074b6 <__swsetup_r+0x1e>
 80074e8:	0758      	lsls	r0, r3, #29
 80074ea:	d512      	bpl.n	8007512 <__swsetup_r+0x7a>
 80074ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074ee:	b141      	cbz	r1, 8007502 <__swsetup_r+0x6a>
 80074f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80074f4:	4299      	cmp	r1, r3
 80074f6:	d002      	beq.n	80074fe <__swsetup_r+0x66>
 80074f8:	4630      	mov	r0, r6
 80074fa:	f001 fc7d 	bl	8008df8 <_free_r>
 80074fe:	2300      	movs	r3, #0
 8007500:	6363      	str	r3, [r4, #52]	; 0x34
 8007502:	89a3      	ldrh	r3, [r4, #12]
 8007504:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007508:	81a3      	strh	r3, [r4, #12]
 800750a:	2300      	movs	r3, #0
 800750c:	6063      	str	r3, [r4, #4]
 800750e:	6923      	ldr	r3, [r4, #16]
 8007510:	6023      	str	r3, [r4, #0]
 8007512:	89a3      	ldrh	r3, [r4, #12]
 8007514:	f043 0308 	orr.w	r3, r3, #8
 8007518:	81a3      	strh	r3, [r4, #12]
 800751a:	6923      	ldr	r3, [r4, #16]
 800751c:	b94b      	cbnz	r3, 8007532 <__swsetup_r+0x9a>
 800751e:	89a3      	ldrh	r3, [r4, #12]
 8007520:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007524:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007528:	d003      	beq.n	8007532 <__swsetup_r+0x9a>
 800752a:	4621      	mov	r1, r4
 800752c:	4630      	mov	r0, r6
 800752e:	f001 f87f 	bl	8008630 <__smakebuf_r>
 8007532:	89a0      	ldrh	r0, [r4, #12]
 8007534:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007538:	f010 0301 	ands.w	r3, r0, #1
 800753c:	d00a      	beq.n	8007554 <__swsetup_r+0xbc>
 800753e:	2300      	movs	r3, #0
 8007540:	60a3      	str	r3, [r4, #8]
 8007542:	6963      	ldr	r3, [r4, #20]
 8007544:	425b      	negs	r3, r3
 8007546:	61a3      	str	r3, [r4, #24]
 8007548:	6923      	ldr	r3, [r4, #16]
 800754a:	b943      	cbnz	r3, 800755e <__swsetup_r+0xc6>
 800754c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007550:	d1ba      	bne.n	80074c8 <__swsetup_r+0x30>
 8007552:	bd70      	pop	{r4, r5, r6, pc}
 8007554:	0781      	lsls	r1, r0, #30
 8007556:	bf58      	it	pl
 8007558:	6963      	ldrpl	r3, [r4, #20]
 800755a:	60a3      	str	r3, [r4, #8]
 800755c:	e7f4      	b.n	8007548 <__swsetup_r+0xb0>
 800755e:	2000      	movs	r0, #0
 8007560:	e7f7      	b.n	8007552 <__swsetup_r+0xba>
 8007562:	bf00      	nop
 8007564:	20000038 	.word	0x20000038
 8007568:	0800a3d0 	.word	0x0800a3d0
 800756c:	0800a3f0 	.word	0x0800a3f0
 8007570:	0800a3b0 	.word	0x0800a3b0

08007574 <quorem>:
 8007574:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007578:	6903      	ldr	r3, [r0, #16]
 800757a:	690c      	ldr	r4, [r1, #16]
 800757c:	42a3      	cmp	r3, r4
 800757e:	4607      	mov	r7, r0
 8007580:	f2c0 8081 	blt.w	8007686 <quorem+0x112>
 8007584:	3c01      	subs	r4, #1
 8007586:	f101 0814 	add.w	r8, r1, #20
 800758a:	f100 0514 	add.w	r5, r0, #20
 800758e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007592:	9301      	str	r3, [sp, #4]
 8007594:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007598:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800759c:	3301      	adds	r3, #1
 800759e:	429a      	cmp	r2, r3
 80075a0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80075a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80075a8:	fbb2 f6f3 	udiv	r6, r2, r3
 80075ac:	d331      	bcc.n	8007612 <quorem+0x9e>
 80075ae:	f04f 0e00 	mov.w	lr, #0
 80075b2:	4640      	mov	r0, r8
 80075b4:	46ac      	mov	ip, r5
 80075b6:	46f2      	mov	sl, lr
 80075b8:	f850 2b04 	ldr.w	r2, [r0], #4
 80075bc:	b293      	uxth	r3, r2
 80075be:	fb06 e303 	mla	r3, r6, r3, lr
 80075c2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	ebaa 0303 	sub.w	r3, sl, r3
 80075cc:	0c12      	lsrs	r2, r2, #16
 80075ce:	f8dc a000 	ldr.w	sl, [ip]
 80075d2:	fb06 e202 	mla	r2, r6, r2, lr
 80075d6:	fa13 f38a 	uxtah	r3, r3, sl
 80075da:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80075de:	fa1f fa82 	uxth.w	sl, r2
 80075e2:	f8dc 2000 	ldr.w	r2, [ip]
 80075e6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80075ea:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80075f4:	4581      	cmp	r9, r0
 80075f6:	f84c 3b04 	str.w	r3, [ip], #4
 80075fa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80075fe:	d2db      	bcs.n	80075b8 <quorem+0x44>
 8007600:	f855 300b 	ldr.w	r3, [r5, fp]
 8007604:	b92b      	cbnz	r3, 8007612 <quorem+0x9e>
 8007606:	9b01      	ldr	r3, [sp, #4]
 8007608:	3b04      	subs	r3, #4
 800760a:	429d      	cmp	r5, r3
 800760c:	461a      	mov	r2, r3
 800760e:	d32e      	bcc.n	800766e <quorem+0xfa>
 8007610:	613c      	str	r4, [r7, #16]
 8007612:	4638      	mov	r0, r7
 8007614:	f001 fae0 	bl	8008bd8 <__mcmp>
 8007618:	2800      	cmp	r0, #0
 800761a:	db24      	blt.n	8007666 <quorem+0xf2>
 800761c:	3601      	adds	r6, #1
 800761e:	4628      	mov	r0, r5
 8007620:	f04f 0c00 	mov.w	ip, #0
 8007624:	f858 2b04 	ldr.w	r2, [r8], #4
 8007628:	f8d0 e000 	ldr.w	lr, [r0]
 800762c:	b293      	uxth	r3, r2
 800762e:	ebac 0303 	sub.w	r3, ip, r3
 8007632:	0c12      	lsrs	r2, r2, #16
 8007634:	fa13 f38e 	uxtah	r3, r3, lr
 8007638:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800763c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007640:	b29b      	uxth	r3, r3
 8007642:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007646:	45c1      	cmp	r9, r8
 8007648:	f840 3b04 	str.w	r3, [r0], #4
 800764c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007650:	d2e8      	bcs.n	8007624 <quorem+0xb0>
 8007652:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007656:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800765a:	b922      	cbnz	r2, 8007666 <quorem+0xf2>
 800765c:	3b04      	subs	r3, #4
 800765e:	429d      	cmp	r5, r3
 8007660:	461a      	mov	r2, r3
 8007662:	d30a      	bcc.n	800767a <quorem+0x106>
 8007664:	613c      	str	r4, [r7, #16]
 8007666:	4630      	mov	r0, r6
 8007668:	b003      	add	sp, #12
 800766a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800766e:	6812      	ldr	r2, [r2, #0]
 8007670:	3b04      	subs	r3, #4
 8007672:	2a00      	cmp	r2, #0
 8007674:	d1cc      	bne.n	8007610 <quorem+0x9c>
 8007676:	3c01      	subs	r4, #1
 8007678:	e7c7      	b.n	800760a <quorem+0x96>
 800767a:	6812      	ldr	r2, [r2, #0]
 800767c:	3b04      	subs	r3, #4
 800767e:	2a00      	cmp	r2, #0
 8007680:	d1f0      	bne.n	8007664 <quorem+0xf0>
 8007682:	3c01      	subs	r4, #1
 8007684:	e7eb      	b.n	800765e <quorem+0xea>
 8007686:	2000      	movs	r0, #0
 8007688:	e7ee      	b.n	8007668 <quorem+0xf4>
 800768a:	0000      	movs	r0, r0
 800768c:	0000      	movs	r0, r0
	...

08007690 <_dtoa_r>:
 8007690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007694:	ed2d 8b02 	vpush	{d8}
 8007698:	ec57 6b10 	vmov	r6, r7, d0
 800769c:	b095      	sub	sp, #84	; 0x54
 800769e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80076a0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80076a4:	9105      	str	r1, [sp, #20]
 80076a6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80076aa:	4604      	mov	r4, r0
 80076ac:	9209      	str	r2, [sp, #36]	; 0x24
 80076ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80076b0:	b975      	cbnz	r5, 80076d0 <_dtoa_r+0x40>
 80076b2:	2010      	movs	r0, #16
 80076b4:	f000 fffc 	bl	80086b0 <malloc>
 80076b8:	4602      	mov	r2, r0
 80076ba:	6260      	str	r0, [r4, #36]	; 0x24
 80076bc:	b920      	cbnz	r0, 80076c8 <_dtoa_r+0x38>
 80076be:	4bb2      	ldr	r3, [pc, #712]	; (8007988 <_dtoa_r+0x2f8>)
 80076c0:	21ea      	movs	r1, #234	; 0xea
 80076c2:	48b2      	ldr	r0, [pc, #712]	; (800798c <_dtoa_r+0x2fc>)
 80076c4:	f001 fe04 	bl	80092d0 <__assert_func>
 80076c8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80076cc:	6005      	str	r5, [r0, #0]
 80076ce:	60c5      	str	r5, [r0, #12]
 80076d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80076d2:	6819      	ldr	r1, [r3, #0]
 80076d4:	b151      	cbz	r1, 80076ec <_dtoa_r+0x5c>
 80076d6:	685a      	ldr	r2, [r3, #4]
 80076d8:	604a      	str	r2, [r1, #4]
 80076da:	2301      	movs	r3, #1
 80076dc:	4093      	lsls	r3, r2
 80076de:	608b      	str	r3, [r1, #8]
 80076e0:	4620      	mov	r0, r4
 80076e2:	f001 f83b 	bl	800875c <_Bfree>
 80076e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80076e8:	2200      	movs	r2, #0
 80076ea:	601a      	str	r2, [r3, #0]
 80076ec:	1e3b      	subs	r3, r7, #0
 80076ee:	bfb9      	ittee	lt
 80076f0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80076f4:	9303      	strlt	r3, [sp, #12]
 80076f6:	2300      	movge	r3, #0
 80076f8:	f8c8 3000 	strge.w	r3, [r8]
 80076fc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007700:	4ba3      	ldr	r3, [pc, #652]	; (8007990 <_dtoa_r+0x300>)
 8007702:	bfbc      	itt	lt
 8007704:	2201      	movlt	r2, #1
 8007706:	f8c8 2000 	strlt.w	r2, [r8]
 800770a:	ea33 0309 	bics.w	r3, r3, r9
 800770e:	d11b      	bne.n	8007748 <_dtoa_r+0xb8>
 8007710:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007712:	f242 730f 	movw	r3, #9999	; 0x270f
 8007716:	6013      	str	r3, [r2, #0]
 8007718:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800771c:	4333      	orrs	r3, r6
 800771e:	f000 857a 	beq.w	8008216 <_dtoa_r+0xb86>
 8007722:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007724:	b963      	cbnz	r3, 8007740 <_dtoa_r+0xb0>
 8007726:	4b9b      	ldr	r3, [pc, #620]	; (8007994 <_dtoa_r+0x304>)
 8007728:	e024      	b.n	8007774 <_dtoa_r+0xe4>
 800772a:	4b9b      	ldr	r3, [pc, #620]	; (8007998 <_dtoa_r+0x308>)
 800772c:	9300      	str	r3, [sp, #0]
 800772e:	3308      	adds	r3, #8
 8007730:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007732:	6013      	str	r3, [r2, #0]
 8007734:	9800      	ldr	r0, [sp, #0]
 8007736:	b015      	add	sp, #84	; 0x54
 8007738:	ecbd 8b02 	vpop	{d8}
 800773c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007740:	4b94      	ldr	r3, [pc, #592]	; (8007994 <_dtoa_r+0x304>)
 8007742:	9300      	str	r3, [sp, #0]
 8007744:	3303      	adds	r3, #3
 8007746:	e7f3      	b.n	8007730 <_dtoa_r+0xa0>
 8007748:	ed9d 7b02 	vldr	d7, [sp, #8]
 800774c:	2200      	movs	r2, #0
 800774e:	ec51 0b17 	vmov	r0, r1, d7
 8007752:	2300      	movs	r3, #0
 8007754:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007758:	f7f9 f9be 	bl	8000ad8 <__aeabi_dcmpeq>
 800775c:	4680      	mov	r8, r0
 800775e:	b158      	cbz	r0, 8007778 <_dtoa_r+0xe8>
 8007760:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007762:	2301      	movs	r3, #1
 8007764:	6013      	str	r3, [r2, #0]
 8007766:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007768:	2b00      	cmp	r3, #0
 800776a:	f000 8551 	beq.w	8008210 <_dtoa_r+0xb80>
 800776e:	488b      	ldr	r0, [pc, #556]	; (800799c <_dtoa_r+0x30c>)
 8007770:	6018      	str	r0, [r3, #0]
 8007772:	1e43      	subs	r3, r0, #1
 8007774:	9300      	str	r3, [sp, #0]
 8007776:	e7dd      	b.n	8007734 <_dtoa_r+0xa4>
 8007778:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800777c:	aa12      	add	r2, sp, #72	; 0x48
 800777e:	a913      	add	r1, sp, #76	; 0x4c
 8007780:	4620      	mov	r0, r4
 8007782:	f001 facd 	bl	8008d20 <__d2b>
 8007786:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800778a:	4683      	mov	fp, r0
 800778c:	2d00      	cmp	r5, #0
 800778e:	d07c      	beq.n	800788a <_dtoa_r+0x1fa>
 8007790:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007792:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007796:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800779a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800779e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80077a2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80077a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80077aa:	4b7d      	ldr	r3, [pc, #500]	; (80079a0 <_dtoa_r+0x310>)
 80077ac:	2200      	movs	r2, #0
 80077ae:	4630      	mov	r0, r6
 80077b0:	4639      	mov	r1, r7
 80077b2:	f7f8 fd71 	bl	8000298 <__aeabi_dsub>
 80077b6:	a36e      	add	r3, pc, #440	; (adr r3, 8007970 <_dtoa_r+0x2e0>)
 80077b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077bc:	f7f8 ff24 	bl	8000608 <__aeabi_dmul>
 80077c0:	a36d      	add	r3, pc, #436	; (adr r3, 8007978 <_dtoa_r+0x2e8>)
 80077c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c6:	f7f8 fd69 	bl	800029c <__adddf3>
 80077ca:	4606      	mov	r6, r0
 80077cc:	4628      	mov	r0, r5
 80077ce:	460f      	mov	r7, r1
 80077d0:	f7f8 feb0 	bl	8000534 <__aeabi_i2d>
 80077d4:	a36a      	add	r3, pc, #424	; (adr r3, 8007980 <_dtoa_r+0x2f0>)
 80077d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077da:	f7f8 ff15 	bl	8000608 <__aeabi_dmul>
 80077de:	4602      	mov	r2, r0
 80077e0:	460b      	mov	r3, r1
 80077e2:	4630      	mov	r0, r6
 80077e4:	4639      	mov	r1, r7
 80077e6:	f7f8 fd59 	bl	800029c <__adddf3>
 80077ea:	4606      	mov	r6, r0
 80077ec:	460f      	mov	r7, r1
 80077ee:	f7f9 f9bb 	bl	8000b68 <__aeabi_d2iz>
 80077f2:	2200      	movs	r2, #0
 80077f4:	4682      	mov	sl, r0
 80077f6:	2300      	movs	r3, #0
 80077f8:	4630      	mov	r0, r6
 80077fa:	4639      	mov	r1, r7
 80077fc:	f7f9 f976 	bl	8000aec <__aeabi_dcmplt>
 8007800:	b148      	cbz	r0, 8007816 <_dtoa_r+0x186>
 8007802:	4650      	mov	r0, sl
 8007804:	f7f8 fe96 	bl	8000534 <__aeabi_i2d>
 8007808:	4632      	mov	r2, r6
 800780a:	463b      	mov	r3, r7
 800780c:	f7f9 f964 	bl	8000ad8 <__aeabi_dcmpeq>
 8007810:	b908      	cbnz	r0, 8007816 <_dtoa_r+0x186>
 8007812:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007816:	f1ba 0f16 	cmp.w	sl, #22
 800781a:	d854      	bhi.n	80078c6 <_dtoa_r+0x236>
 800781c:	4b61      	ldr	r3, [pc, #388]	; (80079a4 <_dtoa_r+0x314>)
 800781e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007826:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800782a:	f7f9 f95f 	bl	8000aec <__aeabi_dcmplt>
 800782e:	2800      	cmp	r0, #0
 8007830:	d04b      	beq.n	80078ca <_dtoa_r+0x23a>
 8007832:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007836:	2300      	movs	r3, #0
 8007838:	930e      	str	r3, [sp, #56]	; 0x38
 800783a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800783c:	1b5d      	subs	r5, r3, r5
 800783e:	1e6b      	subs	r3, r5, #1
 8007840:	9304      	str	r3, [sp, #16]
 8007842:	bf43      	ittte	mi
 8007844:	2300      	movmi	r3, #0
 8007846:	f1c5 0801 	rsbmi	r8, r5, #1
 800784a:	9304      	strmi	r3, [sp, #16]
 800784c:	f04f 0800 	movpl.w	r8, #0
 8007850:	f1ba 0f00 	cmp.w	sl, #0
 8007854:	db3b      	blt.n	80078ce <_dtoa_r+0x23e>
 8007856:	9b04      	ldr	r3, [sp, #16]
 8007858:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800785c:	4453      	add	r3, sl
 800785e:	9304      	str	r3, [sp, #16]
 8007860:	2300      	movs	r3, #0
 8007862:	9306      	str	r3, [sp, #24]
 8007864:	9b05      	ldr	r3, [sp, #20]
 8007866:	2b09      	cmp	r3, #9
 8007868:	d869      	bhi.n	800793e <_dtoa_r+0x2ae>
 800786a:	2b05      	cmp	r3, #5
 800786c:	bfc4      	itt	gt
 800786e:	3b04      	subgt	r3, #4
 8007870:	9305      	strgt	r3, [sp, #20]
 8007872:	9b05      	ldr	r3, [sp, #20]
 8007874:	f1a3 0302 	sub.w	r3, r3, #2
 8007878:	bfcc      	ite	gt
 800787a:	2500      	movgt	r5, #0
 800787c:	2501      	movle	r5, #1
 800787e:	2b03      	cmp	r3, #3
 8007880:	d869      	bhi.n	8007956 <_dtoa_r+0x2c6>
 8007882:	e8df f003 	tbb	[pc, r3]
 8007886:	4e2c      	.short	0x4e2c
 8007888:	5a4c      	.short	0x5a4c
 800788a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800788e:	441d      	add	r5, r3
 8007890:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007894:	2b20      	cmp	r3, #32
 8007896:	bfc1      	itttt	gt
 8007898:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800789c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80078a0:	fa09 f303 	lslgt.w	r3, r9, r3
 80078a4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80078a8:	bfda      	itte	le
 80078aa:	f1c3 0320 	rsble	r3, r3, #32
 80078ae:	fa06 f003 	lslle.w	r0, r6, r3
 80078b2:	4318      	orrgt	r0, r3
 80078b4:	f7f8 fe2e 	bl	8000514 <__aeabi_ui2d>
 80078b8:	2301      	movs	r3, #1
 80078ba:	4606      	mov	r6, r0
 80078bc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80078c0:	3d01      	subs	r5, #1
 80078c2:	9310      	str	r3, [sp, #64]	; 0x40
 80078c4:	e771      	b.n	80077aa <_dtoa_r+0x11a>
 80078c6:	2301      	movs	r3, #1
 80078c8:	e7b6      	b.n	8007838 <_dtoa_r+0x1a8>
 80078ca:	900e      	str	r0, [sp, #56]	; 0x38
 80078cc:	e7b5      	b.n	800783a <_dtoa_r+0x1aa>
 80078ce:	f1ca 0300 	rsb	r3, sl, #0
 80078d2:	9306      	str	r3, [sp, #24]
 80078d4:	2300      	movs	r3, #0
 80078d6:	eba8 080a 	sub.w	r8, r8, sl
 80078da:	930d      	str	r3, [sp, #52]	; 0x34
 80078dc:	e7c2      	b.n	8007864 <_dtoa_r+0x1d4>
 80078de:	2300      	movs	r3, #0
 80078e0:	9308      	str	r3, [sp, #32]
 80078e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	dc39      	bgt.n	800795c <_dtoa_r+0x2cc>
 80078e8:	f04f 0901 	mov.w	r9, #1
 80078ec:	f8cd 9004 	str.w	r9, [sp, #4]
 80078f0:	464b      	mov	r3, r9
 80078f2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80078f6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80078f8:	2200      	movs	r2, #0
 80078fa:	6042      	str	r2, [r0, #4]
 80078fc:	2204      	movs	r2, #4
 80078fe:	f102 0614 	add.w	r6, r2, #20
 8007902:	429e      	cmp	r6, r3
 8007904:	6841      	ldr	r1, [r0, #4]
 8007906:	d92f      	bls.n	8007968 <_dtoa_r+0x2d8>
 8007908:	4620      	mov	r0, r4
 800790a:	f000 fee7 	bl	80086dc <_Balloc>
 800790e:	9000      	str	r0, [sp, #0]
 8007910:	2800      	cmp	r0, #0
 8007912:	d14b      	bne.n	80079ac <_dtoa_r+0x31c>
 8007914:	4b24      	ldr	r3, [pc, #144]	; (80079a8 <_dtoa_r+0x318>)
 8007916:	4602      	mov	r2, r0
 8007918:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800791c:	e6d1      	b.n	80076c2 <_dtoa_r+0x32>
 800791e:	2301      	movs	r3, #1
 8007920:	e7de      	b.n	80078e0 <_dtoa_r+0x250>
 8007922:	2300      	movs	r3, #0
 8007924:	9308      	str	r3, [sp, #32]
 8007926:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007928:	eb0a 0903 	add.w	r9, sl, r3
 800792c:	f109 0301 	add.w	r3, r9, #1
 8007930:	2b01      	cmp	r3, #1
 8007932:	9301      	str	r3, [sp, #4]
 8007934:	bfb8      	it	lt
 8007936:	2301      	movlt	r3, #1
 8007938:	e7dd      	b.n	80078f6 <_dtoa_r+0x266>
 800793a:	2301      	movs	r3, #1
 800793c:	e7f2      	b.n	8007924 <_dtoa_r+0x294>
 800793e:	2501      	movs	r5, #1
 8007940:	2300      	movs	r3, #0
 8007942:	9305      	str	r3, [sp, #20]
 8007944:	9508      	str	r5, [sp, #32]
 8007946:	f04f 39ff 	mov.w	r9, #4294967295
 800794a:	2200      	movs	r2, #0
 800794c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007950:	2312      	movs	r3, #18
 8007952:	9209      	str	r2, [sp, #36]	; 0x24
 8007954:	e7cf      	b.n	80078f6 <_dtoa_r+0x266>
 8007956:	2301      	movs	r3, #1
 8007958:	9308      	str	r3, [sp, #32]
 800795a:	e7f4      	b.n	8007946 <_dtoa_r+0x2b6>
 800795c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007960:	f8cd 9004 	str.w	r9, [sp, #4]
 8007964:	464b      	mov	r3, r9
 8007966:	e7c6      	b.n	80078f6 <_dtoa_r+0x266>
 8007968:	3101      	adds	r1, #1
 800796a:	6041      	str	r1, [r0, #4]
 800796c:	0052      	lsls	r2, r2, #1
 800796e:	e7c6      	b.n	80078fe <_dtoa_r+0x26e>
 8007970:	636f4361 	.word	0x636f4361
 8007974:	3fd287a7 	.word	0x3fd287a7
 8007978:	8b60c8b3 	.word	0x8b60c8b3
 800797c:	3fc68a28 	.word	0x3fc68a28
 8007980:	509f79fb 	.word	0x509f79fb
 8007984:	3fd34413 	.word	0x3fd34413
 8007988:	0800a329 	.word	0x0800a329
 800798c:	0800a340 	.word	0x0800a340
 8007990:	7ff00000 	.word	0x7ff00000
 8007994:	0800a325 	.word	0x0800a325
 8007998:	0800a31c 	.word	0x0800a31c
 800799c:	0800a2f9 	.word	0x0800a2f9
 80079a0:	3ff80000 	.word	0x3ff80000
 80079a4:	0800a498 	.word	0x0800a498
 80079a8:	0800a39f 	.word	0x0800a39f
 80079ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079ae:	9a00      	ldr	r2, [sp, #0]
 80079b0:	601a      	str	r2, [r3, #0]
 80079b2:	9b01      	ldr	r3, [sp, #4]
 80079b4:	2b0e      	cmp	r3, #14
 80079b6:	f200 80ad 	bhi.w	8007b14 <_dtoa_r+0x484>
 80079ba:	2d00      	cmp	r5, #0
 80079bc:	f000 80aa 	beq.w	8007b14 <_dtoa_r+0x484>
 80079c0:	f1ba 0f00 	cmp.w	sl, #0
 80079c4:	dd36      	ble.n	8007a34 <_dtoa_r+0x3a4>
 80079c6:	4ac3      	ldr	r2, [pc, #780]	; (8007cd4 <_dtoa_r+0x644>)
 80079c8:	f00a 030f 	and.w	r3, sl, #15
 80079cc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80079d0:	ed93 7b00 	vldr	d7, [r3]
 80079d4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80079d8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80079dc:	eeb0 8a47 	vmov.f32	s16, s14
 80079e0:	eef0 8a67 	vmov.f32	s17, s15
 80079e4:	d016      	beq.n	8007a14 <_dtoa_r+0x384>
 80079e6:	4bbc      	ldr	r3, [pc, #752]	; (8007cd8 <_dtoa_r+0x648>)
 80079e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80079ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80079f0:	f7f8 ff34 	bl	800085c <__aeabi_ddiv>
 80079f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80079f8:	f007 070f 	and.w	r7, r7, #15
 80079fc:	2503      	movs	r5, #3
 80079fe:	4eb6      	ldr	r6, [pc, #728]	; (8007cd8 <_dtoa_r+0x648>)
 8007a00:	b957      	cbnz	r7, 8007a18 <_dtoa_r+0x388>
 8007a02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a06:	ec53 2b18 	vmov	r2, r3, d8
 8007a0a:	f7f8 ff27 	bl	800085c <__aeabi_ddiv>
 8007a0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a12:	e029      	b.n	8007a68 <_dtoa_r+0x3d8>
 8007a14:	2502      	movs	r5, #2
 8007a16:	e7f2      	b.n	80079fe <_dtoa_r+0x36e>
 8007a18:	07f9      	lsls	r1, r7, #31
 8007a1a:	d508      	bpl.n	8007a2e <_dtoa_r+0x39e>
 8007a1c:	ec51 0b18 	vmov	r0, r1, d8
 8007a20:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007a24:	f7f8 fdf0 	bl	8000608 <__aeabi_dmul>
 8007a28:	ec41 0b18 	vmov	d8, r0, r1
 8007a2c:	3501      	adds	r5, #1
 8007a2e:	107f      	asrs	r7, r7, #1
 8007a30:	3608      	adds	r6, #8
 8007a32:	e7e5      	b.n	8007a00 <_dtoa_r+0x370>
 8007a34:	f000 80a6 	beq.w	8007b84 <_dtoa_r+0x4f4>
 8007a38:	f1ca 0600 	rsb	r6, sl, #0
 8007a3c:	4ba5      	ldr	r3, [pc, #660]	; (8007cd4 <_dtoa_r+0x644>)
 8007a3e:	4fa6      	ldr	r7, [pc, #664]	; (8007cd8 <_dtoa_r+0x648>)
 8007a40:	f006 020f 	and.w	r2, r6, #15
 8007a44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a4c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007a50:	f7f8 fdda 	bl	8000608 <__aeabi_dmul>
 8007a54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a58:	1136      	asrs	r6, r6, #4
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	2502      	movs	r5, #2
 8007a5e:	2e00      	cmp	r6, #0
 8007a60:	f040 8085 	bne.w	8007b6e <_dtoa_r+0x4de>
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d1d2      	bne.n	8007a0e <_dtoa_r+0x37e>
 8007a68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	f000 808c 	beq.w	8007b88 <_dtoa_r+0x4f8>
 8007a70:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007a74:	4b99      	ldr	r3, [pc, #612]	; (8007cdc <_dtoa_r+0x64c>)
 8007a76:	2200      	movs	r2, #0
 8007a78:	4630      	mov	r0, r6
 8007a7a:	4639      	mov	r1, r7
 8007a7c:	f7f9 f836 	bl	8000aec <__aeabi_dcmplt>
 8007a80:	2800      	cmp	r0, #0
 8007a82:	f000 8081 	beq.w	8007b88 <_dtoa_r+0x4f8>
 8007a86:	9b01      	ldr	r3, [sp, #4]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d07d      	beq.n	8007b88 <_dtoa_r+0x4f8>
 8007a8c:	f1b9 0f00 	cmp.w	r9, #0
 8007a90:	dd3c      	ble.n	8007b0c <_dtoa_r+0x47c>
 8007a92:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007a96:	9307      	str	r3, [sp, #28]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	4b91      	ldr	r3, [pc, #580]	; (8007ce0 <_dtoa_r+0x650>)
 8007a9c:	4630      	mov	r0, r6
 8007a9e:	4639      	mov	r1, r7
 8007aa0:	f7f8 fdb2 	bl	8000608 <__aeabi_dmul>
 8007aa4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007aa8:	3501      	adds	r5, #1
 8007aaa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8007aae:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007ab2:	4628      	mov	r0, r5
 8007ab4:	f7f8 fd3e 	bl	8000534 <__aeabi_i2d>
 8007ab8:	4632      	mov	r2, r6
 8007aba:	463b      	mov	r3, r7
 8007abc:	f7f8 fda4 	bl	8000608 <__aeabi_dmul>
 8007ac0:	4b88      	ldr	r3, [pc, #544]	; (8007ce4 <_dtoa_r+0x654>)
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	f7f8 fbea 	bl	800029c <__adddf3>
 8007ac8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007acc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ad0:	9303      	str	r3, [sp, #12]
 8007ad2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d15c      	bne.n	8007b92 <_dtoa_r+0x502>
 8007ad8:	4b83      	ldr	r3, [pc, #524]	; (8007ce8 <_dtoa_r+0x658>)
 8007ada:	2200      	movs	r2, #0
 8007adc:	4630      	mov	r0, r6
 8007ade:	4639      	mov	r1, r7
 8007ae0:	f7f8 fbda 	bl	8000298 <__aeabi_dsub>
 8007ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ae8:	4606      	mov	r6, r0
 8007aea:	460f      	mov	r7, r1
 8007aec:	f7f9 f81c 	bl	8000b28 <__aeabi_dcmpgt>
 8007af0:	2800      	cmp	r0, #0
 8007af2:	f040 8296 	bne.w	8008022 <_dtoa_r+0x992>
 8007af6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007afa:	4630      	mov	r0, r6
 8007afc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007b00:	4639      	mov	r1, r7
 8007b02:	f7f8 fff3 	bl	8000aec <__aeabi_dcmplt>
 8007b06:	2800      	cmp	r0, #0
 8007b08:	f040 8288 	bne.w	800801c <_dtoa_r+0x98c>
 8007b0c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007b10:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007b14:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	f2c0 8158 	blt.w	8007dcc <_dtoa_r+0x73c>
 8007b1c:	f1ba 0f0e 	cmp.w	sl, #14
 8007b20:	f300 8154 	bgt.w	8007dcc <_dtoa_r+0x73c>
 8007b24:	4b6b      	ldr	r3, [pc, #428]	; (8007cd4 <_dtoa_r+0x644>)
 8007b26:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007b2a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007b2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	f280 80e3 	bge.w	8007cfc <_dtoa_r+0x66c>
 8007b36:	9b01      	ldr	r3, [sp, #4]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	f300 80df 	bgt.w	8007cfc <_dtoa_r+0x66c>
 8007b3e:	f040 826d 	bne.w	800801c <_dtoa_r+0x98c>
 8007b42:	4b69      	ldr	r3, [pc, #420]	; (8007ce8 <_dtoa_r+0x658>)
 8007b44:	2200      	movs	r2, #0
 8007b46:	4640      	mov	r0, r8
 8007b48:	4649      	mov	r1, r9
 8007b4a:	f7f8 fd5d 	bl	8000608 <__aeabi_dmul>
 8007b4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b52:	f7f8 ffdf 	bl	8000b14 <__aeabi_dcmpge>
 8007b56:	9e01      	ldr	r6, [sp, #4]
 8007b58:	4637      	mov	r7, r6
 8007b5a:	2800      	cmp	r0, #0
 8007b5c:	f040 8243 	bne.w	8007fe6 <_dtoa_r+0x956>
 8007b60:	9d00      	ldr	r5, [sp, #0]
 8007b62:	2331      	movs	r3, #49	; 0x31
 8007b64:	f805 3b01 	strb.w	r3, [r5], #1
 8007b68:	f10a 0a01 	add.w	sl, sl, #1
 8007b6c:	e23f      	b.n	8007fee <_dtoa_r+0x95e>
 8007b6e:	07f2      	lsls	r2, r6, #31
 8007b70:	d505      	bpl.n	8007b7e <_dtoa_r+0x4ee>
 8007b72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b76:	f7f8 fd47 	bl	8000608 <__aeabi_dmul>
 8007b7a:	3501      	adds	r5, #1
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	1076      	asrs	r6, r6, #1
 8007b80:	3708      	adds	r7, #8
 8007b82:	e76c      	b.n	8007a5e <_dtoa_r+0x3ce>
 8007b84:	2502      	movs	r5, #2
 8007b86:	e76f      	b.n	8007a68 <_dtoa_r+0x3d8>
 8007b88:	9b01      	ldr	r3, [sp, #4]
 8007b8a:	f8cd a01c 	str.w	sl, [sp, #28]
 8007b8e:	930c      	str	r3, [sp, #48]	; 0x30
 8007b90:	e78d      	b.n	8007aae <_dtoa_r+0x41e>
 8007b92:	9900      	ldr	r1, [sp, #0]
 8007b94:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007b96:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007b98:	4b4e      	ldr	r3, [pc, #312]	; (8007cd4 <_dtoa_r+0x644>)
 8007b9a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007b9e:	4401      	add	r1, r0
 8007ba0:	9102      	str	r1, [sp, #8]
 8007ba2:	9908      	ldr	r1, [sp, #32]
 8007ba4:	eeb0 8a47 	vmov.f32	s16, s14
 8007ba8:	eef0 8a67 	vmov.f32	s17, s15
 8007bac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007bb0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007bb4:	2900      	cmp	r1, #0
 8007bb6:	d045      	beq.n	8007c44 <_dtoa_r+0x5b4>
 8007bb8:	494c      	ldr	r1, [pc, #304]	; (8007cec <_dtoa_r+0x65c>)
 8007bba:	2000      	movs	r0, #0
 8007bbc:	f7f8 fe4e 	bl	800085c <__aeabi_ddiv>
 8007bc0:	ec53 2b18 	vmov	r2, r3, d8
 8007bc4:	f7f8 fb68 	bl	8000298 <__aeabi_dsub>
 8007bc8:	9d00      	ldr	r5, [sp, #0]
 8007bca:	ec41 0b18 	vmov	d8, r0, r1
 8007bce:	4639      	mov	r1, r7
 8007bd0:	4630      	mov	r0, r6
 8007bd2:	f7f8 ffc9 	bl	8000b68 <__aeabi_d2iz>
 8007bd6:	900c      	str	r0, [sp, #48]	; 0x30
 8007bd8:	f7f8 fcac 	bl	8000534 <__aeabi_i2d>
 8007bdc:	4602      	mov	r2, r0
 8007bde:	460b      	mov	r3, r1
 8007be0:	4630      	mov	r0, r6
 8007be2:	4639      	mov	r1, r7
 8007be4:	f7f8 fb58 	bl	8000298 <__aeabi_dsub>
 8007be8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007bea:	3330      	adds	r3, #48	; 0x30
 8007bec:	f805 3b01 	strb.w	r3, [r5], #1
 8007bf0:	ec53 2b18 	vmov	r2, r3, d8
 8007bf4:	4606      	mov	r6, r0
 8007bf6:	460f      	mov	r7, r1
 8007bf8:	f7f8 ff78 	bl	8000aec <__aeabi_dcmplt>
 8007bfc:	2800      	cmp	r0, #0
 8007bfe:	d165      	bne.n	8007ccc <_dtoa_r+0x63c>
 8007c00:	4632      	mov	r2, r6
 8007c02:	463b      	mov	r3, r7
 8007c04:	4935      	ldr	r1, [pc, #212]	; (8007cdc <_dtoa_r+0x64c>)
 8007c06:	2000      	movs	r0, #0
 8007c08:	f7f8 fb46 	bl	8000298 <__aeabi_dsub>
 8007c0c:	ec53 2b18 	vmov	r2, r3, d8
 8007c10:	f7f8 ff6c 	bl	8000aec <__aeabi_dcmplt>
 8007c14:	2800      	cmp	r0, #0
 8007c16:	f040 80b9 	bne.w	8007d8c <_dtoa_r+0x6fc>
 8007c1a:	9b02      	ldr	r3, [sp, #8]
 8007c1c:	429d      	cmp	r5, r3
 8007c1e:	f43f af75 	beq.w	8007b0c <_dtoa_r+0x47c>
 8007c22:	4b2f      	ldr	r3, [pc, #188]	; (8007ce0 <_dtoa_r+0x650>)
 8007c24:	ec51 0b18 	vmov	r0, r1, d8
 8007c28:	2200      	movs	r2, #0
 8007c2a:	f7f8 fced 	bl	8000608 <__aeabi_dmul>
 8007c2e:	4b2c      	ldr	r3, [pc, #176]	; (8007ce0 <_dtoa_r+0x650>)
 8007c30:	ec41 0b18 	vmov	d8, r0, r1
 8007c34:	2200      	movs	r2, #0
 8007c36:	4630      	mov	r0, r6
 8007c38:	4639      	mov	r1, r7
 8007c3a:	f7f8 fce5 	bl	8000608 <__aeabi_dmul>
 8007c3e:	4606      	mov	r6, r0
 8007c40:	460f      	mov	r7, r1
 8007c42:	e7c4      	b.n	8007bce <_dtoa_r+0x53e>
 8007c44:	ec51 0b17 	vmov	r0, r1, d7
 8007c48:	f7f8 fcde 	bl	8000608 <__aeabi_dmul>
 8007c4c:	9b02      	ldr	r3, [sp, #8]
 8007c4e:	9d00      	ldr	r5, [sp, #0]
 8007c50:	930c      	str	r3, [sp, #48]	; 0x30
 8007c52:	ec41 0b18 	vmov	d8, r0, r1
 8007c56:	4639      	mov	r1, r7
 8007c58:	4630      	mov	r0, r6
 8007c5a:	f7f8 ff85 	bl	8000b68 <__aeabi_d2iz>
 8007c5e:	9011      	str	r0, [sp, #68]	; 0x44
 8007c60:	f7f8 fc68 	bl	8000534 <__aeabi_i2d>
 8007c64:	4602      	mov	r2, r0
 8007c66:	460b      	mov	r3, r1
 8007c68:	4630      	mov	r0, r6
 8007c6a:	4639      	mov	r1, r7
 8007c6c:	f7f8 fb14 	bl	8000298 <__aeabi_dsub>
 8007c70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007c72:	3330      	adds	r3, #48	; 0x30
 8007c74:	f805 3b01 	strb.w	r3, [r5], #1
 8007c78:	9b02      	ldr	r3, [sp, #8]
 8007c7a:	429d      	cmp	r5, r3
 8007c7c:	4606      	mov	r6, r0
 8007c7e:	460f      	mov	r7, r1
 8007c80:	f04f 0200 	mov.w	r2, #0
 8007c84:	d134      	bne.n	8007cf0 <_dtoa_r+0x660>
 8007c86:	4b19      	ldr	r3, [pc, #100]	; (8007cec <_dtoa_r+0x65c>)
 8007c88:	ec51 0b18 	vmov	r0, r1, d8
 8007c8c:	f7f8 fb06 	bl	800029c <__adddf3>
 8007c90:	4602      	mov	r2, r0
 8007c92:	460b      	mov	r3, r1
 8007c94:	4630      	mov	r0, r6
 8007c96:	4639      	mov	r1, r7
 8007c98:	f7f8 ff46 	bl	8000b28 <__aeabi_dcmpgt>
 8007c9c:	2800      	cmp	r0, #0
 8007c9e:	d175      	bne.n	8007d8c <_dtoa_r+0x6fc>
 8007ca0:	ec53 2b18 	vmov	r2, r3, d8
 8007ca4:	4911      	ldr	r1, [pc, #68]	; (8007cec <_dtoa_r+0x65c>)
 8007ca6:	2000      	movs	r0, #0
 8007ca8:	f7f8 faf6 	bl	8000298 <__aeabi_dsub>
 8007cac:	4602      	mov	r2, r0
 8007cae:	460b      	mov	r3, r1
 8007cb0:	4630      	mov	r0, r6
 8007cb2:	4639      	mov	r1, r7
 8007cb4:	f7f8 ff1a 	bl	8000aec <__aeabi_dcmplt>
 8007cb8:	2800      	cmp	r0, #0
 8007cba:	f43f af27 	beq.w	8007b0c <_dtoa_r+0x47c>
 8007cbe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007cc0:	1e6b      	subs	r3, r5, #1
 8007cc2:	930c      	str	r3, [sp, #48]	; 0x30
 8007cc4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007cc8:	2b30      	cmp	r3, #48	; 0x30
 8007cca:	d0f8      	beq.n	8007cbe <_dtoa_r+0x62e>
 8007ccc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007cd0:	e04a      	b.n	8007d68 <_dtoa_r+0x6d8>
 8007cd2:	bf00      	nop
 8007cd4:	0800a498 	.word	0x0800a498
 8007cd8:	0800a470 	.word	0x0800a470
 8007cdc:	3ff00000 	.word	0x3ff00000
 8007ce0:	40240000 	.word	0x40240000
 8007ce4:	401c0000 	.word	0x401c0000
 8007ce8:	40140000 	.word	0x40140000
 8007cec:	3fe00000 	.word	0x3fe00000
 8007cf0:	4baf      	ldr	r3, [pc, #700]	; (8007fb0 <_dtoa_r+0x920>)
 8007cf2:	f7f8 fc89 	bl	8000608 <__aeabi_dmul>
 8007cf6:	4606      	mov	r6, r0
 8007cf8:	460f      	mov	r7, r1
 8007cfa:	e7ac      	b.n	8007c56 <_dtoa_r+0x5c6>
 8007cfc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007d00:	9d00      	ldr	r5, [sp, #0]
 8007d02:	4642      	mov	r2, r8
 8007d04:	464b      	mov	r3, r9
 8007d06:	4630      	mov	r0, r6
 8007d08:	4639      	mov	r1, r7
 8007d0a:	f7f8 fda7 	bl	800085c <__aeabi_ddiv>
 8007d0e:	f7f8 ff2b 	bl	8000b68 <__aeabi_d2iz>
 8007d12:	9002      	str	r0, [sp, #8]
 8007d14:	f7f8 fc0e 	bl	8000534 <__aeabi_i2d>
 8007d18:	4642      	mov	r2, r8
 8007d1a:	464b      	mov	r3, r9
 8007d1c:	f7f8 fc74 	bl	8000608 <__aeabi_dmul>
 8007d20:	4602      	mov	r2, r0
 8007d22:	460b      	mov	r3, r1
 8007d24:	4630      	mov	r0, r6
 8007d26:	4639      	mov	r1, r7
 8007d28:	f7f8 fab6 	bl	8000298 <__aeabi_dsub>
 8007d2c:	9e02      	ldr	r6, [sp, #8]
 8007d2e:	9f01      	ldr	r7, [sp, #4]
 8007d30:	3630      	adds	r6, #48	; 0x30
 8007d32:	f805 6b01 	strb.w	r6, [r5], #1
 8007d36:	9e00      	ldr	r6, [sp, #0]
 8007d38:	1bae      	subs	r6, r5, r6
 8007d3a:	42b7      	cmp	r7, r6
 8007d3c:	4602      	mov	r2, r0
 8007d3e:	460b      	mov	r3, r1
 8007d40:	d137      	bne.n	8007db2 <_dtoa_r+0x722>
 8007d42:	f7f8 faab 	bl	800029c <__adddf3>
 8007d46:	4642      	mov	r2, r8
 8007d48:	464b      	mov	r3, r9
 8007d4a:	4606      	mov	r6, r0
 8007d4c:	460f      	mov	r7, r1
 8007d4e:	f7f8 feeb 	bl	8000b28 <__aeabi_dcmpgt>
 8007d52:	b9c8      	cbnz	r0, 8007d88 <_dtoa_r+0x6f8>
 8007d54:	4642      	mov	r2, r8
 8007d56:	464b      	mov	r3, r9
 8007d58:	4630      	mov	r0, r6
 8007d5a:	4639      	mov	r1, r7
 8007d5c:	f7f8 febc 	bl	8000ad8 <__aeabi_dcmpeq>
 8007d60:	b110      	cbz	r0, 8007d68 <_dtoa_r+0x6d8>
 8007d62:	9b02      	ldr	r3, [sp, #8]
 8007d64:	07d9      	lsls	r1, r3, #31
 8007d66:	d40f      	bmi.n	8007d88 <_dtoa_r+0x6f8>
 8007d68:	4620      	mov	r0, r4
 8007d6a:	4659      	mov	r1, fp
 8007d6c:	f000 fcf6 	bl	800875c <_Bfree>
 8007d70:	2300      	movs	r3, #0
 8007d72:	702b      	strb	r3, [r5, #0]
 8007d74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007d76:	f10a 0001 	add.w	r0, sl, #1
 8007d7a:	6018      	str	r0, [r3, #0]
 8007d7c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	f43f acd8 	beq.w	8007734 <_dtoa_r+0xa4>
 8007d84:	601d      	str	r5, [r3, #0]
 8007d86:	e4d5      	b.n	8007734 <_dtoa_r+0xa4>
 8007d88:	f8cd a01c 	str.w	sl, [sp, #28]
 8007d8c:	462b      	mov	r3, r5
 8007d8e:	461d      	mov	r5, r3
 8007d90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d94:	2a39      	cmp	r2, #57	; 0x39
 8007d96:	d108      	bne.n	8007daa <_dtoa_r+0x71a>
 8007d98:	9a00      	ldr	r2, [sp, #0]
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	d1f7      	bne.n	8007d8e <_dtoa_r+0x6fe>
 8007d9e:	9a07      	ldr	r2, [sp, #28]
 8007da0:	9900      	ldr	r1, [sp, #0]
 8007da2:	3201      	adds	r2, #1
 8007da4:	9207      	str	r2, [sp, #28]
 8007da6:	2230      	movs	r2, #48	; 0x30
 8007da8:	700a      	strb	r2, [r1, #0]
 8007daa:	781a      	ldrb	r2, [r3, #0]
 8007dac:	3201      	adds	r2, #1
 8007dae:	701a      	strb	r2, [r3, #0]
 8007db0:	e78c      	b.n	8007ccc <_dtoa_r+0x63c>
 8007db2:	4b7f      	ldr	r3, [pc, #508]	; (8007fb0 <_dtoa_r+0x920>)
 8007db4:	2200      	movs	r2, #0
 8007db6:	f7f8 fc27 	bl	8000608 <__aeabi_dmul>
 8007dba:	2200      	movs	r2, #0
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	4606      	mov	r6, r0
 8007dc0:	460f      	mov	r7, r1
 8007dc2:	f7f8 fe89 	bl	8000ad8 <__aeabi_dcmpeq>
 8007dc6:	2800      	cmp	r0, #0
 8007dc8:	d09b      	beq.n	8007d02 <_dtoa_r+0x672>
 8007dca:	e7cd      	b.n	8007d68 <_dtoa_r+0x6d8>
 8007dcc:	9a08      	ldr	r2, [sp, #32]
 8007dce:	2a00      	cmp	r2, #0
 8007dd0:	f000 80c4 	beq.w	8007f5c <_dtoa_r+0x8cc>
 8007dd4:	9a05      	ldr	r2, [sp, #20]
 8007dd6:	2a01      	cmp	r2, #1
 8007dd8:	f300 80a8 	bgt.w	8007f2c <_dtoa_r+0x89c>
 8007ddc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007dde:	2a00      	cmp	r2, #0
 8007de0:	f000 80a0 	beq.w	8007f24 <_dtoa_r+0x894>
 8007de4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007de8:	9e06      	ldr	r6, [sp, #24]
 8007dea:	4645      	mov	r5, r8
 8007dec:	9a04      	ldr	r2, [sp, #16]
 8007dee:	2101      	movs	r1, #1
 8007df0:	441a      	add	r2, r3
 8007df2:	4620      	mov	r0, r4
 8007df4:	4498      	add	r8, r3
 8007df6:	9204      	str	r2, [sp, #16]
 8007df8:	f000 fd6c 	bl	80088d4 <__i2b>
 8007dfc:	4607      	mov	r7, r0
 8007dfe:	2d00      	cmp	r5, #0
 8007e00:	dd0b      	ble.n	8007e1a <_dtoa_r+0x78a>
 8007e02:	9b04      	ldr	r3, [sp, #16]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	dd08      	ble.n	8007e1a <_dtoa_r+0x78a>
 8007e08:	42ab      	cmp	r3, r5
 8007e0a:	9a04      	ldr	r2, [sp, #16]
 8007e0c:	bfa8      	it	ge
 8007e0e:	462b      	movge	r3, r5
 8007e10:	eba8 0803 	sub.w	r8, r8, r3
 8007e14:	1aed      	subs	r5, r5, r3
 8007e16:	1ad3      	subs	r3, r2, r3
 8007e18:	9304      	str	r3, [sp, #16]
 8007e1a:	9b06      	ldr	r3, [sp, #24]
 8007e1c:	b1fb      	cbz	r3, 8007e5e <_dtoa_r+0x7ce>
 8007e1e:	9b08      	ldr	r3, [sp, #32]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	f000 809f 	beq.w	8007f64 <_dtoa_r+0x8d4>
 8007e26:	2e00      	cmp	r6, #0
 8007e28:	dd11      	ble.n	8007e4e <_dtoa_r+0x7be>
 8007e2a:	4639      	mov	r1, r7
 8007e2c:	4632      	mov	r2, r6
 8007e2e:	4620      	mov	r0, r4
 8007e30:	f000 fe0c 	bl	8008a4c <__pow5mult>
 8007e34:	465a      	mov	r2, fp
 8007e36:	4601      	mov	r1, r0
 8007e38:	4607      	mov	r7, r0
 8007e3a:	4620      	mov	r0, r4
 8007e3c:	f000 fd60 	bl	8008900 <__multiply>
 8007e40:	4659      	mov	r1, fp
 8007e42:	9007      	str	r0, [sp, #28]
 8007e44:	4620      	mov	r0, r4
 8007e46:	f000 fc89 	bl	800875c <_Bfree>
 8007e4a:	9b07      	ldr	r3, [sp, #28]
 8007e4c:	469b      	mov	fp, r3
 8007e4e:	9b06      	ldr	r3, [sp, #24]
 8007e50:	1b9a      	subs	r2, r3, r6
 8007e52:	d004      	beq.n	8007e5e <_dtoa_r+0x7ce>
 8007e54:	4659      	mov	r1, fp
 8007e56:	4620      	mov	r0, r4
 8007e58:	f000 fdf8 	bl	8008a4c <__pow5mult>
 8007e5c:	4683      	mov	fp, r0
 8007e5e:	2101      	movs	r1, #1
 8007e60:	4620      	mov	r0, r4
 8007e62:	f000 fd37 	bl	80088d4 <__i2b>
 8007e66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	4606      	mov	r6, r0
 8007e6c:	dd7c      	ble.n	8007f68 <_dtoa_r+0x8d8>
 8007e6e:	461a      	mov	r2, r3
 8007e70:	4601      	mov	r1, r0
 8007e72:	4620      	mov	r0, r4
 8007e74:	f000 fdea 	bl	8008a4c <__pow5mult>
 8007e78:	9b05      	ldr	r3, [sp, #20]
 8007e7a:	2b01      	cmp	r3, #1
 8007e7c:	4606      	mov	r6, r0
 8007e7e:	dd76      	ble.n	8007f6e <_dtoa_r+0x8de>
 8007e80:	2300      	movs	r3, #0
 8007e82:	9306      	str	r3, [sp, #24]
 8007e84:	6933      	ldr	r3, [r6, #16]
 8007e86:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007e8a:	6918      	ldr	r0, [r3, #16]
 8007e8c:	f000 fcd2 	bl	8008834 <__hi0bits>
 8007e90:	f1c0 0020 	rsb	r0, r0, #32
 8007e94:	9b04      	ldr	r3, [sp, #16]
 8007e96:	4418      	add	r0, r3
 8007e98:	f010 001f 	ands.w	r0, r0, #31
 8007e9c:	f000 8086 	beq.w	8007fac <_dtoa_r+0x91c>
 8007ea0:	f1c0 0320 	rsb	r3, r0, #32
 8007ea4:	2b04      	cmp	r3, #4
 8007ea6:	dd7f      	ble.n	8007fa8 <_dtoa_r+0x918>
 8007ea8:	f1c0 001c 	rsb	r0, r0, #28
 8007eac:	9b04      	ldr	r3, [sp, #16]
 8007eae:	4403      	add	r3, r0
 8007eb0:	4480      	add	r8, r0
 8007eb2:	4405      	add	r5, r0
 8007eb4:	9304      	str	r3, [sp, #16]
 8007eb6:	f1b8 0f00 	cmp.w	r8, #0
 8007eba:	dd05      	ble.n	8007ec8 <_dtoa_r+0x838>
 8007ebc:	4659      	mov	r1, fp
 8007ebe:	4642      	mov	r2, r8
 8007ec0:	4620      	mov	r0, r4
 8007ec2:	f000 fe1d 	bl	8008b00 <__lshift>
 8007ec6:	4683      	mov	fp, r0
 8007ec8:	9b04      	ldr	r3, [sp, #16]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	dd05      	ble.n	8007eda <_dtoa_r+0x84a>
 8007ece:	4631      	mov	r1, r6
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	4620      	mov	r0, r4
 8007ed4:	f000 fe14 	bl	8008b00 <__lshift>
 8007ed8:	4606      	mov	r6, r0
 8007eda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d069      	beq.n	8007fb4 <_dtoa_r+0x924>
 8007ee0:	4631      	mov	r1, r6
 8007ee2:	4658      	mov	r0, fp
 8007ee4:	f000 fe78 	bl	8008bd8 <__mcmp>
 8007ee8:	2800      	cmp	r0, #0
 8007eea:	da63      	bge.n	8007fb4 <_dtoa_r+0x924>
 8007eec:	2300      	movs	r3, #0
 8007eee:	4659      	mov	r1, fp
 8007ef0:	220a      	movs	r2, #10
 8007ef2:	4620      	mov	r0, r4
 8007ef4:	f000 fc54 	bl	80087a0 <__multadd>
 8007ef8:	9b08      	ldr	r3, [sp, #32]
 8007efa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007efe:	4683      	mov	fp, r0
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	f000 818f 	beq.w	8008224 <_dtoa_r+0xb94>
 8007f06:	4639      	mov	r1, r7
 8007f08:	2300      	movs	r3, #0
 8007f0a:	220a      	movs	r2, #10
 8007f0c:	4620      	mov	r0, r4
 8007f0e:	f000 fc47 	bl	80087a0 <__multadd>
 8007f12:	f1b9 0f00 	cmp.w	r9, #0
 8007f16:	4607      	mov	r7, r0
 8007f18:	f300 808e 	bgt.w	8008038 <_dtoa_r+0x9a8>
 8007f1c:	9b05      	ldr	r3, [sp, #20]
 8007f1e:	2b02      	cmp	r3, #2
 8007f20:	dc50      	bgt.n	8007fc4 <_dtoa_r+0x934>
 8007f22:	e089      	b.n	8008038 <_dtoa_r+0x9a8>
 8007f24:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007f26:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007f2a:	e75d      	b.n	8007de8 <_dtoa_r+0x758>
 8007f2c:	9b01      	ldr	r3, [sp, #4]
 8007f2e:	1e5e      	subs	r6, r3, #1
 8007f30:	9b06      	ldr	r3, [sp, #24]
 8007f32:	42b3      	cmp	r3, r6
 8007f34:	bfbf      	itttt	lt
 8007f36:	9b06      	ldrlt	r3, [sp, #24]
 8007f38:	9606      	strlt	r6, [sp, #24]
 8007f3a:	1af2      	sublt	r2, r6, r3
 8007f3c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8007f3e:	bfb6      	itet	lt
 8007f40:	189b      	addlt	r3, r3, r2
 8007f42:	1b9e      	subge	r6, r3, r6
 8007f44:	930d      	strlt	r3, [sp, #52]	; 0x34
 8007f46:	9b01      	ldr	r3, [sp, #4]
 8007f48:	bfb8      	it	lt
 8007f4a:	2600      	movlt	r6, #0
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	bfb5      	itete	lt
 8007f50:	eba8 0503 	sublt.w	r5, r8, r3
 8007f54:	9b01      	ldrge	r3, [sp, #4]
 8007f56:	2300      	movlt	r3, #0
 8007f58:	4645      	movge	r5, r8
 8007f5a:	e747      	b.n	8007dec <_dtoa_r+0x75c>
 8007f5c:	9e06      	ldr	r6, [sp, #24]
 8007f5e:	9f08      	ldr	r7, [sp, #32]
 8007f60:	4645      	mov	r5, r8
 8007f62:	e74c      	b.n	8007dfe <_dtoa_r+0x76e>
 8007f64:	9a06      	ldr	r2, [sp, #24]
 8007f66:	e775      	b.n	8007e54 <_dtoa_r+0x7c4>
 8007f68:	9b05      	ldr	r3, [sp, #20]
 8007f6a:	2b01      	cmp	r3, #1
 8007f6c:	dc18      	bgt.n	8007fa0 <_dtoa_r+0x910>
 8007f6e:	9b02      	ldr	r3, [sp, #8]
 8007f70:	b9b3      	cbnz	r3, 8007fa0 <_dtoa_r+0x910>
 8007f72:	9b03      	ldr	r3, [sp, #12]
 8007f74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f78:	b9a3      	cbnz	r3, 8007fa4 <_dtoa_r+0x914>
 8007f7a:	9b03      	ldr	r3, [sp, #12]
 8007f7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007f80:	0d1b      	lsrs	r3, r3, #20
 8007f82:	051b      	lsls	r3, r3, #20
 8007f84:	b12b      	cbz	r3, 8007f92 <_dtoa_r+0x902>
 8007f86:	9b04      	ldr	r3, [sp, #16]
 8007f88:	3301      	adds	r3, #1
 8007f8a:	9304      	str	r3, [sp, #16]
 8007f8c:	f108 0801 	add.w	r8, r8, #1
 8007f90:	2301      	movs	r3, #1
 8007f92:	9306      	str	r3, [sp, #24]
 8007f94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	f47f af74 	bne.w	8007e84 <_dtoa_r+0x7f4>
 8007f9c:	2001      	movs	r0, #1
 8007f9e:	e779      	b.n	8007e94 <_dtoa_r+0x804>
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	e7f6      	b.n	8007f92 <_dtoa_r+0x902>
 8007fa4:	9b02      	ldr	r3, [sp, #8]
 8007fa6:	e7f4      	b.n	8007f92 <_dtoa_r+0x902>
 8007fa8:	d085      	beq.n	8007eb6 <_dtoa_r+0x826>
 8007faa:	4618      	mov	r0, r3
 8007fac:	301c      	adds	r0, #28
 8007fae:	e77d      	b.n	8007eac <_dtoa_r+0x81c>
 8007fb0:	40240000 	.word	0x40240000
 8007fb4:	9b01      	ldr	r3, [sp, #4]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	dc38      	bgt.n	800802c <_dtoa_r+0x99c>
 8007fba:	9b05      	ldr	r3, [sp, #20]
 8007fbc:	2b02      	cmp	r3, #2
 8007fbe:	dd35      	ble.n	800802c <_dtoa_r+0x99c>
 8007fc0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007fc4:	f1b9 0f00 	cmp.w	r9, #0
 8007fc8:	d10d      	bne.n	8007fe6 <_dtoa_r+0x956>
 8007fca:	4631      	mov	r1, r6
 8007fcc:	464b      	mov	r3, r9
 8007fce:	2205      	movs	r2, #5
 8007fd0:	4620      	mov	r0, r4
 8007fd2:	f000 fbe5 	bl	80087a0 <__multadd>
 8007fd6:	4601      	mov	r1, r0
 8007fd8:	4606      	mov	r6, r0
 8007fda:	4658      	mov	r0, fp
 8007fdc:	f000 fdfc 	bl	8008bd8 <__mcmp>
 8007fe0:	2800      	cmp	r0, #0
 8007fe2:	f73f adbd 	bgt.w	8007b60 <_dtoa_r+0x4d0>
 8007fe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fe8:	9d00      	ldr	r5, [sp, #0]
 8007fea:	ea6f 0a03 	mvn.w	sl, r3
 8007fee:	f04f 0800 	mov.w	r8, #0
 8007ff2:	4631      	mov	r1, r6
 8007ff4:	4620      	mov	r0, r4
 8007ff6:	f000 fbb1 	bl	800875c <_Bfree>
 8007ffa:	2f00      	cmp	r7, #0
 8007ffc:	f43f aeb4 	beq.w	8007d68 <_dtoa_r+0x6d8>
 8008000:	f1b8 0f00 	cmp.w	r8, #0
 8008004:	d005      	beq.n	8008012 <_dtoa_r+0x982>
 8008006:	45b8      	cmp	r8, r7
 8008008:	d003      	beq.n	8008012 <_dtoa_r+0x982>
 800800a:	4641      	mov	r1, r8
 800800c:	4620      	mov	r0, r4
 800800e:	f000 fba5 	bl	800875c <_Bfree>
 8008012:	4639      	mov	r1, r7
 8008014:	4620      	mov	r0, r4
 8008016:	f000 fba1 	bl	800875c <_Bfree>
 800801a:	e6a5      	b.n	8007d68 <_dtoa_r+0x6d8>
 800801c:	2600      	movs	r6, #0
 800801e:	4637      	mov	r7, r6
 8008020:	e7e1      	b.n	8007fe6 <_dtoa_r+0x956>
 8008022:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008024:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008028:	4637      	mov	r7, r6
 800802a:	e599      	b.n	8007b60 <_dtoa_r+0x4d0>
 800802c:	9b08      	ldr	r3, [sp, #32]
 800802e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008032:	2b00      	cmp	r3, #0
 8008034:	f000 80fd 	beq.w	8008232 <_dtoa_r+0xba2>
 8008038:	2d00      	cmp	r5, #0
 800803a:	dd05      	ble.n	8008048 <_dtoa_r+0x9b8>
 800803c:	4639      	mov	r1, r7
 800803e:	462a      	mov	r2, r5
 8008040:	4620      	mov	r0, r4
 8008042:	f000 fd5d 	bl	8008b00 <__lshift>
 8008046:	4607      	mov	r7, r0
 8008048:	9b06      	ldr	r3, [sp, #24]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d05c      	beq.n	8008108 <_dtoa_r+0xa78>
 800804e:	6879      	ldr	r1, [r7, #4]
 8008050:	4620      	mov	r0, r4
 8008052:	f000 fb43 	bl	80086dc <_Balloc>
 8008056:	4605      	mov	r5, r0
 8008058:	b928      	cbnz	r0, 8008066 <_dtoa_r+0x9d6>
 800805a:	4b80      	ldr	r3, [pc, #512]	; (800825c <_dtoa_r+0xbcc>)
 800805c:	4602      	mov	r2, r0
 800805e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008062:	f7ff bb2e 	b.w	80076c2 <_dtoa_r+0x32>
 8008066:	693a      	ldr	r2, [r7, #16]
 8008068:	3202      	adds	r2, #2
 800806a:	0092      	lsls	r2, r2, #2
 800806c:	f107 010c 	add.w	r1, r7, #12
 8008070:	300c      	adds	r0, #12
 8008072:	f000 fb25 	bl	80086c0 <memcpy>
 8008076:	2201      	movs	r2, #1
 8008078:	4629      	mov	r1, r5
 800807a:	4620      	mov	r0, r4
 800807c:	f000 fd40 	bl	8008b00 <__lshift>
 8008080:	9b00      	ldr	r3, [sp, #0]
 8008082:	3301      	adds	r3, #1
 8008084:	9301      	str	r3, [sp, #4]
 8008086:	9b00      	ldr	r3, [sp, #0]
 8008088:	444b      	add	r3, r9
 800808a:	9307      	str	r3, [sp, #28]
 800808c:	9b02      	ldr	r3, [sp, #8]
 800808e:	f003 0301 	and.w	r3, r3, #1
 8008092:	46b8      	mov	r8, r7
 8008094:	9306      	str	r3, [sp, #24]
 8008096:	4607      	mov	r7, r0
 8008098:	9b01      	ldr	r3, [sp, #4]
 800809a:	4631      	mov	r1, r6
 800809c:	3b01      	subs	r3, #1
 800809e:	4658      	mov	r0, fp
 80080a0:	9302      	str	r3, [sp, #8]
 80080a2:	f7ff fa67 	bl	8007574 <quorem>
 80080a6:	4603      	mov	r3, r0
 80080a8:	3330      	adds	r3, #48	; 0x30
 80080aa:	9004      	str	r0, [sp, #16]
 80080ac:	4641      	mov	r1, r8
 80080ae:	4658      	mov	r0, fp
 80080b0:	9308      	str	r3, [sp, #32]
 80080b2:	f000 fd91 	bl	8008bd8 <__mcmp>
 80080b6:	463a      	mov	r2, r7
 80080b8:	4681      	mov	r9, r0
 80080ba:	4631      	mov	r1, r6
 80080bc:	4620      	mov	r0, r4
 80080be:	f000 fda7 	bl	8008c10 <__mdiff>
 80080c2:	68c2      	ldr	r2, [r0, #12]
 80080c4:	9b08      	ldr	r3, [sp, #32]
 80080c6:	4605      	mov	r5, r0
 80080c8:	bb02      	cbnz	r2, 800810c <_dtoa_r+0xa7c>
 80080ca:	4601      	mov	r1, r0
 80080cc:	4658      	mov	r0, fp
 80080ce:	f000 fd83 	bl	8008bd8 <__mcmp>
 80080d2:	9b08      	ldr	r3, [sp, #32]
 80080d4:	4602      	mov	r2, r0
 80080d6:	4629      	mov	r1, r5
 80080d8:	4620      	mov	r0, r4
 80080da:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80080de:	f000 fb3d 	bl	800875c <_Bfree>
 80080e2:	9b05      	ldr	r3, [sp, #20]
 80080e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080e6:	9d01      	ldr	r5, [sp, #4]
 80080e8:	ea43 0102 	orr.w	r1, r3, r2
 80080ec:	9b06      	ldr	r3, [sp, #24]
 80080ee:	430b      	orrs	r3, r1
 80080f0:	9b08      	ldr	r3, [sp, #32]
 80080f2:	d10d      	bne.n	8008110 <_dtoa_r+0xa80>
 80080f4:	2b39      	cmp	r3, #57	; 0x39
 80080f6:	d029      	beq.n	800814c <_dtoa_r+0xabc>
 80080f8:	f1b9 0f00 	cmp.w	r9, #0
 80080fc:	dd01      	ble.n	8008102 <_dtoa_r+0xa72>
 80080fe:	9b04      	ldr	r3, [sp, #16]
 8008100:	3331      	adds	r3, #49	; 0x31
 8008102:	9a02      	ldr	r2, [sp, #8]
 8008104:	7013      	strb	r3, [r2, #0]
 8008106:	e774      	b.n	8007ff2 <_dtoa_r+0x962>
 8008108:	4638      	mov	r0, r7
 800810a:	e7b9      	b.n	8008080 <_dtoa_r+0x9f0>
 800810c:	2201      	movs	r2, #1
 800810e:	e7e2      	b.n	80080d6 <_dtoa_r+0xa46>
 8008110:	f1b9 0f00 	cmp.w	r9, #0
 8008114:	db06      	blt.n	8008124 <_dtoa_r+0xa94>
 8008116:	9905      	ldr	r1, [sp, #20]
 8008118:	ea41 0909 	orr.w	r9, r1, r9
 800811c:	9906      	ldr	r1, [sp, #24]
 800811e:	ea59 0101 	orrs.w	r1, r9, r1
 8008122:	d120      	bne.n	8008166 <_dtoa_r+0xad6>
 8008124:	2a00      	cmp	r2, #0
 8008126:	ddec      	ble.n	8008102 <_dtoa_r+0xa72>
 8008128:	4659      	mov	r1, fp
 800812a:	2201      	movs	r2, #1
 800812c:	4620      	mov	r0, r4
 800812e:	9301      	str	r3, [sp, #4]
 8008130:	f000 fce6 	bl	8008b00 <__lshift>
 8008134:	4631      	mov	r1, r6
 8008136:	4683      	mov	fp, r0
 8008138:	f000 fd4e 	bl	8008bd8 <__mcmp>
 800813c:	2800      	cmp	r0, #0
 800813e:	9b01      	ldr	r3, [sp, #4]
 8008140:	dc02      	bgt.n	8008148 <_dtoa_r+0xab8>
 8008142:	d1de      	bne.n	8008102 <_dtoa_r+0xa72>
 8008144:	07da      	lsls	r2, r3, #31
 8008146:	d5dc      	bpl.n	8008102 <_dtoa_r+0xa72>
 8008148:	2b39      	cmp	r3, #57	; 0x39
 800814a:	d1d8      	bne.n	80080fe <_dtoa_r+0xa6e>
 800814c:	9a02      	ldr	r2, [sp, #8]
 800814e:	2339      	movs	r3, #57	; 0x39
 8008150:	7013      	strb	r3, [r2, #0]
 8008152:	462b      	mov	r3, r5
 8008154:	461d      	mov	r5, r3
 8008156:	3b01      	subs	r3, #1
 8008158:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800815c:	2a39      	cmp	r2, #57	; 0x39
 800815e:	d050      	beq.n	8008202 <_dtoa_r+0xb72>
 8008160:	3201      	adds	r2, #1
 8008162:	701a      	strb	r2, [r3, #0]
 8008164:	e745      	b.n	8007ff2 <_dtoa_r+0x962>
 8008166:	2a00      	cmp	r2, #0
 8008168:	dd03      	ble.n	8008172 <_dtoa_r+0xae2>
 800816a:	2b39      	cmp	r3, #57	; 0x39
 800816c:	d0ee      	beq.n	800814c <_dtoa_r+0xabc>
 800816e:	3301      	adds	r3, #1
 8008170:	e7c7      	b.n	8008102 <_dtoa_r+0xa72>
 8008172:	9a01      	ldr	r2, [sp, #4]
 8008174:	9907      	ldr	r1, [sp, #28]
 8008176:	f802 3c01 	strb.w	r3, [r2, #-1]
 800817a:	428a      	cmp	r2, r1
 800817c:	d02a      	beq.n	80081d4 <_dtoa_r+0xb44>
 800817e:	4659      	mov	r1, fp
 8008180:	2300      	movs	r3, #0
 8008182:	220a      	movs	r2, #10
 8008184:	4620      	mov	r0, r4
 8008186:	f000 fb0b 	bl	80087a0 <__multadd>
 800818a:	45b8      	cmp	r8, r7
 800818c:	4683      	mov	fp, r0
 800818e:	f04f 0300 	mov.w	r3, #0
 8008192:	f04f 020a 	mov.w	r2, #10
 8008196:	4641      	mov	r1, r8
 8008198:	4620      	mov	r0, r4
 800819a:	d107      	bne.n	80081ac <_dtoa_r+0xb1c>
 800819c:	f000 fb00 	bl	80087a0 <__multadd>
 80081a0:	4680      	mov	r8, r0
 80081a2:	4607      	mov	r7, r0
 80081a4:	9b01      	ldr	r3, [sp, #4]
 80081a6:	3301      	adds	r3, #1
 80081a8:	9301      	str	r3, [sp, #4]
 80081aa:	e775      	b.n	8008098 <_dtoa_r+0xa08>
 80081ac:	f000 faf8 	bl	80087a0 <__multadd>
 80081b0:	4639      	mov	r1, r7
 80081b2:	4680      	mov	r8, r0
 80081b4:	2300      	movs	r3, #0
 80081b6:	220a      	movs	r2, #10
 80081b8:	4620      	mov	r0, r4
 80081ba:	f000 faf1 	bl	80087a0 <__multadd>
 80081be:	4607      	mov	r7, r0
 80081c0:	e7f0      	b.n	80081a4 <_dtoa_r+0xb14>
 80081c2:	f1b9 0f00 	cmp.w	r9, #0
 80081c6:	9a00      	ldr	r2, [sp, #0]
 80081c8:	bfcc      	ite	gt
 80081ca:	464d      	movgt	r5, r9
 80081cc:	2501      	movle	r5, #1
 80081ce:	4415      	add	r5, r2
 80081d0:	f04f 0800 	mov.w	r8, #0
 80081d4:	4659      	mov	r1, fp
 80081d6:	2201      	movs	r2, #1
 80081d8:	4620      	mov	r0, r4
 80081da:	9301      	str	r3, [sp, #4]
 80081dc:	f000 fc90 	bl	8008b00 <__lshift>
 80081e0:	4631      	mov	r1, r6
 80081e2:	4683      	mov	fp, r0
 80081e4:	f000 fcf8 	bl	8008bd8 <__mcmp>
 80081e8:	2800      	cmp	r0, #0
 80081ea:	dcb2      	bgt.n	8008152 <_dtoa_r+0xac2>
 80081ec:	d102      	bne.n	80081f4 <_dtoa_r+0xb64>
 80081ee:	9b01      	ldr	r3, [sp, #4]
 80081f0:	07db      	lsls	r3, r3, #31
 80081f2:	d4ae      	bmi.n	8008152 <_dtoa_r+0xac2>
 80081f4:	462b      	mov	r3, r5
 80081f6:	461d      	mov	r5, r3
 80081f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80081fc:	2a30      	cmp	r2, #48	; 0x30
 80081fe:	d0fa      	beq.n	80081f6 <_dtoa_r+0xb66>
 8008200:	e6f7      	b.n	8007ff2 <_dtoa_r+0x962>
 8008202:	9a00      	ldr	r2, [sp, #0]
 8008204:	429a      	cmp	r2, r3
 8008206:	d1a5      	bne.n	8008154 <_dtoa_r+0xac4>
 8008208:	f10a 0a01 	add.w	sl, sl, #1
 800820c:	2331      	movs	r3, #49	; 0x31
 800820e:	e779      	b.n	8008104 <_dtoa_r+0xa74>
 8008210:	4b13      	ldr	r3, [pc, #76]	; (8008260 <_dtoa_r+0xbd0>)
 8008212:	f7ff baaf 	b.w	8007774 <_dtoa_r+0xe4>
 8008216:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008218:	2b00      	cmp	r3, #0
 800821a:	f47f aa86 	bne.w	800772a <_dtoa_r+0x9a>
 800821e:	4b11      	ldr	r3, [pc, #68]	; (8008264 <_dtoa_r+0xbd4>)
 8008220:	f7ff baa8 	b.w	8007774 <_dtoa_r+0xe4>
 8008224:	f1b9 0f00 	cmp.w	r9, #0
 8008228:	dc03      	bgt.n	8008232 <_dtoa_r+0xba2>
 800822a:	9b05      	ldr	r3, [sp, #20]
 800822c:	2b02      	cmp	r3, #2
 800822e:	f73f aec9 	bgt.w	8007fc4 <_dtoa_r+0x934>
 8008232:	9d00      	ldr	r5, [sp, #0]
 8008234:	4631      	mov	r1, r6
 8008236:	4658      	mov	r0, fp
 8008238:	f7ff f99c 	bl	8007574 <quorem>
 800823c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008240:	f805 3b01 	strb.w	r3, [r5], #1
 8008244:	9a00      	ldr	r2, [sp, #0]
 8008246:	1aaa      	subs	r2, r5, r2
 8008248:	4591      	cmp	r9, r2
 800824a:	ddba      	ble.n	80081c2 <_dtoa_r+0xb32>
 800824c:	4659      	mov	r1, fp
 800824e:	2300      	movs	r3, #0
 8008250:	220a      	movs	r2, #10
 8008252:	4620      	mov	r0, r4
 8008254:	f000 faa4 	bl	80087a0 <__multadd>
 8008258:	4683      	mov	fp, r0
 800825a:	e7eb      	b.n	8008234 <_dtoa_r+0xba4>
 800825c:	0800a39f 	.word	0x0800a39f
 8008260:	0800a2f8 	.word	0x0800a2f8
 8008264:	0800a31c 	.word	0x0800a31c

08008268 <__sflush_r>:
 8008268:	898a      	ldrh	r2, [r1, #12]
 800826a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800826e:	4605      	mov	r5, r0
 8008270:	0710      	lsls	r0, r2, #28
 8008272:	460c      	mov	r4, r1
 8008274:	d458      	bmi.n	8008328 <__sflush_r+0xc0>
 8008276:	684b      	ldr	r3, [r1, #4]
 8008278:	2b00      	cmp	r3, #0
 800827a:	dc05      	bgt.n	8008288 <__sflush_r+0x20>
 800827c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800827e:	2b00      	cmp	r3, #0
 8008280:	dc02      	bgt.n	8008288 <__sflush_r+0x20>
 8008282:	2000      	movs	r0, #0
 8008284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008288:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800828a:	2e00      	cmp	r6, #0
 800828c:	d0f9      	beq.n	8008282 <__sflush_r+0x1a>
 800828e:	2300      	movs	r3, #0
 8008290:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008294:	682f      	ldr	r7, [r5, #0]
 8008296:	602b      	str	r3, [r5, #0]
 8008298:	d032      	beq.n	8008300 <__sflush_r+0x98>
 800829a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800829c:	89a3      	ldrh	r3, [r4, #12]
 800829e:	075a      	lsls	r2, r3, #29
 80082a0:	d505      	bpl.n	80082ae <__sflush_r+0x46>
 80082a2:	6863      	ldr	r3, [r4, #4]
 80082a4:	1ac0      	subs	r0, r0, r3
 80082a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80082a8:	b10b      	cbz	r3, 80082ae <__sflush_r+0x46>
 80082aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80082ac:	1ac0      	subs	r0, r0, r3
 80082ae:	2300      	movs	r3, #0
 80082b0:	4602      	mov	r2, r0
 80082b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80082b4:	6a21      	ldr	r1, [r4, #32]
 80082b6:	4628      	mov	r0, r5
 80082b8:	47b0      	blx	r6
 80082ba:	1c43      	adds	r3, r0, #1
 80082bc:	89a3      	ldrh	r3, [r4, #12]
 80082be:	d106      	bne.n	80082ce <__sflush_r+0x66>
 80082c0:	6829      	ldr	r1, [r5, #0]
 80082c2:	291d      	cmp	r1, #29
 80082c4:	d82c      	bhi.n	8008320 <__sflush_r+0xb8>
 80082c6:	4a2a      	ldr	r2, [pc, #168]	; (8008370 <__sflush_r+0x108>)
 80082c8:	40ca      	lsrs	r2, r1
 80082ca:	07d6      	lsls	r6, r2, #31
 80082cc:	d528      	bpl.n	8008320 <__sflush_r+0xb8>
 80082ce:	2200      	movs	r2, #0
 80082d0:	6062      	str	r2, [r4, #4]
 80082d2:	04d9      	lsls	r1, r3, #19
 80082d4:	6922      	ldr	r2, [r4, #16]
 80082d6:	6022      	str	r2, [r4, #0]
 80082d8:	d504      	bpl.n	80082e4 <__sflush_r+0x7c>
 80082da:	1c42      	adds	r2, r0, #1
 80082dc:	d101      	bne.n	80082e2 <__sflush_r+0x7a>
 80082de:	682b      	ldr	r3, [r5, #0]
 80082e0:	b903      	cbnz	r3, 80082e4 <__sflush_r+0x7c>
 80082e2:	6560      	str	r0, [r4, #84]	; 0x54
 80082e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80082e6:	602f      	str	r7, [r5, #0]
 80082e8:	2900      	cmp	r1, #0
 80082ea:	d0ca      	beq.n	8008282 <__sflush_r+0x1a>
 80082ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80082f0:	4299      	cmp	r1, r3
 80082f2:	d002      	beq.n	80082fa <__sflush_r+0x92>
 80082f4:	4628      	mov	r0, r5
 80082f6:	f000 fd7f 	bl	8008df8 <_free_r>
 80082fa:	2000      	movs	r0, #0
 80082fc:	6360      	str	r0, [r4, #52]	; 0x34
 80082fe:	e7c1      	b.n	8008284 <__sflush_r+0x1c>
 8008300:	6a21      	ldr	r1, [r4, #32]
 8008302:	2301      	movs	r3, #1
 8008304:	4628      	mov	r0, r5
 8008306:	47b0      	blx	r6
 8008308:	1c41      	adds	r1, r0, #1
 800830a:	d1c7      	bne.n	800829c <__sflush_r+0x34>
 800830c:	682b      	ldr	r3, [r5, #0]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d0c4      	beq.n	800829c <__sflush_r+0x34>
 8008312:	2b1d      	cmp	r3, #29
 8008314:	d001      	beq.n	800831a <__sflush_r+0xb2>
 8008316:	2b16      	cmp	r3, #22
 8008318:	d101      	bne.n	800831e <__sflush_r+0xb6>
 800831a:	602f      	str	r7, [r5, #0]
 800831c:	e7b1      	b.n	8008282 <__sflush_r+0x1a>
 800831e:	89a3      	ldrh	r3, [r4, #12]
 8008320:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008324:	81a3      	strh	r3, [r4, #12]
 8008326:	e7ad      	b.n	8008284 <__sflush_r+0x1c>
 8008328:	690f      	ldr	r7, [r1, #16]
 800832a:	2f00      	cmp	r7, #0
 800832c:	d0a9      	beq.n	8008282 <__sflush_r+0x1a>
 800832e:	0793      	lsls	r3, r2, #30
 8008330:	680e      	ldr	r6, [r1, #0]
 8008332:	bf08      	it	eq
 8008334:	694b      	ldreq	r3, [r1, #20]
 8008336:	600f      	str	r7, [r1, #0]
 8008338:	bf18      	it	ne
 800833a:	2300      	movne	r3, #0
 800833c:	eba6 0807 	sub.w	r8, r6, r7
 8008340:	608b      	str	r3, [r1, #8]
 8008342:	f1b8 0f00 	cmp.w	r8, #0
 8008346:	dd9c      	ble.n	8008282 <__sflush_r+0x1a>
 8008348:	6a21      	ldr	r1, [r4, #32]
 800834a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800834c:	4643      	mov	r3, r8
 800834e:	463a      	mov	r2, r7
 8008350:	4628      	mov	r0, r5
 8008352:	47b0      	blx	r6
 8008354:	2800      	cmp	r0, #0
 8008356:	dc06      	bgt.n	8008366 <__sflush_r+0xfe>
 8008358:	89a3      	ldrh	r3, [r4, #12]
 800835a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800835e:	81a3      	strh	r3, [r4, #12]
 8008360:	f04f 30ff 	mov.w	r0, #4294967295
 8008364:	e78e      	b.n	8008284 <__sflush_r+0x1c>
 8008366:	4407      	add	r7, r0
 8008368:	eba8 0800 	sub.w	r8, r8, r0
 800836c:	e7e9      	b.n	8008342 <__sflush_r+0xda>
 800836e:	bf00      	nop
 8008370:	20400001 	.word	0x20400001

08008374 <_fflush_r>:
 8008374:	b538      	push	{r3, r4, r5, lr}
 8008376:	690b      	ldr	r3, [r1, #16]
 8008378:	4605      	mov	r5, r0
 800837a:	460c      	mov	r4, r1
 800837c:	b913      	cbnz	r3, 8008384 <_fflush_r+0x10>
 800837e:	2500      	movs	r5, #0
 8008380:	4628      	mov	r0, r5
 8008382:	bd38      	pop	{r3, r4, r5, pc}
 8008384:	b118      	cbz	r0, 800838e <_fflush_r+0x1a>
 8008386:	6983      	ldr	r3, [r0, #24]
 8008388:	b90b      	cbnz	r3, 800838e <_fflush_r+0x1a>
 800838a:	f000 f887 	bl	800849c <__sinit>
 800838e:	4b14      	ldr	r3, [pc, #80]	; (80083e0 <_fflush_r+0x6c>)
 8008390:	429c      	cmp	r4, r3
 8008392:	d11b      	bne.n	80083cc <_fflush_r+0x58>
 8008394:	686c      	ldr	r4, [r5, #4]
 8008396:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d0ef      	beq.n	800837e <_fflush_r+0xa>
 800839e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80083a0:	07d0      	lsls	r0, r2, #31
 80083a2:	d404      	bmi.n	80083ae <_fflush_r+0x3a>
 80083a4:	0599      	lsls	r1, r3, #22
 80083a6:	d402      	bmi.n	80083ae <_fflush_r+0x3a>
 80083a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80083aa:	f000 f91a 	bl	80085e2 <__retarget_lock_acquire_recursive>
 80083ae:	4628      	mov	r0, r5
 80083b0:	4621      	mov	r1, r4
 80083b2:	f7ff ff59 	bl	8008268 <__sflush_r>
 80083b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80083b8:	07da      	lsls	r2, r3, #31
 80083ba:	4605      	mov	r5, r0
 80083bc:	d4e0      	bmi.n	8008380 <_fflush_r+0xc>
 80083be:	89a3      	ldrh	r3, [r4, #12]
 80083c0:	059b      	lsls	r3, r3, #22
 80083c2:	d4dd      	bmi.n	8008380 <_fflush_r+0xc>
 80083c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80083c6:	f000 f90d 	bl	80085e4 <__retarget_lock_release_recursive>
 80083ca:	e7d9      	b.n	8008380 <_fflush_r+0xc>
 80083cc:	4b05      	ldr	r3, [pc, #20]	; (80083e4 <_fflush_r+0x70>)
 80083ce:	429c      	cmp	r4, r3
 80083d0:	d101      	bne.n	80083d6 <_fflush_r+0x62>
 80083d2:	68ac      	ldr	r4, [r5, #8]
 80083d4:	e7df      	b.n	8008396 <_fflush_r+0x22>
 80083d6:	4b04      	ldr	r3, [pc, #16]	; (80083e8 <_fflush_r+0x74>)
 80083d8:	429c      	cmp	r4, r3
 80083da:	bf08      	it	eq
 80083dc:	68ec      	ldreq	r4, [r5, #12]
 80083de:	e7da      	b.n	8008396 <_fflush_r+0x22>
 80083e0:	0800a3d0 	.word	0x0800a3d0
 80083e4:	0800a3f0 	.word	0x0800a3f0
 80083e8:	0800a3b0 	.word	0x0800a3b0

080083ec <std>:
 80083ec:	2300      	movs	r3, #0
 80083ee:	b510      	push	{r4, lr}
 80083f0:	4604      	mov	r4, r0
 80083f2:	e9c0 3300 	strd	r3, r3, [r0]
 80083f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80083fa:	6083      	str	r3, [r0, #8]
 80083fc:	8181      	strh	r1, [r0, #12]
 80083fe:	6643      	str	r3, [r0, #100]	; 0x64
 8008400:	81c2      	strh	r2, [r0, #14]
 8008402:	6183      	str	r3, [r0, #24]
 8008404:	4619      	mov	r1, r3
 8008406:	2208      	movs	r2, #8
 8008408:	305c      	adds	r0, #92	; 0x5c
 800840a:	f7fe faeb 	bl	80069e4 <memset>
 800840e:	4b05      	ldr	r3, [pc, #20]	; (8008424 <std+0x38>)
 8008410:	6263      	str	r3, [r4, #36]	; 0x24
 8008412:	4b05      	ldr	r3, [pc, #20]	; (8008428 <std+0x3c>)
 8008414:	62a3      	str	r3, [r4, #40]	; 0x28
 8008416:	4b05      	ldr	r3, [pc, #20]	; (800842c <std+0x40>)
 8008418:	62e3      	str	r3, [r4, #44]	; 0x2c
 800841a:	4b05      	ldr	r3, [pc, #20]	; (8008430 <std+0x44>)
 800841c:	6224      	str	r4, [r4, #32]
 800841e:	6323      	str	r3, [r4, #48]	; 0x30
 8008420:	bd10      	pop	{r4, pc}
 8008422:	bf00      	nop
 8008424:	08009225 	.word	0x08009225
 8008428:	08009247 	.word	0x08009247
 800842c:	0800927f 	.word	0x0800927f
 8008430:	080092a3 	.word	0x080092a3

08008434 <_cleanup_r>:
 8008434:	4901      	ldr	r1, [pc, #4]	; (800843c <_cleanup_r+0x8>)
 8008436:	f000 b8af 	b.w	8008598 <_fwalk_reent>
 800843a:	bf00      	nop
 800843c:	08008375 	.word	0x08008375

08008440 <__sfmoreglue>:
 8008440:	b570      	push	{r4, r5, r6, lr}
 8008442:	1e4a      	subs	r2, r1, #1
 8008444:	2568      	movs	r5, #104	; 0x68
 8008446:	4355      	muls	r5, r2
 8008448:	460e      	mov	r6, r1
 800844a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800844e:	f000 fd23 	bl	8008e98 <_malloc_r>
 8008452:	4604      	mov	r4, r0
 8008454:	b140      	cbz	r0, 8008468 <__sfmoreglue+0x28>
 8008456:	2100      	movs	r1, #0
 8008458:	e9c0 1600 	strd	r1, r6, [r0]
 800845c:	300c      	adds	r0, #12
 800845e:	60a0      	str	r0, [r4, #8]
 8008460:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008464:	f7fe fabe 	bl	80069e4 <memset>
 8008468:	4620      	mov	r0, r4
 800846a:	bd70      	pop	{r4, r5, r6, pc}

0800846c <__sfp_lock_acquire>:
 800846c:	4801      	ldr	r0, [pc, #4]	; (8008474 <__sfp_lock_acquire+0x8>)
 800846e:	f000 b8b8 	b.w	80085e2 <__retarget_lock_acquire_recursive>
 8008472:	bf00      	nop
 8008474:	2001762c 	.word	0x2001762c

08008478 <__sfp_lock_release>:
 8008478:	4801      	ldr	r0, [pc, #4]	; (8008480 <__sfp_lock_release+0x8>)
 800847a:	f000 b8b3 	b.w	80085e4 <__retarget_lock_release_recursive>
 800847e:	bf00      	nop
 8008480:	2001762c 	.word	0x2001762c

08008484 <__sinit_lock_acquire>:
 8008484:	4801      	ldr	r0, [pc, #4]	; (800848c <__sinit_lock_acquire+0x8>)
 8008486:	f000 b8ac 	b.w	80085e2 <__retarget_lock_acquire_recursive>
 800848a:	bf00      	nop
 800848c:	20017627 	.word	0x20017627

08008490 <__sinit_lock_release>:
 8008490:	4801      	ldr	r0, [pc, #4]	; (8008498 <__sinit_lock_release+0x8>)
 8008492:	f000 b8a7 	b.w	80085e4 <__retarget_lock_release_recursive>
 8008496:	bf00      	nop
 8008498:	20017627 	.word	0x20017627

0800849c <__sinit>:
 800849c:	b510      	push	{r4, lr}
 800849e:	4604      	mov	r4, r0
 80084a0:	f7ff fff0 	bl	8008484 <__sinit_lock_acquire>
 80084a4:	69a3      	ldr	r3, [r4, #24]
 80084a6:	b11b      	cbz	r3, 80084b0 <__sinit+0x14>
 80084a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084ac:	f7ff bff0 	b.w	8008490 <__sinit_lock_release>
 80084b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80084b4:	6523      	str	r3, [r4, #80]	; 0x50
 80084b6:	4b13      	ldr	r3, [pc, #76]	; (8008504 <__sinit+0x68>)
 80084b8:	4a13      	ldr	r2, [pc, #76]	; (8008508 <__sinit+0x6c>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80084be:	42a3      	cmp	r3, r4
 80084c0:	bf04      	itt	eq
 80084c2:	2301      	moveq	r3, #1
 80084c4:	61a3      	streq	r3, [r4, #24]
 80084c6:	4620      	mov	r0, r4
 80084c8:	f000 f820 	bl	800850c <__sfp>
 80084cc:	6060      	str	r0, [r4, #4]
 80084ce:	4620      	mov	r0, r4
 80084d0:	f000 f81c 	bl	800850c <__sfp>
 80084d4:	60a0      	str	r0, [r4, #8]
 80084d6:	4620      	mov	r0, r4
 80084d8:	f000 f818 	bl	800850c <__sfp>
 80084dc:	2200      	movs	r2, #0
 80084de:	60e0      	str	r0, [r4, #12]
 80084e0:	2104      	movs	r1, #4
 80084e2:	6860      	ldr	r0, [r4, #4]
 80084e4:	f7ff ff82 	bl	80083ec <std>
 80084e8:	68a0      	ldr	r0, [r4, #8]
 80084ea:	2201      	movs	r2, #1
 80084ec:	2109      	movs	r1, #9
 80084ee:	f7ff ff7d 	bl	80083ec <std>
 80084f2:	68e0      	ldr	r0, [r4, #12]
 80084f4:	2202      	movs	r2, #2
 80084f6:	2112      	movs	r1, #18
 80084f8:	f7ff ff78 	bl	80083ec <std>
 80084fc:	2301      	movs	r3, #1
 80084fe:	61a3      	str	r3, [r4, #24]
 8008500:	e7d2      	b.n	80084a8 <__sinit+0xc>
 8008502:	bf00      	nop
 8008504:	0800a2e4 	.word	0x0800a2e4
 8008508:	08008435 	.word	0x08008435

0800850c <__sfp>:
 800850c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800850e:	4607      	mov	r7, r0
 8008510:	f7ff ffac 	bl	800846c <__sfp_lock_acquire>
 8008514:	4b1e      	ldr	r3, [pc, #120]	; (8008590 <__sfp+0x84>)
 8008516:	681e      	ldr	r6, [r3, #0]
 8008518:	69b3      	ldr	r3, [r6, #24]
 800851a:	b913      	cbnz	r3, 8008522 <__sfp+0x16>
 800851c:	4630      	mov	r0, r6
 800851e:	f7ff ffbd 	bl	800849c <__sinit>
 8008522:	3648      	adds	r6, #72	; 0x48
 8008524:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008528:	3b01      	subs	r3, #1
 800852a:	d503      	bpl.n	8008534 <__sfp+0x28>
 800852c:	6833      	ldr	r3, [r6, #0]
 800852e:	b30b      	cbz	r3, 8008574 <__sfp+0x68>
 8008530:	6836      	ldr	r6, [r6, #0]
 8008532:	e7f7      	b.n	8008524 <__sfp+0x18>
 8008534:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008538:	b9d5      	cbnz	r5, 8008570 <__sfp+0x64>
 800853a:	4b16      	ldr	r3, [pc, #88]	; (8008594 <__sfp+0x88>)
 800853c:	60e3      	str	r3, [r4, #12]
 800853e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008542:	6665      	str	r5, [r4, #100]	; 0x64
 8008544:	f000 f84c 	bl	80085e0 <__retarget_lock_init_recursive>
 8008548:	f7ff ff96 	bl	8008478 <__sfp_lock_release>
 800854c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008550:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008554:	6025      	str	r5, [r4, #0]
 8008556:	61a5      	str	r5, [r4, #24]
 8008558:	2208      	movs	r2, #8
 800855a:	4629      	mov	r1, r5
 800855c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008560:	f7fe fa40 	bl	80069e4 <memset>
 8008564:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008568:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800856c:	4620      	mov	r0, r4
 800856e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008570:	3468      	adds	r4, #104	; 0x68
 8008572:	e7d9      	b.n	8008528 <__sfp+0x1c>
 8008574:	2104      	movs	r1, #4
 8008576:	4638      	mov	r0, r7
 8008578:	f7ff ff62 	bl	8008440 <__sfmoreglue>
 800857c:	4604      	mov	r4, r0
 800857e:	6030      	str	r0, [r6, #0]
 8008580:	2800      	cmp	r0, #0
 8008582:	d1d5      	bne.n	8008530 <__sfp+0x24>
 8008584:	f7ff ff78 	bl	8008478 <__sfp_lock_release>
 8008588:	230c      	movs	r3, #12
 800858a:	603b      	str	r3, [r7, #0]
 800858c:	e7ee      	b.n	800856c <__sfp+0x60>
 800858e:	bf00      	nop
 8008590:	0800a2e4 	.word	0x0800a2e4
 8008594:	ffff0001 	.word	0xffff0001

08008598 <_fwalk_reent>:
 8008598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800859c:	4606      	mov	r6, r0
 800859e:	4688      	mov	r8, r1
 80085a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80085a4:	2700      	movs	r7, #0
 80085a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80085aa:	f1b9 0901 	subs.w	r9, r9, #1
 80085ae:	d505      	bpl.n	80085bc <_fwalk_reent+0x24>
 80085b0:	6824      	ldr	r4, [r4, #0]
 80085b2:	2c00      	cmp	r4, #0
 80085b4:	d1f7      	bne.n	80085a6 <_fwalk_reent+0xe>
 80085b6:	4638      	mov	r0, r7
 80085b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085bc:	89ab      	ldrh	r3, [r5, #12]
 80085be:	2b01      	cmp	r3, #1
 80085c0:	d907      	bls.n	80085d2 <_fwalk_reent+0x3a>
 80085c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80085c6:	3301      	adds	r3, #1
 80085c8:	d003      	beq.n	80085d2 <_fwalk_reent+0x3a>
 80085ca:	4629      	mov	r1, r5
 80085cc:	4630      	mov	r0, r6
 80085ce:	47c0      	blx	r8
 80085d0:	4307      	orrs	r7, r0
 80085d2:	3568      	adds	r5, #104	; 0x68
 80085d4:	e7e9      	b.n	80085aa <_fwalk_reent+0x12>
	...

080085d8 <_localeconv_r>:
 80085d8:	4800      	ldr	r0, [pc, #0]	; (80085dc <_localeconv_r+0x4>)
 80085da:	4770      	bx	lr
 80085dc:	2000018c 	.word	0x2000018c

080085e0 <__retarget_lock_init_recursive>:
 80085e0:	4770      	bx	lr

080085e2 <__retarget_lock_acquire_recursive>:
 80085e2:	4770      	bx	lr

080085e4 <__retarget_lock_release_recursive>:
 80085e4:	4770      	bx	lr

080085e6 <__swhatbuf_r>:
 80085e6:	b570      	push	{r4, r5, r6, lr}
 80085e8:	460e      	mov	r6, r1
 80085ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085ee:	2900      	cmp	r1, #0
 80085f0:	b096      	sub	sp, #88	; 0x58
 80085f2:	4614      	mov	r4, r2
 80085f4:	461d      	mov	r5, r3
 80085f6:	da07      	bge.n	8008608 <__swhatbuf_r+0x22>
 80085f8:	2300      	movs	r3, #0
 80085fa:	602b      	str	r3, [r5, #0]
 80085fc:	89b3      	ldrh	r3, [r6, #12]
 80085fe:	061a      	lsls	r2, r3, #24
 8008600:	d410      	bmi.n	8008624 <__swhatbuf_r+0x3e>
 8008602:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008606:	e00e      	b.n	8008626 <__swhatbuf_r+0x40>
 8008608:	466a      	mov	r2, sp
 800860a:	f000 fea1 	bl	8009350 <_fstat_r>
 800860e:	2800      	cmp	r0, #0
 8008610:	dbf2      	blt.n	80085f8 <__swhatbuf_r+0x12>
 8008612:	9a01      	ldr	r2, [sp, #4]
 8008614:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008618:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800861c:	425a      	negs	r2, r3
 800861e:	415a      	adcs	r2, r3
 8008620:	602a      	str	r2, [r5, #0]
 8008622:	e7ee      	b.n	8008602 <__swhatbuf_r+0x1c>
 8008624:	2340      	movs	r3, #64	; 0x40
 8008626:	2000      	movs	r0, #0
 8008628:	6023      	str	r3, [r4, #0]
 800862a:	b016      	add	sp, #88	; 0x58
 800862c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008630 <__smakebuf_r>:
 8008630:	898b      	ldrh	r3, [r1, #12]
 8008632:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008634:	079d      	lsls	r5, r3, #30
 8008636:	4606      	mov	r6, r0
 8008638:	460c      	mov	r4, r1
 800863a:	d507      	bpl.n	800864c <__smakebuf_r+0x1c>
 800863c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008640:	6023      	str	r3, [r4, #0]
 8008642:	6123      	str	r3, [r4, #16]
 8008644:	2301      	movs	r3, #1
 8008646:	6163      	str	r3, [r4, #20]
 8008648:	b002      	add	sp, #8
 800864a:	bd70      	pop	{r4, r5, r6, pc}
 800864c:	ab01      	add	r3, sp, #4
 800864e:	466a      	mov	r2, sp
 8008650:	f7ff ffc9 	bl	80085e6 <__swhatbuf_r>
 8008654:	9900      	ldr	r1, [sp, #0]
 8008656:	4605      	mov	r5, r0
 8008658:	4630      	mov	r0, r6
 800865a:	f000 fc1d 	bl	8008e98 <_malloc_r>
 800865e:	b948      	cbnz	r0, 8008674 <__smakebuf_r+0x44>
 8008660:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008664:	059a      	lsls	r2, r3, #22
 8008666:	d4ef      	bmi.n	8008648 <__smakebuf_r+0x18>
 8008668:	f023 0303 	bic.w	r3, r3, #3
 800866c:	f043 0302 	orr.w	r3, r3, #2
 8008670:	81a3      	strh	r3, [r4, #12]
 8008672:	e7e3      	b.n	800863c <__smakebuf_r+0xc>
 8008674:	4b0d      	ldr	r3, [pc, #52]	; (80086ac <__smakebuf_r+0x7c>)
 8008676:	62b3      	str	r3, [r6, #40]	; 0x28
 8008678:	89a3      	ldrh	r3, [r4, #12]
 800867a:	6020      	str	r0, [r4, #0]
 800867c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008680:	81a3      	strh	r3, [r4, #12]
 8008682:	9b00      	ldr	r3, [sp, #0]
 8008684:	6163      	str	r3, [r4, #20]
 8008686:	9b01      	ldr	r3, [sp, #4]
 8008688:	6120      	str	r0, [r4, #16]
 800868a:	b15b      	cbz	r3, 80086a4 <__smakebuf_r+0x74>
 800868c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008690:	4630      	mov	r0, r6
 8008692:	f000 fe6f 	bl	8009374 <_isatty_r>
 8008696:	b128      	cbz	r0, 80086a4 <__smakebuf_r+0x74>
 8008698:	89a3      	ldrh	r3, [r4, #12]
 800869a:	f023 0303 	bic.w	r3, r3, #3
 800869e:	f043 0301 	orr.w	r3, r3, #1
 80086a2:	81a3      	strh	r3, [r4, #12]
 80086a4:	89a0      	ldrh	r0, [r4, #12]
 80086a6:	4305      	orrs	r5, r0
 80086a8:	81a5      	strh	r5, [r4, #12]
 80086aa:	e7cd      	b.n	8008648 <__smakebuf_r+0x18>
 80086ac:	08008435 	.word	0x08008435

080086b0 <malloc>:
 80086b0:	4b02      	ldr	r3, [pc, #8]	; (80086bc <malloc+0xc>)
 80086b2:	4601      	mov	r1, r0
 80086b4:	6818      	ldr	r0, [r3, #0]
 80086b6:	f000 bbef 	b.w	8008e98 <_malloc_r>
 80086ba:	bf00      	nop
 80086bc:	20000038 	.word	0x20000038

080086c0 <memcpy>:
 80086c0:	440a      	add	r2, r1
 80086c2:	4291      	cmp	r1, r2
 80086c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80086c8:	d100      	bne.n	80086cc <memcpy+0xc>
 80086ca:	4770      	bx	lr
 80086cc:	b510      	push	{r4, lr}
 80086ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80086d6:	4291      	cmp	r1, r2
 80086d8:	d1f9      	bne.n	80086ce <memcpy+0xe>
 80086da:	bd10      	pop	{r4, pc}

080086dc <_Balloc>:
 80086dc:	b570      	push	{r4, r5, r6, lr}
 80086de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80086e0:	4604      	mov	r4, r0
 80086e2:	460d      	mov	r5, r1
 80086e4:	b976      	cbnz	r6, 8008704 <_Balloc+0x28>
 80086e6:	2010      	movs	r0, #16
 80086e8:	f7ff ffe2 	bl	80086b0 <malloc>
 80086ec:	4602      	mov	r2, r0
 80086ee:	6260      	str	r0, [r4, #36]	; 0x24
 80086f0:	b920      	cbnz	r0, 80086fc <_Balloc+0x20>
 80086f2:	4b18      	ldr	r3, [pc, #96]	; (8008754 <_Balloc+0x78>)
 80086f4:	4818      	ldr	r0, [pc, #96]	; (8008758 <_Balloc+0x7c>)
 80086f6:	2166      	movs	r1, #102	; 0x66
 80086f8:	f000 fdea 	bl	80092d0 <__assert_func>
 80086fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008700:	6006      	str	r6, [r0, #0]
 8008702:	60c6      	str	r6, [r0, #12]
 8008704:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008706:	68f3      	ldr	r3, [r6, #12]
 8008708:	b183      	cbz	r3, 800872c <_Balloc+0x50>
 800870a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800870c:	68db      	ldr	r3, [r3, #12]
 800870e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008712:	b9b8      	cbnz	r0, 8008744 <_Balloc+0x68>
 8008714:	2101      	movs	r1, #1
 8008716:	fa01 f605 	lsl.w	r6, r1, r5
 800871a:	1d72      	adds	r2, r6, #5
 800871c:	0092      	lsls	r2, r2, #2
 800871e:	4620      	mov	r0, r4
 8008720:	f000 fb5a 	bl	8008dd8 <_calloc_r>
 8008724:	b160      	cbz	r0, 8008740 <_Balloc+0x64>
 8008726:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800872a:	e00e      	b.n	800874a <_Balloc+0x6e>
 800872c:	2221      	movs	r2, #33	; 0x21
 800872e:	2104      	movs	r1, #4
 8008730:	4620      	mov	r0, r4
 8008732:	f000 fb51 	bl	8008dd8 <_calloc_r>
 8008736:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008738:	60f0      	str	r0, [r6, #12]
 800873a:	68db      	ldr	r3, [r3, #12]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d1e4      	bne.n	800870a <_Balloc+0x2e>
 8008740:	2000      	movs	r0, #0
 8008742:	bd70      	pop	{r4, r5, r6, pc}
 8008744:	6802      	ldr	r2, [r0, #0]
 8008746:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800874a:	2300      	movs	r3, #0
 800874c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008750:	e7f7      	b.n	8008742 <_Balloc+0x66>
 8008752:	bf00      	nop
 8008754:	0800a329 	.word	0x0800a329
 8008758:	0800a410 	.word	0x0800a410

0800875c <_Bfree>:
 800875c:	b570      	push	{r4, r5, r6, lr}
 800875e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008760:	4605      	mov	r5, r0
 8008762:	460c      	mov	r4, r1
 8008764:	b976      	cbnz	r6, 8008784 <_Bfree+0x28>
 8008766:	2010      	movs	r0, #16
 8008768:	f7ff ffa2 	bl	80086b0 <malloc>
 800876c:	4602      	mov	r2, r0
 800876e:	6268      	str	r0, [r5, #36]	; 0x24
 8008770:	b920      	cbnz	r0, 800877c <_Bfree+0x20>
 8008772:	4b09      	ldr	r3, [pc, #36]	; (8008798 <_Bfree+0x3c>)
 8008774:	4809      	ldr	r0, [pc, #36]	; (800879c <_Bfree+0x40>)
 8008776:	218a      	movs	r1, #138	; 0x8a
 8008778:	f000 fdaa 	bl	80092d0 <__assert_func>
 800877c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008780:	6006      	str	r6, [r0, #0]
 8008782:	60c6      	str	r6, [r0, #12]
 8008784:	b13c      	cbz	r4, 8008796 <_Bfree+0x3a>
 8008786:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008788:	6862      	ldr	r2, [r4, #4]
 800878a:	68db      	ldr	r3, [r3, #12]
 800878c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008790:	6021      	str	r1, [r4, #0]
 8008792:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008796:	bd70      	pop	{r4, r5, r6, pc}
 8008798:	0800a329 	.word	0x0800a329
 800879c:	0800a410 	.word	0x0800a410

080087a0 <__multadd>:
 80087a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087a4:	690e      	ldr	r6, [r1, #16]
 80087a6:	4607      	mov	r7, r0
 80087a8:	4698      	mov	r8, r3
 80087aa:	460c      	mov	r4, r1
 80087ac:	f101 0014 	add.w	r0, r1, #20
 80087b0:	2300      	movs	r3, #0
 80087b2:	6805      	ldr	r5, [r0, #0]
 80087b4:	b2a9      	uxth	r1, r5
 80087b6:	fb02 8101 	mla	r1, r2, r1, r8
 80087ba:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80087be:	0c2d      	lsrs	r5, r5, #16
 80087c0:	fb02 c505 	mla	r5, r2, r5, ip
 80087c4:	b289      	uxth	r1, r1
 80087c6:	3301      	adds	r3, #1
 80087c8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80087cc:	429e      	cmp	r6, r3
 80087ce:	f840 1b04 	str.w	r1, [r0], #4
 80087d2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80087d6:	dcec      	bgt.n	80087b2 <__multadd+0x12>
 80087d8:	f1b8 0f00 	cmp.w	r8, #0
 80087dc:	d022      	beq.n	8008824 <__multadd+0x84>
 80087de:	68a3      	ldr	r3, [r4, #8]
 80087e0:	42b3      	cmp	r3, r6
 80087e2:	dc19      	bgt.n	8008818 <__multadd+0x78>
 80087e4:	6861      	ldr	r1, [r4, #4]
 80087e6:	4638      	mov	r0, r7
 80087e8:	3101      	adds	r1, #1
 80087ea:	f7ff ff77 	bl	80086dc <_Balloc>
 80087ee:	4605      	mov	r5, r0
 80087f0:	b928      	cbnz	r0, 80087fe <__multadd+0x5e>
 80087f2:	4602      	mov	r2, r0
 80087f4:	4b0d      	ldr	r3, [pc, #52]	; (800882c <__multadd+0x8c>)
 80087f6:	480e      	ldr	r0, [pc, #56]	; (8008830 <__multadd+0x90>)
 80087f8:	21b5      	movs	r1, #181	; 0xb5
 80087fa:	f000 fd69 	bl	80092d0 <__assert_func>
 80087fe:	6922      	ldr	r2, [r4, #16]
 8008800:	3202      	adds	r2, #2
 8008802:	f104 010c 	add.w	r1, r4, #12
 8008806:	0092      	lsls	r2, r2, #2
 8008808:	300c      	adds	r0, #12
 800880a:	f7ff ff59 	bl	80086c0 <memcpy>
 800880e:	4621      	mov	r1, r4
 8008810:	4638      	mov	r0, r7
 8008812:	f7ff ffa3 	bl	800875c <_Bfree>
 8008816:	462c      	mov	r4, r5
 8008818:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800881c:	3601      	adds	r6, #1
 800881e:	f8c3 8014 	str.w	r8, [r3, #20]
 8008822:	6126      	str	r6, [r4, #16]
 8008824:	4620      	mov	r0, r4
 8008826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800882a:	bf00      	nop
 800882c:	0800a39f 	.word	0x0800a39f
 8008830:	0800a410 	.word	0x0800a410

08008834 <__hi0bits>:
 8008834:	0c03      	lsrs	r3, r0, #16
 8008836:	041b      	lsls	r3, r3, #16
 8008838:	b9d3      	cbnz	r3, 8008870 <__hi0bits+0x3c>
 800883a:	0400      	lsls	r0, r0, #16
 800883c:	2310      	movs	r3, #16
 800883e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008842:	bf04      	itt	eq
 8008844:	0200      	lsleq	r0, r0, #8
 8008846:	3308      	addeq	r3, #8
 8008848:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800884c:	bf04      	itt	eq
 800884e:	0100      	lsleq	r0, r0, #4
 8008850:	3304      	addeq	r3, #4
 8008852:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008856:	bf04      	itt	eq
 8008858:	0080      	lsleq	r0, r0, #2
 800885a:	3302      	addeq	r3, #2
 800885c:	2800      	cmp	r0, #0
 800885e:	db05      	blt.n	800886c <__hi0bits+0x38>
 8008860:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008864:	f103 0301 	add.w	r3, r3, #1
 8008868:	bf08      	it	eq
 800886a:	2320      	moveq	r3, #32
 800886c:	4618      	mov	r0, r3
 800886e:	4770      	bx	lr
 8008870:	2300      	movs	r3, #0
 8008872:	e7e4      	b.n	800883e <__hi0bits+0xa>

08008874 <__lo0bits>:
 8008874:	6803      	ldr	r3, [r0, #0]
 8008876:	f013 0207 	ands.w	r2, r3, #7
 800887a:	4601      	mov	r1, r0
 800887c:	d00b      	beq.n	8008896 <__lo0bits+0x22>
 800887e:	07da      	lsls	r2, r3, #31
 8008880:	d424      	bmi.n	80088cc <__lo0bits+0x58>
 8008882:	0798      	lsls	r0, r3, #30
 8008884:	bf49      	itett	mi
 8008886:	085b      	lsrmi	r3, r3, #1
 8008888:	089b      	lsrpl	r3, r3, #2
 800888a:	2001      	movmi	r0, #1
 800888c:	600b      	strmi	r3, [r1, #0]
 800888e:	bf5c      	itt	pl
 8008890:	600b      	strpl	r3, [r1, #0]
 8008892:	2002      	movpl	r0, #2
 8008894:	4770      	bx	lr
 8008896:	b298      	uxth	r0, r3
 8008898:	b9b0      	cbnz	r0, 80088c8 <__lo0bits+0x54>
 800889a:	0c1b      	lsrs	r3, r3, #16
 800889c:	2010      	movs	r0, #16
 800889e:	f013 0fff 	tst.w	r3, #255	; 0xff
 80088a2:	bf04      	itt	eq
 80088a4:	0a1b      	lsreq	r3, r3, #8
 80088a6:	3008      	addeq	r0, #8
 80088a8:	071a      	lsls	r2, r3, #28
 80088aa:	bf04      	itt	eq
 80088ac:	091b      	lsreq	r3, r3, #4
 80088ae:	3004      	addeq	r0, #4
 80088b0:	079a      	lsls	r2, r3, #30
 80088b2:	bf04      	itt	eq
 80088b4:	089b      	lsreq	r3, r3, #2
 80088b6:	3002      	addeq	r0, #2
 80088b8:	07da      	lsls	r2, r3, #31
 80088ba:	d403      	bmi.n	80088c4 <__lo0bits+0x50>
 80088bc:	085b      	lsrs	r3, r3, #1
 80088be:	f100 0001 	add.w	r0, r0, #1
 80088c2:	d005      	beq.n	80088d0 <__lo0bits+0x5c>
 80088c4:	600b      	str	r3, [r1, #0]
 80088c6:	4770      	bx	lr
 80088c8:	4610      	mov	r0, r2
 80088ca:	e7e8      	b.n	800889e <__lo0bits+0x2a>
 80088cc:	2000      	movs	r0, #0
 80088ce:	4770      	bx	lr
 80088d0:	2020      	movs	r0, #32
 80088d2:	4770      	bx	lr

080088d4 <__i2b>:
 80088d4:	b510      	push	{r4, lr}
 80088d6:	460c      	mov	r4, r1
 80088d8:	2101      	movs	r1, #1
 80088da:	f7ff feff 	bl	80086dc <_Balloc>
 80088de:	4602      	mov	r2, r0
 80088e0:	b928      	cbnz	r0, 80088ee <__i2b+0x1a>
 80088e2:	4b05      	ldr	r3, [pc, #20]	; (80088f8 <__i2b+0x24>)
 80088e4:	4805      	ldr	r0, [pc, #20]	; (80088fc <__i2b+0x28>)
 80088e6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80088ea:	f000 fcf1 	bl	80092d0 <__assert_func>
 80088ee:	2301      	movs	r3, #1
 80088f0:	6144      	str	r4, [r0, #20]
 80088f2:	6103      	str	r3, [r0, #16]
 80088f4:	bd10      	pop	{r4, pc}
 80088f6:	bf00      	nop
 80088f8:	0800a39f 	.word	0x0800a39f
 80088fc:	0800a410 	.word	0x0800a410

08008900 <__multiply>:
 8008900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008904:	4614      	mov	r4, r2
 8008906:	690a      	ldr	r2, [r1, #16]
 8008908:	6923      	ldr	r3, [r4, #16]
 800890a:	429a      	cmp	r2, r3
 800890c:	bfb8      	it	lt
 800890e:	460b      	movlt	r3, r1
 8008910:	460d      	mov	r5, r1
 8008912:	bfbc      	itt	lt
 8008914:	4625      	movlt	r5, r4
 8008916:	461c      	movlt	r4, r3
 8008918:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800891c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008920:	68ab      	ldr	r3, [r5, #8]
 8008922:	6869      	ldr	r1, [r5, #4]
 8008924:	eb0a 0709 	add.w	r7, sl, r9
 8008928:	42bb      	cmp	r3, r7
 800892a:	b085      	sub	sp, #20
 800892c:	bfb8      	it	lt
 800892e:	3101      	addlt	r1, #1
 8008930:	f7ff fed4 	bl	80086dc <_Balloc>
 8008934:	b930      	cbnz	r0, 8008944 <__multiply+0x44>
 8008936:	4602      	mov	r2, r0
 8008938:	4b42      	ldr	r3, [pc, #264]	; (8008a44 <__multiply+0x144>)
 800893a:	4843      	ldr	r0, [pc, #268]	; (8008a48 <__multiply+0x148>)
 800893c:	f240 115d 	movw	r1, #349	; 0x15d
 8008940:	f000 fcc6 	bl	80092d0 <__assert_func>
 8008944:	f100 0614 	add.w	r6, r0, #20
 8008948:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800894c:	4633      	mov	r3, r6
 800894e:	2200      	movs	r2, #0
 8008950:	4543      	cmp	r3, r8
 8008952:	d31e      	bcc.n	8008992 <__multiply+0x92>
 8008954:	f105 0c14 	add.w	ip, r5, #20
 8008958:	f104 0314 	add.w	r3, r4, #20
 800895c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008960:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008964:	9202      	str	r2, [sp, #8]
 8008966:	ebac 0205 	sub.w	r2, ip, r5
 800896a:	3a15      	subs	r2, #21
 800896c:	f022 0203 	bic.w	r2, r2, #3
 8008970:	3204      	adds	r2, #4
 8008972:	f105 0115 	add.w	r1, r5, #21
 8008976:	458c      	cmp	ip, r1
 8008978:	bf38      	it	cc
 800897a:	2204      	movcc	r2, #4
 800897c:	9201      	str	r2, [sp, #4]
 800897e:	9a02      	ldr	r2, [sp, #8]
 8008980:	9303      	str	r3, [sp, #12]
 8008982:	429a      	cmp	r2, r3
 8008984:	d808      	bhi.n	8008998 <__multiply+0x98>
 8008986:	2f00      	cmp	r7, #0
 8008988:	dc55      	bgt.n	8008a36 <__multiply+0x136>
 800898a:	6107      	str	r7, [r0, #16]
 800898c:	b005      	add	sp, #20
 800898e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008992:	f843 2b04 	str.w	r2, [r3], #4
 8008996:	e7db      	b.n	8008950 <__multiply+0x50>
 8008998:	f8b3 a000 	ldrh.w	sl, [r3]
 800899c:	f1ba 0f00 	cmp.w	sl, #0
 80089a0:	d020      	beq.n	80089e4 <__multiply+0xe4>
 80089a2:	f105 0e14 	add.w	lr, r5, #20
 80089a6:	46b1      	mov	r9, r6
 80089a8:	2200      	movs	r2, #0
 80089aa:	f85e 4b04 	ldr.w	r4, [lr], #4
 80089ae:	f8d9 b000 	ldr.w	fp, [r9]
 80089b2:	b2a1      	uxth	r1, r4
 80089b4:	fa1f fb8b 	uxth.w	fp, fp
 80089b8:	fb0a b101 	mla	r1, sl, r1, fp
 80089bc:	4411      	add	r1, r2
 80089be:	f8d9 2000 	ldr.w	r2, [r9]
 80089c2:	0c24      	lsrs	r4, r4, #16
 80089c4:	0c12      	lsrs	r2, r2, #16
 80089c6:	fb0a 2404 	mla	r4, sl, r4, r2
 80089ca:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80089ce:	b289      	uxth	r1, r1
 80089d0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80089d4:	45f4      	cmp	ip, lr
 80089d6:	f849 1b04 	str.w	r1, [r9], #4
 80089da:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80089de:	d8e4      	bhi.n	80089aa <__multiply+0xaa>
 80089e0:	9901      	ldr	r1, [sp, #4]
 80089e2:	5072      	str	r2, [r6, r1]
 80089e4:	9a03      	ldr	r2, [sp, #12]
 80089e6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80089ea:	3304      	adds	r3, #4
 80089ec:	f1b9 0f00 	cmp.w	r9, #0
 80089f0:	d01f      	beq.n	8008a32 <__multiply+0x132>
 80089f2:	6834      	ldr	r4, [r6, #0]
 80089f4:	f105 0114 	add.w	r1, r5, #20
 80089f8:	46b6      	mov	lr, r6
 80089fa:	f04f 0a00 	mov.w	sl, #0
 80089fe:	880a      	ldrh	r2, [r1, #0]
 8008a00:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008a04:	fb09 b202 	mla	r2, r9, r2, fp
 8008a08:	4492      	add	sl, r2
 8008a0a:	b2a4      	uxth	r4, r4
 8008a0c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008a10:	f84e 4b04 	str.w	r4, [lr], #4
 8008a14:	f851 4b04 	ldr.w	r4, [r1], #4
 8008a18:	f8be 2000 	ldrh.w	r2, [lr]
 8008a1c:	0c24      	lsrs	r4, r4, #16
 8008a1e:	fb09 2404 	mla	r4, r9, r4, r2
 8008a22:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008a26:	458c      	cmp	ip, r1
 8008a28:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008a2c:	d8e7      	bhi.n	80089fe <__multiply+0xfe>
 8008a2e:	9a01      	ldr	r2, [sp, #4]
 8008a30:	50b4      	str	r4, [r6, r2]
 8008a32:	3604      	adds	r6, #4
 8008a34:	e7a3      	b.n	800897e <__multiply+0x7e>
 8008a36:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d1a5      	bne.n	800898a <__multiply+0x8a>
 8008a3e:	3f01      	subs	r7, #1
 8008a40:	e7a1      	b.n	8008986 <__multiply+0x86>
 8008a42:	bf00      	nop
 8008a44:	0800a39f 	.word	0x0800a39f
 8008a48:	0800a410 	.word	0x0800a410

08008a4c <__pow5mult>:
 8008a4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a50:	4615      	mov	r5, r2
 8008a52:	f012 0203 	ands.w	r2, r2, #3
 8008a56:	4606      	mov	r6, r0
 8008a58:	460f      	mov	r7, r1
 8008a5a:	d007      	beq.n	8008a6c <__pow5mult+0x20>
 8008a5c:	4c25      	ldr	r4, [pc, #148]	; (8008af4 <__pow5mult+0xa8>)
 8008a5e:	3a01      	subs	r2, #1
 8008a60:	2300      	movs	r3, #0
 8008a62:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008a66:	f7ff fe9b 	bl	80087a0 <__multadd>
 8008a6a:	4607      	mov	r7, r0
 8008a6c:	10ad      	asrs	r5, r5, #2
 8008a6e:	d03d      	beq.n	8008aec <__pow5mult+0xa0>
 8008a70:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008a72:	b97c      	cbnz	r4, 8008a94 <__pow5mult+0x48>
 8008a74:	2010      	movs	r0, #16
 8008a76:	f7ff fe1b 	bl	80086b0 <malloc>
 8008a7a:	4602      	mov	r2, r0
 8008a7c:	6270      	str	r0, [r6, #36]	; 0x24
 8008a7e:	b928      	cbnz	r0, 8008a8c <__pow5mult+0x40>
 8008a80:	4b1d      	ldr	r3, [pc, #116]	; (8008af8 <__pow5mult+0xac>)
 8008a82:	481e      	ldr	r0, [pc, #120]	; (8008afc <__pow5mult+0xb0>)
 8008a84:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008a88:	f000 fc22 	bl	80092d0 <__assert_func>
 8008a8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008a90:	6004      	str	r4, [r0, #0]
 8008a92:	60c4      	str	r4, [r0, #12]
 8008a94:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008a98:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008a9c:	b94c      	cbnz	r4, 8008ab2 <__pow5mult+0x66>
 8008a9e:	f240 2171 	movw	r1, #625	; 0x271
 8008aa2:	4630      	mov	r0, r6
 8008aa4:	f7ff ff16 	bl	80088d4 <__i2b>
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	f8c8 0008 	str.w	r0, [r8, #8]
 8008aae:	4604      	mov	r4, r0
 8008ab0:	6003      	str	r3, [r0, #0]
 8008ab2:	f04f 0900 	mov.w	r9, #0
 8008ab6:	07eb      	lsls	r3, r5, #31
 8008ab8:	d50a      	bpl.n	8008ad0 <__pow5mult+0x84>
 8008aba:	4639      	mov	r1, r7
 8008abc:	4622      	mov	r2, r4
 8008abe:	4630      	mov	r0, r6
 8008ac0:	f7ff ff1e 	bl	8008900 <__multiply>
 8008ac4:	4639      	mov	r1, r7
 8008ac6:	4680      	mov	r8, r0
 8008ac8:	4630      	mov	r0, r6
 8008aca:	f7ff fe47 	bl	800875c <_Bfree>
 8008ace:	4647      	mov	r7, r8
 8008ad0:	106d      	asrs	r5, r5, #1
 8008ad2:	d00b      	beq.n	8008aec <__pow5mult+0xa0>
 8008ad4:	6820      	ldr	r0, [r4, #0]
 8008ad6:	b938      	cbnz	r0, 8008ae8 <__pow5mult+0x9c>
 8008ad8:	4622      	mov	r2, r4
 8008ada:	4621      	mov	r1, r4
 8008adc:	4630      	mov	r0, r6
 8008ade:	f7ff ff0f 	bl	8008900 <__multiply>
 8008ae2:	6020      	str	r0, [r4, #0]
 8008ae4:	f8c0 9000 	str.w	r9, [r0]
 8008ae8:	4604      	mov	r4, r0
 8008aea:	e7e4      	b.n	8008ab6 <__pow5mult+0x6a>
 8008aec:	4638      	mov	r0, r7
 8008aee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008af2:	bf00      	nop
 8008af4:	0800a560 	.word	0x0800a560
 8008af8:	0800a329 	.word	0x0800a329
 8008afc:	0800a410 	.word	0x0800a410

08008b00 <__lshift>:
 8008b00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b04:	460c      	mov	r4, r1
 8008b06:	6849      	ldr	r1, [r1, #4]
 8008b08:	6923      	ldr	r3, [r4, #16]
 8008b0a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008b0e:	68a3      	ldr	r3, [r4, #8]
 8008b10:	4607      	mov	r7, r0
 8008b12:	4691      	mov	r9, r2
 8008b14:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008b18:	f108 0601 	add.w	r6, r8, #1
 8008b1c:	42b3      	cmp	r3, r6
 8008b1e:	db0b      	blt.n	8008b38 <__lshift+0x38>
 8008b20:	4638      	mov	r0, r7
 8008b22:	f7ff fddb 	bl	80086dc <_Balloc>
 8008b26:	4605      	mov	r5, r0
 8008b28:	b948      	cbnz	r0, 8008b3e <__lshift+0x3e>
 8008b2a:	4602      	mov	r2, r0
 8008b2c:	4b28      	ldr	r3, [pc, #160]	; (8008bd0 <__lshift+0xd0>)
 8008b2e:	4829      	ldr	r0, [pc, #164]	; (8008bd4 <__lshift+0xd4>)
 8008b30:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008b34:	f000 fbcc 	bl	80092d0 <__assert_func>
 8008b38:	3101      	adds	r1, #1
 8008b3a:	005b      	lsls	r3, r3, #1
 8008b3c:	e7ee      	b.n	8008b1c <__lshift+0x1c>
 8008b3e:	2300      	movs	r3, #0
 8008b40:	f100 0114 	add.w	r1, r0, #20
 8008b44:	f100 0210 	add.w	r2, r0, #16
 8008b48:	4618      	mov	r0, r3
 8008b4a:	4553      	cmp	r3, sl
 8008b4c:	db33      	blt.n	8008bb6 <__lshift+0xb6>
 8008b4e:	6920      	ldr	r0, [r4, #16]
 8008b50:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008b54:	f104 0314 	add.w	r3, r4, #20
 8008b58:	f019 091f 	ands.w	r9, r9, #31
 8008b5c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008b60:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008b64:	d02b      	beq.n	8008bbe <__lshift+0xbe>
 8008b66:	f1c9 0e20 	rsb	lr, r9, #32
 8008b6a:	468a      	mov	sl, r1
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	6818      	ldr	r0, [r3, #0]
 8008b70:	fa00 f009 	lsl.w	r0, r0, r9
 8008b74:	4302      	orrs	r2, r0
 8008b76:	f84a 2b04 	str.w	r2, [sl], #4
 8008b7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b7e:	459c      	cmp	ip, r3
 8008b80:	fa22 f20e 	lsr.w	r2, r2, lr
 8008b84:	d8f3      	bhi.n	8008b6e <__lshift+0x6e>
 8008b86:	ebac 0304 	sub.w	r3, ip, r4
 8008b8a:	3b15      	subs	r3, #21
 8008b8c:	f023 0303 	bic.w	r3, r3, #3
 8008b90:	3304      	adds	r3, #4
 8008b92:	f104 0015 	add.w	r0, r4, #21
 8008b96:	4584      	cmp	ip, r0
 8008b98:	bf38      	it	cc
 8008b9a:	2304      	movcc	r3, #4
 8008b9c:	50ca      	str	r2, [r1, r3]
 8008b9e:	b10a      	cbz	r2, 8008ba4 <__lshift+0xa4>
 8008ba0:	f108 0602 	add.w	r6, r8, #2
 8008ba4:	3e01      	subs	r6, #1
 8008ba6:	4638      	mov	r0, r7
 8008ba8:	612e      	str	r6, [r5, #16]
 8008baa:	4621      	mov	r1, r4
 8008bac:	f7ff fdd6 	bl	800875c <_Bfree>
 8008bb0:	4628      	mov	r0, r5
 8008bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bb6:	f842 0f04 	str.w	r0, [r2, #4]!
 8008bba:	3301      	adds	r3, #1
 8008bbc:	e7c5      	b.n	8008b4a <__lshift+0x4a>
 8008bbe:	3904      	subs	r1, #4
 8008bc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bc4:	f841 2f04 	str.w	r2, [r1, #4]!
 8008bc8:	459c      	cmp	ip, r3
 8008bca:	d8f9      	bhi.n	8008bc0 <__lshift+0xc0>
 8008bcc:	e7ea      	b.n	8008ba4 <__lshift+0xa4>
 8008bce:	bf00      	nop
 8008bd0:	0800a39f 	.word	0x0800a39f
 8008bd4:	0800a410 	.word	0x0800a410

08008bd8 <__mcmp>:
 8008bd8:	b530      	push	{r4, r5, lr}
 8008bda:	6902      	ldr	r2, [r0, #16]
 8008bdc:	690c      	ldr	r4, [r1, #16]
 8008bde:	1b12      	subs	r2, r2, r4
 8008be0:	d10e      	bne.n	8008c00 <__mcmp+0x28>
 8008be2:	f100 0314 	add.w	r3, r0, #20
 8008be6:	3114      	adds	r1, #20
 8008be8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008bec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008bf0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008bf4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008bf8:	42a5      	cmp	r5, r4
 8008bfa:	d003      	beq.n	8008c04 <__mcmp+0x2c>
 8008bfc:	d305      	bcc.n	8008c0a <__mcmp+0x32>
 8008bfe:	2201      	movs	r2, #1
 8008c00:	4610      	mov	r0, r2
 8008c02:	bd30      	pop	{r4, r5, pc}
 8008c04:	4283      	cmp	r3, r0
 8008c06:	d3f3      	bcc.n	8008bf0 <__mcmp+0x18>
 8008c08:	e7fa      	b.n	8008c00 <__mcmp+0x28>
 8008c0a:	f04f 32ff 	mov.w	r2, #4294967295
 8008c0e:	e7f7      	b.n	8008c00 <__mcmp+0x28>

08008c10 <__mdiff>:
 8008c10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c14:	460c      	mov	r4, r1
 8008c16:	4606      	mov	r6, r0
 8008c18:	4611      	mov	r1, r2
 8008c1a:	4620      	mov	r0, r4
 8008c1c:	4617      	mov	r7, r2
 8008c1e:	f7ff ffdb 	bl	8008bd8 <__mcmp>
 8008c22:	1e05      	subs	r5, r0, #0
 8008c24:	d110      	bne.n	8008c48 <__mdiff+0x38>
 8008c26:	4629      	mov	r1, r5
 8008c28:	4630      	mov	r0, r6
 8008c2a:	f7ff fd57 	bl	80086dc <_Balloc>
 8008c2e:	b930      	cbnz	r0, 8008c3e <__mdiff+0x2e>
 8008c30:	4b39      	ldr	r3, [pc, #228]	; (8008d18 <__mdiff+0x108>)
 8008c32:	4602      	mov	r2, r0
 8008c34:	f240 2132 	movw	r1, #562	; 0x232
 8008c38:	4838      	ldr	r0, [pc, #224]	; (8008d1c <__mdiff+0x10c>)
 8008c3a:	f000 fb49 	bl	80092d0 <__assert_func>
 8008c3e:	2301      	movs	r3, #1
 8008c40:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008c44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c48:	bfa4      	itt	ge
 8008c4a:	463b      	movge	r3, r7
 8008c4c:	4627      	movge	r7, r4
 8008c4e:	4630      	mov	r0, r6
 8008c50:	6879      	ldr	r1, [r7, #4]
 8008c52:	bfa6      	itte	ge
 8008c54:	461c      	movge	r4, r3
 8008c56:	2500      	movge	r5, #0
 8008c58:	2501      	movlt	r5, #1
 8008c5a:	f7ff fd3f 	bl	80086dc <_Balloc>
 8008c5e:	b920      	cbnz	r0, 8008c6a <__mdiff+0x5a>
 8008c60:	4b2d      	ldr	r3, [pc, #180]	; (8008d18 <__mdiff+0x108>)
 8008c62:	4602      	mov	r2, r0
 8008c64:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008c68:	e7e6      	b.n	8008c38 <__mdiff+0x28>
 8008c6a:	693e      	ldr	r6, [r7, #16]
 8008c6c:	60c5      	str	r5, [r0, #12]
 8008c6e:	6925      	ldr	r5, [r4, #16]
 8008c70:	f107 0114 	add.w	r1, r7, #20
 8008c74:	f104 0914 	add.w	r9, r4, #20
 8008c78:	f100 0e14 	add.w	lr, r0, #20
 8008c7c:	f107 0210 	add.w	r2, r7, #16
 8008c80:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008c84:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008c88:	46f2      	mov	sl, lr
 8008c8a:	2700      	movs	r7, #0
 8008c8c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008c90:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008c94:	fa1f f883 	uxth.w	r8, r3
 8008c98:	fa17 f78b 	uxtah	r7, r7, fp
 8008c9c:	0c1b      	lsrs	r3, r3, #16
 8008c9e:	eba7 0808 	sub.w	r8, r7, r8
 8008ca2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008ca6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008caa:	fa1f f888 	uxth.w	r8, r8
 8008cae:	141f      	asrs	r7, r3, #16
 8008cb0:	454d      	cmp	r5, r9
 8008cb2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008cb6:	f84a 3b04 	str.w	r3, [sl], #4
 8008cba:	d8e7      	bhi.n	8008c8c <__mdiff+0x7c>
 8008cbc:	1b2b      	subs	r3, r5, r4
 8008cbe:	3b15      	subs	r3, #21
 8008cc0:	f023 0303 	bic.w	r3, r3, #3
 8008cc4:	3304      	adds	r3, #4
 8008cc6:	3415      	adds	r4, #21
 8008cc8:	42a5      	cmp	r5, r4
 8008cca:	bf38      	it	cc
 8008ccc:	2304      	movcc	r3, #4
 8008cce:	4419      	add	r1, r3
 8008cd0:	4473      	add	r3, lr
 8008cd2:	469e      	mov	lr, r3
 8008cd4:	460d      	mov	r5, r1
 8008cd6:	4565      	cmp	r5, ip
 8008cd8:	d30e      	bcc.n	8008cf8 <__mdiff+0xe8>
 8008cda:	f10c 0203 	add.w	r2, ip, #3
 8008cde:	1a52      	subs	r2, r2, r1
 8008ce0:	f022 0203 	bic.w	r2, r2, #3
 8008ce4:	3903      	subs	r1, #3
 8008ce6:	458c      	cmp	ip, r1
 8008ce8:	bf38      	it	cc
 8008cea:	2200      	movcc	r2, #0
 8008cec:	441a      	add	r2, r3
 8008cee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008cf2:	b17b      	cbz	r3, 8008d14 <__mdiff+0x104>
 8008cf4:	6106      	str	r6, [r0, #16]
 8008cf6:	e7a5      	b.n	8008c44 <__mdiff+0x34>
 8008cf8:	f855 8b04 	ldr.w	r8, [r5], #4
 8008cfc:	fa17 f488 	uxtah	r4, r7, r8
 8008d00:	1422      	asrs	r2, r4, #16
 8008d02:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8008d06:	b2a4      	uxth	r4, r4
 8008d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008d0c:	f84e 4b04 	str.w	r4, [lr], #4
 8008d10:	1417      	asrs	r7, r2, #16
 8008d12:	e7e0      	b.n	8008cd6 <__mdiff+0xc6>
 8008d14:	3e01      	subs	r6, #1
 8008d16:	e7ea      	b.n	8008cee <__mdiff+0xde>
 8008d18:	0800a39f 	.word	0x0800a39f
 8008d1c:	0800a410 	.word	0x0800a410

08008d20 <__d2b>:
 8008d20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008d24:	4689      	mov	r9, r1
 8008d26:	2101      	movs	r1, #1
 8008d28:	ec57 6b10 	vmov	r6, r7, d0
 8008d2c:	4690      	mov	r8, r2
 8008d2e:	f7ff fcd5 	bl	80086dc <_Balloc>
 8008d32:	4604      	mov	r4, r0
 8008d34:	b930      	cbnz	r0, 8008d44 <__d2b+0x24>
 8008d36:	4602      	mov	r2, r0
 8008d38:	4b25      	ldr	r3, [pc, #148]	; (8008dd0 <__d2b+0xb0>)
 8008d3a:	4826      	ldr	r0, [pc, #152]	; (8008dd4 <__d2b+0xb4>)
 8008d3c:	f240 310a 	movw	r1, #778	; 0x30a
 8008d40:	f000 fac6 	bl	80092d0 <__assert_func>
 8008d44:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008d48:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008d4c:	bb35      	cbnz	r5, 8008d9c <__d2b+0x7c>
 8008d4e:	2e00      	cmp	r6, #0
 8008d50:	9301      	str	r3, [sp, #4]
 8008d52:	d028      	beq.n	8008da6 <__d2b+0x86>
 8008d54:	4668      	mov	r0, sp
 8008d56:	9600      	str	r6, [sp, #0]
 8008d58:	f7ff fd8c 	bl	8008874 <__lo0bits>
 8008d5c:	9900      	ldr	r1, [sp, #0]
 8008d5e:	b300      	cbz	r0, 8008da2 <__d2b+0x82>
 8008d60:	9a01      	ldr	r2, [sp, #4]
 8008d62:	f1c0 0320 	rsb	r3, r0, #32
 8008d66:	fa02 f303 	lsl.w	r3, r2, r3
 8008d6a:	430b      	orrs	r3, r1
 8008d6c:	40c2      	lsrs	r2, r0
 8008d6e:	6163      	str	r3, [r4, #20]
 8008d70:	9201      	str	r2, [sp, #4]
 8008d72:	9b01      	ldr	r3, [sp, #4]
 8008d74:	61a3      	str	r3, [r4, #24]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	bf14      	ite	ne
 8008d7a:	2202      	movne	r2, #2
 8008d7c:	2201      	moveq	r2, #1
 8008d7e:	6122      	str	r2, [r4, #16]
 8008d80:	b1d5      	cbz	r5, 8008db8 <__d2b+0x98>
 8008d82:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008d86:	4405      	add	r5, r0
 8008d88:	f8c9 5000 	str.w	r5, [r9]
 8008d8c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008d90:	f8c8 0000 	str.w	r0, [r8]
 8008d94:	4620      	mov	r0, r4
 8008d96:	b003      	add	sp, #12
 8008d98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008da0:	e7d5      	b.n	8008d4e <__d2b+0x2e>
 8008da2:	6161      	str	r1, [r4, #20]
 8008da4:	e7e5      	b.n	8008d72 <__d2b+0x52>
 8008da6:	a801      	add	r0, sp, #4
 8008da8:	f7ff fd64 	bl	8008874 <__lo0bits>
 8008dac:	9b01      	ldr	r3, [sp, #4]
 8008dae:	6163      	str	r3, [r4, #20]
 8008db0:	2201      	movs	r2, #1
 8008db2:	6122      	str	r2, [r4, #16]
 8008db4:	3020      	adds	r0, #32
 8008db6:	e7e3      	b.n	8008d80 <__d2b+0x60>
 8008db8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008dbc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008dc0:	f8c9 0000 	str.w	r0, [r9]
 8008dc4:	6918      	ldr	r0, [r3, #16]
 8008dc6:	f7ff fd35 	bl	8008834 <__hi0bits>
 8008dca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008dce:	e7df      	b.n	8008d90 <__d2b+0x70>
 8008dd0:	0800a39f 	.word	0x0800a39f
 8008dd4:	0800a410 	.word	0x0800a410

08008dd8 <_calloc_r>:
 8008dd8:	b513      	push	{r0, r1, r4, lr}
 8008dda:	434a      	muls	r2, r1
 8008ddc:	4611      	mov	r1, r2
 8008dde:	9201      	str	r2, [sp, #4]
 8008de0:	f000 f85a 	bl	8008e98 <_malloc_r>
 8008de4:	4604      	mov	r4, r0
 8008de6:	b118      	cbz	r0, 8008df0 <_calloc_r+0x18>
 8008de8:	9a01      	ldr	r2, [sp, #4]
 8008dea:	2100      	movs	r1, #0
 8008dec:	f7fd fdfa 	bl	80069e4 <memset>
 8008df0:	4620      	mov	r0, r4
 8008df2:	b002      	add	sp, #8
 8008df4:	bd10      	pop	{r4, pc}
	...

08008df8 <_free_r>:
 8008df8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008dfa:	2900      	cmp	r1, #0
 8008dfc:	d048      	beq.n	8008e90 <_free_r+0x98>
 8008dfe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e02:	9001      	str	r0, [sp, #4]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	f1a1 0404 	sub.w	r4, r1, #4
 8008e0a:	bfb8      	it	lt
 8008e0c:	18e4      	addlt	r4, r4, r3
 8008e0e:	f000 faff 	bl	8009410 <__malloc_lock>
 8008e12:	4a20      	ldr	r2, [pc, #128]	; (8008e94 <_free_r+0x9c>)
 8008e14:	9801      	ldr	r0, [sp, #4]
 8008e16:	6813      	ldr	r3, [r2, #0]
 8008e18:	4615      	mov	r5, r2
 8008e1a:	b933      	cbnz	r3, 8008e2a <_free_r+0x32>
 8008e1c:	6063      	str	r3, [r4, #4]
 8008e1e:	6014      	str	r4, [r2, #0]
 8008e20:	b003      	add	sp, #12
 8008e22:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e26:	f000 baf9 	b.w	800941c <__malloc_unlock>
 8008e2a:	42a3      	cmp	r3, r4
 8008e2c:	d90b      	bls.n	8008e46 <_free_r+0x4e>
 8008e2e:	6821      	ldr	r1, [r4, #0]
 8008e30:	1862      	adds	r2, r4, r1
 8008e32:	4293      	cmp	r3, r2
 8008e34:	bf04      	itt	eq
 8008e36:	681a      	ldreq	r2, [r3, #0]
 8008e38:	685b      	ldreq	r3, [r3, #4]
 8008e3a:	6063      	str	r3, [r4, #4]
 8008e3c:	bf04      	itt	eq
 8008e3e:	1852      	addeq	r2, r2, r1
 8008e40:	6022      	streq	r2, [r4, #0]
 8008e42:	602c      	str	r4, [r5, #0]
 8008e44:	e7ec      	b.n	8008e20 <_free_r+0x28>
 8008e46:	461a      	mov	r2, r3
 8008e48:	685b      	ldr	r3, [r3, #4]
 8008e4a:	b10b      	cbz	r3, 8008e50 <_free_r+0x58>
 8008e4c:	42a3      	cmp	r3, r4
 8008e4e:	d9fa      	bls.n	8008e46 <_free_r+0x4e>
 8008e50:	6811      	ldr	r1, [r2, #0]
 8008e52:	1855      	adds	r5, r2, r1
 8008e54:	42a5      	cmp	r5, r4
 8008e56:	d10b      	bne.n	8008e70 <_free_r+0x78>
 8008e58:	6824      	ldr	r4, [r4, #0]
 8008e5a:	4421      	add	r1, r4
 8008e5c:	1854      	adds	r4, r2, r1
 8008e5e:	42a3      	cmp	r3, r4
 8008e60:	6011      	str	r1, [r2, #0]
 8008e62:	d1dd      	bne.n	8008e20 <_free_r+0x28>
 8008e64:	681c      	ldr	r4, [r3, #0]
 8008e66:	685b      	ldr	r3, [r3, #4]
 8008e68:	6053      	str	r3, [r2, #4]
 8008e6a:	4421      	add	r1, r4
 8008e6c:	6011      	str	r1, [r2, #0]
 8008e6e:	e7d7      	b.n	8008e20 <_free_r+0x28>
 8008e70:	d902      	bls.n	8008e78 <_free_r+0x80>
 8008e72:	230c      	movs	r3, #12
 8008e74:	6003      	str	r3, [r0, #0]
 8008e76:	e7d3      	b.n	8008e20 <_free_r+0x28>
 8008e78:	6825      	ldr	r5, [r4, #0]
 8008e7a:	1961      	adds	r1, r4, r5
 8008e7c:	428b      	cmp	r3, r1
 8008e7e:	bf04      	itt	eq
 8008e80:	6819      	ldreq	r1, [r3, #0]
 8008e82:	685b      	ldreq	r3, [r3, #4]
 8008e84:	6063      	str	r3, [r4, #4]
 8008e86:	bf04      	itt	eq
 8008e88:	1949      	addeq	r1, r1, r5
 8008e8a:	6021      	streq	r1, [r4, #0]
 8008e8c:	6054      	str	r4, [r2, #4]
 8008e8e:	e7c7      	b.n	8008e20 <_free_r+0x28>
 8008e90:	b003      	add	sp, #12
 8008e92:	bd30      	pop	{r4, r5, pc}
 8008e94:	20000b8c 	.word	0x20000b8c

08008e98 <_malloc_r>:
 8008e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e9a:	1ccd      	adds	r5, r1, #3
 8008e9c:	f025 0503 	bic.w	r5, r5, #3
 8008ea0:	3508      	adds	r5, #8
 8008ea2:	2d0c      	cmp	r5, #12
 8008ea4:	bf38      	it	cc
 8008ea6:	250c      	movcc	r5, #12
 8008ea8:	2d00      	cmp	r5, #0
 8008eaa:	4606      	mov	r6, r0
 8008eac:	db01      	blt.n	8008eb2 <_malloc_r+0x1a>
 8008eae:	42a9      	cmp	r1, r5
 8008eb0:	d903      	bls.n	8008eba <_malloc_r+0x22>
 8008eb2:	230c      	movs	r3, #12
 8008eb4:	6033      	str	r3, [r6, #0]
 8008eb6:	2000      	movs	r0, #0
 8008eb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008eba:	f000 faa9 	bl	8009410 <__malloc_lock>
 8008ebe:	4921      	ldr	r1, [pc, #132]	; (8008f44 <_malloc_r+0xac>)
 8008ec0:	680a      	ldr	r2, [r1, #0]
 8008ec2:	4614      	mov	r4, r2
 8008ec4:	b99c      	cbnz	r4, 8008eee <_malloc_r+0x56>
 8008ec6:	4f20      	ldr	r7, [pc, #128]	; (8008f48 <_malloc_r+0xb0>)
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	b923      	cbnz	r3, 8008ed6 <_malloc_r+0x3e>
 8008ecc:	4621      	mov	r1, r4
 8008ece:	4630      	mov	r0, r6
 8008ed0:	f000 f998 	bl	8009204 <_sbrk_r>
 8008ed4:	6038      	str	r0, [r7, #0]
 8008ed6:	4629      	mov	r1, r5
 8008ed8:	4630      	mov	r0, r6
 8008eda:	f000 f993 	bl	8009204 <_sbrk_r>
 8008ede:	1c43      	adds	r3, r0, #1
 8008ee0:	d123      	bne.n	8008f2a <_malloc_r+0x92>
 8008ee2:	230c      	movs	r3, #12
 8008ee4:	6033      	str	r3, [r6, #0]
 8008ee6:	4630      	mov	r0, r6
 8008ee8:	f000 fa98 	bl	800941c <__malloc_unlock>
 8008eec:	e7e3      	b.n	8008eb6 <_malloc_r+0x1e>
 8008eee:	6823      	ldr	r3, [r4, #0]
 8008ef0:	1b5b      	subs	r3, r3, r5
 8008ef2:	d417      	bmi.n	8008f24 <_malloc_r+0x8c>
 8008ef4:	2b0b      	cmp	r3, #11
 8008ef6:	d903      	bls.n	8008f00 <_malloc_r+0x68>
 8008ef8:	6023      	str	r3, [r4, #0]
 8008efa:	441c      	add	r4, r3
 8008efc:	6025      	str	r5, [r4, #0]
 8008efe:	e004      	b.n	8008f0a <_malloc_r+0x72>
 8008f00:	6863      	ldr	r3, [r4, #4]
 8008f02:	42a2      	cmp	r2, r4
 8008f04:	bf0c      	ite	eq
 8008f06:	600b      	streq	r3, [r1, #0]
 8008f08:	6053      	strne	r3, [r2, #4]
 8008f0a:	4630      	mov	r0, r6
 8008f0c:	f000 fa86 	bl	800941c <__malloc_unlock>
 8008f10:	f104 000b 	add.w	r0, r4, #11
 8008f14:	1d23      	adds	r3, r4, #4
 8008f16:	f020 0007 	bic.w	r0, r0, #7
 8008f1a:	1ac2      	subs	r2, r0, r3
 8008f1c:	d0cc      	beq.n	8008eb8 <_malloc_r+0x20>
 8008f1e:	1a1b      	subs	r3, r3, r0
 8008f20:	50a3      	str	r3, [r4, r2]
 8008f22:	e7c9      	b.n	8008eb8 <_malloc_r+0x20>
 8008f24:	4622      	mov	r2, r4
 8008f26:	6864      	ldr	r4, [r4, #4]
 8008f28:	e7cc      	b.n	8008ec4 <_malloc_r+0x2c>
 8008f2a:	1cc4      	adds	r4, r0, #3
 8008f2c:	f024 0403 	bic.w	r4, r4, #3
 8008f30:	42a0      	cmp	r0, r4
 8008f32:	d0e3      	beq.n	8008efc <_malloc_r+0x64>
 8008f34:	1a21      	subs	r1, r4, r0
 8008f36:	4630      	mov	r0, r6
 8008f38:	f000 f964 	bl	8009204 <_sbrk_r>
 8008f3c:	3001      	adds	r0, #1
 8008f3e:	d1dd      	bne.n	8008efc <_malloc_r+0x64>
 8008f40:	e7cf      	b.n	8008ee2 <_malloc_r+0x4a>
 8008f42:	bf00      	nop
 8008f44:	20000b8c 	.word	0x20000b8c
 8008f48:	20000b90 	.word	0x20000b90

08008f4c <__ssputs_r>:
 8008f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f50:	688e      	ldr	r6, [r1, #8]
 8008f52:	429e      	cmp	r6, r3
 8008f54:	4682      	mov	sl, r0
 8008f56:	460c      	mov	r4, r1
 8008f58:	4690      	mov	r8, r2
 8008f5a:	461f      	mov	r7, r3
 8008f5c:	d838      	bhi.n	8008fd0 <__ssputs_r+0x84>
 8008f5e:	898a      	ldrh	r2, [r1, #12]
 8008f60:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008f64:	d032      	beq.n	8008fcc <__ssputs_r+0x80>
 8008f66:	6825      	ldr	r5, [r4, #0]
 8008f68:	6909      	ldr	r1, [r1, #16]
 8008f6a:	eba5 0901 	sub.w	r9, r5, r1
 8008f6e:	6965      	ldr	r5, [r4, #20]
 8008f70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008f74:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008f78:	3301      	adds	r3, #1
 8008f7a:	444b      	add	r3, r9
 8008f7c:	106d      	asrs	r5, r5, #1
 8008f7e:	429d      	cmp	r5, r3
 8008f80:	bf38      	it	cc
 8008f82:	461d      	movcc	r5, r3
 8008f84:	0553      	lsls	r3, r2, #21
 8008f86:	d531      	bpl.n	8008fec <__ssputs_r+0xa0>
 8008f88:	4629      	mov	r1, r5
 8008f8a:	f7ff ff85 	bl	8008e98 <_malloc_r>
 8008f8e:	4606      	mov	r6, r0
 8008f90:	b950      	cbnz	r0, 8008fa8 <__ssputs_r+0x5c>
 8008f92:	230c      	movs	r3, #12
 8008f94:	f8ca 3000 	str.w	r3, [sl]
 8008f98:	89a3      	ldrh	r3, [r4, #12]
 8008f9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f9e:	81a3      	strh	r3, [r4, #12]
 8008fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8008fa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fa8:	6921      	ldr	r1, [r4, #16]
 8008faa:	464a      	mov	r2, r9
 8008fac:	f7ff fb88 	bl	80086c0 <memcpy>
 8008fb0:	89a3      	ldrh	r3, [r4, #12]
 8008fb2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008fb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fba:	81a3      	strh	r3, [r4, #12]
 8008fbc:	6126      	str	r6, [r4, #16]
 8008fbe:	6165      	str	r5, [r4, #20]
 8008fc0:	444e      	add	r6, r9
 8008fc2:	eba5 0509 	sub.w	r5, r5, r9
 8008fc6:	6026      	str	r6, [r4, #0]
 8008fc8:	60a5      	str	r5, [r4, #8]
 8008fca:	463e      	mov	r6, r7
 8008fcc:	42be      	cmp	r6, r7
 8008fce:	d900      	bls.n	8008fd2 <__ssputs_r+0x86>
 8008fd0:	463e      	mov	r6, r7
 8008fd2:	4632      	mov	r2, r6
 8008fd4:	6820      	ldr	r0, [r4, #0]
 8008fd6:	4641      	mov	r1, r8
 8008fd8:	f000 fa00 	bl	80093dc <memmove>
 8008fdc:	68a3      	ldr	r3, [r4, #8]
 8008fde:	6822      	ldr	r2, [r4, #0]
 8008fe0:	1b9b      	subs	r3, r3, r6
 8008fe2:	4432      	add	r2, r6
 8008fe4:	60a3      	str	r3, [r4, #8]
 8008fe6:	6022      	str	r2, [r4, #0]
 8008fe8:	2000      	movs	r0, #0
 8008fea:	e7db      	b.n	8008fa4 <__ssputs_r+0x58>
 8008fec:	462a      	mov	r2, r5
 8008fee:	f000 fa1b 	bl	8009428 <_realloc_r>
 8008ff2:	4606      	mov	r6, r0
 8008ff4:	2800      	cmp	r0, #0
 8008ff6:	d1e1      	bne.n	8008fbc <__ssputs_r+0x70>
 8008ff8:	6921      	ldr	r1, [r4, #16]
 8008ffa:	4650      	mov	r0, sl
 8008ffc:	f7ff fefc 	bl	8008df8 <_free_r>
 8009000:	e7c7      	b.n	8008f92 <__ssputs_r+0x46>
	...

08009004 <_svfiprintf_r>:
 8009004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009008:	4698      	mov	r8, r3
 800900a:	898b      	ldrh	r3, [r1, #12]
 800900c:	061b      	lsls	r3, r3, #24
 800900e:	b09d      	sub	sp, #116	; 0x74
 8009010:	4607      	mov	r7, r0
 8009012:	460d      	mov	r5, r1
 8009014:	4614      	mov	r4, r2
 8009016:	d50e      	bpl.n	8009036 <_svfiprintf_r+0x32>
 8009018:	690b      	ldr	r3, [r1, #16]
 800901a:	b963      	cbnz	r3, 8009036 <_svfiprintf_r+0x32>
 800901c:	2140      	movs	r1, #64	; 0x40
 800901e:	f7ff ff3b 	bl	8008e98 <_malloc_r>
 8009022:	6028      	str	r0, [r5, #0]
 8009024:	6128      	str	r0, [r5, #16]
 8009026:	b920      	cbnz	r0, 8009032 <_svfiprintf_r+0x2e>
 8009028:	230c      	movs	r3, #12
 800902a:	603b      	str	r3, [r7, #0]
 800902c:	f04f 30ff 	mov.w	r0, #4294967295
 8009030:	e0d1      	b.n	80091d6 <_svfiprintf_r+0x1d2>
 8009032:	2340      	movs	r3, #64	; 0x40
 8009034:	616b      	str	r3, [r5, #20]
 8009036:	2300      	movs	r3, #0
 8009038:	9309      	str	r3, [sp, #36]	; 0x24
 800903a:	2320      	movs	r3, #32
 800903c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009040:	f8cd 800c 	str.w	r8, [sp, #12]
 8009044:	2330      	movs	r3, #48	; 0x30
 8009046:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80091f0 <_svfiprintf_r+0x1ec>
 800904a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800904e:	f04f 0901 	mov.w	r9, #1
 8009052:	4623      	mov	r3, r4
 8009054:	469a      	mov	sl, r3
 8009056:	f813 2b01 	ldrb.w	r2, [r3], #1
 800905a:	b10a      	cbz	r2, 8009060 <_svfiprintf_r+0x5c>
 800905c:	2a25      	cmp	r2, #37	; 0x25
 800905e:	d1f9      	bne.n	8009054 <_svfiprintf_r+0x50>
 8009060:	ebba 0b04 	subs.w	fp, sl, r4
 8009064:	d00b      	beq.n	800907e <_svfiprintf_r+0x7a>
 8009066:	465b      	mov	r3, fp
 8009068:	4622      	mov	r2, r4
 800906a:	4629      	mov	r1, r5
 800906c:	4638      	mov	r0, r7
 800906e:	f7ff ff6d 	bl	8008f4c <__ssputs_r>
 8009072:	3001      	adds	r0, #1
 8009074:	f000 80aa 	beq.w	80091cc <_svfiprintf_r+0x1c8>
 8009078:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800907a:	445a      	add	r2, fp
 800907c:	9209      	str	r2, [sp, #36]	; 0x24
 800907e:	f89a 3000 	ldrb.w	r3, [sl]
 8009082:	2b00      	cmp	r3, #0
 8009084:	f000 80a2 	beq.w	80091cc <_svfiprintf_r+0x1c8>
 8009088:	2300      	movs	r3, #0
 800908a:	f04f 32ff 	mov.w	r2, #4294967295
 800908e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009092:	f10a 0a01 	add.w	sl, sl, #1
 8009096:	9304      	str	r3, [sp, #16]
 8009098:	9307      	str	r3, [sp, #28]
 800909a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800909e:	931a      	str	r3, [sp, #104]	; 0x68
 80090a0:	4654      	mov	r4, sl
 80090a2:	2205      	movs	r2, #5
 80090a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090a8:	4851      	ldr	r0, [pc, #324]	; (80091f0 <_svfiprintf_r+0x1ec>)
 80090aa:	f7f7 f8a1 	bl	80001f0 <memchr>
 80090ae:	9a04      	ldr	r2, [sp, #16]
 80090b0:	b9d8      	cbnz	r0, 80090ea <_svfiprintf_r+0xe6>
 80090b2:	06d0      	lsls	r0, r2, #27
 80090b4:	bf44      	itt	mi
 80090b6:	2320      	movmi	r3, #32
 80090b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090bc:	0711      	lsls	r1, r2, #28
 80090be:	bf44      	itt	mi
 80090c0:	232b      	movmi	r3, #43	; 0x2b
 80090c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090c6:	f89a 3000 	ldrb.w	r3, [sl]
 80090ca:	2b2a      	cmp	r3, #42	; 0x2a
 80090cc:	d015      	beq.n	80090fa <_svfiprintf_r+0xf6>
 80090ce:	9a07      	ldr	r2, [sp, #28]
 80090d0:	4654      	mov	r4, sl
 80090d2:	2000      	movs	r0, #0
 80090d4:	f04f 0c0a 	mov.w	ip, #10
 80090d8:	4621      	mov	r1, r4
 80090da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80090de:	3b30      	subs	r3, #48	; 0x30
 80090e0:	2b09      	cmp	r3, #9
 80090e2:	d94e      	bls.n	8009182 <_svfiprintf_r+0x17e>
 80090e4:	b1b0      	cbz	r0, 8009114 <_svfiprintf_r+0x110>
 80090e6:	9207      	str	r2, [sp, #28]
 80090e8:	e014      	b.n	8009114 <_svfiprintf_r+0x110>
 80090ea:	eba0 0308 	sub.w	r3, r0, r8
 80090ee:	fa09 f303 	lsl.w	r3, r9, r3
 80090f2:	4313      	orrs	r3, r2
 80090f4:	9304      	str	r3, [sp, #16]
 80090f6:	46a2      	mov	sl, r4
 80090f8:	e7d2      	b.n	80090a0 <_svfiprintf_r+0x9c>
 80090fa:	9b03      	ldr	r3, [sp, #12]
 80090fc:	1d19      	adds	r1, r3, #4
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	9103      	str	r1, [sp, #12]
 8009102:	2b00      	cmp	r3, #0
 8009104:	bfbb      	ittet	lt
 8009106:	425b      	neglt	r3, r3
 8009108:	f042 0202 	orrlt.w	r2, r2, #2
 800910c:	9307      	strge	r3, [sp, #28]
 800910e:	9307      	strlt	r3, [sp, #28]
 8009110:	bfb8      	it	lt
 8009112:	9204      	strlt	r2, [sp, #16]
 8009114:	7823      	ldrb	r3, [r4, #0]
 8009116:	2b2e      	cmp	r3, #46	; 0x2e
 8009118:	d10c      	bne.n	8009134 <_svfiprintf_r+0x130>
 800911a:	7863      	ldrb	r3, [r4, #1]
 800911c:	2b2a      	cmp	r3, #42	; 0x2a
 800911e:	d135      	bne.n	800918c <_svfiprintf_r+0x188>
 8009120:	9b03      	ldr	r3, [sp, #12]
 8009122:	1d1a      	adds	r2, r3, #4
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	9203      	str	r2, [sp, #12]
 8009128:	2b00      	cmp	r3, #0
 800912a:	bfb8      	it	lt
 800912c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009130:	3402      	adds	r4, #2
 8009132:	9305      	str	r3, [sp, #20]
 8009134:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009200 <_svfiprintf_r+0x1fc>
 8009138:	7821      	ldrb	r1, [r4, #0]
 800913a:	2203      	movs	r2, #3
 800913c:	4650      	mov	r0, sl
 800913e:	f7f7 f857 	bl	80001f0 <memchr>
 8009142:	b140      	cbz	r0, 8009156 <_svfiprintf_r+0x152>
 8009144:	2340      	movs	r3, #64	; 0x40
 8009146:	eba0 000a 	sub.w	r0, r0, sl
 800914a:	fa03 f000 	lsl.w	r0, r3, r0
 800914e:	9b04      	ldr	r3, [sp, #16]
 8009150:	4303      	orrs	r3, r0
 8009152:	3401      	adds	r4, #1
 8009154:	9304      	str	r3, [sp, #16]
 8009156:	f814 1b01 	ldrb.w	r1, [r4], #1
 800915a:	4826      	ldr	r0, [pc, #152]	; (80091f4 <_svfiprintf_r+0x1f0>)
 800915c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009160:	2206      	movs	r2, #6
 8009162:	f7f7 f845 	bl	80001f0 <memchr>
 8009166:	2800      	cmp	r0, #0
 8009168:	d038      	beq.n	80091dc <_svfiprintf_r+0x1d8>
 800916a:	4b23      	ldr	r3, [pc, #140]	; (80091f8 <_svfiprintf_r+0x1f4>)
 800916c:	bb1b      	cbnz	r3, 80091b6 <_svfiprintf_r+0x1b2>
 800916e:	9b03      	ldr	r3, [sp, #12]
 8009170:	3307      	adds	r3, #7
 8009172:	f023 0307 	bic.w	r3, r3, #7
 8009176:	3308      	adds	r3, #8
 8009178:	9303      	str	r3, [sp, #12]
 800917a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800917c:	4433      	add	r3, r6
 800917e:	9309      	str	r3, [sp, #36]	; 0x24
 8009180:	e767      	b.n	8009052 <_svfiprintf_r+0x4e>
 8009182:	fb0c 3202 	mla	r2, ip, r2, r3
 8009186:	460c      	mov	r4, r1
 8009188:	2001      	movs	r0, #1
 800918a:	e7a5      	b.n	80090d8 <_svfiprintf_r+0xd4>
 800918c:	2300      	movs	r3, #0
 800918e:	3401      	adds	r4, #1
 8009190:	9305      	str	r3, [sp, #20]
 8009192:	4619      	mov	r1, r3
 8009194:	f04f 0c0a 	mov.w	ip, #10
 8009198:	4620      	mov	r0, r4
 800919a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800919e:	3a30      	subs	r2, #48	; 0x30
 80091a0:	2a09      	cmp	r2, #9
 80091a2:	d903      	bls.n	80091ac <_svfiprintf_r+0x1a8>
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d0c5      	beq.n	8009134 <_svfiprintf_r+0x130>
 80091a8:	9105      	str	r1, [sp, #20]
 80091aa:	e7c3      	b.n	8009134 <_svfiprintf_r+0x130>
 80091ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80091b0:	4604      	mov	r4, r0
 80091b2:	2301      	movs	r3, #1
 80091b4:	e7f0      	b.n	8009198 <_svfiprintf_r+0x194>
 80091b6:	ab03      	add	r3, sp, #12
 80091b8:	9300      	str	r3, [sp, #0]
 80091ba:	462a      	mov	r2, r5
 80091bc:	4b0f      	ldr	r3, [pc, #60]	; (80091fc <_svfiprintf_r+0x1f8>)
 80091be:	a904      	add	r1, sp, #16
 80091c0:	4638      	mov	r0, r7
 80091c2:	f7fd fcb7 	bl	8006b34 <_printf_float>
 80091c6:	1c42      	adds	r2, r0, #1
 80091c8:	4606      	mov	r6, r0
 80091ca:	d1d6      	bne.n	800917a <_svfiprintf_r+0x176>
 80091cc:	89ab      	ldrh	r3, [r5, #12]
 80091ce:	065b      	lsls	r3, r3, #25
 80091d0:	f53f af2c 	bmi.w	800902c <_svfiprintf_r+0x28>
 80091d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80091d6:	b01d      	add	sp, #116	; 0x74
 80091d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091dc:	ab03      	add	r3, sp, #12
 80091de:	9300      	str	r3, [sp, #0]
 80091e0:	462a      	mov	r2, r5
 80091e2:	4b06      	ldr	r3, [pc, #24]	; (80091fc <_svfiprintf_r+0x1f8>)
 80091e4:	a904      	add	r1, sp, #16
 80091e6:	4638      	mov	r0, r7
 80091e8:	f7fd ff48 	bl	800707c <_printf_i>
 80091ec:	e7eb      	b.n	80091c6 <_svfiprintf_r+0x1c2>
 80091ee:	bf00      	nop
 80091f0:	0800a56c 	.word	0x0800a56c
 80091f4:	0800a576 	.word	0x0800a576
 80091f8:	08006b35 	.word	0x08006b35
 80091fc:	08008f4d 	.word	0x08008f4d
 8009200:	0800a572 	.word	0x0800a572

08009204 <_sbrk_r>:
 8009204:	b538      	push	{r3, r4, r5, lr}
 8009206:	4d06      	ldr	r5, [pc, #24]	; (8009220 <_sbrk_r+0x1c>)
 8009208:	2300      	movs	r3, #0
 800920a:	4604      	mov	r4, r0
 800920c:	4608      	mov	r0, r1
 800920e:	602b      	str	r3, [r5, #0]
 8009210:	f7f8 ffea 	bl	80021e8 <_sbrk>
 8009214:	1c43      	adds	r3, r0, #1
 8009216:	d102      	bne.n	800921e <_sbrk_r+0x1a>
 8009218:	682b      	ldr	r3, [r5, #0]
 800921a:	b103      	cbz	r3, 800921e <_sbrk_r+0x1a>
 800921c:	6023      	str	r3, [r4, #0]
 800921e:	bd38      	pop	{r3, r4, r5, pc}
 8009220:	20017630 	.word	0x20017630

08009224 <__sread>:
 8009224:	b510      	push	{r4, lr}
 8009226:	460c      	mov	r4, r1
 8009228:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800922c:	f000 fa7c 	bl	8009728 <_read_r>
 8009230:	2800      	cmp	r0, #0
 8009232:	bfab      	itete	ge
 8009234:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009236:	89a3      	ldrhlt	r3, [r4, #12]
 8009238:	181b      	addge	r3, r3, r0
 800923a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800923e:	bfac      	ite	ge
 8009240:	6563      	strge	r3, [r4, #84]	; 0x54
 8009242:	81a3      	strhlt	r3, [r4, #12]
 8009244:	bd10      	pop	{r4, pc}

08009246 <__swrite>:
 8009246:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800924a:	461f      	mov	r7, r3
 800924c:	898b      	ldrh	r3, [r1, #12]
 800924e:	05db      	lsls	r3, r3, #23
 8009250:	4605      	mov	r5, r0
 8009252:	460c      	mov	r4, r1
 8009254:	4616      	mov	r6, r2
 8009256:	d505      	bpl.n	8009264 <__swrite+0x1e>
 8009258:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800925c:	2302      	movs	r3, #2
 800925e:	2200      	movs	r2, #0
 8009260:	f000 f898 	bl	8009394 <_lseek_r>
 8009264:	89a3      	ldrh	r3, [r4, #12]
 8009266:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800926a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800926e:	81a3      	strh	r3, [r4, #12]
 8009270:	4632      	mov	r2, r6
 8009272:	463b      	mov	r3, r7
 8009274:	4628      	mov	r0, r5
 8009276:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800927a:	f000 b817 	b.w	80092ac <_write_r>

0800927e <__sseek>:
 800927e:	b510      	push	{r4, lr}
 8009280:	460c      	mov	r4, r1
 8009282:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009286:	f000 f885 	bl	8009394 <_lseek_r>
 800928a:	1c43      	adds	r3, r0, #1
 800928c:	89a3      	ldrh	r3, [r4, #12]
 800928e:	bf15      	itete	ne
 8009290:	6560      	strne	r0, [r4, #84]	; 0x54
 8009292:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009296:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800929a:	81a3      	strheq	r3, [r4, #12]
 800929c:	bf18      	it	ne
 800929e:	81a3      	strhne	r3, [r4, #12]
 80092a0:	bd10      	pop	{r4, pc}

080092a2 <__sclose>:
 80092a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092a6:	f000 b831 	b.w	800930c <_close_r>
	...

080092ac <_write_r>:
 80092ac:	b538      	push	{r3, r4, r5, lr}
 80092ae:	4d07      	ldr	r5, [pc, #28]	; (80092cc <_write_r+0x20>)
 80092b0:	4604      	mov	r4, r0
 80092b2:	4608      	mov	r0, r1
 80092b4:	4611      	mov	r1, r2
 80092b6:	2200      	movs	r2, #0
 80092b8:	602a      	str	r2, [r5, #0]
 80092ba:	461a      	mov	r2, r3
 80092bc:	f7f8 f9ca 	bl	8001654 <_write>
 80092c0:	1c43      	adds	r3, r0, #1
 80092c2:	d102      	bne.n	80092ca <_write_r+0x1e>
 80092c4:	682b      	ldr	r3, [r5, #0]
 80092c6:	b103      	cbz	r3, 80092ca <_write_r+0x1e>
 80092c8:	6023      	str	r3, [r4, #0]
 80092ca:	bd38      	pop	{r3, r4, r5, pc}
 80092cc:	20017630 	.word	0x20017630

080092d0 <__assert_func>:
 80092d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80092d2:	4614      	mov	r4, r2
 80092d4:	461a      	mov	r2, r3
 80092d6:	4b09      	ldr	r3, [pc, #36]	; (80092fc <__assert_func+0x2c>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	4605      	mov	r5, r0
 80092dc:	68d8      	ldr	r0, [r3, #12]
 80092de:	b14c      	cbz	r4, 80092f4 <__assert_func+0x24>
 80092e0:	4b07      	ldr	r3, [pc, #28]	; (8009300 <__assert_func+0x30>)
 80092e2:	9100      	str	r1, [sp, #0]
 80092e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80092e8:	4906      	ldr	r1, [pc, #24]	; (8009304 <__assert_func+0x34>)
 80092ea:	462b      	mov	r3, r5
 80092ec:	f000 f81e 	bl	800932c <fiprintf>
 80092f0:	f000 fa39 	bl	8009766 <abort>
 80092f4:	4b04      	ldr	r3, [pc, #16]	; (8009308 <__assert_func+0x38>)
 80092f6:	461c      	mov	r4, r3
 80092f8:	e7f3      	b.n	80092e2 <__assert_func+0x12>
 80092fa:	bf00      	nop
 80092fc:	20000038 	.word	0x20000038
 8009300:	0800a57d 	.word	0x0800a57d
 8009304:	0800a58a 	.word	0x0800a58a
 8009308:	0800a5b8 	.word	0x0800a5b8

0800930c <_close_r>:
 800930c:	b538      	push	{r3, r4, r5, lr}
 800930e:	4d06      	ldr	r5, [pc, #24]	; (8009328 <_close_r+0x1c>)
 8009310:	2300      	movs	r3, #0
 8009312:	4604      	mov	r4, r0
 8009314:	4608      	mov	r0, r1
 8009316:	602b      	str	r3, [r5, #0]
 8009318:	f7f8 ff31 	bl	800217e <_close>
 800931c:	1c43      	adds	r3, r0, #1
 800931e:	d102      	bne.n	8009326 <_close_r+0x1a>
 8009320:	682b      	ldr	r3, [r5, #0]
 8009322:	b103      	cbz	r3, 8009326 <_close_r+0x1a>
 8009324:	6023      	str	r3, [r4, #0]
 8009326:	bd38      	pop	{r3, r4, r5, pc}
 8009328:	20017630 	.word	0x20017630

0800932c <fiprintf>:
 800932c:	b40e      	push	{r1, r2, r3}
 800932e:	b503      	push	{r0, r1, lr}
 8009330:	4601      	mov	r1, r0
 8009332:	ab03      	add	r3, sp, #12
 8009334:	4805      	ldr	r0, [pc, #20]	; (800934c <fiprintf+0x20>)
 8009336:	f853 2b04 	ldr.w	r2, [r3], #4
 800933a:	6800      	ldr	r0, [r0, #0]
 800933c:	9301      	str	r3, [sp, #4]
 800933e:	f000 f8c3 	bl	80094c8 <_vfiprintf_r>
 8009342:	b002      	add	sp, #8
 8009344:	f85d eb04 	ldr.w	lr, [sp], #4
 8009348:	b003      	add	sp, #12
 800934a:	4770      	bx	lr
 800934c:	20000038 	.word	0x20000038

08009350 <_fstat_r>:
 8009350:	b538      	push	{r3, r4, r5, lr}
 8009352:	4d07      	ldr	r5, [pc, #28]	; (8009370 <_fstat_r+0x20>)
 8009354:	2300      	movs	r3, #0
 8009356:	4604      	mov	r4, r0
 8009358:	4608      	mov	r0, r1
 800935a:	4611      	mov	r1, r2
 800935c:	602b      	str	r3, [r5, #0]
 800935e:	f7f8 ff1a 	bl	8002196 <_fstat>
 8009362:	1c43      	adds	r3, r0, #1
 8009364:	d102      	bne.n	800936c <_fstat_r+0x1c>
 8009366:	682b      	ldr	r3, [r5, #0]
 8009368:	b103      	cbz	r3, 800936c <_fstat_r+0x1c>
 800936a:	6023      	str	r3, [r4, #0]
 800936c:	bd38      	pop	{r3, r4, r5, pc}
 800936e:	bf00      	nop
 8009370:	20017630 	.word	0x20017630

08009374 <_isatty_r>:
 8009374:	b538      	push	{r3, r4, r5, lr}
 8009376:	4d06      	ldr	r5, [pc, #24]	; (8009390 <_isatty_r+0x1c>)
 8009378:	2300      	movs	r3, #0
 800937a:	4604      	mov	r4, r0
 800937c:	4608      	mov	r0, r1
 800937e:	602b      	str	r3, [r5, #0]
 8009380:	f7f8 ff19 	bl	80021b6 <_isatty>
 8009384:	1c43      	adds	r3, r0, #1
 8009386:	d102      	bne.n	800938e <_isatty_r+0x1a>
 8009388:	682b      	ldr	r3, [r5, #0]
 800938a:	b103      	cbz	r3, 800938e <_isatty_r+0x1a>
 800938c:	6023      	str	r3, [r4, #0]
 800938e:	bd38      	pop	{r3, r4, r5, pc}
 8009390:	20017630 	.word	0x20017630

08009394 <_lseek_r>:
 8009394:	b538      	push	{r3, r4, r5, lr}
 8009396:	4d07      	ldr	r5, [pc, #28]	; (80093b4 <_lseek_r+0x20>)
 8009398:	4604      	mov	r4, r0
 800939a:	4608      	mov	r0, r1
 800939c:	4611      	mov	r1, r2
 800939e:	2200      	movs	r2, #0
 80093a0:	602a      	str	r2, [r5, #0]
 80093a2:	461a      	mov	r2, r3
 80093a4:	f7f8 ff12 	bl	80021cc <_lseek>
 80093a8:	1c43      	adds	r3, r0, #1
 80093aa:	d102      	bne.n	80093b2 <_lseek_r+0x1e>
 80093ac:	682b      	ldr	r3, [r5, #0]
 80093ae:	b103      	cbz	r3, 80093b2 <_lseek_r+0x1e>
 80093b0:	6023      	str	r3, [r4, #0]
 80093b2:	bd38      	pop	{r3, r4, r5, pc}
 80093b4:	20017630 	.word	0x20017630

080093b8 <__ascii_mbtowc>:
 80093b8:	b082      	sub	sp, #8
 80093ba:	b901      	cbnz	r1, 80093be <__ascii_mbtowc+0x6>
 80093bc:	a901      	add	r1, sp, #4
 80093be:	b142      	cbz	r2, 80093d2 <__ascii_mbtowc+0x1a>
 80093c0:	b14b      	cbz	r3, 80093d6 <__ascii_mbtowc+0x1e>
 80093c2:	7813      	ldrb	r3, [r2, #0]
 80093c4:	600b      	str	r3, [r1, #0]
 80093c6:	7812      	ldrb	r2, [r2, #0]
 80093c8:	1e10      	subs	r0, r2, #0
 80093ca:	bf18      	it	ne
 80093cc:	2001      	movne	r0, #1
 80093ce:	b002      	add	sp, #8
 80093d0:	4770      	bx	lr
 80093d2:	4610      	mov	r0, r2
 80093d4:	e7fb      	b.n	80093ce <__ascii_mbtowc+0x16>
 80093d6:	f06f 0001 	mvn.w	r0, #1
 80093da:	e7f8      	b.n	80093ce <__ascii_mbtowc+0x16>

080093dc <memmove>:
 80093dc:	4288      	cmp	r0, r1
 80093de:	b510      	push	{r4, lr}
 80093e0:	eb01 0402 	add.w	r4, r1, r2
 80093e4:	d902      	bls.n	80093ec <memmove+0x10>
 80093e6:	4284      	cmp	r4, r0
 80093e8:	4623      	mov	r3, r4
 80093ea:	d807      	bhi.n	80093fc <memmove+0x20>
 80093ec:	1e43      	subs	r3, r0, #1
 80093ee:	42a1      	cmp	r1, r4
 80093f0:	d008      	beq.n	8009404 <memmove+0x28>
 80093f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80093f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80093fa:	e7f8      	b.n	80093ee <memmove+0x12>
 80093fc:	4402      	add	r2, r0
 80093fe:	4601      	mov	r1, r0
 8009400:	428a      	cmp	r2, r1
 8009402:	d100      	bne.n	8009406 <memmove+0x2a>
 8009404:	bd10      	pop	{r4, pc}
 8009406:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800940a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800940e:	e7f7      	b.n	8009400 <memmove+0x24>

08009410 <__malloc_lock>:
 8009410:	4801      	ldr	r0, [pc, #4]	; (8009418 <__malloc_lock+0x8>)
 8009412:	f7ff b8e6 	b.w	80085e2 <__retarget_lock_acquire_recursive>
 8009416:	bf00      	nop
 8009418:	20017628 	.word	0x20017628

0800941c <__malloc_unlock>:
 800941c:	4801      	ldr	r0, [pc, #4]	; (8009424 <__malloc_unlock+0x8>)
 800941e:	f7ff b8e1 	b.w	80085e4 <__retarget_lock_release_recursive>
 8009422:	bf00      	nop
 8009424:	20017628 	.word	0x20017628

08009428 <_realloc_r>:
 8009428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800942a:	4607      	mov	r7, r0
 800942c:	4614      	mov	r4, r2
 800942e:	460e      	mov	r6, r1
 8009430:	b921      	cbnz	r1, 800943c <_realloc_r+0x14>
 8009432:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009436:	4611      	mov	r1, r2
 8009438:	f7ff bd2e 	b.w	8008e98 <_malloc_r>
 800943c:	b922      	cbnz	r2, 8009448 <_realloc_r+0x20>
 800943e:	f7ff fcdb 	bl	8008df8 <_free_r>
 8009442:	4625      	mov	r5, r4
 8009444:	4628      	mov	r0, r5
 8009446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009448:	f000 f994 	bl	8009774 <_malloc_usable_size_r>
 800944c:	42a0      	cmp	r0, r4
 800944e:	d20f      	bcs.n	8009470 <_realloc_r+0x48>
 8009450:	4621      	mov	r1, r4
 8009452:	4638      	mov	r0, r7
 8009454:	f7ff fd20 	bl	8008e98 <_malloc_r>
 8009458:	4605      	mov	r5, r0
 800945a:	2800      	cmp	r0, #0
 800945c:	d0f2      	beq.n	8009444 <_realloc_r+0x1c>
 800945e:	4631      	mov	r1, r6
 8009460:	4622      	mov	r2, r4
 8009462:	f7ff f92d 	bl	80086c0 <memcpy>
 8009466:	4631      	mov	r1, r6
 8009468:	4638      	mov	r0, r7
 800946a:	f7ff fcc5 	bl	8008df8 <_free_r>
 800946e:	e7e9      	b.n	8009444 <_realloc_r+0x1c>
 8009470:	4635      	mov	r5, r6
 8009472:	e7e7      	b.n	8009444 <_realloc_r+0x1c>

08009474 <__sfputc_r>:
 8009474:	6893      	ldr	r3, [r2, #8]
 8009476:	3b01      	subs	r3, #1
 8009478:	2b00      	cmp	r3, #0
 800947a:	b410      	push	{r4}
 800947c:	6093      	str	r3, [r2, #8]
 800947e:	da08      	bge.n	8009492 <__sfputc_r+0x1e>
 8009480:	6994      	ldr	r4, [r2, #24]
 8009482:	42a3      	cmp	r3, r4
 8009484:	db01      	blt.n	800948a <__sfputc_r+0x16>
 8009486:	290a      	cmp	r1, #10
 8009488:	d103      	bne.n	8009492 <__sfputc_r+0x1e>
 800948a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800948e:	f7fd bfb1 	b.w	80073f4 <__swbuf_r>
 8009492:	6813      	ldr	r3, [r2, #0]
 8009494:	1c58      	adds	r0, r3, #1
 8009496:	6010      	str	r0, [r2, #0]
 8009498:	7019      	strb	r1, [r3, #0]
 800949a:	4608      	mov	r0, r1
 800949c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80094a0:	4770      	bx	lr

080094a2 <__sfputs_r>:
 80094a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094a4:	4606      	mov	r6, r0
 80094a6:	460f      	mov	r7, r1
 80094a8:	4614      	mov	r4, r2
 80094aa:	18d5      	adds	r5, r2, r3
 80094ac:	42ac      	cmp	r4, r5
 80094ae:	d101      	bne.n	80094b4 <__sfputs_r+0x12>
 80094b0:	2000      	movs	r0, #0
 80094b2:	e007      	b.n	80094c4 <__sfputs_r+0x22>
 80094b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094b8:	463a      	mov	r2, r7
 80094ba:	4630      	mov	r0, r6
 80094bc:	f7ff ffda 	bl	8009474 <__sfputc_r>
 80094c0:	1c43      	adds	r3, r0, #1
 80094c2:	d1f3      	bne.n	80094ac <__sfputs_r+0xa>
 80094c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080094c8 <_vfiprintf_r>:
 80094c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094cc:	460d      	mov	r5, r1
 80094ce:	b09d      	sub	sp, #116	; 0x74
 80094d0:	4614      	mov	r4, r2
 80094d2:	4698      	mov	r8, r3
 80094d4:	4606      	mov	r6, r0
 80094d6:	b118      	cbz	r0, 80094e0 <_vfiprintf_r+0x18>
 80094d8:	6983      	ldr	r3, [r0, #24]
 80094da:	b90b      	cbnz	r3, 80094e0 <_vfiprintf_r+0x18>
 80094dc:	f7fe ffde 	bl	800849c <__sinit>
 80094e0:	4b89      	ldr	r3, [pc, #548]	; (8009708 <_vfiprintf_r+0x240>)
 80094e2:	429d      	cmp	r5, r3
 80094e4:	d11b      	bne.n	800951e <_vfiprintf_r+0x56>
 80094e6:	6875      	ldr	r5, [r6, #4]
 80094e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80094ea:	07d9      	lsls	r1, r3, #31
 80094ec:	d405      	bmi.n	80094fa <_vfiprintf_r+0x32>
 80094ee:	89ab      	ldrh	r3, [r5, #12]
 80094f0:	059a      	lsls	r2, r3, #22
 80094f2:	d402      	bmi.n	80094fa <_vfiprintf_r+0x32>
 80094f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80094f6:	f7ff f874 	bl	80085e2 <__retarget_lock_acquire_recursive>
 80094fa:	89ab      	ldrh	r3, [r5, #12]
 80094fc:	071b      	lsls	r3, r3, #28
 80094fe:	d501      	bpl.n	8009504 <_vfiprintf_r+0x3c>
 8009500:	692b      	ldr	r3, [r5, #16]
 8009502:	b9eb      	cbnz	r3, 8009540 <_vfiprintf_r+0x78>
 8009504:	4629      	mov	r1, r5
 8009506:	4630      	mov	r0, r6
 8009508:	f7fd ffc6 	bl	8007498 <__swsetup_r>
 800950c:	b1c0      	cbz	r0, 8009540 <_vfiprintf_r+0x78>
 800950e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009510:	07dc      	lsls	r4, r3, #31
 8009512:	d50e      	bpl.n	8009532 <_vfiprintf_r+0x6a>
 8009514:	f04f 30ff 	mov.w	r0, #4294967295
 8009518:	b01d      	add	sp, #116	; 0x74
 800951a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800951e:	4b7b      	ldr	r3, [pc, #492]	; (800970c <_vfiprintf_r+0x244>)
 8009520:	429d      	cmp	r5, r3
 8009522:	d101      	bne.n	8009528 <_vfiprintf_r+0x60>
 8009524:	68b5      	ldr	r5, [r6, #8]
 8009526:	e7df      	b.n	80094e8 <_vfiprintf_r+0x20>
 8009528:	4b79      	ldr	r3, [pc, #484]	; (8009710 <_vfiprintf_r+0x248>)
 800952a:	429d      	cmp	r5, r3
 800952c:	bf08      	it	eq
 800952e:	68f5      	ldreq	r5, [r6, #12]
 8009530:	e7da      	b.n	80094e8 <_vfiprintf_r+0x20>
 8009532:	89ab      	ldrh	r3, [r5, #12]
 8009534:	0598      	lsls	r0, r3, #22
 8009536:	d4ed      	bmi.n	8009514 <_vfiprintf_r+0x4c>
 8009538:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800953a:	f7ff f853 	bl	80085e4 <__retarget_lock_release_recursive>
 800953e:	e7e9      	b.n	8009514 <_vfiprintf_r+0x4c>
 8009540:	2300      	movs	r3, #0
 8009542:	9309      	str	r3, [sp, #36]	; 0x24
 8009544:	2320      	movs	r3, #32
 8009546:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800954a:	f8cd 800c 	str.w	r8, [sp, #12]
 800954e:	2330      	movs	r3, #48	; 0x30
 8009550:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009714 <_vfiprintf_r+0x24c>
 8009554:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009558:	f04f 0901 	mov.w	r9, #1
 800955c:	4623      	mov	r3, r4
 800955e:	469a      	mov	sl, r3
 8009560:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009564:	b10a      	cbz	r2, 800956a <_vfiprintf_r+0xa2>
 8009566:	2a25      	cmp	r2, #37	; 0x25
 8009568:	d1f9      	bne.n	800955e <_vfiprintf_r+0x96>
 800956a:	ebba 0b04 	subs.w	fp, sl, r4
 800956e:	d00b      	beq.n	8009588 <_vfiprintf_r+0xc0>
 8009570:	465b      	mov	r3, fp
 8009572:	4622      	mov	r2, r4
 8009574:	4629      	mov	r1, r5
 8009576:	4630      	mov	r0, r6
 8009578:	f7ff ff93 	bl	80094a2 <__sfputs_r>
 800957c:	3001      	adds	r0, #1
 800957e:	f000 80aa 	beq.w	80096d6 <_vfiprintf_r+0x20e>
 8009582:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009584:	445a      	add	r2, fp
 8009586:	9209      	str	r2, [sp, #36]	; 0x24
 8009588:	f89a 3000 	ldrb.w	r3, [sl]
 800958c:	2b00      	cmp	r3, #0
 800958e:	f000 80a2 	beq.w	80096d6 <_vfiprintf_r+0x20e>
 8009592:	2300      	movs	r3, #0
 8009594:	f04f 32ff 	mov.w	r2, #4294967295
 8009598:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800959c:	f10a 0a01 	add.w	sl, sl, #1
 80095a0:	9304      	str	r3, [sp, #16]
 80095a2:	9307      	str	r3, [sp, #28]
 80095a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80095a8:	931a      	str	r3, [sp, #104]	; 0x68
 80095aa:	4654      	mov	r4, sl
 80095ac:	2205      	movs	r2, #5
 80095ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095b2:	4858      	ldr	r0, [pc, #352]	; (8009714 <_vfiprintf_r+0x24c>)
 80095b4:	f7f6 fe1c 	bl	80001f0 <memchr>
 80095b8:	9a04      	ldr	r2, [sp, #16]
 80095ba:	b9d8      	cbnz	r0, 80095f4 <_vfiprintf_r+0x12c>
 80095bc:	06d1      	lsls	r1, r2, #27
 80095be:	bf44      	itt	mi
 80095c0:	2320      	movmi	r3, #32
 80095c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80095c6:	0713      	lsls	r3, r2, #28
 80095c8:	bf44      	itt	mi
 80095ca:	232b      	movmi	r3, #43	; 0x2b
 80095cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80095d0:	f89a 3000 	ldrb.w	r3, [sl]
 80095d4:	2b2a      	cmp	r3, #42	; 0x2a
 80095d6:	d015      	beq.n	8009604 <_vfiprintf_r+0x13c>
 80095d8:	9a07      	ldr	r2, [sp, #28]
 80095da:	4654      	mov	r4, sl
 80095dc:	2000      	movs	r0, #0
 80095de:	f04f 0c0a 	mov.w	ip, #10
 80095e2:	4621      	mov	r1, r4
 80095e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80095e8:	3b30      	subs	r3, #48	; 0x30
 80095ea:	2b09      	cmp	r3, #9
 80095ec:	d94e      	bls.n	800968c <_vfiprintf_r+0x1c4>
 80095ee:	b1b0      	cbz	r0, 800961e <_vfiprintf_r+0x156>
 80095f0:	9207      	str	r2, [sp, #28]
 80095f2:	e014      	b.n	800961e <_vfiprintf_r+0x156>
 80095f4:	eba0 0308 	sub.w	r3, r0, r8
 80095f8:	fa09 f303 	lsl.w	r3, r9, r3
 80095fc:	4313      	orrs	r3, r2
 80095fe:	9304      	str	r3, [sp, #16]
 8009600:	46a2      	mov	sl, r4
 8009602:	e7d2      	b.n	80095aa <_vfiprintf_r+0xe2>
 8009604:	9b03      	ldr	r3, [sp, #12]
 8009606:	1d19      	adds	r1, r3, #4
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	9103      	str	r1, [sp, #12]
 800960c:	2b00      	cmp	r3, #0
 800960e:	bfbb      	ittet	lt
 8009610:	425b      	neglt	r3, r3
 8009612:	f042 0202 	orrlt.w	r2, r2, #2
 8009616:	9307      	strge	r3, [sp, #28]
 8009618:	9307      	strlt	r3, [sp, #28]
 800961a:	bfb8      	it	lt
 800961c:	9204      	strlt	r2, [sp, #16]
 800961e:	7823      	ldrb	r3, [r4, #0]
 8009620:	2b2e      	cmp	r3, #46	; 0x2e
 8009622:	d10c      	bne.n	800963e <_vfiprintf_r+0x176>
 8009624:	7863      	ldrb	r3, [r4, #1]
 8009626:	2b2a      	cmp	r3, #42	; 0x2a
 8009628:	d135      	bne.n	8009696 <_vfiprintf_r+0x1ce>
 800962a:	9b03      	ldr	r3, [sp, #12]
 800962c:	1d1a      	adds	r2, r3, #4
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	9203      	str	r2, [sp, #12]
 8009632:	2b00      	cmp	r3, #0
 8009634:	bfb8      	it	lt
 8009636:	f04f 33ff 	movlt.w	r3, #4294967295
 800963a:	3402      	adds	r4, #2
 800963c:	9305      	str	r3, [sp, #20]
 800963e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009724 <_vfiprintf_r+0x25c>
 8009642:	7821      	ldrb	r1, [r4, #0]
 8009644:	2203      	movs	r2, #3
 8009646:	4650      	mov	r0, sl
 8009648:	f7f6 fdd2 	bl	80001f0 <memchr>
 800964c:	b140      	cbz	r0, 8009660 <_vfiprintf_r+0x198>
 800964e:	2340      	movs	r3, #64	; 0x40
 8009650:	eba0 000a 	sub.w	r0, r0, sl
 8009654:	fa03 f000 	lsl.w	r0, r3, r0
 8009658:	9b04      	ldr	r3, [sp, #16]
 800965a:	4303      	orrs	r3, r0
 800965c:	3401      	adds	r4, #1
 800965e:	9304      	str	r3, [sp, #16]
 8009660:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009664:	482c      	ldr	r0, [pc, #176]	; (8009718 <_vfiprintf_r+0x250>)
 8009666:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800966a:	2206      	movs	r2, #6
 800966c:	f7f6 fdc0 	bl	80001f0 <memchr>
 8009670:	2800      	cmp	r0, #0
 8009672:	d03f      	beq.n	80096f4 <_vfiprintf_r+0x22c>
 8009674:	4b29      	ldr	r3, [pc, #164]	; (800971c <_vfiprintf_r+0x254>)
 8009676:	bb1b      	cbnz	r3, 80096c0 <_vfiprintf_r+0x1f8>
 8009678:	9b03      	ldr	r3, [sp, #12]
 800967a:	3307      	adds	r3, #7
 800967c:	f023 0307 	bic.w	r3, r3, #7
 8009680:	3308      	adds	r3, #8
 8009682:	9303      	str	r3, [sp, #12]
 8009684:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009686:	443b      	add	r3, r7
 8009688:	9309      	str	r3, [sp, #36]	; 0x24
 800968a:	e767      	b.n	800955c <_vfiprintf_r+0x94>
 800968c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009690:	460c      	mov	r4, r1
 8009692:	2001      	movs	r0, #1
 8009694:	e7a5      	b.n	80095e2 <_vfiprintf_r+0x11a>
 8009696:	2300      	movs	r3, #0
 8009698:	3401      	adds	r4, #1
 800969a:	9305      	str	r3, [sp, #20]
 800969c:	4619      	mov	r1, r3
 800969e:	f04f 0c0a 	mov.w	ip, #10
 80096a2:	4620      	mov	r0, r4
 80096a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096a8:	3a30      	subs	r2, #48	; 0x30
 80096aa:	2a09      	cmp	r2, #9
 80096ac:	d903      	bls.n	80096b6 <_vfiprintf_r+0x1ee>
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d0c5      	beq.n	800963e <_vfiprintf_r+0x176>
 80096b2:	9105      	str	r1, [sp, #20]
 80096b4:	e7c3      	b.n	800963e <_vfiprintf_r+0x176>
 80096b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80096ba:	4604      	mov	r4, r0
 80096bc:	2301      	movs	r3, #1
 80096be:	e7f0      	b.n	80096a2 <_vfiprintf_r+0x1da>
 80096c0:	ab03      	add	r3, sp, #12
 80096c2:	9300      	str	r3, [sp, #0]
 80096c4:	462a      	mov	r2, r5
 80096c6:	4b16      	ldr	r3, [pc, #88]	; (8009720 <_vfiprintf_r+0x258>)
 80096c8:	a904      	add	r1, sp, #16
 80096ca:	4630      	mov	r0, r6
 80096cc:	f7fd fa32 	bl	8006b34 <_printf_float>
 80096d0:	4607      	mov	r7, r0
 80096d2:	1c78      	adds	r0, r7, #1
 80096d4:	d1d6      	bne.n	8009684 <_vfiprintf_r+0x1bc>
 80096d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80096d8:	07d9      	lsls	r1, r3, #31
 80096da:	d405      	bmi.n	80096e8 <_vfiprintf_r+0x220>
 80096dc:	89ab      	ldrh	r3, [r5, #12]
 80096de:	059a      	lsls	r2, r3, #22
 80096e0:	d402      	bmi.n	80096e8 <_vfiprintf_r+0x220>
 80096e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80096e4:	f7fe ff7e 	bl	80085e4 <__retarget_lock_release_recursive>
 80096e8:	89ab      	ldrh	r3, [r5, #12]
 80096ea:	065b      	lsls	r3, r3, #25
 80096ec:	f53f af12 	bmi.w	8009514 <_vfiprintf_r+0x4c>
 80096f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80096f2:	e711      	b.n	8009518 <_vfiprintf_r+0x50>
 80096f4:	ab03      	add	r3, sp, #12
 80096f6:	9300      	str	r3, [sp, #0]
 80096f8:	462a      	mov	r2, r5
 80096fa:	4b09      	ldr	r3, [pc, #36]	; (8009720 <_vfiprintf_r+0x258>)
 80096fc:	a904      	add	r1, sp, #16
 80096fe:	4630      	mov	r0, r6
 8009700:	f7fd fcbc 	bl	800707c <_printf_i>
 8009704:	e7e4      	b.n	80096d0 <_vfiprintf_r+0x208>
 8009706:	bf00      	nop
 8009708:	0800a3d0 	.word	0x0800a3d0
 800970c:	0800a3f0 	.word	0x0800a3f0
 8009710:	0800a3b0 	.word	0x0800a3b0
 8009714:	0800a56c 	.word	0x0800a56c
 8009718:	0800a576 	.word	0x0800a576
 800971c:	08006b35 	.word	0x08006b35
 8009720:	080094a3 	.word	0x080094a3
 8009724:	0800a572 	.word	0x0800a572

08009728 <_read_r>:
 8009728:	b538      	push	{r3, r4, r5, lr}
 800972a:	4d07      	ldr	r5, [pc, #28]	; (8009748 <_read_r+0x20>)
 800972c:	4604      	mov	r4, r0
 800972e:	4608      	mov	r0, r1
 8009730:	4611      	mov	r1, r2
 8009732:	2200      	movs	r2, #0
 8009734:	602a      	str	r2, [r5, #0]
 8009736:	461a      	mov	r2, r3
 8009738:	f7f8 fd04 	bl	8002144 <_read>
 800973c:	1c43      	adds	r3, r0, #1
 800973e:	d102      	bne.n	8009746 <_read_r+0x1e>
 8009740:	682b      	ldr	r3, [r5, #0]
 8009742:	b103      	cbz	r3, 8009746 <_read_r+0x1e>
 8009744:	6023      	str	r3, [r4, #0]
 8009746:	bd38      	pop	{r3, r4, r5, pc}
 8009748:	20017630 	.word	0x20017630

0800974c <__ascii_wctomb>:
 800974c:	b149      	cbz	r1, 8009762 <__ascii_wctomb+0x16>
 800974e:	2aff      	cmp	r2, #255	; 0xff
 8009750:	bf85      	ittet	hi
 8009752:	238a      	movhi	r3, #138	; 0x8a
 8009754:	6003      	strhi	r3, [r0, #0]
 8009756:	700a      	strbls	r2, [r1, #0]
 8009758:	f04f 30ff 	movhi.w	r0, #4294967295
 800975c:	bf98      	it	ls
 800975e:	2001      	movls	r0, #1
 8009760:	4770      	bx	lr
 8009762:	4608      	mov	r0, r1
 8009764:	4770      	bx	lr

08009766 <abort>:
 8009766:	b508      	push	{r3, lr}
 8009768:	2006      	movs	r0, #6
 800976a:	f000 f833 	bl	80097d4 <raise>
 800976e:	2001      	movs	r0, #1
 8009770:	f7f8 fcde 	bl	8002130 <_exit>

08009774 <_malloc_usable_size_r>:
 8009774:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009778:	1f18      	subs	r0, r3, #4
 800977a:	2b00      	cmp	r3, #0
 800977c:	bfbc      	itt	lt
 800977e:	580b      	ldrlt	r3, [r1, r0]
 8009780:	18c0      	addlt	r0, r0, r3
 8009782:	4770      	bx	lr

08009784 <_raise_r>:
 8009784:	291f      	cmp	r1, #31
 8009786:	b538      	push	{r3, r4, r5, lr}
 8009788:	4604      	mov	r4, r0
 800978a:	460d      	mov	r5, r1
 800978c:	d904      	bls.n	8009798 <_raise_r+0x14>
 800978e:	2316      	movs	r3, #22
 8009790:	6003      	str	r3, [r0, #0]
 8009792:	f04f 30ff 	mov.w	r0, #4294967295
 8009796:	bd38      	pop	{r3, r4, r5, pc}
 8009798:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800979a:	b112      	cbz	r2, 80097a2 <_raise_r+0x1e>
 800979c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80097a0:	b94b      	cbnz	r3, 80097b6 <_raise_r+0x32>
 80097a2:	4620      	mov	r0, r4
 80097a4:	f000 f830 	bl	8009808 <_getpid_r>
 80097a8:	462a      	mov	r2, r5
 80097aa:	4601      	mov	r1, r0
 80097ac:	4620      	mov	r0, r4
 80097ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80097b2:	f000 b817 	b.w	80097e4 <_kill_r>
 80097b6:	2b01      	cmp	r3, #1
 80097b8:	d00a      	beq.n	80097d0 <_raise_r+0x4c>
 80097ba:	1c59      	adds	r1, r3, #1
 80097bc:	d103      	bne.n	80097c6 <_raise_r+0x42>
 80097be:	2316      	movs	r3, #22
 80097c0:	6003      	str	r3, [r0, #0]
 80097c2:	2001      	movs	r0, #1
 80097c4:	e7e7      	b.n	8009796 <_raise_r+0x12>
 80097c6:	2400      	movs	r4, #0
 80097c8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80097cc:	4628      	mov	r0, r5
 80097ce:	4798      	blx	r3
 80097d0:	2000      	movs	r0, #0
 80097d2:	e7e0      	b.n	8009796 <_raise_r+0x12>

080097d4 <raise>:
 80097d4:	4b02      	ldr	r3, [pc, #8]	; (80097e0 <raise+0xc>)
 80097d6:	4601      	mov	r1, r0
 80097d8:	6818      	ldr	r0, [r3, #0]
 80097da:	f7ff bfd3 	b.w	8009784 <_raise_r>
 80097de:	bf00      	nop
 80097e0:	20000038 	.word	0x20000038

080097e4 <_kill_r>:
 80097e4:	b538      	push	{r3, r4, r5, lr}
 80097e6:	4d07      	ldr	r5, [pc, #28]	; (8009804 <_kill_r+0x20>)
 80097e8:	2300      	movs	r3, #0
 80097ea:	4604      	mov	r4, r0
 80097ec:	4608      	mov	r0, r1
 80097ee:	4611      	mov	r1, r2
 80097f0:	602b      	str	r3, [r5, #0]
 80097f2:	f7f8 fc8d 	bl	8002110 <_kill>
 80097f6:	1c43      	adds	r3, r0, #1
 80097f8:	d102      	bne.n	8009800 <_kill_r+0x1c>
 80097fa:	682b      	ldr	r3, [r5, #0]
 80097fc:	b103      	cbz	r3, 8009800 <_kill_r+0x1c>
 80097fe:	6023      	str	r3, [r4, #0]
 8009800:	bd38      	pop	{r3, r4, r5, pc}
 8009802:	bf00      	nop
 8009804:	20017630 	.word	0x20017630

08009808 <_getpid_r>:
 8009808:	f7f8 bc7a 	b.w	8002100 <_getpid>

0800980c <_init>:
 800980c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800980e:	bf00      	nop
 8009810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009812:	bc08      	pop	{r3}
 8009814:	469e      	mov	lr, r3
 8009816:	4770      	bx	lr

08009818 <_fini>:
 8009818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800981a:	bf00      	nop
 800981c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800981e:	bc08      	pop	{r3}
 8009820:	469e      	mov	lr, r3
 8009822:	4770      	bx	lr
